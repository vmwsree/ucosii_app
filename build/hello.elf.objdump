
hello.elf:     file format elf32-littleriscv
hello.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000007bc

Program Header:
0x70000003 off    0x00026bee vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000025 memsz 0x00000000 flags r--
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00023fc8 memsz 0x00023fc8 flags r-x
    LOAD off    0x00024fe8 vaddr 0x00023fe8 paddr 0x00025bd8 align 2**12
         filesz 0x00001bf4 memsz 0x00001bf4 flags rw-
    LOAD off    0x000007c8 vaddr 0x000277c8 paddr 0x000277c8 align 2**12
         filesz 0x00000000 memsz 0x00006a0c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000029c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00022ad0  000002bc  000002bc  000012bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001258  00022d90  00022d90  00023d90  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf0  00023fe8  00025bd8  00024fe8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .init_array.00000 00000004  00025bd8  000277c8  00026bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00006a0c  000277c8  000277c8  000277c8  2**3
                  ALLOC
  7 .ram          00000000  0002e1d4  0002e1d4  00026bdc  2**0
                  CONTENTS
  8 .comment      00000012  00000000  00000000  00026bdc  2**0
                  CONTENTS, READONLY
  9 .riscv.attributes 00000025  00000000  00000000  00026bee  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000008e0  00000000  00000000  00026c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   000175c7  00000000  00000000  000274f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000666b  00000000  00000000  0003eabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00018721  00000000  00000000  0004512a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00002340  00000000  00000000  0005d84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00002e2a  00000000  00000000  0005fb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 00001ba3  00000000  00000000  000629b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  00064560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001192  00000000  00000000  00064580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000072d3  00000000  00000000  00065712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000002bc l    d  .text	00000000 .text
00022d90 l    d  .rodata	00000000 .rodata
00023fe8 l    d  .rwdata	00000000 .rwdata
00025bd8 l    d  .init_array.00000	00000000 .init_array.00000
000277c8 l    d  .bss	00000000 .bss
0002e1d4 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.S.obj
0000080c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 machine_trap.S.obj
00000020 l       .exceptions	00000000 save_registers
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello.c
00000000 l    df *ABS*	00000000 alt_load.c
00000810 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
00025b9c l     O .rwdata	00000004 lockid
0002b9c0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00025ba0 l     O .rwdata	00000004 lockid
0002b9c4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000023c0 l     F .text	00000074 OS_InitMisc
00002434 l     F .text	00000078 OS_InitRdyList
0000259c l     F .text	00000144 OS_InitTCBList
000022a0 l     F .text	00000120 OS_InitEventList
000024ac l     F .text	00000078 OS_InitTaskIdle
00002524 l     F .text	00000078 OS_InitTaskStat
00002874 l     F .text	00000080 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg_r.c
00000000 l    df *ABS*	00000000 os_flag.c
00004814 l     F .text	0000010c OS_FlagTaskRdy
00004584 l     F .text	00000194 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
00006134 l     F .text	000001bc OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023fe8 l     O .rwdata	00001070 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000a218 l     F .text	000002dc altera_avalon_jtag_uart_irq
0000a4f4 l     F .text	0000011c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 os_cpu_a.S.obj
00000060 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000afb4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b018 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000b3b0 l     F .text	000000dc alt_open_fd
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 intel_niosv_m_irq.c
00000000 l    df *ABS*	00000000 mtimer.c
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
0000003a l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 lib_a-atexit.o
00000000 l    df *ABS*	00000000 lib_a-exit.o
00000000 l    df *ABS*	00000000 lib_a-impure.o
00025200 l     O .rwdata	00000428 impure_data
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 lib_a-printf.o
00000000 l    df *ABS*	00000000 lib_a-puts.o
00000000 l    df *ABS*	00000000 lib_a-reent.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-sysclose.o
00000000 l    df *ABS*	00000000 lib_a-sysopen.o
00000000 l    df *ABS*	00000000 lib_a-vfprintf.o
0000ed2c l     F .text	000000f8 __sbprintf
000233fc l     O .rodata	00000010 blanks.1
0002340c l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 lib_a-wsetup.o
00000000 l    df *ABS*	00000000 lib_a-__atexit.o
00000000 l    df *ABS*	00000000 lib_a-__call_atexit.o
0000f1a8 l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 lib_a-closer.o
00000000 l    df *ABS*	00000000 lib_a-fflush.o
00000000 l    df *ABS*	00000000 lib_a-findfp.o
0000f618 l     F .text	00000040 __fp_lock
0000f658 l     F .text	00000040 __fp_unlock
00000000 l    df *ABS*	00000000 lib_a-fini.o
00000000 l    df *ABS*	00000000 lib_a-freer.o
00000000 l    df *ABS*	00000000 lib_a-fvwrite.o
00000000 l    df *ABS*	00000000 lib_a-fwalk.o
00000000 l    df *ABS*	00000000 lib_a-ldtoa.o
000105d0 l     F .text	00000050 eshdn1
00010620 l     F .text	00000054 eshup1
00010674 l     F .text	000000d0 m16m
00010744 l     F .text	000000bc emovo.isra.0
00010800 l     F .text	00000164 enormlz
00010964 l     F .text	00000198 eshift.part.0
00010afc l     F .text	000000b4 emovi
00010bb0 l     F .text	0000014c ecmp
00010cfc l     F .text	000004b4 emdnorm
000111b0 l     F .text	00000164 eiremain
00011314 l     F .text	00000154 e113toe.isra.0
00011468 l     F .text	00000610 ediv
00011a78 l     F .text	00000520 emul
00023450 l     O .rodata	00000014 ezero
00023464 l     O .rodata	00000104 etens
00023568 l     O .rodata	00000104 emtens
0002366c l     O .rodata	00000014 eone
00023680 l     O .rodata	00000022 bmask
00000000 l    df *ABS*	00000000 lib_a-localeconv.o
00000000 l    df *ABS*	00000000 lib_a-lock.o
00000000 l    df *ABS*	00000000 lib_a-makebuf.o
00000000 l    df *ABS*	00000000 lib_a-mallocr.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memmove-stub.o
00000000 l    df *ABS*	00000000 lib_a-mprec.o
000236a8 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 lib_a-openr.o
00000000 l    df *ABS*	00000000 lib_a-reallocr.o
00000000 l    df *ABS*	00000000 lib_a-s_frexp.o
00000000 l    df *ABS*	00000000 lib_a-sbrkr.o
00000000 l    df *ABS*	00000000 lib_a-sprintf.o
00000000 l    df *ABS*	00000000 lib_a-stdio.o
00000000 l    df *ABS*	00000000 lib_a-strcpy.o
00000000 l    df *ABS*	00000000 lib_a-strncpy.o
00000000 l    df *ABS*	00000000 lib_a-svfprintf.o
000239d4 l     O .rodata	00000010 blanks.1
000239e4 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 lib_a-vfiprintf.o
00018724 l     F .text	00000124 __sprint_r.part.0
00019ca4 l     F .text	000000f8 __sbprintf
00023b60 l     O .rodata	00000010 blanks.1
00023b70 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 lib_a-writer.o
00000000 l    df *ABS*	00000000 lib_a-assert.o
00000000 l    df *ABS*	00000000 lib_a-callocr.o
00000000 l    df *ABS*	00000000 lib_a-errno.o
00000000 l    df *ABS*	00000000 lib_a-fclose.o
00000000 l    df *ABS*	00000000 lib_a-fiprintf.o
00000000 l    df *ABS*	00000000 lib_a-fputwc.o
00000000 l    df *ABS*	00000000 lib_a-fstatr.o
00000000 l    df *ABS*	00000000 lib_a-isattyr.o
00000000 l    df *ABS*	00000000 lib_a-locale.o
00000000 l    df *ABS*	00000000 lib_a-lseekr.o
00000000 l    df *ABS*	00000000 lib_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 lib_a-readr.o
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 lib_a-svfiprintf.o
00023cec l     O .rodata	00000010 blanks.1
00023cfc l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 lib_a-wbuf.o
00000000 l    df *ABS*	00000000 lib_a-wcrtomb.o
00000000 l    df *ABS*	00000000 lib_a-wctomb_r.o
00000000 l    df *ABS*	00000000 lib_a-abort.o
00000000 l    df *ABS*	00000000 lib_a-signal.o
00000000 l    df *ABS*	00000000 lib_a-signalr.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 eqtf2.c
00000000 l    df *ABS*	00000000 getf2.c
00000000 l    df *ABS*	00000000 letf2.c
00000000 l    df *ABS*	00000000 multf3.c
00000000 l    df *ABS*	00000000 subtf3.c
00000000 l    df *ABS*	00000000 fixtfsi.c
00000000 l    df *ABS*	00000000 floatsitf.c
00000000 l    df *ABS*	00000000 extenddftf2.c
00000000 l    df *ABS*	00000000 trunctfdf2.c
00000000 l    df *ABS*	00000000 muldi3.o
00000000 l    df *ABS*	00000000 div.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00021c94 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00021dfc l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00021f20 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00022030 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00022168 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
0002228c l     F .text	00000044 alt_get_errno
000222d0 l     F .text	000000e8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0002251c l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00025bd4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002271c l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 lib_a-sysfstat.o
00015140 g     F .text	000000a4 _mprec_log10
0001524c g     F .text	00000064 __any_on
0001a548 g     F .text	00000058 _isatty_r
00023780 g     O .rodata	00000028 __mprec_tinytens
000008e0 g     F .text	000000e0 alt_main
00015be0 g     F .text	000000b0 strcpy
0000c190 g     F .text	00000094 cleanup_glue
00021f00 g     F .text	00000020 _getpid
0000c058 g     F .text	0000012c _puts_r
0002b940 g     O .bss	00000080 alt_irq
0001a6a4 g     F .text	00000064 _lseek_r
00004fd4 g     F .text	00000100 OS_MemInit
00025bd8 g       *ABS*	00000000 __flash_rwdata_start
00009e24 g     F .text	0000005c OSTimeSet
0001e2f8 g     F .text	00000160 .hidden __getf2
00000f14 g     F .text	0000066c OSEventPendMulti
0002e1d4 g       *ABS*	00000000 __alt_heap_start
0000bbdc g     F .text	00000020 OSTaskCreateHook
0001c4e8 g     F .text	00000060 _kill_r
0001e228 g     F .text	000000d0 .hidden __eqtf2
0000c00c g     F .text	0000004c printf
0002639c g       *ABS*	00000000 __global_pointer$
00023f72 g     O .rodata	00000002 OSMboxEn
0002787c g     O .bss	00000001 __lock___atexit_recursive_mutex
000015d4 g     F .text	00000054 OSIntEnter
0001be4c g     F .text	00000078 _wcrtomb_r
0001c004 g     F .text	0000009c _signal_r
00015b60 g     F .text	00000078 __sseek
0000f724 g     F .text	000001b8 __sinit
0001bcac g     F .text	00000190 __swbuf_r
000096cc g     F .text	000000bc OSTaskRegGetID
00023f82 g     O .rodata	00000002 OSQEn
0001a5a0 g     F .text	0000007c _setlocale_r
0000f698 g     F .text	00000078 __sfmoreglue
00023f6e g     O .rodata	00000002 OSFlagNameEn
00000c38 g     F .text	000000e8 __malloc_unlock
0000bc38 g     F .text	0000001c OSTaskStatHook
00021378 g     F .text	00000198 .hidden __floatsitf
0002780a g     O .bss	00000001 OSLockNesting
00027838 g     O .bss	00000001 OSTaskRegNextAvailID
00023fc4 g     O .rodata	00000002 OSDataSize
00027813 g     O .bss	00000001 OSRunning
00027864 g     O .bss	00000001 __lock___arc4random_mutex
00013eb0 g     F .text	0000010c memmove
0000bc70 g     F .text	0000001c OSInitHookBegin
000002bc g     F .text	0000006c task5
00023fbc g     O .rodata	00000002 OSTmrSize
0000f710 g     F .text	00000014 _cleanup
00013fbc g     F .text	000000b4 _Balloc
00027818 g     O .bss	00000004 OSIdleCtr
00025bc8 g     O .rwdata	00000004 __atexit_recursive_mutex
0001a024 g     F .text	00000008 __errno
0000ae10 g       .text	00000000 OSStartTsk
0001336c g     F .text	00000004 __retarget_lock_close
00002c4c g     F .text	0000037c OS_TCBInit
00000000 g     F .entry	00000004 __reset
0000988c g     F .text	0000003c OS_TaskReturn
00013344 g     F .text	00000008 __localeconv_l
00023fc2 g     O .rodata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00023f5e g     O .rodata	00000002 OSEventSize
0001a4e8 g     F .text	00000060 _fstat_r
0002780c g     O .bss	00000001 OSPrioHighRdy
0000bbfc g     F .text	00000020 OSTaskDelHook
00027860 g     O .bss	00000004 errno
00015ad0 g     F .text	00000008 __seofread
0000adf0 g       .text	00000000 OSStartHighRdy
00008520 g     F .text	000001d8 OSTaskCreateExt
000040c0 g     F .text	00000060 OSFlagPendGetFlagsRdy
00023f9e g     O .rodata	00000002 OSTaskStatStkSize
0000320c g     F .text	00000334 OSFlagAccept
0000686c g     F .text	000000b0 OSQFlush
000062f0 g     F .text	00000128 OSQAccept
000277e0 g     O .bss	00000004 alt_argv
00008378 g     F .text	000001a8 OSTaskCreate
0002a940 g     O .bss	00001000 task8_stk
00007e80 g     F .text	000004f8 OSTaskChangePrio
000277ec g     O .bss	00000004 alt_heapsem
00002fc8 g     F .text	00000244 OSDebugInit
000086f8 g     F .text	00000384 OSTaskDel
000050d4 g     F .text	000001b0 OSMutexAccept
00025080 g     O .rwdata	00000180 alt_fd_list
0002be78 g     O .bss	00000140 OSFlagTbl
000020a8 g     F .text	000000ac OS_EventTaskRemove
00022864 g     F .text	00000120 alt_find_dev
0000bd4c g     F .text	000001a4 memcpy
00023f88 g     O .rodata	00000002 OSRdyTblSize
0000f60c g     F .text	0000000c _cleanup_r
00015d3c g     F .text	000029e8 _svfprintf_r
0000b994 g     F .text	000000ac alt_niosv_timer_sc_isr
0000b48c g     F .text	00000078 alt_io_redirect
0000c184 g     F .text	0000000c puts
00000d20 g     F .text	00000118 OSEventNameGet
00023f6c g     O .rodata	00000002 OSFlagMax
00022bd0 g       *ABS*	00000000 __fini_array_end
00021b60 g     F .text	00000048 .hidden __hidden___udivsi3
0000579c g     F .text	000005e0 OSMutexPend
00015098 g     F .text	000000a8 __ratio
00001628 g     F .text	0000010c OSIntExit
00023fa8 g     O .rodata	00000002 OSTCBSize
0002780b g     O .bss	00000001 OSPrioCur
0000a77c g     F .text	000002c8 altera_avalon_jtag_uart_read
0000bfcc g     F .text	00000040 _printf_r
0001e458 g     F .text	00000160 .hidden __letf2
00021b60 g     F .text	00000048 .hidden __udivsi3
0001c0a0 g     F .text	000000c4 _raise_r
00021e40 g     F .text	000000c0 _fstat
00023f8c g     O .rodata	00000002 OSStkWidth
00019e00 g     F .text	00000054 __assert_func
000236b8 g     O .rodata	000000c8 __mprec_tens
00023f80 g     O .rodata	00000002 OSPtrSize
000001b4 g     F .exceptions	00000108 handle_trap
00023f60 g     O .rodata	00000002 OSEventTblSize
0000ad1c g       .text	00000000 OSCtxSw
00027890 g     O .bss	00000004 __malloc_top_pad
0001c548 g     F .text	00000004 _getpid_r
00027828 g     O .bss	00000004 OSTCBList
00009788 g     F .text	00000104 OSTaskRegSet
00027840 g     O .bss	00000004 alt_fd_list_lock
0001334c g     F .text	0000000c _localeconv_r
00000000 g       *ABS*	00000000 __alt_mem_ram
000144ac g     F .text	000000b0 __i2b
0000ff64 g     F .text	00000514 __sfvwrite_r
0001c164 g     F .text	000000e0 __sigtramp_r
0002da2c g     O .bss	000005a0 OSMemTbl
0002782c g     O .bss	00000001 OSTickStepState
00015938 g     F .text	00000058 _sbrk_r
00023f78 g     O .rodata	00000002 OSMemNameEn
00023f84 g     O .rodata	00000002 OSQMax
0000547c g     F .text	00000320 OSMutexDel
0002bfb8 g     O .bss	00000800 OSTaskStatStk
00004c74 g     F .text	000000ec OSMemNameGet
00023f64 g     O .rodata	00000002 OSFlagEn
0001a77c g     F .text	00000064 _read_r
00023fac g     O .rodata	00000002 OSTimeTickHookEn
00004920 g     F .text	000000a0 OS_FlagUnlink
00006d20 g     F .text	00000168 OSQPost
00025bb4 g     O .rwdata	00000004 alt_max_fd
00002734 g     F .text	00000068 OS_MemCopy
0000279c g     F .text	000000d8 OS_Sched
0001a02c g     F .text	00000180 _fclose_r
00004b90 g     F .text	000000e4 OSMemGet
00008d78 g     F .text	00000164 OSTaskNameSet
0000f544 g     F .text	000000c8 fflush
0002788c g     O .bss	00000004 __malloc_max_sbrked_mem
000277f0 g     O .bss	00000004 OSCtxSwCtr
0000bc54 g     F .text	0000001c OSTimeTickHook
00002154 g     F .text	000000f0 OS_EventTaskRemoveMulti
000277c8 g     O .bss	00000004 g_mutex
00001f30 g     F .text	00000178 OS_EventTaskWaitMulti
00014e24 g     F .text	0000011c __b2d
00027870 g     O .bss	00000001 __lock___env_recursive_mutex
00023f86 g     O .rodata	00000002 OSQSize
0001cbd8 g     F .text	00000618 .hidden __umoddi3
0000780c g     F .text	00000224 OSSemPend
00021f64 g     F .text	000000cc _isatty
00023f5c g     O .rodata	00000002 OSEventNameEn
00027884 g     O .bss	00000001 __lock___sinit_recursive_mutex
00023fc8 g     O .rodata	00000004 _global_impure_ptr
00015314 g     F .text	00000570 _realloc_r
00023f70 g     O .rodata	00000002 OSLowestPrio
0002e1d4 g       *ABS*	00000000 __bss_end
0000b234 g     F .text	0000017c alt_iic_isr_register
0000bce4 g     F .text	00000020 OSTCBInitHook
00023fba g     O .rodata	00000002 OSTmrCfgTicksPerSec
0000b610 g     F .text	00000158 alt_tick
0001c54c g     F .text	0000068c .hidden __udivdi3
0000b768 g     F .text	00000024 intel_niosv_m_irq_init
0001a32c g     F .text	000000cc _fputwc_r
000237a8 g     O .rodata	00000028 __mprec_bigtens
00023f58 g     O .rodata	00000002 OSEventEn
00014218 g     F .text	0000013c __s2b
0001bf90 g     F .text	00000018 abort
000223b8 g     F .text	00000164 _open
00022668 g     F .text	000000b4 _sbrk
00014b04 g     F .text	00000058 __mcmp
0000ba40 g     F .text	0000003c alt_niosv_mtimecmp_interrupt_init
0000fa68 g     F .text	0000002c __fp_lock_all
00004718 g     F .text	000000fc OS_FlagInit
0000b578 g     F .text	00000098 alt_alarm_stop
00023f9a g     O .rodata	00000002 OSTaskNameEn
00023f94 g     O .rodata	00000002 OSTaskIdleStkSize
00007440 g     F .text	000000ac OSSemAccept
00004e14 g     F .text	000000dc OSMemPut
000049c0 g     F .text	000001d0 OSMemCreate
00027800 g     O .bss	00000004 OSIdleCtrMax
000000c0 g     F .exceptions	000000f4 alt_irq_handler
00025058 g     O .rwdata	00000028 alt_dev_null
00023faa g     O .rodata	00000002 OSTicksPerSec
0000fac0 g     F .text	0000005c __libc_fini_array
0000bcc4 g     F .text	00000020 OSTaskReturnHook
0000b848 g     F .text	00000084 alt_niosv_mtime_get
000277d0 g     O .bss	00000004 g_msgqueue2
0000c224 g     F .text	00000118 _reclaim_reent
0000ad1c g       .text	00000000 OSIntCtxSw
0000af98 g     F .text	0000001c alt_dcache_flush_all
00014354 g     F .text	00000078 __hi0bits
000095bc g     F .text	00000110 OSTaskRegGet
00027874 g     O .bss	00000001 __lock___malloc_recursive_mutex
00023fb0 g     O .rodata	00000002 OS_TLS_TblSize
00027820 g     O .bss	00000004 OSTCBFreeList
00025bd8 g       *ABS*	00000000 __ram_rwdata_end
00007a30 g     F .text	00000154 OSSemPendAbort
00025bac g     O .rwdata	00000008 alt_dev_list
00023fae g     O .rodata	00000002 OSVersionNbr
0000b824 g     F .text	00000024 alt_timestamp_freq
00023fe8 g       *ABS*	00000000 __ram_rodata_end
00022bc0 g     F .text	00000010 fstat
00021278 g     F .text	00000100 .hidden __fixtfsi
00023f54 g     O .rodata	00000004 OSEndiannessTest
00014824 g     F .text	00000150 __pow5mult
000278d0 g     O .bss	00000070 MessageStorage2
00021ba8 g     F .text	00000010 .hidden __umodsi3
00023f66 g     O .rodata	00000002 OSFlagGrpSize
0002e1d4 g       *ABS*	00000000 end
0000afe0 g     F .text	00000038 alt_dev_reg
00013390 g     F .text	00000004 __retarget_lock_release_recursive
00013384 g     F .text	00000008 __retarget_lock_try_acquire_recursive
0000a0c8 g     F .text	00000150 altera_avalon_jtag_uart_init
000029b8 g     F .text	000001cc OS_TaskStat
000493e0 g       *ABS*	00000000 __alt_stack_pointer
00021c0c g     F .text	00000088 .hidden __clzsi2
0000aa44 g     F .text	000002d8 altera_avalon_jtag_uart_write
0000fa38 g     F .text	0000000c __sfp_lock_acquire
00013dec g     F .text	000000c4 memchr
000026e0 g     F .text	00000054 OS_MemClr
0000ba7c g     F .text	00000160 OSTaskStkInit
00015990 g     F .text	0000006c _sprintf_r
0000fc5c g     F .text	00000308 _free_r
0001a61c g     F .text	0000000c __locale_mb_cur_max
00001c50 g     F .text	000001ac OS_EventTaskRdy
0000f054 g     F .text	00000154 __call_exitprocs
000277fc g     O .bss	00000001 OSCPUUsage
00000488 g     F .text	00000084 SetTaskName
00025bcc g     O .rwdata	00000004 __malloc_sbrk_base
000007bc g     F .text	00000054 _start
00027848 g     O .bss	00000004 _alt_tick_rate
0000691c g     F .text	000002b0 OSQPend
0001337c g     F .text	00000008 __retarget_lock_try_acquire
00009934 g     F .text	00000130 OSTimeDly
000221ac g     F .text	000000e0 _lseek
00014974 g     F .text	00000190 __lshift
0001e458 g     F .text	00000160 .hidden __lttf2
00027850 g     O .bss	00000008 _alt_nticks
0001c304 g     F .text	000000a4 signal
0001e228 g     F .text	000000d0 .hidden __netf2
0000b928 g     F .text	0000006c alt_niosv_mtimecmp_get
00009eb8 g     F .text	0000009c alt_sys_init
00027898 g     O .bss	00000038 MessageStorage
0001a95c g     F .text	000001f8 __ssprint_r
000152b0 g     F .text	00000064 _open_r
0000ef6c g     F .text	000000e8 __register_exitproc
00027814 g     O .bss	00000001 OSTaskCtr
000132cc g     F .text	00000078 _ldcheck
00009a64 g     F .text	00000178 OSTimeDlyHMSM
0001455c g     F .text	000002c8 __multiply
0000a610 g     F .text	0000006c altera_avalon_jtag_uart_close
00023fb6 g     O .rodata	00000002 OSTmrCfgNameEn
00021b34 g     F .text	00000024 .hidden __mulsi3
00023fe8 g       *ABS*	00000000 __ram_rwdata_start
00015c90 g     F .text	000000ac strncpy
00022d90 g       *ABS*	00000000 __ram_rodata_start
0002e1ac g     O .bss	00000028 __malloc_current_mallinfo
00023f5a g     O .rodata	00000002 OSEventMax
00014f40 g     F .text	00000158 __d2b
00007b84 g     F .text	00000118 OSSemPost
00029940 g     O .bss	00001000 task7_stk
000017c4 g     F .text	000000f0 OSSchedUnlock
00027858 g     O .bss	00000008 alt_niosv_timestamp_offset
000277d8 g     O .bss	00000004 alt_niosv_timer_interrupt_handler
00009f54 g     F .text	00000064 altera_avalon_jtag_uart_read_fd
00022ac0 g     F .text	00000100 alt_get_fd
00028940 g     O .bss	00001000 task6_stk
00027830 g     O .bss	00000004 OSMemFreeList
00001934 g     F .text	000000b4 OSStatInit
000044d8 g     F .text	000000ac OSFlagQuery
00021510 g     F .text	00000248 .hidden __extenddftf2
00023f90 g     O .rodata	00000002 OSTaskCreateExtEn
0000f1c0 g     F .text	00000058 _close_r
00001c34 g     F .text	0000001c OS_Dummy
0000a01c g     F .text	00000054 altera_avalon_jtag_uart_close_fd
0002e1d4 g       *ABS*	00000000 __alt_stack_base
0000a070 g     F .text	00000058 altera_avalon_jtag_uart_ioctl_fd
00013370 g     F .text	00000004 __retarget_lock_close_recursive
0000ee24 g     F .text	00000148 __swsetup_r
0002dfcc g     O .bss	000001e0 OSQTbl
0001d1f0 g     F .text	000008a8 .hidden __divdf3
0000f8dc g     F .text	0000015c __sfp
000151e4 g     F .text	00000068 __copybits
00025628 g     O .rwdata	00000408 __malloc_av_
0000fa5c g     F .text	0000000c __sinit_lock_release
0001da98 g     F .text	00000790 .hidden __muldf3
00027824 g     O .bss	00000004 OSTCBHighRdy
00015a74 g     F .text	0000005c __sread
00027834 g     O .bss	00000004 OSQFreeList
00000328 g     F .text	00000090 task6
00022984 g     F .text	0000013c alt_find_file
0000b05c g     F .text	000000a8 alt_dev_llist_insert
00000b04 g     F .text	00000134 __malloc_lock
00022bd0 g       *ABS*	00000000 __fini_array_start
00000e38 g     F .text	000000dc OSEventNameSet
0000f464 g     F .text	000000e0 _fflush_r
00019e68 g     F .text	000001bc _calloc_r
0002780d g     O .bss	00000001 OSRdyGrp
00013378 g     F .text	00000004 __retarget_lock_acquire_recursive
000277c8 g       *ABS*	00000000 __bss_start
00000420 g     F .text	00000068 task8
0000bef0 g     F .text	000000dc memset
0000050c g     F .text	000002b0 main
000277e4 g     O .bss	00000004 alt_envp
00027888 g     O .bss	00000004 __malloc_max_total_mem
00009fb8 g     F .text	00000064 altera_avalon_jtag_uart_write_fd
00013368 g     F .text	00000004 __retarget_lock_init_recursive
0001be3c g     F .text	00000010 __swbuf
00022f64 g     O .rodata	00000100 OSUnMapTbl
00023f8a g     O .rodata	00000002 OSSemEn
00004120 g     F .text	000003b8 OSFlagPost
00015bd8 g     F .text	00000008 __sclose
000493e0 g       *ABS*	00000000 __alt_heap_limit
0001a1ac g     F .text	0000000c fclose
00001dfc g     F .text	00000134 OS_EventTaskWait
0000b78c g     F .text	00000040 alt_timestamp_start
00002b84 g     F .text	000000c8 OS_TaskStatStkChk
00022bd0 g       *ABS*	00000000 __init_array_end
00008a7c g     F .text	00000158 OSTaskDelReq
00013610 g     F .text	000007dc _malloc_r
0001bf60 g     F .text	00000030 __ascii_wctomb
00005284 g     F .text	000001f8 OSMutexCreate
00025bb8 g     O .rwdata	00000004 alt_errno
000018b4 g     F .text	00000080 OSStart
0001a1b8 g     F .text	00000038 _fiprintf_r
0001c3a8 g     F .text	0000005c _init_signal
00000a90 g     F .text	00000074 __env_unlock
00010478 g     F .text	000000a4 _fwalk
00008edc g     F .text	000001f4 OSTaskResume
00004ef0 g     F .text	000000e4 OSMemQuery
00023f9c g     O .rodata	00000002 OSTaskStatEn
0001a708 g     F .text	0000000c _mbtowc_r
00023f76 g     O .rodata	00000002 OSMemMax
00006e88 g     F .text	00000170 OSQPostFront
00021b58 g     F .text	00000084 .hidden __divsi3
00027810 g     O .bss	00000003 OSRdyTbl
00023f50 g     O .rodata	00000002 OSDebugEn
0000fb1c g     F .text	00000140 _malloc_trim_r
00023f68 g     O .rodata	00000002 OSFlagNodeSize
00023fb4 g     O .rodata	00000002 OSTmrCfgMax
0001a7e0 g     F .text	0000017c strcmp
00006418 g     F .text	000001c4 OSQCreate
00008bd4 g     F .text	000001a4 OSTaskNameGet
00022d90 g       *ABS*	00000000 __flash_rodata_start
00006ff8 g     F .text	00000208 OSQPostOpt
000019e8 g     F .text	00000228 OSTimeTick
00023f98 g     O .rodata	00000002 OSTaskMax
000074ec g     F .text	000000e0 OSSemCreate
00023fc0 g     O .rodata	00000002 OSTmrWheelSize
00019c90 g     F .text	00000014 vfiprintf
00013364 g     F .text	00000004 __retarget_lock_init
00005fd0 g     F .text	00000164 OSMutexQuery
0001e5b8 g     F .text	0000151c .hidden __multf3
00023f92 g     O .rodata	00000002 OSTaskDelEn
00007c9c g     F .text	00000108 OSSemQuery
000065dc g     F .text	00000290 OSQDel
00006bcc g     F .text	00000154 OSQPendAbort
00009e80 g     F .text	00000038 alt_irq_init
0000b504 g     F .text	00000074 alt_release_fd
000159fc g     F .text	00000078 sprintf
00023e50 g     O .rodata	00000100 .hidden __clz_tab
00027894 g     O .bss	00000004 _PathLocale
0000bd04 g     F .text	00000014 atexit
00019d9c g     F .text	00000064 _write_r
00001734 g     F .text	00000090 OSSchedLock
0001a628 g     F .text	0000007c setlocale
00003540 g     F .text	00000104 OSFlagCreate
00025bc4 g     O .rwdata	00000004 _impure_ptr
000277dc g     O .bss	00000004 alt_argc
0000f218 g     F .text	0000024c __sflush_r
0000b164 g     F .text	00000060 _do_dtors
00023f62 g     O .rodata	00000002 OSEventMultiEn
0001e2f8 g     F .text	00000160 .hidden __gttf2
0001ab54 g     F .text	00001158 _svfiprintf_r
000003b8 g     F .text	00000068 task7
00003644 g     F .text	00000254 OSFlagDel
000277f4 g     O .bss	00000004 OSEventFreeList
0001a714 g     F .text	00000068 __ascii_mbtowc
0001fad4 g     F .text	000017a4 .hidden __subtf3
00014dbc g     F .text	00000068 __ulp
00003ab0 g     F .text	00000610 OSFlagPend
00023fb2 g     O .rodata	00000002 OSTmrEn
0000fa94 g     F .text	0000002c __fp_unlock_all
00025ba4 g     O .rwdata	00000008 alt_fs_list
0000bc8c g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00023fa6 g     O .rodata	00000002 OSTCBPrioTblMax
00013358 g     F .text	0000000c localeconv
0000b7cc g     F .text	00000058 alt_timestamp
00013538 g     F .text	000000d8 __swhatbuf_r
00023fa0 g     O .rodata	00000002 OSTaskStatStkChkEn
0000b1e0 g     F .text	00000054 alt_ic_isr_register
00023f74 g     O .rodata	00000002 OSMemEn
00000020 g       .exceptions	00000000 trap_vector
00023f7e g     O .rodata	00000002 OSMutexEn
00022760 g     F .text	00000104 _write
00025bd8 g       *ABS*	00000000 _edata
0002e1d4 g       *ABS*	00000000 _end
00027809 g     O .bss	00000001 OSIntNesting
0001a238 g     F .text	000000f4 __fputwc
000002bc g       *ABS*	00000000 __ram_exceptions_end
00027878 g     O .bss	00000001 __lock___at_quick_exit_mutex
0000a67c g     F .text	00000100 altera_avalon_jtag_uart_ioctl
00009bdc g     F .text	000001ec OSTimeDlyResume
000039c0 g     F .text	000000f0 OSFlagNameSet
00023fa4 g     O .rodata	00000002 OSTaskRegTblSize
000090d0 g     F .text	000001b8 OSTaskStkChk
00023f7a g     O .rodata	00000002 OSMemSize
00015ad8 g     F .text	00000088 __swrite
00025bd0 g     O .rwdata	00000004 __malloc_trim_threshold
0002781c g     O .bss	00000004 OSTCBCur
0000bd18 g     F .text	00000034 exit
0001a1f0 g     F .text	00000048 fiprintf
00018860 g     F .text	00001430 _vfiprintf_r
00005d7c g     F .text	00000254 OSMutexPost
0001051c g     F .text	000000b4 _fwalk_reent
00023f7c g     O .rodata	00000002 OSMemTblSize
00014b5c g     F .text	00000260 __mdiff
00021bdc g     F .text	00000030 .hidden __modsi3
00022074 g     F .text	000000f4 _kill
000277cc g     O .bss	00000004 g_msgqueue
000493e0 g       *ABS*	00000000 __alt_data_end
0000fa44 g     F .text	0000000c __sfp_lock_release
00001580 g     F .text	00000054 OSInit
0000948c g     F .text	00000130 OSTaskQuery
00011f98 g     F .text	00001334 _ldtoa_r
00007350 g     F .text	000000f0 OS_QInit
000028f4 g     F .text	00000060 OS_StrLen
00004d60 g     F .text	000000b4 OSMemNameSet
00023d0c g     O .rodata	00000101 _ctype_
00022560 g     F .text	00000108 _read
00022bd0 g       *ABS*	00000000 __init_array_start
00013374 g     F .text	00000004 __retarget_lock_acquire
00023f96 g     O .rodata	00000002 OSTaskProfileEn
0001338c g     F .text	00000004 __retarget_lock_release
0002783c g     O .bss	00000004 OSTime
0002c7b8 g     O .bss	00000800 OSTaskIdleStk
00021db8 g     F .text	00000044 _exit
0000ae30 g     F .text	00000168 alt_alarm_start
00003898 g     F .text	00000128 OSFlagNameGet
00009dc8 g     F .text	0000005c OSTimeGet
00027868 g     O .bss	00000001 __lock___dd_hash_mutex
00013394 g     F .text	000001a4 __smakebuf_r
0002786c g     O .bss	00000001 __lock___tz_mutex
0000c33c g     F .text	0000008c strlen
0001bfa8 g     F .text	0000005c _init_signal_r
0000c3d4 g     F .text	00000048 open
0000bc1c g     F .text	0000001c OSTaskSwHook
0002b9c8 g     O .bss	000004b0 OSEventTbl
0002d00c g     O .bss	00000a20 OSTCBTbl
00007da4 g     F .text	000000dc OSSemSet
00019e54 g     F .text	00000014 __assert
00018848 g     F .text	00000018 __sprint_r
0000b1c4 g     F .text	0000001c alt_icache_flush_all
0000b8cc g     F .text	0000005c alt_niosv_mtimecmp_set
000075cc g     F .text	00000240 OSSemDel
000277f8 g     O .bss	00000004 OSFlagFreeList
00027808 g     O .bss	00000001 OSStatRdy
0002cfb8 g     O .bss	00000054 OSTCBPrioTbl
0001bf54 g     F .text	0000000c _wctomb_r
000009c0 g     F .text	000000d0 __env_lock
00023fa2 g     O .rodata	00000002 OSTaskSwHookEn
0000c41c g     F .text	000028fc _vfprintf_r
000143cc g     F .text	000000e0 __lo0bits
00025bbc g     O .rwdata	00000008 alt_alarm_list
00023f6a g     O .rodata	00000002 OSFlagWidth
0000b104 g     F .text	00000060 _do_ctors
0001c404 g     F .text	000000e4 __sigtramp
0001bec4 g     F .text	00000090 wcrtomb
00015884 g     F .text	000000b4 frexp
0000c3c8 g     F .text	0000000c close
00027940 g     O .bss	00001000 task5_stk
000277e8 g     O .bss	00000004 alt_envsem
00027804 g     O .bss	00000004 OSIdleCtrRun
00025a30 g     O .rwdata	0000016c __global_locale
00001c10 g     F .text	00000024 OSVersion
00023fb8 g     O .rodata	00000002 OSTmrCfgWheelSize
00000874 g     F .text	0000006c alt_load
000098c8 g     F .text	0000006c OS_TaskStkClr
00023f8e g     O .rodata	00000002 OSTaskCreateEn
0000ed18 g     F .text	00000014 vfprintf
000277d4 g     O .bss	00000004 alt_niosv_software_interrupt_handler
00021758 g     F .text	000003dc .hidden __trunctfdf2
00027880 g     O .bss	00000001 __lock___sfp_recursive_mutex
00002244 g     F .text	0000005c OS_EventWaitListInit
0001a3f8 g     F .text	000000f0 fputwc
0001c244 g     F .text	000000c0 raise
00021cd8 g     F .text	000000e0 _close
0000bca8 g     F .text	0000001c OSTaskIdleHook
0000fa50 g     F .text	0000000c __sinit_lock_acquire
00014094 g     F .text	00000184 __multadd
00014070 g     F .text	00000024 _Bfree
00009288 g     F .text	00000204 OSTaskSuspend
00002954 g     F .text	00000064 OS_TaskIdle
00023fbe g     O .rodata	00000002 OSTmrTblSize
00007200 g     F .text	00000150 OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */

    /* Jump to the _start entry point in the .text section. */
    tail _start
   0:	7bc0006f          	j	7bc <_start>
	...

Disassembly of section .exceptions:

00000020 <trap_vector>:
#endif /* ALT_EXCEPTION_STACK */

save_registers:
    /* Save caller-saved registers on the stack */
#if ABBOTTSLAKE_NUM_GPR == 32
    addi sp, sp, -16 * 4
  20:	fc010113          	add	sp,sp,-64
    sw a6, 10 * 4(sp)
  24:	03012423          	sw	a6,40(sp)
    sw a7, 11 * 4(sp)
  28:	03112623          	sw	a7,44(sp)
    sw t3, 12 * 4(sp)
  2c:	03c12823          	sw	t3,48(sp)
    sw t4, 13 * 4(sp)
  30:	03d12a23          	sw	t4,52(sp)
    sw t5, 14 * 4(sp)
  34:	03e12c23          	sw	t5,56(sp)
    sw t6, 15 * 4(sp)
  38:	03f12e23          	sw	t6,60(sp)
#else // 16 (RV32E)
    addi sp, sp, -10 * 4
#endif
    sw ra,  0 * 4(sp)
  3c:	00112023          	sw	ra,0(sp)
    sw t0,  1 * 4(sp)
  40:	00512223          	sw	t0,4(sp)
    sw t1,  2 * 4(sp)
  44:	00612423          	sw	t1,8(sp)
    sw t2,  3 * 4(sp)
  48:	00712623          	sw	t2,12(sp)
    sw a0,  4 * 4(sp)
  4c:	00a12823          	sw	a0,16(sp)
    sw a1,  5 * 4(sp)
  50:	00b12a23          	sw	a1,20(sp)
    sw a2,  6 * 4(sp)
  54:	00c12c23          	sw	a2,24(sp)
    sw a3,  7 * 4(sp)
  58:	00d12e23          	sw	a3,28(sp)
    sw a4,  8 * 4(sp)
  5c:	02e12023          	sw	a4,32(sp)
    sw a5,  9 * 4(sp)
  60:	02f12223          	sw	a5,36(sp)

    
    /* Call handle_trap to dispatch the correct handler, if available */
    csrr a0, mcause
  64:	34202573          	csrr	a0,mcause
    csrr a1, mepc
  68:	341025f3          	csrr	a1,mepc
    csrr a2, mtval
  6c:	34302673          	csrr	a2,mtval
    jal handle_trap
  70:	144000ef          	jal	1b4 <handle_trap>
    csrw mepc, a0
  74:	34151073          	csrw	mepc,a0

    /* Restore caller-saved registers */
    lw ra,  0 * 4(sp)
  78:	00012083          	lw	ra,0(sp)
    lw t0,  1 * 4(sp)
  7c:	00412283          	lw	t0,4(sp)
    lw t1,  2 * 4(sp)
  80:	00812303          	lw	t1,8(sp)
    lw t2,  3 * 4(sp)
  84:	00c12383          	lw	t2,12(sp)
    lw a0,  4 * 4(sp)
  88:	01012503          	lw	a0,16(sp)
    lw a1,  5 * 4(sp)
  8c:	01412583          	lw	a1,20(sp)
    lw a2,  6 * 4(sp)
  90:	01812603          	lw	a2,24(sp)
    lw a3,  7 * 4(sp)
  94:	01c12683          	lw	a3,28(sp)
    lw a4,  8 * 4(sp)
  98:	02012703          	lw	a4,32(sp)
    lw a5,  9 * 4(sp)
  9c:	02412783          	lw	a5,36(sp)
#if ABBOTTSLAKE_NUM_GPR == 32
    lw a6, 10 * 4(sp)
  a0:	02812803          	lw	a6,40(sp)
    lw a7, 11 * 4(sp)
  a4:	02c12883          	lw	a7,44(sp)
    lw t3, 12 * 4(sp)
  a8:	03012e03          	lw	t3,48(sp)
    lw t4, 13 * 4(sp)
  ac:	03412e83          	lw	t4,52(sp)
    lw t5, 14 * 4(sp)
  b0:	03812f03          	lw	t5,56(sp)
    lw t6, 15 * 4(sp)
  b4:	03c12f83          	lw	t6,60(sp)
    addi sp, sp, 16 * 4
  b8:	04010113          	add	sp,sp,64
    lw s0, 0(sp)
    lw s1, 4(sp)
    addi sp, sp, 8
#endif

    mret
  bc:	30200073          	mret

000000c0 <alt_irq_handler>:
 * This means that if there is never a call to alt_irq_register() then
 * this function will not get linked in to the executable. This is acceptable
 * since if no handler is ever registered, then an interrupt can never occur.
 */
void alt_irq_handler (void)
{
  c0:	fd010113          	add	sp,sp,-48
  c4:	02112623          	sw	ra,44(sp)
  c8:	02812423          	sw	s0,40(sp)
  cc:	03010413          	add	s0,sp,48
    alt_u32 i;

    /*
     * Notify the operating system that we are at interrupt level.
     */  
    ALT_OS_INT_ENTER();
  d0:	504010ef          	jal	15d4 <OSIntEnter>
alt_irq_pending(void)
{
    alt_u32 active;
    alt_u32 enabled;

    ABBOTTS_LAKE_READ_CSR(ABBOTTS_LAKE_MIP_CSR, active);
  d4:	344027f3          	csrr	a5,mip
  d8:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_READ_CSR(ABBOTTS_LAKE_MIE_CSR, enabled);
  dc:	304027f3          	csrr	a5,mie
  e0:	fcf42e23          	sw	a5,-36(s0)

    // Since this is used by alt_irq_handler, we want to only process the upper 16-bits
    // --> the interrupt lines connected via Platform Designer...
    return (active & enabled) >> 16;
  e4:	fe042703          	lw	a4,-32(s0)
  e8:	fdc42783          	lw	a5,-36(s0)
  ec:	00f777b3          	and	a5,a4,a5
  f0:	0107d793          	srl	a5,a5,0x10
     * reduced by finding out which interrupts are pending as late as possible.
     * Consider the case where the high priority interupt is asserted during
     * the interrupt entry sequence for a lower priority interrupt to see why
     * this is the case.
     */
    active = alt_irq_pending();
  f4:	fef42623          	sw	a5,-20(s0)

    do
    {
        i = 0;
  f8:	fe042223          	sw	zero,-28(s0)
        mask = 1;
  fc:	00100793          	li	a5,1
 100:	fef42423          	sw	a5,-24(s0)
         * called to clear the interrupt condition.
         */

        do
        {
            if (active & mask)
 104:	fec42703          	lw	a4,-20(s0)
 108:	fe842783          	lw	a5,-24(s0)
 10c:	00f777b3          	and	a5,a4,a5
 110:	06078263          	beqz	a5,174 <alt_irq_handler+0xb4>
            {
                alt_irq[i].handler(alt_irq[i].context); 
 114:	0002c7b7          	lui	a5,0x2c
 118:	94078713          	add	a4,a5,-1728 # 2b940 <alt_irq>
 11c:	fe442783          	lw	a5,-28(s0)
 120:	00379793          	sll	a5,a5,0x3
 124:	00f707b3          	add	a5,a4,a5
 128:	0007a703          	lw	a4,0(a5)
 12c:	0002c7b7          	lui	a5,0x2c
 130:	94078693          	add	a3,a5,-1728 # 2b940 <alt_irq>
 134:	fe442783          	lw	a5,-28(s0)
 138:	00379793          	sll	a5,a5,0x3
 13c:	00f687b3          	add	a5,a3,a5
 140:	0047a783          	lw	a5,4(a5)
 144:	00078513          	mv	a0,a5
 148:	000700e7          	jalr	a4
                break;
 14c:	00000013          	nop
    ABBOTTS_LAKE_READ_CSR(ABBOTTS_LAKE_MIP_CSR, active);
 150:	344027f3          	csrr	a5,mip
 154:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_READ_CSR(ABBOTTS_LAKE_MIE_CSR, enabled);
 158:	304027f3          	csrr	a5,mie
 15c:	fcf42a23          	sw	a5,-44(s0)
    return (active & enabled) >> 16;
 160:	fd842703          	lw	a4,-40(s0)
 164:	fd442783          	lw	a5,-44(s0)
 168:	00f777b3          	and	a5,a4,a5
 16c:	0107d793          	srl	a5,a5,0x10
 170:	0200006f          	j	190 <alt_irq_handler+0xd0>
            }
            
            mask <<= 1;
 174:	fe842783          	lw	a5,-24(s0)
 178:	00179793          	sll	a5,a5,0x1
 17c:	fef42423          	sw	a5,-24(s0)
            i++;
 180:	fe442783          	lw	a5,-28(s0)
 184:	00178793          	add	a5,a5,1
 188:	fef42223          	sw	a5,-28(s0)
            if (active & mask)
 18c:	f79ff06f          	j	104 <alt_irq_handler+0x44>
            
        } while (1);

        active = alt_irq_pending();
 190:	fef42623          	sw	a5,-20(s0)
    
    } while (active);
 194:	fec42783          	lw	a5,-20(s0)
 198:	f60790e3          	bnez	a5,f8 <alt_irq_handler+0x38>

    /*
     * Notify the operating system that interrupt processing is complete.
     */ 

    ALT_OS_INT_EXIT();
 19c:	48c010ef          	jal	1628 <OSIntExit>
}
 1a0:	00000013          	nop
 1a4:	02c12083          	lw	ra,44(sp)
 1a8:	02812403          	lw	s0,40(sp)
 1ac:	03010113          	add	sp,sp,48
 1b0:	00008067          	ret

000001b4 <handle_trap>:
{
 1b4:	fd010113          	add	sp,sp,-48
 1b8:	02112623          	sw	ra,44(sp)
 1bc:	02812423          	sw	s0,40(sp)
 1c0:	03010413          	add	s0,sp,48
 1c4:	fca42e23          	sw	a0,-36(s0)
 1c8:	fcb42c23          	sw	a1,-40(s0)
 1cc:	fcc42a23          	sw	a2,-44(s0)
    is_irq = (cause & ABBOTTS_LAKE_MCAUSE_INTERRUPT_MASK);
 1d0:	fdc42703          	lw	a4,-36(s0)
 1d4:	800007b7          	lui	a5,0x80000
 1d8:	00f777b3          	and	a5,a4,a5
 1dc:	fef42623          	sw	a5,-20(s0)
    exception_code = (cause & ~ABBOTTS_LAKE_MCAUSE_INTERRUPT_MASK);
 1e0:	fdc42703          	lw	a4,-36(s0)
 1e4:	800007b7          	lui	a5,0x80000
 1e8:	fff78793          	add	a5,a5,-1 # 7fffffff <__alt_data_end+0x7ffb6c1f>
 1ec:	00f777b3          	and	a5,a4,a5
 1f0:	fef42423          	sw	a5,-24(s0)
    if (is_irq) {
 1f4:	fec42783          	lw	a5,-20(s0)
 1f8:	08078863          	beqz	a5,288 <handle_trap+0xd4>
        switch (exception_code) {
 1fc:	fe842703          	lw	a4,-24(s0)
 200:	00300793          	li	a5,3
 204:	04f70063          	beq	a4,a5,244 <handle_trap+0x90>
 208:	fe842703          	lw	a4,-24(s0)
 20c:	00700793          	li	a5,7
 210:	06f71263          	bne	a4,a5,274 <handle_trap+0xc0>
                if (alt_niosv_timer_interrupt_handler) {
 214:	000277b7          	lui	a5,0x27
 218:	7d87a783          	lw	a5,2008(a5) # 277d8 <alt_niosv_timer_interrupt_handler>
 21c:	06078a63          	beqz	a5,290 <handle_trap+0xdc>
                    ALT_OS_INT_ENTER();
 220:	3b4010ef          	jal	15d4 <OSIntEnter>
                    alt_niosv_timer_interrupt_handler(cause, epc, tval);
 224:	000277b7          	lui	a5,0x27
 228:	7d87a783          	lw	a5,2008(a5) # 277d8 <alt_niosv_timer_interrupt_handler>
 22c:	fd442603          	lw	a2,-44(s0)
 230:	fd842583          	lw	a1,-40(s0)
 234:	fdc42503          	lw	a0,-36(s0)
 238:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 23c:	3ec010ef          	jal	1628 <OSIntExit>
                break;
 240:	0500006f          	j	290 <handle_trap+0xdc>
                if (alt_niosv_software_interrupt_handler) {
 244:	000277b7          	lui	a5,0x27
 248:	7d47a783          	lw	a5,2004(a5) # 277d4 <alt_niosv_software_interrupt_handler>
 24c:	04078663          	beqz	a5,298 <handle_trap+0xe4>
                    ALT_OS_INT_ENTER();
 250:	384010ef          	jal	15d4 <OSIntEnter>
                    alt_niosv_software_interrupt_handler(cause, epc, tval);
 254:	000277b7          	lui	a5,0x27
 258:	7d47a783          	lw	a5,2004(a5) # 277d4 <alt_niosv_software_interrupt_handler>
 25c:	fd442603          	lw	a2,-44(s0)
 260:	fd842583          	lw	a1,-40(s0)
 264:	fdc42503          	lw	a0,-36(s0)
 268:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 26c:	3bc010ef          	jal	1628 <OSIntExit>
                break;
 270:	0280006f          	j	298 <handle_trap+0xe4>
                if (exception_code >= 16) {
 274:	fe842703          	lw	a4,-24(s0)
 278:	00f00793          	li	a5,15
 27c:	02e7f263          	bgeu	a5,a4,2a0 <handle_trap+0xec>
                    alt_irq_handler();
 280:	e41ff0ef          	jal	c0 <alt_irq_handler>
                break;
 284:	01c0006f          	j	2a0 <handle_trap+0xec>
            ABBOTTS_LAKE_EBREAK();
 288:	00100073          	ebreak
 28c:	0180006f          	j	2a4 <handle_trap+0xf0>
                break;
 290:	00000013          	nop
 294:	0100006f          	j	2a4 <handle_trap+0xf0>
                break;
 298:	00000013          	nop
 29c:	0080006f          	j	2a4 <handle_trap+0xf0>
                break;
 2a0:	00000013          	nop
    return epc;
 2a4:	fd842783          	lw	a5,-40(s0)
}
 2a8:	00078513          	mv	a0,a5
 2ac:	02c12083          	lw	ra,44(sp)
 2b0:	02812403          	lw	s0,40(sp)
 2b4:	03010113          	add	sp,sp,48
 2b8:	00008067          	ret

Disassembly of section .text:

000002bc <task5>:
}
#endif // 0

#if (MY_QUEUE_LIST_EN > 0u)
void task5(void* pdata)
{
     2bc:	fd010113          	add	sp,sp,-48
     2c0:	02112623          	sw	ra,44(sp)
     2c4:	02812423          	sw	s0,40(sp)
     2c8:	03010413          	add	s0,sp,48
     2cc:	fca42e23          	sw	a0,-36(s0)
	//char msg[20] = "q_task 5";
	int i = 1000;
     2d0:	3e800793          	li	a5,1000
     2d4:	fef42623          	sw	a5,-20(s0)

	pdata = pdata;
	while (1)
	{
		OSQPost(g_msgqueue, (void*)&i);
     2d8:	000277b7          	lui	a5,0x27
     2dc:	7cc7a783          	lw	a5,1996(a5) # 277cc <g_msgqueue>
     2e0:	fec40713          	add	a4,s0,-20
     2e4:	00070593          	mv	a1,a4
     2e8:	00078513          	mv	a0,a5
     2ec:	235060ef          	jal	6d20 <OSQPost>
		printf("Task5 Post: %d \n", i++);
     2f0:	fec42783          	lw	a5,-20(s0)
     2f4:	00178713          	add	a4,a5,1
     2f8:	fee42623          	sw	a4,-20(s0)
     2fc:	00078593          	mv	a1,a5
     300:	000237b7          	lui	a5,0x23
     304:	d9078513          	add	a0,a5,-624 # 22d90 <__flash_rodata_start>
     308:	5050b0ef          	jal	c00c <printf>
		OSTimeDlyHMSM(0, 0, 1, 0);
     30c:	00000693          	li	a3,0
     310:	00100613          	li	a2,1
     314:	00000593          	li	a1,0
     318:	00000513          	li	a0,0
     31c:	748090ef          	jal	9a64 <OSTimeDlyHMSM>
		OSQPost(g_msgqueue, (void*)&i);
     320:	00000013          	nop
     324:	fb5ff06f          	j	2d8 <task5+0x1c>

00000328 <task6>:
	}
}

void task6(void* pdata)
{
     328:	fd010113          	add	sp,sp,-48
     32c:	02112623          	sw	ra,44(sp)
     330:	02812423          	sw	s0,40(sp)
     334:	03010413          	add	s0,sp,48
     338:	fca42e23          	sw	a0,-36(s0)
	INT8U err;
	int i = 0;
     33c:	fe042623          	sw	zero,-20(s0)
	int *data;

	pdata = pdata;
	while (1)
	{
		data = (int*)OSQPend(g_msgqueue, 0, &err);
     340:	000277b7          	lui	a5,0x27
     344:	7cc7a783          	lw	a5,1996(a5) # 277cc <g_msgqueue>
     348:	fe740713          	add	a4,s0,-25
     34c:	00070613          	mv	a2,a4
     350:	00000593          	li	a1,0
     354:	00078513          	mv	a0,a5
     358:	5c4060ef          	jal	691c <OSQPend>
     35c:	fea42423          	sw	a0,-24(s0)
		if (i < NUM_PRINTS_PER_TASK) {
     360:	fec42703          	lw	a4,-20(s0)
     364:	09500793          	li	a5,149
     368:	02e7c063          	blt	a5,a4,388 <task6+0x60>
			printf("Hello from task6: %d\n", i++);
     36c:	fec42783          	lw	a5,-20(s0)
     370:	00178713          	add	a4,a5,1
     374:	fee42623          	sw	a4,-20(s0)
     378:	00078593          	mv	a1,a5
     37c:	000237b7          	lui	a5,0x23
     380:	da478513          	add	a0,a5,-604 # 22da4 <__flash_rodata_start+0x14>
     384:	4890b0ef          	jal	c00c <printf>
		}
		printf("Task6 pend data: %d \n", *data);
     388:	fe842783          	lw	a5,-24(s0)
     38c:	0007a783          	lw	a5,0(a5)
     390:	00078593          	mv	a1,a5
     394:	000237b7          	lui	a5,0x23
     398:	dbc78513          	add	a0,a5,-580 # 22dbc <__flash_rodata_start+0x2c>
     39c:	4710b0ef          	jal	c00c <printf>

		OSTimeDlyHMSM(0, 0, 0, 400);
     3a0:	19000693          	li	a3,400
     3a4:	00000613          	li	a2,0
     3a8:	00000593          	li	a1,0
     3ac:	00000513          	li	a0,0
     3b0:	6b4090ef          	jal	9a64 <OSTimeDlyHMSM>
		data = (int*)OSQPend(g_msgqueue, 0, &err);
     3b4:	f8dff06f          	j	340 <task6+0x18>

000003b8 <task7>:
	}
}

#if (TASK7_PRIORITY > 0u)
void task7(void* pdata)
{
     3b8:	fd010113          	add	sp,sp,-48
     3bc:	02112623          	sw	ra,44(sp)
     3c0:	02812423          	sw	s0,40(sp)
     3c4:	03010413          	add	s0,sp,48
     3c8:	fca42e23          	sw	a0,-36(s0)
	int *data;

	pdata = pdata;
	while (1)
	{
		data = (int*)OSQPend(g_msgqueue, 0, &err);
     3cc:	000277b7          	lui	a5,0x27
     3d0:	7cc7a783          	lw	a5,1996(a5) # 277cc <g_msgqueue>
     3d4:	feb40713          	add	a4,s0,-21
     3d8:	00070613          	mv	a2,a4
     3dc:	00000593          	li	a1,0
     3e0:	00078513          	mv	a0,a5
     3e4:	538060ef          	jal	691c <OSQPend>
     3e8:	fea42623          	sw	a0,-20(s0)
		printf("TASK 7: %d\n", *data);
     3ec:	fec42783          	lw	a5,-20(s0)
     3f0:	0007a783          	lw	a5,0(a5)
     3f4:	00078593          	mv	a1,a5
     3f8:	000237b7          	lui	a5,0x23
     3fc:	dd478513          	add	a0,a5,-556 # 22dd4 <__flash_rodata_start+0x44>
     400:	40d0b0ef          	jal	c00c <printf>

		OSTimeDlyHMSM(0, 0, 0, 500);
     404:	1f400693          	li	a3,500
     408:	00000613          	li	a2,0
     40c:	00000593          	li	a1,0
     410:	00000513          	li	a0,0
     414:	650090ef          	jal	9a64 <OSTimeDlyHMSM>
		data = (int*)OSQPend(g_msgqueue, 0, &err);
     418:	00000013          	nop
     41c:	fb1ff06f          	j	3cc <task7+0x14>

00000420 <task8>:
}
#endif

#if (TASK8_PRIORITY > 0u)
void task8(void* pdata)
{
     420:	fd010113          	add	sp,sp,-48
     424:	02112623          	sw	ra,44(sp)
     428:	02812423          	sw	s0,40(sp)
     42c:	03010413          	add	s0,sp,48
     430:	fca42e23          	sw	a0,-36(s0)
	int *data;

	pdata = pdata;
	while (1)
	{
		data = (int*)OSQPend(g_msgqueue, 0, &err);
     434:	000277b7          	lui	a5,0x27
     438:	7cc7a783          	lw	a5,1996(a5) # 277cc <g_msgqueue>
     43c:	feb40713          	add	a4,s0,-21
     440:	00070613          	mv	a2,a4
     444:	00000593          	li	a1,0
     448:	00078513          	mv	a0,a5
     44c:	4d0060ef          	jal	691c <OSQPend>
     450:	fea42623          	sw	a0,-20(s0)
		printf("TASK 8: %d\n", (int)*data);
     454:	fec42783          	lw	a5,-20(s0)
     458:	0007a783          	lw	a5,0(a5)
     45c:	00078593          	mv	a1,a5
     460:	000237b7          	lui	a5,0x23
     464:	de078513          	add	a0,a5,-544 # 22de0 <__flash_rodata_start+0x50>
     468:	3a50b0ef          	jal	c00c <printf>
		OSTimeDlyHMSM(0, 0, 0, 400);
     46c:	19000693          	li	a3,400
     470:	00000613          	li	a2,0
     474:	00000593          	li	a1,0
     478:	00000513          	li	a0,0
     47c:	5e8090ef          	jal	9a64 <OSTimeDlyHMSM>
		data = (int*)OSQPend(g_msgqueue, 0, &err);
     480:	00000013          	nop
     484:	fb1ff06f          	j	434 <task8+0x14>

00000488 <SetTaskName>:
	}
}
#endif // TASK8_PRIORITY
#endif

void SetTaskName(void) {
     488:	fe010113          	add	sp,sp,-32
     48c:	00112e23          	sw	ra,28(sp)
     490:	00812c23          	sw	s0,24(sp)
     494:	02010413          	add	s0,sp,32
	OSTaskNameSet(TASK2_PRIORITY, (INT8U *)"My Task_2", &err);
	OSTaskNameSet(TASK3_PRIORITY, (INT8U *)(void *)"My Task_3", &err);
	OSTaskNameSet(TASK4_PRIORITY, (INT8U *)"My Task_4", &err);
#endif
#if (MY_QUEUE_LIST_EN > 0u)
	OSTaskNameSet(TASK5_PRIORITY, (INT8U *)(void *)"My Q_Task_5", &err);
     498:	fef40793          	add	a5,s0,-17
     49c:	00078613          	mv	a2,a5
     4a0:	000237b7          	lui	a5,0x23
     4a4:	dec78593          	add	a1,a5,-532 # 22dec <__flash_rodata_start+0x5c>
     4a8:	00600513          	li	a0,6
     4ac:	0cd080ef          	jal	8d78 <OSTaskNameSet>
	OSTaskNameSet(TASK6_PRIORITY, (INT8U *)"My Q_Task_6", &err);
     4b0:	fef40793          	add	a5,s0,-17
     4b4:	00078613          	mv	a2,a5
     4b8:	000237b7          	lui	a5,0x23
     4bc:	df878593          	add	a1,a5,-520 # 22df8 <__flash_rodata_start+0x68>
     4c0:	00700513          	li	a0,7
     4c4:	0b5080ef          	jal	8d78 <OSTaskNameSet>
	OSTaskNameSet(TASK7_PRIORITY, (INT8U *)(void *)"My Q_Task_7", &err);
     4c8:	fef40793          	add	a5,s0,-17
     4cc:	00078613          	mv	a2,a5
     4d0:	000237b7          	lui	a5,0x23
     4d4:	e0478593          	add	a1,a5,-508 # 22e04 <__flash_rodata_start+0x74>
     4d8:	00800513          	li	a0,8
     4dc:	09d080ef          	jal	8d78 <OSTaskNameSet>
	OSTaskNameSet(TASK8_PRIORITY, (INT8U *)"My Q_Task_8", &err);
     4e0:	fef40793          	add	a5,s0,-17
     4e4:	00078613          	mv	a2,a5
     4e8:	000237b7          	lui	a5,0x23
     4ec:	e1078593          	add	a1,a5,-496 # 22e10 <__flash_rodata_start+0x80>
     4f0:	00900513          	li	a0,9
     4f4:	085080ef          	jal	8d78 <OSTaskNameSet>
#endif
}
     4f8:	00000013          	nop
     4fc:	01c12083          	lw	ra,28(sp)
     500:	01812403          	lw	s0,24(sp)
     504:	02010113          	add	sp,sp,32
     508:	00008067          	ret

0000050c <main>:


/* The main function creates tasks and starts multi-tasking */
int main(void)
{
     50c:	fd010113          	add	sp,sp,-48
     510:	02112623          	sw	ra,44(sp)
     514:	02812423          	sw	s0,40(sp)
     518:	03010413          	add	s0,sp,48
	printf("Hello from main...\n");
     51c:	000237b7          	lui	a5,0x23
     520:	e1c78513          	add	a0,a5,-484 # 22e1c <__flash_rodata_start+0x8c>
     524:	4610b0ef          	jal	c184 <puts>
	printf("Task3 -- TOS: %p, BOS: %p\n", &task3_stk[TASK_STACKSIZE-1], &task3_stk[0]);
	printf("Task4 -- TOS: %p, BOS: %p\n", &task4_stk[TASK_STACKSIZE-1], &task4_stk[0]);
#endif
#endif
#if (MY_QUEUE_LIST_EN > 0u)
	printf("Task5 -- TOS: %p, BOS: %p\n", &task5_stk[TASK_STACKSIZE-1], &task5_stk[0]);
     528:	000287b7          	lui	a5,0x28
     52c:	94078613          	add	a2,a5,-1728 # 27940 <task5_stk>
     530:	000297b7          	lui	a5,0x29
     534:	93c78593          	add	a1,a5,-1732 # 2893c <task5_stk+0xffc>
     538:	000237b7          	lui	a5,0x23
     53c:	e3078513          	add	a0,a5,-464 # 22e30 <__flash_rodata_start+0xa0>
     540:	2cd0b0ef          	jal	c00c <printf>
	printf("Task6 -- TOS: %p, BOS: %p\n", &task6_stk[TASK_STACKSIZE-1], &task6_stk[0]);
     544:	000297b7          	lui	a5,0x29
     548:	94078613          	add	a2,a5,-1728 # 28940 <task6_stk>
     54c:	0002a7b7          	lui	a5,0x2a
     550:	93c78593          	add	a1,a5,-1732 # 2993c <task6_stk+0xffc>
     554:	000237b7          	lui	a5,0x23
     558:	e4c78513          	add	a0,a5,-436 # 22e4c <__flash_rodata_start+0xbc>
     55c:	2b10b0ef          	jal	c00c <printf>
#endif /* MY_QUEUE_LIST_EN */
	printf("Stat -- TOS: %p, BOS: %p\n", &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1u], &OSTaskStatStk[0]);
     560:	0002c7b7          	lui	a5,0x2c
     564:	fb878613          	add	a2,a5,-72 # 2bfb8 <OSTaskStatStk>
     568:	0002c7b7          	lui	a5,0x2c
     56c:	7b478593          	add	a1,a5,1972 # 2c7b4 <OSTaskStatStk+0x7fc>
     570:	000237b7          	lui	a5,0x23
     574:	e6878513          	add	a0,a5,-408 # 22e68 <__flash_rodata_start+0xd8>
     578:	2950b0ef          	jal	c00c <printf>
	printf("Idle -- TOS: %p, BOS: %p\n", &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1u], &OSTaskIdleStk[0]);
     57c:	0002c7b7          	lui	a5,0x2c
     580:	7b878613          	add	a2,a5,1976 # 2c7b8 <OSTaskIdleStk>
     584:	0002d7b7          	lui	a5,0x2d
     588:	fb478593          	add	a1,a5,-76 # 2cfb4 <OSTaskIdleStk+0x7fc>
     58c:	000237b7          	lui	a5,0x23
     590:	e8478513          	add	a0,a5,-380 # 22e84 <__flash_rodata_start+0xf4>
     594:	2790b0ef          	jal	c00c <printf>

	INT8U err;

#if (MY_QUEUE_LIST_EN > 0u)
	g_msgqueue = OSQCreate((void**)&MessageStorage[0], MAX_N_MSGS);
     598:	00e00593          	li	a1,14
     59c:	000287b7          	lui	a5,0x28
     5a0:	89878513          	add	a0,a5,-1896 # 27898 <MessageStorage>
     5a4:	675050ef          	jal	6418 <OSQCreate>
     5a8:	00050713          	mv	a4,a0
     5ac:	000277b7          	lui	a5,0x27
     5b0:	7ce7a623          	sw	a4,1996(a5) # 277cc <g_msgqueue>
	if ((void*)0 == g_msgqueue) {
     5b4:	000277b7          	lui	a5,0x27
     5b8:	7cc7a783          	lw	a5,1996(a5) # 277cc <g_msgqueue>
     5bc:	00079863          	bnez	a5,5cc <main+0xc0>
		/* Msg Queue creation failed */
		printf(" Msg Queue creation failed  ***\n");
     5c0:	000237b7          	lui	a5,0x23
     5c4:	ea078513          	add	a0,a5,-352 # 22ea0 <__flash_rodata_start+0x110>
     5c8:	3bd0b0ef          	jal	c184 <puts>
	}
#if (OS_EVENT_NAME_EN > 0u)
	OSEventNameSet(g_msgqueue, (INT8U*)"First Msg Queue Event", &err);
     5cc:	000277b7          	lui	a5,0x27
     5d0:	7cc7a703          	lw	a4,1996(a5) # 277cc <g_msgqueue>
     5d4:	fef40793          	add	a5,s0,-17
     5d8:	00078613          	mv	a2,a5
     5dc:	000237b7          	lui	a5,0x23
     5e0:	ec078593          	add	a1,a5,-320 # 22ec0 <__flash_rodata_start+0x130>
     5e4:	00070513          	mv	a0,a4
     5e8:	051000ef          	jal	e38 <OSEventNameSet>
#endif
#endif // MY_QUEUE_LIST_EN

	g_mutex = OSMutexCreate(MUTEX_PRIORITY, &err);
     5ec:	fef40793          	add	a5,s0,-17
     5f0:	00078593          	mv	a1,a5
     5f4:	00100513          	li	a0,1
     5f8:	48d040ef          	jal	5284 <OSMutexCreate>
     5fc:	00050713          	mv	a4,a0
     600:	000277b7          	lui	a5,0x27
     604:	7ce7a423          	sw	a4,1992(a5) # 277c8 <g_mutex>
#if (OS_EVENT_NAME_EN > 0u)
	OSEventNameSet(g_mutex, (INT8U*)"My Mutex Event", &err);
     608:	000277b7          	lui	a5,0x27
     60c:	7c87a703          	lw	a4,1992(a5) # 277c8 <g_mutex>
     610:	fef40793          	add	a5,s0,-17
     614:	00078613          	mv	a2,a5
     618:	000237b7          	lui	a5,0x23
     61c:	ed878593          	add	a1,a5,-296 # 22ed8 <__flash_rodata_start+0x148>
     620:	00070513          	mv	a0,a4
     624:	015000ef          	jal	e38 <OSEventNameSet>
#endif

#if (MY_QUEUE_LIST_EN > 0u)
	g_msgqueue2 = OSQCreate((void**)&MessageStorage2[0], MAX_N_MSGS + MAX_N_MSGS);
     628:	01c00593          	li	a1,28
     62c:	000287b7          	lui	a5,0x28
     630:	8d078513          	add	a0,a5,-1840 # 278d0 <MessageStorage2>
     634:	5e5050ef          	jal	6418 <OSQCreate>
     638:	00050713          	mv	a4,a0
     63c:	000277b7          	lui	a5,0x27
     640:	7ce7a823          	sw	a4,2000(a5) # 277d0 <g_msgqueue2>
	if ((void*)0 == g_msgqueue2) {
     644:	000277b7          	lui	a5,0x27
     648:	7d07a783          	lw	a5,2000(a5) # 277d0 <g_msgqueue2>
     64c:	00079863          	bnez	a5,65c <main+0x150>
		/* Msg Queue creation failed */
		printf(" Msg Queue creation failed   g_msgqueue2 ***\n");
     650:	000237b7          	lui	a5,0x23
     654:	ee878513          	add	a0,a5,-280 # 22ee8 <__flash_rodata_start+0x158>
     658:	32d0b0ef          	jal	c184 <puts>
	}
#if (OS_EVENT_NAME_EN > 0u)
	OSEventNameSet(g_msgqueue2, (INT8U*)(void *)"My Second MsgQ Event", &err);
     65c:	000277b7          	lui	a5,0x27
     660:	7d07a703          	lw	a4,2000(a5) # 277d0 <g_msgqueue2>
     664:	fef40793          	add	a5,s0,-17
     668:	00078613          	mv	a2,a5
     66c:	000237b7          	lui	a5,0x23
     670:	f1878593          	add	a1,a5,-232 # 22f18 <__flash_rodata_start+0x188>
     674:	00070513          	mv	a0,a4
     678:	7c0000ef          	jal	e38 <OSEventNameSet>
#endif
	int qtask_data = 0;
     67c:	fe042423          	sw	zero,-24(s0)
    }
#endif
#endif // 0

#if (MY_QUEUE_LIST_EN > 0u)
	err = OSTaskCreateExt(task5,
     680:	fe840593          	add	a1,s0,-24
     684:	00012023          	sw	zero,0(sp)
     688:	00000893          	li	a7,0
     68c:	40000813          	li	a6,1024
     690:	000287b7          	lui	a5,0x28
     694:	94078793          	add	a5,a5,-1728 # 27940 <task5_stk>
     698:	00600713          	li	a4,6
     69c:	00600693          	li	a3,6
     6a0:	00029637          	lui	a2,0x29
     6a4:	93c60613          	add	a2,a2,-1732 # 2893c <task5_stk+0xffc>
     6a8:	2bc00513          	li	a0,700
     6ac:	675070ef          	jal	8520 <OSTaskCreateExt>
     6b0:	00050793          	mv	a5,a0
     6b4:	fef407a3          	sb	a5,-17(s0)
			task5_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	err = OSTaskCreateExt(task6,
     6b8:	fe840593          	add	a1,s0,-24
     6bc:	00012023          	sw	zero,0(sp)
     6c0:	00000893          	li	a7,0
     6c4:	40000813          	li	a6,1024
     6c8:	000297b7          	lui	a5,0x29
     6cc:	94078793          	add	a5,a5,-1728 # 28940 <task6_stk>
     6d0:	00700713          	li	a4,7
     6d4:	00700693          	li	a3,7
     6d8:	0002a637          	lui	a2,0x2a
     6dc:	93c60613          	add	a2,a2,-1732 # 2993c <task6_stk+0xffc>
     6e0:	32800513          	li	a0,808
     6e4:	63d070ef          	jal	8520 <OSTaskCreateExt>
     6e8:	00050793          	mv	a5,a0
     6ec:	fef407a3          	sb	a5,-17(s0)
			TASK6_PRIORITY,
			task6_stk,
			TASK_STACKSIZE,
			NULL,
			0);
    if (OS_ERR_NONE != err) {
     6f0:	fef44783          	lbu	a5,-17(s0)
     6f4:	00078863          	beqz	a5,704 <main+0x1f8>
    	printf(" ***** OSTaskCreateExt ERROR ***** \n");
     6f8:	000237b7          	lui	a5,0x23
     6fc:	f3078513          	add	a0,a5,-208 # 22f30 <__flash_rodata_start+0x1a0>
     700:	2850b0ef          	jal	c184 <puts>
    }

#if (TASK7_PRIORITY > 0u)
	err = OSTaskCreateExt(task7,
     704:	fe840593          	add	a1,s0,-24
     708:	00012023          	sw	zero,0(sp)
     70c:	00000893          	li	a7,0
     710:	40000813          	li	a6,1024
     714:	0002a7b7          	lui	a5,0x2a
     718:	94078793          	add	a5,a5,-1728 # 29940 <task7_stk>
     71c:	00800713          	li	a4,8
     720:	00800693          	li	a3,8
     724:	0002b637          	lui	a2,0x2b
     728:	93c60613          	add	a2,a2,-1732 # 2a93c <task7_stk+0xffc>
     72c:	3b800513          	li	a0,952
     730:	5f1070ef          	jal	8520 <OSTaskCreateExt>
     734:	00050793          	mv	a5,a0
     738:	fef407a3          	sb	a5,-17(s0)
			TASK7_PRIORITY,
			task7_stk,
			TASK_STACKSIZE,
			NULL,
			0);
    if (OS_ERR_NONE != err) {
     73c:	fef44783          	lbu	a5,-17(s0)
     740:	00078863          	beqz	a5,750 <main+0x244>
    	printf(" ***** OSTaskCreateExt ERROR ***** \n");
     744:	000237b7          	lui	a5,0x23
     748:	f3078513          	add	a0,a5,-208 # 22f30 <__flash_rodata_start+0x1a0>
     74c:	2390b0ef          	jal	c184 <puts>
    }
#endif

#if (TASK8_PRIORITY > 0u)
	err = OSTaskCreateExt(task8,
     750:	fe840593          	add	a1,s0,-24
     754:	00012023          	sw	zero,0(sp)
     758:	00000893          	li	a7,0
     75c:	40000813          	li	a6,1024
     760:	0002b7b7          	lui	a5,0x2b
     764:	94078793          	add	a5,a5,-1728 # 2a940 <task8_stk>
     768:	00900713          	li	a4,9
     76c:	00900693          	li	a3,9
     770:	0002c637          	lui	a2,0x2c
     774:	93c60613          	add	a2,a2,-1732 # 2b93c <task8_stk+0xffc>
     778:	42000513          	li	a0,1056
     77c:	5a5070ef          	jal	8520 <OSTaskCreateExt>
     780:	00050793          	mv	a5,a0
     784:	fef407a3          	sb	a5,-17(s0)
			TASK8_PRIORITY,
			task8_stk,
			TASK_STACKSIZE,
			NULL,
			0);
    if (OS_ERR_NONE != err) {
     788:	fef44783          	lbu	a5,-17(s0)
     78c:	00078863          	beqz	a5,79c <main+0x290>
    	printf(" ***** OSTaskCreateExt ERROR ***** \n");
     790:	000237b7          	lui	a5,0x23
     794:	f3078513          	add	a0,a5,-208 # 22f30 <__flash_rodata_start+0x1a0>
     798:	1ed0b0ef          	jal	c184 <puts>
    }
#endif
#endif // MY_QUEUE_LIST_EN

    SetTaskName();
     79c:	cedff0ef          	jal	488 <SetTaskName>

	OSStart();
     7a0:	114010ef          	jal	18b4 <OSStart>
	return 0;
     7a4:	00000793          	li	a5,0
}
     7a8:	00078513          	mv	a0,a5
     7ac:	02c12083          	lw	ra,44(sp)
     7b0:	02812403          	lw	s0,40(sp)
     7b4:	03010113          	add	sp,sp,48
     7b8:	00008067          	ret

000007bc <_start>:
    .globl _start
    .type _start, @function
_start:
    /* assume that we are in machine mode on startup */
    /* setup trap to catch anything that goes wrong early in the boot process */
    la t0, trap_vector
     7bc:	00000297          	auipc	t0,0x0
     7c0:	86428293          	add	t0,t0,-1948 # 20 <__flash_exceptions_start>
    csrw mtvec, t0
     7c4:	30529073          	csrw	mtvec,t0

    /* disable all interrupt */
    li t0, 8
     7c8:	00800293          	li	t0,8
    csrc mstatus, t0
     7cc:	3002b073          	csrc	mstatus,t0
    csrw mie, zero
     7d0:	30401073          	csrw	mie,zero
    csrw mip, zero
     7d4:	34401073          	csrw	mip,zero

    .option push
    .option norelax
    la gp, __global_pointer$
     7d8:	00026197          	auipc	gp,0x26
     7dc:	bc418193          	add	gp,gp,-1084 # 2639c <__global_pointer$>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    la sp, __alt_stack_pointer
     7e0:	00049117          	auipc	sp,0x49
     7e4:	c0010113          	add	sp,sp,-1024 # 493e0 <__alt_data_end>
    /* Log that the BSS is about to be cleared. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_bss)
#endif /* ALT_LOG_ENABLE */

    la t1, __bss_start
     7e8:	00027317          	auipc	t1,0x27
     7ec:	fe030313          	add	t1,t1,-32 # 277c8 <g_mutex>
    la t2, __bss_end
     7f0:	0002e397          	auipc	t2,0x2e
     7f4:	9e438393          	add	t2,t2,-1564 # 2e1d4 <__alt_heap_start>
0:
    sw zero, (t1)
     7f8:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     7fc:	00430313          	add	t1,t1,4
    bltu t1, t2, 0b
     800:	fe736ce3          	bltu	t1,t2,7f8 <_start+0x3c>
/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD
    call alt_load
     804:	070000ef          	jal	874 <alt_load>
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_alt_main)
#endif /* ALT_LOG_ENABLE */

    /* Call the C entry point. It should never return. */
    call alt_main
     808:	0d8000ef          	jal	8e0 <alt_main>

0000080c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    j alt_after_alt_main
     80c:	0000006f          	j	80c <alt_after_alt_main>

00000810 <alt_load_section>:
     810:	fe010113          	add	sp,sp,-32
     814:	00812e23          	sw	s0,28(sp)
 */  

void alt_load (void)
{
  /* 
   * Copy the .rwdata section. 
     818:	02010413          	add	s0,sp,32
     81c:	fea42623          	sw	a0,-20(s0)
     820:	feb42423          	sw	a1,-24(s0)
     824:	fec42223          	sw	a2,-28(s0)
   */
     828:	fe842703          	lw	a4,-24(s0)
     82c:	fec42783          	lw	a5,-20(s0)
     830:	02f70a63          	beq	a4,a5,864 <alt_load_section+0x54>

  alt_load_section (&__flash_rwdata_start, 
     834:	0240006f          	j	858 <alt_load_section+0x48>
		               &__ram_rwdata_start,
		               &__ram_rwdata_end);
     838:	fec42703          	lw	a4,-20(s0)
     83c:	00470793          	add	a5,a4,4
     840:	fef42623          	sw	a5,-20(s0)
     844:	fe842783          	lw	a5,-24(s0)
     848:	00478693          	add	a3,a5,4
     84c:	fed42423          	sw	a3,-24(s0)
     850:	00072703          	lw	a4,0(a4)
     854:	00e7a023          	sw	a4,0(a5)
  alt_load_section (&__flash_rwdata_start, 
     858:	fe842703          	lw	a4,-24(s0)
     85c:	fe442783          	lw	a5,-28(s0)
     860:	fcf71ce3          	bne	a4,a5,838 <alt_load_section+0x28>

  /*
   * Copy the exception handler.
     864:	00000013          	nop
     868:	01c12403          	lw	s0,28(sp)
     86c:	02010113          	add	sp,sp,32
     870:	00008067          	ret

00000874 <alt_load>:
{
     874:	ff010113          	add	sp,sp,-16
     878:	00112623          	sw	ra,12(sp)
     87c:	00812423          	sw	s0,8(sp)
     880:	01010413          	add	s0,sp,16
  alt_load_section (&__flash_rwdata_start, 
     884:	83c18613          	add	a2,gp,-1988 # 25bd8 <__flash_rwdata_start>
     888:	000247b7          	lui	a5,0x24
     88c:	fe878593          	add	a1,a5,-24 # 23fe8 <jtag_uart>
     890:	83c18513          	add	a0,gp,-1988 # 25bd8 <__flash_rwdata_start>
     894:	f7dff0ef          	jal	810 <alt_load_section>
   */

  alt_load_section (&__flash_exceptions_start, 
     898:	2bc00613          	li	a2,700
     89c:	02000593          	li	a1,32
     8a0:	02000513          	li	a0,32
     8a4:	f6dff0ef          	jal	810 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     8a8:	000247b7          	lui	a5,0x24
     8ac:	fe878613          	add	a2,a5,-24 # 23fe8 <jtag_uart>
     8b0:	000237b7          	lui	a5,0x23
     8b4:	d9078593          	add	a1,a5,-624 # 22d90 <__flash_rodata_start>
     8b8:	000237b7          	lui	a5,0x23
     8bc:	d9078513          	add	a0,a5,-624 # 22d90 <__flash_rodata_start>
     8c0:	f51ff0ef          	jal	810 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     8c4:	6d40a0ef          	jal	af98 <alt_dcache_flush_all>
  alt_icache_flush_all();
     8c8:	0fd0a0ef          	jal	b1c4 <alt_icache_flush_all>
}
     8cc:	00000013          	nop
     8d0:	00c12083          	lw	ra,12(sp)
     8d4:	00812403          	lw	s0,8(sp)
     8d8:	01010113          	add	sp,sp,16
     8dc:	00008067          	ret

000008e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     8e0:	fe010113          	add	sp,sp,-32
     8e4:	00112e23          	sw	ra,28(sp)
     8e8:	00812c23          	sw	s0,24(sp)
     8ec:	02010413          	add	s0,sp,32
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     8f0:	00000513          	li	a0,0
     8f4:	58c090ef          	jal	9e80 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     8f8:	489000ef          	jal	1580 <OSInit>
     8fc:	00100513          	li	a0,1
     900:	3ed060ef          	jal	74ec <OSSemCreate>
     904:	00050713          	mv	a4,a0
     908:	000277b7          	lui	a5,0x27
     90c:	7ee7a423          	sw	a4,2024(a5) # 277e8 <alt_envsem>
     910:	00100513          	li	a0,1
     914:	3d9060ef          	jal	74ec <OSSemCreate>
     918:	00050713          	mv	a4,a0
     91c:	000277b7          	lui	a5,0x27
     920:	7ee7a623          	sw	a4,2028(a5) # 277ec <alt_heapsem>
     924:	000287b7          	lui	a5,0x28
     928:	84078793          	add	a5,a5,-1984 # 27840 <alt_fd_list_lock>
     92c:	fef42423          	sw	a5,-24(s0)
     930:	00100793          	li	a5,1
     934:	fef41323          	sh	a5,-26(s0)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
     938:	fe645783          	lhu	a5,-26(s0)
     93c:	00078513          	mv	a0,a5
     940:	3ad060ef          	jal	74ec <OSSemCreate>
     944:	00050713          	mv	a4,a0
     948:	fe842783          	lw	a5,-24(s0)
     94c:	00e7a023          	sw	a4,0(a5)
  return *sem ? 0 : -1;
     950:	00000013          	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     954:	564090ef          	jal	9eb8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     958:	000237b7          	lui	a5,0x23
     95c:	f5478613          	add	a2,a5,-172 # 22f54 <__flash_rodata_start+0x1c4>
     960:	000237b7          	lui	a5,0x23
     964:	f5478593          	add	a1,a5,-172 # 22f54 <__flash_rodata_start+0x1c4>
     968:	000237b7          	lui	a5,0x23
     96c:	f5478513          	add	a0,a5,-172 # 22f54 <__flash_rodata_start+0x1c4>
     970:	31d0a0ef          	jal	b48c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     974:	7900a0ef          	jal	b104 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     978:	0000b7b7          	lui	a5,0xb
     97c:	16478513          	add	a0,a5,356 # b164 <_do_dtors>
     980:	3840b0ef          	jal	bd04 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     984:	000277b7          	lui	a5,0x27
     988:	7dc7a703          	lw	a4,2012(a5) # 277dc <alt_argc>
     98c:	000277b7          	lui	a5,0x27
     990:	7e07a683          	lw	a3,2016(a5) # 277e0 <alt_argv>
     994:	000277b7          	lui	a5,0x27
     998:	7e47a783          	lw	a5,2020(a5) # 277e4 <alt_envp>
     99c:	00078613          	mv	a2,a5
     9a0:	00068593          	mv	a1,a3
     9a4:	00070513          	mv	a0,a4
     9a8:	b65ff0ef          	jal	50c <main>
     9ac:	fea42623          	sw	a0,-20(s0)
  close(STDOUT_FILENO);
     9b0:	00100513          	li	a0,1
     9b4:	2150b0ef          	jal	c3c8 <close>
  exit (result);
     9b8:	fec42503          	lw	a0,-20(s0)
     9bc:	35c0b0ef          	jal	bd18 <exit>

000009c0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
     9c0:	ef010113          	add	sp,sp,-272
     9c4:	10112623          	sw	ra,268(sp)
     9c8:	10812423          	sw	s0,264(sp)
     9cc:	11010413          	add	s0,sp,272
     9d0:	eea42e23          	sw	a0,-260(s0)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
     9d4:	f1440793          	add	a5,s0,-236
     9d8:	00078593          	mv	a1,a5
     9dc:	0ff00513          	li	a0,255
     9e0:	2ad080ef          	jal	948c <OSTaskQuery>
     9e4:	00050793          	mv	a5,a0
     9e8:	f0f405a3          	sb	a5,-245(s0)
  if (err != OS_ERR_NONE)
     9ec:	f0b44783          	lbu	a5,-245(s0)
     9f0:	08079663          	bnez	a5,a7c <__env_lock+0xbc>
    return;

  id = tcb.OSTCBPrio;
     9f4:	f4e44783          	lbu	a5,-178(s0)
     9f8:	fef42623          	sw	a5,-20(s0)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
     9fc:	000277b7          	lui	a5,0x27
     a00:	7e87a783          	lw	a5,2024(a5) # 277e8 <alt_envsem>
     a04:	f0c40713          	add	a4,s0,-244
     a08:	00070593          	mv	a1,a4
     a0c:	00078513          	mv	a0,a5
     a10:	28c070ef          	jal	7c9c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
     a14:	f1144783          	lbu	a5,-239(s0)
     a18:	02078663          	beqz	a5,a44 <__env_lock+0x84>
     a1c:	000267b7          	lui	a5,0x26
     a20:	b9c7a783          	lw	a5,-1124(a5) # 25b9c <lockid>
     a24:	fec42703          	lw	a4,-20(s0)
     a28:	00f71e63          	bne	a4,a5,a44 <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
     a2c:	0002c7b7          	lui	a5,0x2c
     a30:	9c07a783          	lw	a5,-1600(a5) # 2b9c0 <locks>
     a34:	00178713          	add	a4,a5,1
     a38:	0002c7b7          	lui	a5,0x2c
     a3c:	9ce7a023          	sw	a4,-1600(a5) # 2b9c0 <locks>
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
     a40:	0400006f          	j	a80 <__env_lock+0xc0>
    OSSemPend( alt_envsem, 0, &err );
     a44:	000277b7          	lui	a5,0x27
     a48:	7e87a783          	lw	a5,2024(a5) # 277e8 <alt_envsem>
     a4c:	f0b40713          	add	a4,s0,-245
     a50:	00070613          	mv	a2,a4
     a54:	00000593          	li	a1,0
     a58:	00078513          	mv	a0,a5
     a5c:	5b1060ef          	jal	780c <OSSemPend>
    locks  = 1;
     a60:	0002c7b7          	lui	a5,0x2c
     a64:	00100713          	li	a4,1
     a68:	9ce7a023          	sw	a4,-1600(a5) # 2b9c0 <locks>
    lockid = id;
     a6c:	000267b7          	lui	a5,0x26
     a70:	fec42703          	lw	a4,-20(s0)
     a74:	b8e7ae23          	sw	a4,-1124(a5) # 25b9c <lockid>
  return;
     a78:	0080006f          	j	a80 <__env_lock+0xc0>
    return;
     a7c:	00000013          	nop
}
     a80:	10c12083          	lw	ra,268(sp)
     a84:	10812403          	lw	s0,264(sp)
     a88:	11010113          	add	sp,sp,272
     a8c:	00008067          	ret

00000a90 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
     a90:	fe010113          	add	sp,sp,-32
     a94:	00112e23          	sw	ra,28(sp)
     a98:	00812c23          	sw	s0,24(sp)
     a9c:	02010413          	add	s0,sp,32
     aa0:	fea42623          	sw	a0,-20(s0)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
     aa4:	0002c7b7          	lui	a5,0x2c
     aa8:	9c07a783          	lw	a5,-1600(a5) # 2b9c0 <locks>
     aac:	04078263          	beqz	a5,af0 <__env_unlock+0x60>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
     ab0:	0002c7b7          	lui	a5,0x2c
     ab4:	9c07a783          	lw	a5,-1600(a5) # 2b9c0 <locks>
     ab8:	fff78713          	add	a4,a5,-1
     abc:	0002c7b7          	lui	a5,0x2c
     ac0:	9ce7a023          	sw	a4,-1600(a5) # 2b9c0 <locks>
     ac4:	0002c7b7          	lui	a5,0x2c
     ac8:	9c07a783          	lw	a5,-1600(a5) # 2b9c0 <locks>
     acc:	02079463          	bnez	a5,af4 <__env_unlock+0x64>
  {
    lockid = -1;
     ad0:	000267b7          	lui	a5,0x26
     ad4:	fff00713          	li	a4,-1
     ad8:	b8e7ae23          	sw	a4,-1124(a5) # 25b9c <lockid>
    OSSemPost( alt_envsem );
     adc:	000277b7          	lui	a5,0x27
     ae0:	7e87a783          	lw	a5,2024(a5) # 277e8 <alt_envsem>
     ae4:	00078513          	mv	a0,a5
     ae8:	09c070ef          	jal	7b84 <OSSemPost>
     aec:	0080006f          	j	af4 <__env_unlock+0x64>
    return;
     af0:	00000013          	nop
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
     af4:	01c12083          	lw	ra,28(sp)
     af8:	01812403          	lw	s0,24(sp)
     afc:	02010113          	add	sp,sp,32
     b00:	00008067          	ret

00000b04 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
     b04:	ee010113          	add	sp,sp,-288
     b08:	10112e23          	sw	ra,284(sp)
     b0c:	10812c23          	sw	s0,280(sp)
     b10:	12010413          	add	s0,sp,288
     b14:	eea42623          	sw	a0,-276(s0)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     b18:	fe042623          	sw	zero,-20(s0)
#endif  
  
  if (OSRunning != OS_TRUE)
     b1c:	000287b7          	lui	a5,0x28
     b20:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
     b24:	00100793          	li	a5,1
     b28:	0ef71a63          	bne	a4,a5,c1c <__malloc_lock+0x118>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
     b2c:	f0440793          	add	a5,s0,-252
     b30:	00078593          	mv	a1,a5
     b34:	0ff00513          	li	a0,255
     b38:	155080ef          	jal	948c <OSTaskQuery>
     b3c:	00050793          	mv	a5,a0
     b40:	eef40da3          	sb	a5,-261(s0)
  if (err != OS_ERR_NONE)
     b44:	efb44783          	lbu	a5,-261(s0)
     b48:	0c079e63          	bnez	a5,c24 <__malloc_lock+0x120>
    return;

  id = tcb.OSTCBPrio;
     b4c:	f3e44783          	lbu	a5,-194(s0)
     b50:	fef42423          	sw	a5,-24(s0)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
     b54:	000277b7          	lui	a5,0x27
     b58:	7ec7a783          	lw	a5,2028(a5) # 277ec <alt_heapsem>
     b5c:	efc40713          	add	a4,s0,-260
     b60:	00070593          	mv	a1,a4
     b64:	00078513          	mv	a0,a5
     b68:	134070ef          	jal	7c9c <OSSemQuery>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
     b6c:	00800793          	li	a5,8
     b70:	3007b7f3          	csrrc	a5,mstatus,a5
     b74:	fef42223          	sw	a5,-28(s0)
    return context;
     b78:	fe442783          	lw	a5,-28(s0)
  
  OS_ENTER_CRITICAL();
     b7c:	fef42623          	sw	a5,-20(s0)

  if( !semdata.OSCnt && id == lockid ) 
     b80:	efc45783          	lhu	a5,-260(s0)
     b84:	04079463          	bnez	a5,bcc <__malloc_lock+0xc8>
     b88:	000267b7          	lui	a5,0x26
     b8c:	ba07a783          	lw	a5,-1120(a5) # 25ba0 <lockid>
     b90:	fe842703          	lw	a4,-24(s0)
     b94:	02f71c63          	bne	a4,a5,bcc <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
     b98:	0002c7b7          	lui	a5,0x2c
     b9c:	9c47a783          	lw	a5,-1596(a5) # 2b9c4 <locks>
     ba0:	00178713          	add	a4,a5,1
     ba4:	0002c7b7          	lui	a5,0x2c
     ba8:	9ce7a223          	sw	a4,-1596(a5) # 2b9c4 <locks>
     bac:	fec42783          	lw	a5,-20(s0)
     bb0:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
     bb4:	fe042783          	lw	a5,-32(s0)
     bb8:	0087f793          	and	a5,a5,8
     bbc:	3007a073          	csrs	mstatus,a5
}
     bc0:	00000013          	nop
    OS_EXIT_CRITICAL();
     bc4:	00000013          	nop
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
     bc8:	0600006f          	j	c28 <__malloc_lock+0x124>
     bcc:	fec42783          	lw	a5,-20(s0)
     bd0:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
     bd4:	fdc42783          	lw	a5,-36(s0)
     bd8:	0087f793          	and	a5,a5,8
     bdc:	3007a073          	csrs	mstatus,a5
}
     be0:	00000013          	nop
    OSSemPend( alt_heapsem, 0, &err );
     be4:	000277b7          	lui	a5,0x27
     be8:	7ec7a783          	lw	a5,2028(a5) # 277ec <alt_heapsem>
     bec:	efb40713          	add	a4,s0,-261
     bf0:	00070613          	mv	a2,a4
     bf4:	00000593          	li	a1,0
     bf8:	00078513          	mv	a0,a5
     bfc:	411060ef          	jal	780c <OSSemPend>
    locks  = 1;
     c00:	0002c7b7          	lui	a5,0x2c
     c04:	00100713          	li	a4,1
     c08:	9ce7a223          	sw	a4,-1596(a5) # 2b9c4 <locks>
    lockid = id;
     c0c:	000267b7          	lui	a5,0x26
     c10:	fe842703          	lw	a4,-24(s0)
     c14:	bae7a023          	sw	a4,-1120(a5) # 25ba0 <lockid>
  return;
     c18:	0100006f          	j	c28 <__malloc_lock+0x124>
      return;
     c1c:	00000013          	nop
     c20:	0080006f          	j	c28 <__malloc_lock+0x124>
    return;
     c24:	00000013          	nop
}
     c28:	11c12083          	lw	ra,284(sp)
     c2c:	11812403          	lw	s0,280(sp)
     c30:	12010113          	add	sp,sp,288
     c34:	00008067          	ret

00000c38 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
     c38:	fc010113          	add	sp,sp,-64
     c3c:	02112e23          	sw	ra,60(sp)
     c40:	02812c23          	sw	s0,56(sp)
     c44:	04010413          	add	s0,sp,64
     c48:	fca42623          	sw	a0,-52(s0)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     c4c:	fe042623          	sw	zero,-20(s0)
#endif 

  if (OSRunning != OS_TRUE)
     c50:	000287b7          	lui	a5,0x28
     c54:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
     c58:	00100793          	li	a5,1
     c5c:	0af71863          	bne	a4,a5,d0c <__malloc_unlock+0xd4>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
     c60:	00800793          	li	a5,8
     c64:	3007b7f3          	csrrc	a5,mstatus,a5
     c68:	fef42423          	sw	a5,-24(s0)
    return context;
     c6c:	fe842783          	lw	a5,-24(s0)
      return;

  OS_ENTER_CRITICAL();
     c70:	fef42623          	sw	a5,-20(s0)
  if (locks == 0)
     c74:	0002c7b7          	lui	a5,0x2c
     c78:	9c47a783          	lw	a5,-1596(a5) # 2b9c4 <locks>
     c7c:	02079063          	bnez	a5,c9c <__malloc_unlock+0x64>
     c80:	fec42783          	lw	a5,-20(s0)
     c84:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
     c88:	fe442783          	lw	a5,-28(s0)
     c8c:	0087f793          	and	a5,a5,8
     c90:	3007a073          	csrs	mstatus,a5
}
     c94:	00000013          	nop
  {
      OS_EXIT_CRITICAL();
      return;
     c98:	0780006f          	j	d10 <__malloc_unlock+0xd8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
     c9c:	0002c7b7          	lui	a5,0x2c
     ca0:	9c47a783          	lw	a5,-1596(a5) # 2b9c4 <locks>
     ca4:	fff78713          	add	a4,a5,-1
     ca8:	0002c7b7          	lui	a5,0x2c
     cac:	9ce7a223          	sw	a4,-1596(a5) # 2b9c4 <locks>
     cb0:	0002c7b7          	lui	a5,0x2c
     cb4:	9c47a783          	lw	a5,-1596(a5) # 2b9c4 <locks>
     cb8:	02079e63          	bnez	a5,cf4 <__malloc_unlock+0xbc>
  {
    lockid = -1;
     cbc:	000267b7          	lui	a5,0x26
     cc0:	fff00713          	li	a4,-1
     cc4:	bae7a023          	sw	a4,-1120(a5) # 25ba0 <lockid>
     cc8:	fec42783          	lw	a5,-20(s0)
     ccc:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
     cd0:	fe042783          	lw	a5,-32(s0)
     cd4:	0087f793          	and	a5,a5,8
     cd8:	3007a073          	csrs	mstatus,a5
}
     cdc:	00000013          	nop
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
     ce0:	000277b7          	lui	a5,0x27
     ce4:	7ec7a783          	lw	a5,2028(a5) # 277ec <alt_heapsem>
     ce8:	00078513          	mv	a0,a5
     cec:	699060ef          	jal	7b84 <OSSemPost>
     cf0:	0200006f          	j	d10 <__malloc_unlock+0xd8>
     cf4:	fec42783          	lw	a5,-20(s0)
     cf8:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
     cfc:	fdc42783          	lw	a5,-36(s0)
     d00:	0087f793          	and	a5,a5,8
     d04:	3007a073          	csrs	mstatus,a5
}
     d08:	0080006f          	j	d10 <__malloc_unlock+0xd8>
      return;
     d0c:	00000013          	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
     d10:	03c12083          	lw	ra,60(sp)
     d14:	03812403          	lw	s0,56(sp)
     d18:	04010113          	add	sp,sp,64
     d1c:	00008067          	ret

00000d20 <OSEventNameGet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
INT8U  OSEventNameGet (OS_EVENT   *pevent,
                       INT8U     **pname,
                       INT8U      *perr)
{
     d20:	fd010113          	add	sp,sp,-48
     d24:	02112623          	sw	ra,44(sp)
     d28:	02812423          	sw	s0,40(sp)
     d2c:	03010413          	add	s0,sp,48
     d30:	fca42e23          	sw	a0,-36(s0)
     d34:	fcb42c23          	sw	a1,-40(s0)
     d38:	fcc42a23          	sw	a2,-44(s0)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
     d3c:	fe042623          	sw	zero,-20(s0)
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
     d40:	fdc42783          	lw	a5,-36(s0)
     d44:	00079c63          	bnez	a5,d5c <OSEventNameGet+0x3c>
        *perr = OS_ERR_PEVENT_NULL;
     d48:	fd442783          	lw	a5,-44(s0)
     d4c:	00400713          	li	a4,4
     d50:	00e78023          	sb	a4,0(a5)
        return (0u);
     d54:	00000793          	li	a5,0
     d58:	0cc0006f          	j	e24 <OSEventNameGet+0x104>
    }
    if (pname == (INT8U **)0) {                   /* Is 'pname' a NULL pointer?                         */
     d5c:	fd842783          	lw	a5,-40(s0)
     d60:	00079c63          	bnez	a5,d78 <OSEventNameGet+0x58>
        *perr = OS_ERR_PNAME_NULL;
     d64:	fd442783          	lw	a5,-44(s0)
     d68:	00c00713          	li	a4,12
     d6c:	00e78023          	sb	a4,0(a5)
        return (0u);
     d70:	00000793          	li	a5,0
     d74:	0b00006f          	j	e24 <OSEventNameGet+0x104>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
     d78:	000287b7          	lui	a5,0x28
     d7c:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
     d80:	00078c63          	beqz	a5,d98 <OSEventNameGet+0x78>
        *perr  = OS_ERR_NAME_GET_ISR;
     d84:	fd442783          	lw	a5,-44(s0)
     d88:	01100713          	li	a4,17
     d8c:	00e78023          	sb	a4,0(a5)
        return (0u);
     d90:	00000793          	li	a5,0
     d94:	0900006f          	j	e24 <OSEventNameGet+0x104>
    }
    switch (pevent->OSEventType) {
     d98:	fdc42783          	lw	a5,-36(s0)
     d9c:	0007c783          	lbu	a5,0(a5)
     da0:	fff78713          	add	a4,a5,-1
     da4:	00300793          	li	a5,3
     da8:	00e7fc63          	bgeu	a5,a4,dc0 <OSEventNameGet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     dac:	fd442783          	lw	a5,-44(s0)
     db0:	00100713          	li	a4,1
     db4:	00e78023          	sb	a4,0(a5)
             return (0u);
     db8:	00000793          	li	a5,0
     dbc:	0680006f          	j	e24 <OSEventNameGet+0x104>
             break;
     dc0:	00000013          	nop
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
     dc4:	00800793          	li	a5,8
     dc8:	3007b7f3          	csrrc	a5,mstatus,a5
     dcc:	fef42023          	sw	a5,-32(s0)
    return context;
     dd0:	fe042783          	lw	a5,-32(s0)
    }
    OS_ENTER_CRITICAL();
     dd4:	fef42623          	sw	a5,-20(s0)
    *pname = pevent->OSEventName;
     dd8:	fdc42783          	lw	a5,-36(s0)
     ddc:	0107a703          	lw	a4,16(a5)
     de0:	fd842783          	lw	a5,-40(s0)
     de4:	00e7a023          	sw	a4,0(a5)
    len    = OS_StrLen(*pname);
     de8:	fd842783          	lw	a5,-40(s0)
     dec:	0007a783          	lw	a5,0(a5)
     df0:	00078513          	mv	a0,a5
     df4:	301010ef          	jal	28f4 <OS_StrLen>
     df8:	00050793          	mv	a5,a0
     dfc:	fef405a3          	sb	a5,-21(s0)
     e00:	fec42783          	lw	a5,-20(s0)
     e04:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
     e08:	fe442783          	lw	a5,-28(s0)
     e0c:	0087f793          	and	a5,a5,8
     e10:	3007a073          	csrs	mstatus,a5
}
     e14:	00000013          	nop
    OS_EXIT_CRITICAL();
    *perr  = OS_ERR_NONE;
     e18:	fd442783          	lw	a5,-44(s0)
     e1c:	00078023          	sb	zero,0(a5)
    return (len);
     e20:	feb44783          	lbu	a5,-21(s0)
}
     e24:	00078513          	mv	a0,a5
     e28:	02c12083          	lw	ra,44(sp)
     e2c:	02812403          	lw	s0,40(sp)
     e30:	03010113          	add	sp,sp,48
     e34:	00008067          	ret

00000e38 <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
     e38:	fd010113          	add	sp,sp,-48
     e3c:	02812623          	sw	s0,44(sp)
     e40:	03010413          	add	s0,sp,48
     e44:	fca42e23          	sw	a0,-36(s0)
     e48:	fcb42c23          	sw	a1,-40(s0)
     e4c:	fcc42a23          	sw	a2,-44(s0)
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
     e50:	fe042623          	sw	zero,-20(s0)
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
     e54:	fdc42783          	lw	a5,-36(s0)
     e58:	00079a63          	bnez	a5,e6c <OSEventNameSet+0x34>
        *perr = OS_ERR_PEVENT_NULL;
     e5c:	fd442783          	lw	a5,-44(s0)
     e60:	00400713          	li	a4,4
     e64:	00e78023          	sb	a4,0(a5)
        return;
     e68:	0a00006f          	j	f08 <OSEventNameSet+0xd0>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
     e6c:	fd842783          	lw	a5,-40(s0)
     e70:	00079a63          	bnez	a5,e84 <OSEventNameSet+0x4c>
        *perr = OS_ERR_PNAME_NULL;
     e74:	fd442783          	lw	a5,-44(s0)
     e78:	00c00713          	li	a4,12
     e7c:	00e78023          	sb	a4,0(a5)
        return;
     e80:	0880006f          	j	f08 <OSEventNameSet+0xd0>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
     e84:	000287b7          	lui	a5,0x28
     e88:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
     e8c:	00078a63          	beqz	a5,ea0 <OSEventNameSet+0x68>
        *perr = OS_ERR_NAME_SET_ISR;
     e90:	fd442783          	lw	a5,-44(s0)
     e94:	01200713          	li	a4,18
     e98:	00e78023          	sb	a4,0(a5)
        return;
     e9c:	06c0006f          	j	f08 <OSEventNameSet+0xd0>
    }
    switch (pevent->OSEventType) {
     ea0:	fdc42783          	lw	a5,-36(s0)
     ea4:	0007c783          	lbu	a5,0(a5)
     ea8:	fff78713          	add	a4,a5,-1
     eac:	00300793          	li	a5,3
     eb0:	00e7fa63          	bgeu	a5,a4,ec4 <OSEventNameSet+0x8c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     eb4:	fd442783          	lw	a5,-44(s0)
     eb8:	00100713          	li	a4,1
     ebc:	00e78023          	sb	a4,0(a5)
             return;
     ec0:	0480006f          	j	f08 <OSEventNameSet+0xd0>
             break;
     ec4:	00000013          	nop
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
     ec8:	00800793          	li	a5,8
     ecc:	3007b7f3          	csrrc	a5,mstatus,a5
     ed0:	fef42223          	sw	a5,-28(s0)
    return context;
     ed4:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
     ed8:	fef42623          	sw	a5,-20(s0)
    pevent->OSEventName = pname;
     edc:	fdc42783          	lw	a5,-36(s0)
     ee0:	fd842703          	lw	a4,-40(s0)
     ee4:	00e7a823          	sw	a4,16(a5)
     ee8:	fec42783          	lw	a5,-20(s0)
     eec:	fef42423          	sw	a5,-24(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
     ef0:	fe842783          	lw	a5,-24(s0)
     ef4:	0087f793          	and	a5,a5,8
     ef8:	3007a073          	csrs	mstatus,a5
}
     efc:	00000013          	nop
    OS_EXIT_CRITICAL();
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
     f00:	fd442783          	lw	a5,-44(s0)
     f04:	00078023          	sb	zero,0(a5)
}
     f08:	02c12403          	lw	s0,44(sp)
     f0c:	03010113          	add	sp,sp,48
     f10:	00008067          	ret

00000f14 <OSEventPendMulti>:
INT16U  OSEventPendMulti (OS_EVENT  **pevents_pend,
                          OS_EVENT  **pevents_rdy,
                          void      **pmsgs_rdy,
                          INT32U      timeout,
                          INT8U      *perr)
{
     f14:	f9010113          	add	sp,sp,-112
     f18:	06112623          	sw	ra,108(sp)
     f1c:	06812423          	sw	s0,104(sp)
     f20:	07010413          	add	s0,sp,112
     f24:	faa42623          	sw	a0,-84(s0)
     f28:	fab42423          	sw	a1,-88(s0)
     f2c:	fac42223          	sw	a2,-92(s0)
     f30:	fad42023          	sw	a3,-96(s0)
     f34:	f8e42e23          	sw	a4,-100(s0)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3u)                          /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0u;
     f38:	fc042e23          	sw	zero,-36(s0)
        return (0u);
    }
#endif

#if (OS_ARG_CHK_EN > 0u)
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
     f3c:	fac42783          	lw	a5,-84(s0)
     f40:	00079c63          	bnez	a5,f58 <OSEventPendMulti+0x44>
       *perr =  OS_ERR_PEVENT_NULL;
     f44:	f9c42783          	lw	a5,-100(s0)
     f48:	00400713          	li	a4,4
     f4c:	00e78023          	sb	a4,0(a5)
        return (0u);
     f50:	00000793          	li	a5,0
     f54:	6180006f          	j	156c <OSEventPendMulti+0x658>
    }
    if (*pevents_pend  == (OS_EVENT *)0) {              /* Validate 'pevents_pend'                     */
     f58:	fac42783          	lw	a5,-84(s0)
     f5c:	0007a783          	lw	a5,0(a5)
     f60:	00079c63          	bnez	a5,f78 <OSEventPendMulti+0x64>
       *perr =  OS_ERR_PEVENT_NULL;
     f64:	f9c42783          	lw	a5,-100(s0)
     f68:	00400713          	li	a4,4
     f6c:	00e78023          	sb	a4,0(a5)
        return (0u);
     f70:	00000793          	li	a5,0
     f74:	5f80006f          	j	156c <OSEventPendMulti+0x658>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
     f78:	fa842783          	lw	a5,-88(s0)
     f7c:	00079c63          	bnez	a5,f94 <OSEventPendMulti+0x80>
       *perr =  OS_ERR_PEVENT_NULL;
     f80:	f9c42783          	lw	a5,-100(s0)
     f84:	00400713          	li	a4,4
     f88:	00e78023          	sb	a4,0(a5)
        return (0u);
     f8c:	00000793          	li	a5,0
     f90:	5dc0006f          	j	156c <OSEventPendMulti+0x658>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
     f94:	fa442783          	lw	a5,-92(s0)
     f98:	00079c63          	bnez	a5,fb0 <OSEventPendMulti+0x9c>
       *perr =  OS_ERR_PEVENT_NULL;
     f9c:	f9c42783          	lw	a5,-100(s0)
     fa0:	00400713          	li	a4,4
     fa4:	00e78023          	sb	a4,0(a5)
        return (0u);
     fa8:	00000793          	li	a5,0
     fac:	5c00006f          	j	156c <OSEventPendMulti+0x658>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
     fb0:	fa842783          	lw	a5,-88(s0)
     fb4:	0007a023          	sw	zero,0(a5)

    pevents     =  pevents_pend;
     fb8:	fac42783          	lw	a5,-84(s0)
     fbc:	fef42623          	sw	a5,-20(s0)
    pevent      = *pevents;
     fc0:	fec42783          	lw	a5,-20(s0)
     fc4:	0007a783          	lw	a5,0(a5)
     fc8:	fef42423          	sw	a5,-24(s0)
    while  (pevent != (OS_EVENT *)0) {
     fcc:	06c0006f          	j	1038 <OSEventPendMulti+0x124>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
     fd0:	fe842783          	lw	a5,-24(s0)
     fd4:	0007c783          	lbu	a5,0(a5)
     fd8:	00300713          	li	a4,3
     fdc:	02e78863          	beq	a5,a4,100c <OSEventPendMulti+0xf8>
     fe0:	00300713          	li	a4,3
     fe4:	00f74a63          	blt	a4,a5,ff8 <OSEventPendMulti+0xe4>
     fe8:	00100713          	li	a4,1
     fec:	02e78463          	beq	a5,a4,1014 <OSEventPendMulti+0x100>
     ff0:	00200713          	li	a4,2
     ff4:	02e78463          	beq	a5,a4,101c <OSEventPendMulti+0x108>
#endif

            case OS_EVENT_TYPE_MUTEX:
            case OS_EVENT_TYPE_FLAG:
            default:
                *perr = OS_ERR_EVENT_TYPE;
     ff8:	f9c42783          	lw	a5,-100(s0)
     ffc:	00100713          	li	a4,1
    1000:	00e78023          	sb	a4,0(a5)
                 return (0u);
    1004:	00000793          	li	a5,0
    1008:	5640006f          	j	156c <OSEventPendMulti+0x658>
                 break;
    100c:	00000013          	nop
    1010:	0100006f          	j	1020 <OSEventPendMulti+0x10c>
                 break;
    1014:	00000013          	nop
    1018:	0080006f          	j	1020 <OSEventPendMulti+0x10c>
                 break;
    101c:	00000013          	nop
        }
        pevents++;
    1020:	fec42783          	lw	a5,-20(s0)
    1024:	00478793          	add	a5,a5,4
    1028:	fef42623          	sw	a5,-20(s0)
        pevent = *pevents;
    102c:	fec42783          	lw	a5,-20(s0)
    1030:	0007a783          	lw	a5,0(a5)
    1034:	fef42423          	sw	a5,-24(s0)
    while  (pevent != (OS_EVENT *)0) {
    1038:	fe842783          	lw	a5,-24(s0)
    103c:	f8079ae3          	bnez	a5,fd0 <OSEventPendMulti+0xbc>
    }

    if (OSIntNesting  > 0u) {                           /* See if called from ISR ...                  */
    1040:	000287b7          	lui	a5,0x28
    1044:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    1048:	00078c63          	beqz	a5,1060 <OSEventPendMulti+0x14c>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    104c:	f9c42783          	lw	a5,-100(s0)
    1050:	00200713          	li	a4,2
    1054:	00e78023          	sb	a4,0(a5)
        return (0u);
    1058:	00000793          	li	a5,0
    105c:	5100006f          	j	156c <OSEventPendMulti+0x658>
    }
    if (OSLockNesting > 0u) {                           /* See if called with scheduler locked ...     */
    1060:	000287b7          	lui	a5,0x28
    1064:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    1068:	00078c63          	beqz	a5,1080 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    106c:	f9c42783          	lw	a5,-100(s0)
    1070:	00d00713          	li	a4,13
    1074:	00e78023          	sb	a4,0(a5)
        return (0u);
    1078:	00000793          	li	a5,0
    107c:	4f00006f          	j	156c <OSEventPendMulti+0x658>
    }

    events_rdy     =  OS_FALSE;
    1080:	fe0403a3          	sb	zero,-25(s0)
    events_rdy_nbr =  0u;
    1084:	fe041223          	sh	zero,-28(s0)
    events_stat    =  OS_STAT_RDY;
    1088:	fe0401a3          	sb	zero,-29(s0)
    pevents        =  pevents_pend;
    108c:	fac42783          	lw	a5,-84(s0)
    1090:	fef42623          	sw	a5,-20(s0)
    pevent         = *pevents;
    1094:	fec42783          	lw	a5,-20(s0)
    1098:	0007a783          	lw	a5,0(a5)
    109c:	fef42423          	sw	a5,-24(s0)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    10a0:	00800793          	li	a5,8
    10a4:	3007b7f3          	csrrc	a5,mstatus,a5
    10a8:	fcf42a23          	sw	a5,-44(s0)
    return context;
    10ac:	fd442783          	lw	a5,-44(s0)
    OS_ENTER_CRITICAL();
    10b0:	fcf42e23          	sw	a5,-36(s0)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    10b4:	2140006f          	j	12c8 <OSEventPendMulti+0x3b4>
        switch (pevent->OSEventType) {
    10b8:	fe842783          	lw	a5,-24(s0)
    10bc:	0007c783          	lbu	a5,0(a5)
    10c0:	00300713          	li	a4,3
    10c4:	02e78063          	beq	a5,a4,10e4 <OSEventPendMulti+0x1d0>
    10c8:	00300713          	li	a4,3
    10cc:	1af74863          	blt	a4,a5,127c <OSEventPendMulti+0x368>
    10d0:	00100713          	li	a4,1
    10d4:	08e78263          	beq	a5,a4,1158 <OSEventPendMulti+0x244>
    10d8:	00200713          	li	a4,2
    10dc:	0ee78263          	beq	a5,a4,11c0 <OSEventPendMulti+0x2ac>
    10e0:	19c0006f          	j	127c <OSEventPendMulti+0x368>
#if (OS_SEM_EN > 0u)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0u) {         /* If semaphore count > 0, resource available; */
    10e4:	fe842783          	lw	a5,-24(s0)
    10e8:	0087d783          	lhu	a5,8(a5)
    10ec:	04078e63          	beqz	a5,1148 <OSEventPendMulti+0x234>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    10f0:	fe842783          	lw	a5,-24(s0)
    10f4:	0087d783          	lhu	a5,8(a5)
    10f8:	fff78793          	add	a5,a5,-1
    10fc:	01079713          	sll	a4,a5,0x10
    1100:	01075713          	srl	a4,a4,0x10
    1104:	fe842783          	lw	a5,-24(s0)
    1108:	00e79423          	sh	a4,8(a5)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    110c:	fa842783          	lw	a5,-88(s0)
    1110:	00478713          	add	a4,a5,4
    1114:	fae42423          	sw	a4,-88(s0)
    1118:	fe842703          	lw	a4,-24(s0)
    111c:	00e7a023          	sw	a4,0(a5)
                      events_rdy   =  OS_TRUE;
    1120:	00100793          	li	a5,1
    1124:	fef403a3          	sb	a5,-25(s0)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    1128:	fa442783          	lw	a5,-92(s0)
    112c:	00478713          	add	a4,a5,4
    1130:	fae42223          	sw	a4,-92(s0)
    1134:	0007a023          	sw	zero,0(a5)
                      events_rdy_nbr++;
    1138:	fe445783          	lhu	a5,-28(s0)
    113c:	00178793          	add	a5,a5,1
    1140:	fef41223          	sh	a5,-28(s0)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    1144:	16c0006f          	j	12b0 <OSEventPendMulti+0x39c>
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    1148:	fe344783          	lbu	a5,-29(s0)
    114c:	0017e793          	or	a5,a5,1
    1150:	fef401a3          	sb	a5,-29(s0)
                 break;
    1154:	15c0006f          	j	12b0 <OSEventPendMulti+0x39c>
#endif

#if (OS_MBOX_EN > 0u)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    1158:	fe842783          	lw	a5,-24(s0)
    115c:	0047a783          	lw	a5,4(a5)
    1160:	04078863          	beqz	a5,11b0 <OSEventPendMulti+0x29c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    1164:	fa442783          	lw	a5,-92(s0)
    1168:	00478713          	add	a4,a5,4
    116c:	fae42223          	sw	a4,-92(s0)
    1170:	fe842703          	lw	a4,-24(s0)
    1174:	00472703          	lw	a4,4(a4)
    1178:	00e7a023          	sw	a4,0(a5)
                     pevent->OSEventPtr  = (void *)0;
    117c:	fe842783          	lw	a5,-24(s0)
    1180:	0007a223          	sw	zero,4(a5)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    1184:	fa842783          	lw	a5,-88(s0)
    1188:	00478713          	add	a4,a5,4
    118c:	fae42423          	sw	a4,-88(s0)
    1190:	fe842703          	lw	a4,-24(s0)
    1194:	00e7a023          	sw	a4,0(a5)
                      events_rdy         =  OS_TRUE;
    1198:	00100793          	li	a5,1
    119c:	fef403a3          	sb	a5,-25(s0)
                      events_rdy_nbr++;
    11a0:	fe445783          	lhu	a5,-28(s0)
    11a4:	00178793          	add	a5,a5,1
    11a8:	fef41223          	sh	a5,-28(s0)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    11ac:	1040006f          	j	12b0 <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    11b0:	fe344783          	lbu	a5,-29(s0)
    11b4:	0027e793          	or	a5,a5,2
    11b8:	fef401a3          	sb	a5,-29(s0)
                 break;
    11bc:	0f40006f          	j	12b0 <OSEventPendMulti+0x39c>
#endif

#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    11c0:	fe842783          	lw	a5,-24(s0)
    11c4:	0047a783          	lw	a5,4(a5)
    11c8:	fcf42c23          	sw	a5,-40(s0)
                 if (pq->OSQEntries > 0u) {             /* If queue NOT empty;                     ... */
    11cc:	fd842783          	lw	a5,-40(s0)
    11d0:	0167d783          	lhu	a5,22(a5)
    11d4:	08078c63          	beqz	a5,126c <OSEventPendMulti+0x358>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    11d8:	fd842783          	lw	a5,-40(s0)
    11dc:	0107a703          	lw	a4,16(a5)
    11e0:	00470693          	add	a3,a4,4
    11e4:	fd842783          	lw	a5,-40(s0)
    11e8:	00d7a823          	sw	a3,16(a5)
    11ec:	fa442783          	lw	a5,-92(s0)
    11f0:	00478693          	add	a3,a5,4
    11f4:	fad42223          	sw	a3,-92(s0)
    11f8:	00072703          	lw	a4,0(a4)
    11fc:	00e7a023          	sw	a4,0(a5)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    1200:	fd842783          	lw	a5,-40(s0)
    1204:	0107a703          	lw	a4,16(a5)
    1208:	fd842783          	lw	a5,-40(s0)
    120c:	0087a783          	lw	a5,8(a5)
    1210:	00f71a63          	bne	a4,a5,1224 <OSEventPendMulti+0x310>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    1214:	fd842783          	lw	a5,-40(s0)
    1218:	0047a703          	lw	a4,4(a5)
    121c:	fd842783          	lw	a5,-40(s0)
    1220:	00e7a823          	sw	a4,16(a5)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    1224:	fd842783          	lw	a5,-40(s0)
    1228:	0167d783          	lhu	a5,22(a5)
    122c:	fff78793          	add	a5,a5,-1
    1230:	01079713          	sll	a4,a5,0x10
    1234:	01075713          	srl	a4,a4,0x10
    1238:	fd842783          	lw	a5,-40(s0)
    123c:	00e79b23          	sh	a4,22(a5)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    1240:	fa842783          	lw	a5,-88(s0)
    1244:	00478713          	add	a4,a5,4
    1248:	fae42423          	sw	a4,-88(s0)
    124c:	fe842703          	lw	a4,-24(s0)
    1250:	00e7a023          	sw	a4,0(a5)
                      events_rdy   = OS_TRUE;
    1254:	00100793          	li	a5,1
    1258:	fef403a3          	sb	a5,-25(s0)
                      events_rdy_nbr++;
    125c:	fe445783          	lhu	a5,-28(s0)
    1260:	00178793          	add	a5,a5,1
    1264:	fef41223          	sh	a5,-28(s0)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    1268:	0480006f          	j	12b0 <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    126c:	fe344783          	lbu	a5,-29(s0)
    1270:	0047e793          	or	a5,a5,4
    1274:	fef401a3          	sb	a5,-29(s0)
                 break;
    1278:	0380006f          	j	12b0 <OSEventPendMulti+0x39c>
    127c:	fdc42783          	lw	a5,-36(s0)
    1280:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1284:	fd042783          	lw	a5,-48(s0)
    1288:	0087f793          	and	a5,a5,8
    128c:	3007a073          	csrs	mstatus,a5
}
    1290:	00000013          	nop

            case OS_EVENT_TYPE_MUTEX:
            case OS_EVENT_TYPE_FLAG:
            default:
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    1294:	fa842783          	lw	a5,-88(s0)
    1298:	0007a023          	sw	zero,0(a5)
                *perr        =  OS_ERR_EVENT_TYPE;
    129c:	f9c42783          	lw	a5,-100(s0)
    12a0:	00100713          	li	a4,1
    12a4:	00e78023          	sb	a4,0(a5)
                 return (events_rdy_nbr);
    12a8:	fe445783          	lhu	a5,-28(s0)
    12ac:	2c00006f          	j	156c <OSEventPendMulti+0x658>
        }
        pevents++;
    12b0:	fec42783          	lw	a5,-20(s0)
    12b4:	00478793          	add	a5,a5,4
    12b8:	fef42623          	sw	a5,-20(s0)
        pevent = *pevents;
    12bc:	fec42783          	lw	a5,-20(s0)
    12c0:	0007a783          	lw	a5,0(a5)
    12c4:	fef42423          	sw	a5,-24(s0)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    12c8:	fe842783          	lw	a5,-24(s0)
    12cc:	de0796e3          	bnez	a5,10b8 <OSEventPendMulti+0x1a4>
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    12d0:	fe744703          	lbu	a4,-25(s0)
    12d4:	00100793          	li	a5,1
    12d8:	02f71a63          	bne	a4,a5,130c <OSEventPendMulti+0x3f8>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    12dc:	fa842783          	lw	a5,-88(s0)
    12e0:	0007a023          	sw	zero,0(a5)
    12e4:	fdc42783          	lw	a5,-36(s0)
    12e8:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    12ec:	fcc42783          	lw	a5,-52(s0)
    12f0:	0087f793          	and	a5,a5,8
    12f4:	3007a073          	csrs	mstatus,a5
}
    12f8:	00000013          	nop
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    12fc:	f9c42783          	lw	a5,-100(s0)
    1300:	00078023          	sb	zero,0(a5)
        return (events_rdy_nbr);
    1304:	fe445783          	lhu	a5,-28(s0)
    1308:	2640006f          	j	156c <OSEventPendMulti+0x658>
    }

                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    130c:	000287b7          	lui	a5,0x28
    1310:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1314:	0387c783          	lbu	a5,56(a5)
    1318:	fe344703          	lbu	a4,-29(s0)
    131c:	00e7e7b3          	or	a5,a5,a4
    1320:	0ff7f713          	zext.b	a4,a5
    1324:	000287b7          	lui	a5,0x28
    1328:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    132c:	f8076713          	or	a4,a4,-128
    1330:	0ff77713          	zext.b	a4,a4
    1334:	02e78c23          	sb	a4,56(a5)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    1338:	000287b7          	lui	a5,0x28
    133c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1340:	02078ca3          	sb	zero,57(a5)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    1344:	000287b7          	lui	a5,0x28
    1348:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    134c:	fa042703          	lw	a4,-96(s0)
    1350:	02e7aa23          	sw	a4,52(a5)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    1354:	fac42503          	lw	a0,-84(s0)
    1358:	3d9000ef          	jal	1f30 <OS_EventTaskWaitMulti>
    135c:	fdc42783          	lw	a5,-36(s0)
    1360:	fcf42223          	sw	a5,-60(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1364:	fc442783          	lw	a5,-60(s0)
    1368:	0087f793          	and	a5,a5,8
    136c:	3007a073          	csrs	mstatus,a5
}
    1370:	00000013          	nop

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    1374:	428010ef          	jal	279c <OS_Sched>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1378:	00800793          	li	a5,8
    137c:	3007b7f3          	csrrc	a5,mstatus,a5
    1380:	fcf42423          	sw	a5,-56(s0)
    return context;
    1384:	fc842783          	lw	a5,-56(s0)
    OS_ENTER_CRITICAL();
    1388:	fcf42e23          	sw	a5,-36(s0)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    138c:	000287b7          	lui	a5,0x28
    1390:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1394:	0397c783          	lbu	a5,57(a5)
    1398:	00078663          	beqz	a5,13a4 <OSEventPendMulti+0x490>
    139c:	00200713          	li	a4,2
    13a0:	06e79663          	bne	a5,a4,140c <OSEventPendMulti+0x4f8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventMultiRdy;
    13a4:	000287b7          	lui	a5,0x28
    13a8:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    13ac:	0247a783          	lw	a5,36(a5)
    13b0:	fef42423          	sw	a5,-24(s0)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    13b4:	fe842783          	lw	a5,-24(s0)
    13b8:	02078663          	beqz	a5,13e4 <OSEventPendMulti+0x4d0>
                *pevents_rdy++   =  pevent;             /* ... return available event ...              */
    13bc:	fa842783          	lw	a5,-88(s0)
    13c0:	00478713          	add	a4,a5,4
    13c4:	fae42423          	sw	a4,-88(s0)
    13c8:	fe842703          	lw	a4,-24(s0)
    13cc:	00e7a023          	sw	a4,0(a5)
                *pevents_rdy     = (OS_EVENT *)0;       /* ... & NULL terminate return event array     */
    13d0:	fa842783          	lw	a5,-88(s0)
    13d4:	0007a023          	sw	zero,0(a5)
                  events_rdy_nbr =  1;
    13d8:	00100793          	li	a5,1
    13dc:	fef41223          	sh	a5,-28(s0)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
             break;
    13e0:	0440006f          	j	1424 <OSEventPendMulti+0x510>
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    13e4:	000287b7          	lui	a5,0x28
    13e8:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    13ec:	00100713          	li	a4,1
    13f0:	02e78ca3          	sb	a4,57(a5)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    13f4:	000287b7          	lui	a5,0x28
    13f8:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    13fc:	fac42583          	lw	a1,-84(s0)
    1400:	00078513          	mv	a0,a5
    1404:	551000ef          	jal	2154 <OS_EventTaskRemoveMulti>
             break;
    1408:	01c0006f          	j	1424 <OSEventPendMulti+0x510>

        case OS_STAT_PEND_TO:                           /* If events timed out, ...                    */
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    140c:	000287b7          	lui	a5,0x28
    1410:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1414:	fac42583          	lw	a1,-84(s0)
    1418:	00078513          	mv	a0,a5
    141c:	539000ef          	jal	2154 <OS_EventTaskRemoveMulti>
             break;
    1420:	00000013          	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    1424:	000287b7          	lui	a5,0x28
    1428:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    142c:	0397c783          	lbu	a5,57(a5)
    1430:	00078863          	beqz	a5,1440 <OSEventPendMulti+0x52c>
    1434:	00200713          	li	a4,2
    1438:	08e78e63          	beq	a5,a4,14d4 <OSEventPendMulti+0x5c0>
    143c:	0b80006f          	j	14f4 <OSEventPendMulti+0x5e0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    1440:	fe842783          	lw	a5,-24(s0)
    1444:	0007c783          	lbu	a5,0(a5)
    1448:	00200713          	li	a4,2
    144c:	00f74663          	blt	a4,a5,1458 <OSEventPendMulti+0x544>
    1450:	02f04263          	bgtz	a5,1474 <OSEventPendMulti+0x560>
    1454:	0400006f          	j	1494 <OSEventPendMulti+0x580>
    1458:	00300713          	li	a4,3
    145c:	02e79c63          	bne	a5,a4,1494 <OSEventPendMulti+0x580>
#if (OS_SEM_EN > 0u)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    1460:	fa442783          	lw	a5,-92(s0)
    1464:	00478713          	add	a4,a5,4
    1468:	fae42223          	sw	a4,-92(s0)
    146c:	0007a023          	sw	zero,0(a5)
                      break;
    1470:	0580006f          	j	14c8 <OSEventPendMulti+0x5b4>

#if ((OS_MBOX_EN > 0u) ||                 \
    ((OS_Q_EN    > 0u) && (OS_MAX_QS > 0u)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    1474:	000287b7          	lui	a5,0x28
    1478:	81c7a703          	lw	a4,-2020(a5) # 2781c <OSTCBCur>
    147c:	fa442783          	lw	a5,-92(s0)
    1480:	00478693          	add	a3,a5,4
    1484:	fad42223          	sw	a3,-92(s0)
    1488:	02872703          	lw	a4,40(a4)
    148c:	00e7a023          	sw	a4,0(a5)
                      break;
    1490:	0380006f          	j	14c8 <OSEventPendMulti+0x5b4>
    1494:	fdc42783          	lw	a5,-36(s0)
    1498:	fcf42023          	sw	a5,-64(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    149c:	fc042783          	lw	a5,-64(s0)
    14a0:	0087f793          	and	a5,a5,8
    14a4:	3007a073          	csrs	mstatus,a5
}
    14a8:	00000013          	nop

                 case OS_EVENT_TYPE_MUTEX:
                 case OS_EVENT_TYPE_FLAG:
                 default:
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    14ac:	fa842783          	lw	a5,-88(s0)
    14b0:	0007a023          	sw	zero,0(a5)
                     *perr        =  OS_ERR_EVENT_TYPE;
    14b4:	f9c42783          	lw	a5,-100(s0)
    14b8:	00100713          	li	a4,1
    14bc:	00e78023          	sb	a4,0(a5)
                      return (events_rdy_nbr);
    14c0:	fe445783          	lhu	a5,-28(s0)
    14c4:	0a80006f          	j	156c <OSEventPendMulti+0x658>
             }
            *perr = OS_ERR_NONE;
    14c8:	f9c42783          	lw	a5,-100(s0)
    14cc:	00078023          	sb	zero,0(a5)
             break;
    14d0:	0440006f          	j	1514 <OSEventPendMulti+0x600>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    14d4:	fa442783          	lw	a5,-92(s0)
    14d8:	00478713          	add	a4,a5,4
    14dc:	fae42223          	sw	a4,-92(s0)
    14e0:	0007a023          	sw	zero,0(a5)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    14e4:	f9c42783          	lw	a5,-100(s0)
    14e8:	00e00713          	li	a4,14
    14ec:	00e78023          	sb	a4,0(a5)
             break;
    14f0:	0240006f          	j	1514 <OSEventPendMulti+0x600>

        case OS_STAT_PEND_TO:
        default:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    14f4:	fa442783          	lw	a5,-92(s0)
    14f8:	00478713          	add	a4,a5,4
    14fc:	fae42223          	sw	a4,-92(s0)
    1500:	0007a023          	sw	zero,0(a5)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    1504:	f9c42783          	lw	a5,-100(s0)
    1508:	00a00713          	li	a4,10
    150c:	00e78023          	sb	a4,0(a5)
             break;
    1510:	00000013          	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    1514:	000287b7          	lui	a5,0x28
    1518:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    151c:	02078c23          	sb	zero,56(a5)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    1520:	000287b7          	lui	a5,0x28
    1524:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1528:	02078ca3          	sb	zero,57(a5)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;      /* Clear event pointers                        */
    152c:	000287b7          	lui	a5,0x28
    1530:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1534:	0207a023          	sw	zero,32(a5)
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
    1538:	000287b7          	lui	a5,0x28
    153c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1540:	0207a223          	sw	zero,36(a5)
#if ((OS_MBOX_EN > 0u) ||                 \
    ((OS_Q_EN    > 0u) && (OS_MAX_QS > 0u)))
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    1544:	000287b7          	lui	a5,0x28
    1548:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    154c:	0207a423          	sw	zero,40(a5)
    1550:	fdc42783          	lw	a5,-36(s0)
    1554:	faf42e23          	sw	a5,-68(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1558:	fbc42783          	lw	a5,-68(s0)
    155c:	0087f793          	and	a5,a5,8
    1560:	3007a073          	csrs	mstatus,a5
}
    1564:	00000013          	nop
#endif
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    1568:	fe445783          	lhu	a5,-28(s0)
}
    156c:	00078513          	mv	a0,a5
    1570:	06c12083          	lw	ra,108(sp)
    1574:	06812403          	lw	s0,104(sp)
    1578:	07010113          	add	sp,sp,112
    157c:	00008067          	ret

00001580 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    1580:	ff010113          	add	sp,sp,-16
    1584:	00112623          	sw	ra,12(sp)
    1588:	00812423          	sw	s0,8(sp)
    158c:	01010413          	add	s0,sp,16
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
    1590:	6e00a0ef          	jal	bc70 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    1594:	62d000ef          	jal	23c0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    1598:	69d000ef          	jal	2434 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    159c:	000010ef          	jal	259c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    15a0:	501000ef          	jal	22a0 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    15a4:	174030ef          	jal	4718 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
    15a8:	22d030ef          	jal	4fd4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    15ac:	5a5050ef          	jal	7350 <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    15b0:	6fd000ef          	jal	24ac <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    15b4:	771000ef          	jal	2524 <OS_InitTaskStat>

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    15b8:	6d40a0ef          	jal	bc8c <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
    15bc:	20d010ef          	jal	2fc8 <OSDebugInit>
#endif
}
    15c0:	00000013          	nop
    15c4:	00c12083          	lw	ra,12(sp)
    15c8:	00812403          	lw	s0,8(sp)
    15cc:	01010113          	add	sp,sp,16
    15d0:	00008067          	ret

000015d4 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    15d4:	ff010113          	add	sp,sp,-16
    15d8:	00812623          	sw	s0,12(sp)
    15dc:	01010413          	add	s0,sp,16
    if (OSRunning == OS_TRUE) {
    15e0:	000287b7          	lui	a5,0x28
    15e4:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
    15e8:	00100793          	li	a5,1
    15ec:	02f71663          	bne	a4,a5,1618 <OSIntEnter+0x44>
        if (OSIntNesting < 255u) {
    15f0:	000287b7          	lui	a5,0x28
    15f4:	8097c703          	lbu	a4,-2039(a5) # 27809 <OSIntNesting>
    15f8:	0ff00793          	li	a5,255
    15fc:	00f70e63          	beq	a4,a5,1618 <OSIntEnter+0x44>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    1600:	000287b7          	lui	a5,0x28
    1604:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    1608:	00178793          	add	a5,a5,1
    160c:	0ff7f713          	zext.b	a4,a5
    1610:	000287b7          	lui	a5,0x28
    1614:	80e784a3          	sb	a4,-2039(a5) # 27809 <OSIntNesting>
        }
        OS_TRACE_ISR_ENTER();
    }
}
    1618:	00000013          	nop
    161c:	00c12403          	lw	s0,12(sp)
    1620:	01010113          	add	sp,sp,16
    1624:	00008067          	ret

00001628 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    1628:	fe010113          	add	sp,sp,-32
    162c:	00112e23          	sw	ra,28(sp)
    1630:	00812c23          	sw	s0,24(sp)
    1634:	02010413          	add	s0,sp,32
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
    1638:	fe042623          	sw	zero,-20(s0)
#endif



    if (OSRunning == OS_TRUE) {
    163c:	000287b7          	lui	a5,0x28
    1640:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
    1644:	00100793          	li	a5,1
    1648:	0cf71c63          	bne	a4,a5,1720 <OSIntExit+0xf8>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    164c:	00800793          	li	a5,8
    1650:	3007b7f3          	csrrc	a5,mstatus,a5
    1654:	fef42423          	sw	a5,-24(s0)
    return context;
    1658:	fe842783          	lw	a5,-24(s0)
        OS_ENTER_CRITICAL();
    165c:	fef42623          	sw	a5,-20(s0)
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
    1660:	000287b7          	lui	a5,0x28
    1664:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    1668:	00078e63          	beqz	a5,1684 <OSIntExit+0x5c>
            OSIntNesting--;
    166c:	000287b7          	lui	a5,0x28
    1670:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    1674:	fff78793          	add	a5,a5,-1
    1678:	0ff7f713          	zext.b	a4,a5
    167c:	000287b7          	lui	a5,0x28
    1680:	80e784a3          	sb	a4,-2039(a5) # 27809 <OSIntNesting>
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
    1684:	000287b7          	lui	a5,0x28
    1688:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    168c:	06079e63          	bnez	a5,1708 <OSIntExit+0xe0>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
    1690:	000287b7          	lui	a5,0x28
    1694:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    1698:	06079863          	bnez	a5,1708 <OSIntExit+0xe0>
                OS_SchedNew();
    169c:	1d8010ef          	jal	2874 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    16a0:	000287b7          	lui	a5,0x28
    16a4:	80c7c783          	lbu	a5,-2036(a5) # 2780c <OSPrioHighRdy>
    16a8:	00078693          	mv	a3,a5
    16ac:	0002d7b7          	lui	a5,0x2d
    16b0:	fb878713          	add	a4,a5,-72 # 2cfb8 <OSTCBPrioTbl>
    16b4:	00269793          	sll	a5,a3,0x2
    16b8:	00f707b3          	add	a5,a4,a5
    16bc:	0007a703          	lw	a4,0(a5)
    16c0:	000287b7          	lui	a5,0x28
    16c4:	82e7a223          	sw	a4,-2012(a5) # 27824 <OSTCBHighRdy>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    16c8:	000287b7          	lui	a5,0x28
    16cc:	80c7c703          	lbu	a4,-2036(a5) # 2780c <OSPrioHighRdy>
    16d0:	000287b7          	lui	a5,0x28
    16d4:	80b7c783          	lbu	a5,-2037(a5) # 2780b <OSPrioCur>
    16d8:	02f70863          	beq	a4,a5,1708 <OSIntExit+0xe0>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    16dc:	000287b7          	lui	a5,0x28
    16e0:	8247a783          	lw	a5,-2012(a5) # 27824 <OSTCBHighRdy>
    16e4:	0407a703          	lw	a4,64(a5)
    16e8:	00170713          	add	a4,a4,1
    16ec:	04e7a023          	sw	a4,64(a5)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    16f0:	000277b7          	lui	a5,0x27
    16f4:	7f07a783          	lw	a5,2032(a5) # 277f0 <OSCtxSwCtr>
    16f8:	00178713          	add	a4,a5,1
    16fc:	000277b7          	lui	a5,0x27
    1700:	7ee7a823          	sw	a4,2032(a5) # 277f0 <OSCtxSwCtr>
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    1704:	618090ef          	jal	ad1c <OSCtxSw>
    1708:	fec42783          	lw	a5,-20(s0)
    170c:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1710:	fe442783          	lw	a5,-28(s0)
    1714:	0087f793          	and	a5,a5,8
    1718:	3007a073          	csrs	mstatus,a5
}
    171c:	00000013          	nop
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
    }
}
    1720:	00000013          	nop
    1724:	01c12083          	lw	ra,28(sp)
    1728:	01812403          	lw	s0,24(sp)
    172c:	02010113          	add	sp,sp,32
    1730:	00008067          	ret

00001734 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
    1734:	fe010113          	add	sp,sp,-32
    1738:	00812e23          	sw	s0,28(sp)
    173c:	02010413          	add	s0,sp,32
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    1740:	fe042623          	sw	zero,-20(s0)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    1744:	000287b7          	lui	a5,0x28
    1748:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
    174c:	00100793          	li	a5,1
    1750:	06f71263          	bne	a4,a5,17b4 <OSSchedLock+0x80>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1754:	00800793          	li	a5,8
    1758:	3007b7f3          	csrrc	a5,mstatus,a5
    175c:	fef42423          	sw	a5,-24(s0)
    return context;
    1760:	fe842783          	lw	a5,-24(s0)
        OS_ENTER_CRITICAL();
    1764:	fef42623          	sw	a5,-20(s0)
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
    1768:	000287b7          	lui	a5,0x28
    176c:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    1770:	02079663          	bnez	a5,179c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    1774:	000287b7          	lui	a5,0x28
    1778:	80a7c703          	lbu	a4,-2038(a5) # 2780a <OSLockNesting>
    177c:	0ff00793          	li	a5,255
    1780:	00f70e63          	beq	a4,a5,179c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    1784:	000287b7          	lui	a5,0x28
    1788:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    178c:	00178793          	add	a5,a5,1
    1790:	0ff7f713          	zext.b	a4,a5
    1794:	000287b7          	lui	a5,0x28
    1798:	80e78523          	sb	a4,-2038(a5) # 2780a <OSLockNesting>
    179c:	fec42783          	lw	a5,-20(s0)
    17a0:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    17a4:	fe442783          	lw	a5,-28(s0)
    17a8:	0087f793          	and	a5,a5,8
    17ac:	3007a073          	csrs	mstatus,a5
}
    17b0:	00000013          	nop
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    17b4:	00000013          	nop
    17b8:	01c12403          	lw	s0,28(sp)
    17bc:	02010113          	add	sp,sp,32
    17c0:	00008067          	ret

000017c4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
    17c4:	fd010113          	add	sp,sp,-48
    17c8:	02112623          	sw	ra,44(sp)
    17cc:	02812423          	sw	s0,40(sp)
    17d0:	03010413          	add	s0,sp,48
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
    17d4:	fe042623          	sw	zero,-20(s0)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    17d8:	000287b7          	lui	a5,0x28
    17dc:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
    17e0:	00100793          	li	a5,1
    17e4:	0af71e63          	bne	a4,a5,18a0 <OSSchedUnlock+0xdc>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    17e8:	00800793          	li	a5,8
    17ec:	3007b7f3          	csrrc	a5,mstatus,a5
    17f0:	fef42423          	sw	a5,-24(s0)
    return context;
    17f4:	fe842783          	lw	a5,-24(s0)
        OS_ENTER_CRITICAL();
    17f8:	fef42623          	sw	a5,-20(s0)
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
    17fc:	000287b7          	lui	a5,0x28
    1800:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    1804:	08079263          	bnez	a5,1888 <OSSchedUnlock+0xc4>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
    1808:	000287b7          	lui	a5,0x28
    180c:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    1810:	06078063          	beqz	a5,1870 <OSSchedUnlock+0xac>
                OSLockNesting--;                           /* Decrement lock nesting level             */
    1814:	000287b7          	lui	a5,0x28
    1818:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    181c:	fff78793          	add	a5,a5,-1
    1820:	0ff7f713          	zext.b	a4,a5
    1824:	000287b7          	lui	a5,0x28
    1828:	80e78523          	sb	a4,-2038(a5) # 2780a <OSLockNesting>
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
    182c:	000287b7          	lui	a5,0x28
    1830:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    1834:	02079263          	bnez	a5,1858 <OSSchedUnlock+0x94>
    1838:	fec42783          	lw	a5,-20(s0)
    183c:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1840:	fe442783          	lw	a5,-28(s0)
    1844:	0087f793          	and	a5,a5,8
    1848:	3007a073          	csrs	mstatus,a5
}
    184c:	00000013          	nop
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    1850:	74d000ef          	jal	279c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    1854:	04c0006f          	j	18a0 <OSSchedUnlock+0xdc>
    1858:	fec42783          	lw	a5,-20(s0)
    185c:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1860:	fe042783          	lw	a5,-32(s0)
    1864:	0087f793          	and	a5,a5,8
    1868:	3007a073          	csrs	mstatus,a5
}
    186c:	0340006f          	j	18a0 <OSSchedUnlock+0xdc>
    1870:	fec42783          	lw	a5,-20(s0)
    1874:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1878:	fdc42783          	lw	a5,-36(s0)
    187c:	0087f793          	and	a5,a5,8
    1880:	3007a073          	csrs	mstatus,a5
}
    1884:	01c0006f          	j	18a0 <OSSchedUnlock+0xdc>
    1888:	fec42783          	lw	a5,-20(s0)
    188c:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1890:	fd842783          	lw	a5,-40(s0)
    1894:	0087f793          	and	a5,a5,8
    1898:	3007a073          	csrs	mstatus,a5
}
    189c:	00000013          	nop
    18a0:	00000013          	nop
    18a4:	02c12083          	lw	ra,44(sp)
    18a8:	02812403          	lw	s0,40(sp)
    18ac:	03010113          	add	sp,sp,48
    18b0:	00008067          	ret

000018b4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    18b4:	ff010113          	add	sp,sp,-16
    18b8:	00112623          	sw	ra,12(sp)
    18bc:	00812423          	sw	s0,8(sp)
    18c0:	01010413          	add	s0,sp,16
    if (OSRunning == OS_FALSE) {
    18c4:	000287b7          	lui	a5,0x28
    18c8:	8137c783          	lbu	a5,-2029(a5) # 27813 <OSRunning>
    18cc:	04079a63          	bnez	a5,1920 <OSStart+0x6c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    18d0:	7a5000ef          	jal	2874 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    18d4:	000287b7          	lui	a5,0x28
    18d8:	80c7c703          	lbu	a4,-2036(a5) # 2780c <OSPrioHighRdy>
    18dc:	000287b7          	lui	a5,0x28
    18e0:	80e785a3          	sb	a4,-2037(a5) # 2780b <OSPrioCur>
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    18e4:	000287b7          	lui	a5,0x28
    18e8:	80c7c783          	lbu	a5,-2036(a5) # 2780c <OSPrioHighRdy>
    18ec:	00078693          	mv	a3,a5
    18f0:	0002d7b7          	lui	a5,0x2d
    18f4:	fb878713          	add	a4,a5,-72 # 2cfb8 <OSTCBPrioTbl>
    18f8:	00269793          	sll	a5,a3,0x2
    18fc:	00f707b3          	add	a5,a4,a5
    1900:	0007a703          	lw	a4,0(a5)
    1904:	000287b7          	lui	a5,0x28
    1908:	82e7a223          	sw	a4,-2012(a5) # 27824 <OSTCBHighRdy>
        OSTCBCur      = OSTCBHighRdy;
    190c:	000287b7          	lui	a5,0x28
    1910:	8247a703          	lw	a4,-2012(a5) # 27824 <OSTCBHighRdy>
    1914:	000287b7          	lui	a5,0x28
    1918:	80e7ae23          	sw	a4,-2020(a5) # 2781c <OSTCBCur>
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    191c:	4d4090ef          	jal	adf0 <OSStartHighRdy>
    }
}
    1920:	00000013          	nop
    1924:	00c12083          	lw	ra,12(sp)
    1928:	00812403          	lw	s0,8(sp)
    192c:	01010113          	add	sp,sp,16
    1930:	00008067          	ret

00001934 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OSStatInit (void)
{
    1934:	fd010113          	add	sp,sp,-48
    1938:	02112623          	sw	ra,44(sp)
    193c:	02812423          	sw	s0,40(sp)
    1940:	03010413          	add	s0,sp,48
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    1944:	fe042623          	sw	zero,-20(s0)
#endif



    OSTimeDly(2u);                               /* Synchronize with clock tick                        */
    1948:	00200513          	li	a0,2
    194c:	7e9070ef          	jal	9934 <OSTimeDly>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1950:	00800793          	li	a5,8
    1954:	3007b7f3          	csrrc	a5,mstatus,a5
    1958:	fcf42e23          	sw	a5,-36(s0)
    return context;
    195c:	fdc42783          	lw	a5,-36(s0)
    OS_ENTER_CRITICAL();
    1960:	fef42623          	sw	a5,-20(s0)
    OSIdleCtr    = 0uL;                          /* Clear idle counter                                 */
    1964:	000287b7          	lui	a5,0x28
    1968:	8007ac23          	sw	zero,-2024(a5) # 27818 <OSIdleCtr>
    196c:	fec42783          	lw	a5,-20(s0)
    1970:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1974:	fe042783          	lw	a5,-32(s0)
    1978:	0087f793          	and	a5,a5,8
    197c:	3007a073          	csrs	mstatus,a5
}
    1980:	00000013          	nop
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10u);           /* Determine MAX. idle counter value for 1/10 second  */
    1984:	06400513          	li	a0,100
    1988:	7ad070ef          	jal	9934 <OSTimeDly>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    198c:	00800793          	li	a5,8
    1990:	3007b7f3          	csrrc	a5,mstatus,a5
    1994:	fef42223          	sw	a5,-28(s0)
    return context;
    1998:	fe442783          	lw	a5,-28(s0)
    OS_ENTER_CRITICAL();
    199c:	fef42623          	sw	a5,-20(s0)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    19a0:	000287b7          	lui	a5,0x28
    19a4:	8187a703          	lw	a4,-2024(a5) # 27818 <OSIdleCtr>
    19a8:	000287b7          	lui	a5,0x28
    19ac:	80e7a023          	sw	a4,-2048(a5) # 27800 <OSIdleCtrMax>
    OSStatRdy    = OS_TRUE;
    19b0:	000287b7          	lui	a5,0x28
    19b4:	00100713          	li	a4,1
    19b8:	80e78423          	sb	a4,-2040(a5) # 27808 <OSStatRdy>
    19bc:	fec42783          	lw	a5,-20(s0)
    19c0:	fef42423          	sw	a5,-24(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    19c4:	fe842783          	lw	a5,-24(s0)
    19c8:	0087f793          	and	a5,a5,8
    19cc:	3007a073          	csrs	mstatus,a5
}
    19d0:	00000013          	nop
    OS_EXIT_CRITICAL();
}
    19d4:	00000013          	nop
    19d8:	02c12083          	lw	ra,44(sp)
    19dc:	02812403          	lw	s0,40(sp)
    19e0:	03010113          	add	sp,sp,48
    19e4:	00008067          	ret

000019e8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    19e8:	fd010113          	add	sp,sp,-48
    19ec:	02112623          	sw	ra,44(sp)
    19f0:	02812423          	sw	s0,40(sp)
    19f4:	03010413          	add	s0,sp,48
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
    19f8:	fe042223          	sw	zero,-28(s0)
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
    19fc:	2580a0ef          	jal	bc54 <OSTimeTickHook>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1a00:	00800793          	li	a5,8
    1a04:	3007b7f3          	csrrc	a5,mstatus,a5
    1a08:	fcf42e23          	sw	a5,-36(s0)
    return context;
    1a0c:	fdc42783          	lw	a5,-36(s0)
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    1a10:	fef42223          	sw	a5,-28(s0)
    OSTime++;
    1a14:	000287b7          	lui	a5,0x28
    1a18:	83c7a783          	lw	a5,-1988(a5) # 2783c <OSTime>
    1a1c:	00178713          	add	a4,a5,1
    1a20:	000287b7          	lui	a5,0x28
    1a24:	82e7ae23          	sw	a4,-1988(a5) # 2783c <OSTime>
    1a28:	fe442783          	lw	a5,-28(s0)
    1a2c:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1a30:	fe042783          	lw	a5,-32(s0)
    1a34:	0087f793          	and	a5,a5,8
    1a38:	3007a073          	csrs	mstatus,a5
}
    1a3c:	00000013          	nop
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    1a40:	000287b7          	lui	a5,0x28
    1a44:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
    1a48:	00100793          	li	a5,1
    1a4c:	1af71a63          	bne	a4,a5,1c00 <OSTimeTick+0x218>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    1a50:	000287b7          	lui	a5,0x28
    1a54:	82c7c783          	lbu	a5,-2004(a5) # 2782c <OSTickStepState>
    1a58:	00200713          	li	a4,2
    1a5c:	02e78863          	beq	a5,a4,1a8c <OSTimeTick+0xa4>
    1a60:	00200713          	li	a4,2
    1a64:	04f74063          	blt	a4,a5,1aa4 <OSTimeTick+0xbc>
    1a68:	00078863          	beqz	a5,1a78 <OSTimeTick+0x90>
    1a6c:	00100713          	li	a4,1
    1a70:	00e78a63          	beq	a5,a4,1a84 <OSTimeTick+0x9c>
    1a74:	0300006f          	j	1aa4 <OSTimeTick+0xbc>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    1a78:	00100793          	li	a5,1
    1a7c:	fef405a3          	sb	a5,-21(s0)
                 break;
    1a80:	0380006f          	j	1ab8 <OSTimeTick+0xd0>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    1a84:	fe0405a3          	sb	zero,-21(s0)
                 break;
    1a88:	0300006f          	j	1ab8 <OSTimeTick+0xd0>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    1a8c:	00100793          	li	a5,1
    1a90:	fef405a3          	sb	a5,-21(s0)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    1a94:	000287b7          	lui	a5,0x28
    1a98:	00100713          	li	a4,1
    1a9c:	82e78623          	sb	a4,-2004(a5) # 2782c <OSTickStepState>
                 break;
    1aa0:	0180006f          	j	1ab8 <OSTimeTick+0xd0>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    1aa4:	00100793          	li	a5,1
    1aa8:	fef405a3          	sb	a5,-21(s0)
                 OSTickStepState = OS_TICK_STEP_DIS;
    1aac:	000287b7          	lui	a5,0x28
    1ab0:	82078623          	sb	zero,-2004(a5) # 2782c <OSTickStepState>
                 break;
    1ab4:	00000013          	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    1ab8:	feb44783          	lbu	a5,-21(s0)
    1abc:	14078063          	beqz	a5,1bfc <OSTimeTick+0x214>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    1ac0:	000287b7          	lui	a5,0x28
    1ac4:	8287a783          	lw	a5,-2008(a5) # 27828 <OSTCBList>
    1ac8:	fef42623          	sw	a5,-20(s0)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    1acc:	11c0006f          	j	1be8 <OSTimeTick+0x200>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1ad0:	00800793          	li	a5,8
    1ad4:	3007b7f3          	csrrc	a5,mstatus,a5
    1ad8:	fcf42c23          	sw	a5,-40(s0)
    return context;
    1adc:	fd842783          	lw	a5,-40(s0)
            OS_ENTER_CRITICAL();
    1ae0:	fef42223          	sw	a5,-28(s0)
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
    1ae4:	fec42783          	lw	a5,-20(s0)
    1ae8:	0347a783          	lw	a5,52(a5)
    1aec:	0c078c63          	beqz	a5,1bc4 <OSTimeTick+0x1dc>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
    1af0:	fec42783          	lw	a5,-20(s0)
    1af4:	0347a783          	lw	a5,52(a5)
    1af8:	fff78713          	add	a4,a5,-1
    1afc:	fec42783          	lw	a5,-20(s0)
    1b00:	02e7aa23          	sw	a4,52(a5)
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
    1b04:	fec42783          	lw	a5,-20(s0)
    1b08:	0347a783          	lw	a5,52(a5)
    1b0c:	0a079c63          	bnez	a5,1bc4 <OSTimeTick+0x1dc>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    1b10:	fec42783          	lw	a5,-20(s0)
    1b14:	0387c783          	lbu	a5,56(a5)
    1b18:	0377f793          	and	a5,a5,55
    1b1c:	02078663          	beqz	a5,1b48 <OSTimeTick+0x160>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
    1b20:	fec42783          	lw	a5,-20(s0)
    1b24:	0387c783          	lbu	a5,56(a5)
    1b28:	fc87f793          	and	a5,a5,-56
    1b2c:	0ff7f713          	zext.b	a4,a5
    1b30:	fec42783          	lw	a5,-20(s0)
    1b34:	02e78c23          	sb	a4,56(a5)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    1b38:	fec42783          	lw	a5,-20(s0)
    1b3c:	00100713          	li	a4,1
    1b40:	02e78ca3          	sb	a4,57(a5)
    1b44:	00c0006f          	j	1b50 <OSTimeTick+0x168>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    1b48:	fec42783          	lw	a5,-20(s0)
    1b4c:	02078ca3          	sb	zero,57(a5)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    1b50:	fec42783          	lw	a5,-20(s0)
    1b54:	0387c783          	lbu	a5,56(a5)
    1b58:	0087f793          	and	a5,a5,8
    1b5c:	06079463          	bnez	a5,1bc4 <OSTimeTick+0x1dc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    1b60:	fec42783          	lw	a5,-20(s0)
    1b64:	03e7c703          	lbu	a4,62(a5)
    1b68:	000287b7          	lui	a5,0x28
    1b6c:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    1b70:	00f767b3          	or	a5,a4,a5
    1b74:	0ff7f713          	zext.b	a4,a5
    1b78:	000287b7          	lui	a5,0x28
    1b7c:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    1b80:	fec42783          	lw	a5,-20(s0)
    1b84:	03c7c783          	lbu	a5,60(a5)
    1b88:	00078713          	mv	a4,a5
    1b8c:	000287b7          	lui	a5,0x28
    1b90:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    1b94:	00f707b3          	add	a5,a4,a5
    1b98:	0007c703          	lbu	a4,0(a5)
    1b9c:	fec42783          	lw	a5,-20(s0)
    1ba0:	03d7c783          	lbu	a5,61(a5)
    1ba4:	fec42683          	lw	a3,-20(s0)
    1ba8:	03c6c683          	lbu	a3,60(a3)
    1bac:	00f767b3          	or	a5,a4,a5
    1bb0:	0ff7f713          	zext.b	a4,a5
    1bb4:	000287b7          	lui	a5,0x28
    1bb8:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    1bbc:	00f687b3          	add	a5,a3,a5
    1bc0:	00e78023          	sb	a4,0(a5)
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    1bc4:	fec42783          	lw	a5,-20(s0)
    1bc8:	0147a783          	lw	a5,20(a5)
    1bcc:	fef42623          	sw	a5,-20(s0)
    1bd0:	fe442783          	lw	a5,-28(s0)
    1bd4:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    1bd8:	fd442783          	lw	a5,-44(s0)
    1bdc:	0087f793          	and	a5,a5,8
    1be0:	3007a073          	csrs	mstatus,a5
}
    1be4:	00000013          	nop
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    1be8:	fec42783          	lw	a5,-20(s0)
    1bec:	03a7c703          	lbu	a4,58(a5)
    1bf0:	01400793          	li	a5,20
    1bf4:	ecf71ee3          	bne	a4,a5,1ad0 <OSTimeTick+0xe8>
    1bf8:	0080006f          	j	1c00 <OSTimeTick+0x218>
            return;
    1bfc:	00000013          	nop
            OS_EXIT_CRITICAL();
        }
    }
}
    1c00:	02c12083          	lw	ra,44(sp)
    1c04:	02812403          	lw	s0,40(sp)
    1c08:	03010113          	add	sp,sp,48
    1c0c:	00008067          	ret

00001c10 <OSVersion>:
* Returns    : The version number of uC/OS-II multiplied by 10000.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    1c10:	ff010113          	add	sp,sp,-16
    1c14:	00812623          	sw	s0,12(sp)
    1c18:	01010413          	add	s0,sp,16
    return (OS_VERSION);
    1c1c:	000077b7          	lui	a5,0x7
    1c20:	27478793          	add	a5,a5,628 # 7274 <OSQQuery+0x74>
}
    1c24:	00078513          	mv	a0,a5
    1c28:	00c12403          	lw	s0,12(sp)
    1c2c:	01010113          	add	sp,sp,16
    1c30:	00008067          	ret

00001c34 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
    1c34:	ff010113          	add	sp,sp,-16
    1c38:	00812623          	sw	s0,12(sp)
    1c3c:	01010413          	add	s0,sp,16
}
    1c40:	00000013          	nop
    1c44:	00c12403          	lw	s0,12(sp)
    1c48:	01010113          	add	sp,sp,16
    1c4c:	00008067          	ret

00001c50 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
    1c50:	fd010113          	add	sp,sp,-48
    1c54:	02112623          	sw	ra,44(sp)
    1c58:	02812423          	sw	s0,40(sp)
    1c5c:	03010413          	add	s0,sp,48
    1c60:	fca42e23          	sw	a0,-36(s0)
    1c64:	fcb42c23          	sw	a1,-40(s0)
    1c68:	00060793          	mv	a5,a2
    1c6c:	00068713          	mv	a4,a3
    1c70:	fcf40ba3          	sb	a5,-41(s0)
    1c74:	00070793          	mv	a5,a4
    1c78:	fcf40b23          	sb	a5,-42(s0)
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    1c7c:	fdc42783          	lw	a5,-36(s0)
    1c80:	00a7c783          	lbu	a5,10(a5)
    1c84:	00078713          	mv	a4,a5
    1c88:	000237b7          	lui	a5,0x23
    1c8c:	f6478793          	add	a5,a5,-156 # 22f64 <OSUnMapTbl>
    1c90:	00e787b3          	add	a5,a5,a4
    1c94:	0007c783          	lbu	a5,0(a5)
    1c98:	fef407a3          	sb	a5,-17(s0)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    1c9c:	fef44783          	lbu	a5,-17(s0)
    1ca0:	fdc42703          	lw	a4,-36(s0)
    1ca4:	00f707b3          	add	a5,a4,a5
    1ca8:	00b7c783          	lbu	a5,11(a5)
    1cac:	00078713          	mv	a4,a5
    1cb0:	000237b7          	lui	a5,0x23
    1cb4:	f6478793          	add	a5,a5,-156 # 22f64 <OSUnMapTbl>
    1cb8:	00e787b3          	add	a5,a5,a4
    1cbc:	0007c783          	lbu	a5,0(a5)
    1cc0:	fef40723          	sb	a5,-18(s0)
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
    1cc4:	fef44783          	lbu	a5,-17(s0)
    1cc8:	00379793          	sll	a5,a5,0x3
    1ccc:	0ff7f793          	zext.b	a5,a5
    1cd0:	fee44703          	lbu	a4,-18(s0)
    1cd4:	00e787b3          	add	a5,a5,a4
    1cd8:	fef406a3          	sb	a5,-19(s0)
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    1cdc:	fed44783          	lbu	a5,-19(s0)
    1ce0:	0002d737          	lui	a4,0x2d
    1ce4:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    1ce8:	00279793          	sll	a5,a5,0x2
    1cec:	00f707b3          	add	a5,a4,a5
    1cf0:	0007a783          	lw	a5,0(a5)
    1cf4:	fef42423          	sw	a5,-24(s0)
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
    1cf8:	fe842783          	lw	a5,-24(s0)
    1cfc:	0207aa23          	sw	zero,52(a5)
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    1d00:	fe842783          	lw	a5,-24(s0)
    1d04:	fd842703          	lw	a4,-40(s0)
    1d08:	02e7a423          	sw	a4,40(a5)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
    1d0c:	fe842783          	lw	a5,-24(s0)
    1d10:	0387c703          	lbu	a4,56(a5)
    1d14:	fd744783          	lbu	a5,-41(s0)
    1d18:	fff7c793          	not	a5,a5
    1d1c:	0ff7f793          	zext.b	a5,a5
    1d20:	00f777b3          	and	a5,a4,a5
    1d24:	0ff7f713          	zext.b	a4,a5
    1d28:	fe842783          	lw	a5,-24(s0)
    1d2c:	02e78c23          	sb	a4,56(a5)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    1d30:	fe842783          	lw	a5,-24(s0)
    1d34:	fd644703          	lbu	a4,-42(s0)
    1d38:	02e78ca3          	sb	a4,57(a5)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    1d3c:	fe842783          	lw	a5,-24(s0)
    1d40:	0387c783          	lbu	a5,56(a5)
    1d44:	0087f793          	and	a5,a5,8
    1d48:	04079e63          	bnez	a5,1da4 <OS_EventTaskRdy+0x154>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    1d4c:	fe842783          	lw	a5,-24(s0)
    1d50:	03e7c703          	lbu	a4,62(a5)
    1d54:	000287b7          	lui	a5,0x28
    1d58:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    1d5c:	00f767b3          	or	a5,a4,a5
    1d60:	0ff7f713          	zext.b	a4,a5
    1d64:	000287b7          	lui	a5,0x28
    1d68:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    1d6c:	fef44703          	lbu	a4,-17(s0)
    1d70:	000287b7          	lui	a5,0x28
    1d74:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    1d78:	00f707b3          	add	a5,a4,a5
    1d7c:	0007c703          	lbu	a4,0(a5)
    1d80:	fe842783          	lw	a5,-24(s0)
    1d84:	03d7c783          	lbu	a5,61(a5)
    1d88:	fef44683          	lbu	a3,-17(s0)
    1d8c:	00f767b3          	or	a5,a4,a5
    1d90:	0ff7f713          	zext.b	a4,a5
    1d94:	000287b7          	lui	a5,0x28
    1d98:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    1d9c:	00f687b3          	add	a5,a3,a5
    1da0:	00e78023          	sb	a4,0(a5)
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    1da4:	fdc42583          	lw	a1,-36(s0)
    1da8:	fe842503          	lw	a0,-24(s0)
    1dac:	2fc000ef          	jal	20a8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    1db0:	fe842783          	lw	a5,-24(s0)
    1db4:	0207a783          	lw	a5,32(a5)
    1db8:	02078663          	beqz	a5,1de4 <OS_EventTaskRdy+0x194>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    1dbc:	fe842783          	lw	a5,-24(s0)
    1dc0:	0207a783          	lw	a5,32(a5)
    1dc4:	00078593          	mv	a1,a5
    1dc8:	fe842503          	lw	a0,-24(s0)
    1dcc:	388000ef          	jal	2154 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventMultiPtr  = (OS_EVENT **)0;     /* No longer pending on multi list             */
    1dd0:	fe842783          	lw	a5,-24(s0)
    1dd4:	0207a023          	sw	zero,32(a5)
        ptcb->OSTCBEventMultiRdy  = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    1dd8:	fe842783          	lw	a5,-24(s0)
    1ddc:	fdc42703          	lw	a4,-36(s0)
    1de0:	02e7a223          	sw	a4,36(a5)
    }
#endif

    return (prio);
    1de4:	fed44783          	lbu	a5,-19(s0)
}
    1de8:	00078513          	mv	a0,a5
    1dec:	02c12083          	lw	ra,44(sp)
    1df0:	02812403          	lw	s0,40(sp)
    1df4:	03010113          	add	sp,sp,48
    1df8:	00008067          	ret

00001dfc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    1dfc:	fd010113          	add	sp,sp,-48
    1e00:	02812623          	sw	s0,44(sp)
    1e04:	03010413          	add	s0,sp,48
    1e08:	fca42e23          	sw	a0,-36(s0)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    1e0c:	000287b7          	lui	a5,0x28
    1e10:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1e14:	fdc42703          	lw	a4,-36(s0)
    1e18:	00e7ae23          	sw	a4,28(a5)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    1e1c:	000287b7          	lui	a5,0x28
    1e20:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1e24:	03c7c783          	lbu	a5,60(a5)
    1e28:	00078713          	mv	a4,a5
    1e2c:	fdc42783          	lw	a5,-36(s0)
    1e30:	00e787b3          	add	a5,a5,a4
    1e34:	00b7c703          	lbu	a4,11(a5)
    1e38:	000287b7          	lui	a5,0x28
    1e3c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1e40:	03d7c783          	lbu	a5,61(a5)
    1e44:	000286b7          	lui	a3,0x28
    1e48:	81c6a683          	lw	a3,-2020(a3) # 2781c <OSTCBCur>
    1e4c:	03c6c683          	lbu	a3,60(a3)
    1e50:	00f767b3          	or	a5,a4,a5
    1e54:	0ff7f713          	zext.b	a4,a5
    1e58:	fdc42783          	lw	a5,-36(s0)
    1e5c:	00d787b3          	add	a5,a5,a3
    1e60:	00e785a3          	sb	a4,11(a5)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    1e64:	fdc42783          	lw	a5,-36(s0)
    1e68:	00a7c703          	lbu	a4,10(a5)
    1e6c:	000287b7          	lui	a5,0x28
    1e70:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1e74:	03e7c783          	lbu	a5,62(a5)
    1e78:	00f767b3          	or	a5,a4,a5
    1e7c:	0ff7f713          	zext.b	a4,a5
    1e80:	fdc42783          	lw	a5,-36(s0)
    1e84:	00e78523          	sb	a4,10(a5)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    1e88:	000287b7          	lui	a5,0x28
    1e8c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1e90:	03c7c783          	lbu	a5,60(a5)
    1e94:	fef407a3          	sb	a5,-17(s0)
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
    1e98:	fef44703          	lbu	a4,-17(s0)
    1e9c:	000287b7          	lui	a5,0x28
    1ea0:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    1ea4:	00f707b3          	add	a5,a4,a5
    1ea8:	0007c703          	lbu	a4,0(a5)
    1eac:	000287b7          	lui	a5,0x28
    1eb0:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1eb4:	03d7c783          	lbu	a5,61(a5)
    1eb8:	fff7c793          	not	a5,a5
    1ebc:	0ff7f793          	zext.b	a5,a5
    1ec0:	fef44683          	lbu	a3,-17(s0)
    1ec4:	00f777b3          	and	a5,a4,a5
    1ec8:	0ff7f713          	zext.b	a4,a5
    1ecc:	000287b7          	lui	a5,0x28
    1ed0:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    1ed4:	00f687b3          	add	a5,a3,a5
    1ed8:	00e78023          	sb	a4,0(a5)
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
    1edc:	fef44703          	lbu	a4,-17(s0)
    1ee0:	000287b7          	lui	a5,0x28
    1ee4:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    1ee8:	00f707b3          	add	a5,a4,a5
    1eec:	0007c783          	lbu	a5,0(a5)
    1ef0:	02079863          	bnez	a5,1f20 <OS_EventTaskWait+0x124>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
    1ef4:	000287b7          	lui	a5,0x28
    1ef8:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1efc:	03e7c783          	lbu	a5,62(a5)
    1f00:	fff7c793          	not	a5,a5
    1f04:	0ff7f713          	zext.b	a4,a5
    1f08:	000287b7          	lui	a5,0x28
    1f0c:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    1f10:	00f777b3          	and	a5,a4,a5
    1f14:	0ff7f713          	zext.b	a4,a5
    1f18:	000287b7          	lui	a5,0x28
    1f1c:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
    }
}
    1f20:	00000013          	nop
    1f24:	02c12403          	lw	s0,44(sp)
    1f28:	03010113          	add	sp,sp,48
    1f2c:	00008067          	ret

00001f30 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    1f30:	fd010113          	add	sp,sp,-48
    1f34:	02812623          	sw	s0,44(sp)
    1f38:	03010413          	add	s0,sp,48
    1f3c:	fca42e23          	sw	a0,-36(s0)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    1f40:	000287b7          	lui	a5,0x28
    1f44:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1f48:	fdc42703          	lw	a4,-36(s0)
    1f4c:	02e7a023          	sw	a4,32(a5)
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
    1f50:	000287b7          	lui	a5,0x28
    1f54:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1f58:	0207a223          	sw	zero,36(a5)

    pevents =  pevents_wait;
    1f5c:	fdc42783          	lw	a5,-36(s0)
    1f60:	fef42623          	sw	a5,-20(s0)
    pevent  = *pevents;
    1f64:	fec42783          	lw	a5,-20(s0)
    1f68:	0007a783          	lw	a5,0(a5)
    1f6c:	fef42423          	sw	a5,-24(s0)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    1f70:	0880006f          	j	1ff8 <OS_EventTaskWaitMulti+0xc8>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    1f74:	000287b7          	lui	a5,0x28
    1f78:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1f7c:	03c7c783          	lbu	a5,60(a5)
    1f80:	00078713          	mv	a4,a5
    1f84:	fe842783          	lw	a5,-24(s0)
    1f88:	00e787b3          	add	a5,a5,a4
    1f8c:	00b7c703          	lbu	a4,11(a5)
    1f90:	000287b7          	lui	a5,0x28
    1f94:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1f98:	03d7c783          	lbu	a5,61(a5)
    1f9c:	000286b7          	lui	a3,0x28
    1fa0:	81c6a683          	lw	a3,-2020(a3) # 2781c <OSTCBCur>
    1fa4:	03c6c683          	lbu	a3,60(a3)
    1fa8:	00f767b3          	or	a5,a4,a5
    1fac:	0ff7f713          	zext.b	a4,a5
    1fb0:	fe842783          	lw	a5,-24(s0)
    1fb4:	00d787b3          	add	a5,a5,a3
    1fb8:	00e785a3          	sb	a4,11(a5)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    1fbc:	fe842783          	lw	a5,-24(s0)
    1fc0:	00a7c703          	lbu	a4,10(a5)
    1fc4:	000287b7          	lui	a5,0x28
    1fc8:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    1fcc:	03e7c783          	lbu	a5,62(a5)
    1fd0:	00f767b3          	or	a5,a4,a5
    1fd4:	0ff7f713          	zext.b	a4,a5
    1fd8:	fe842783          	lw	a5,-24(s0)
    1fdc:	00e78523          	sb	a4,10(a5)
        pevents++;
    1fe0:	fec42783          	lw	a5,-20(s0)
    1fe4:	00478793          	add	a5,a5,4
    1fe8:	fef42623          	sw	a5,-20(s0)
        pevent = *pevents;
    1fec:	fec42783          	lw	a5,-20(s0)
    1ff0:	0007a783          	lw	a5,0(a5)
    1ff4:	fef42423          	sw	a5,-24(s0)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    1ff8:	fe842783          	lw	a5,-24(s0)
    1ffc:	f6079ce3          	bnez	a5,1f74 <OS_EventTaskWaitMulti+0x44>
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    2000:	000287b7          	lui	a5,0x28
    2004:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    2008:	03c7c783          	lbu	a5,60(a5)
    200c:	fef403a3          	sb	a5,-25(s0)
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
    2010:	fe744703          	lbu	a4,-25(s0)
    2014:	000287b7          	lui	a5,0x28
    2018:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    201c:	00f707b3          	add	a5,a4,a5
    2020:	0007c703          	lbu	a4,0(a5)
    2024:	000287b7          	lui	a5,0x28
    2028:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    202c:	03d7c783          	lbu	a5,61(a5)
    2030:	fff7c793          	not	a5,a5
    2034:	0ff7f793          	zext.b	a5,a5
    2038:	fe744683          	lbu	a3,-25(s0)
    203c:	00f777b3          	and	a5,a4,a5
    2040:	0ff7f713          	zext.b	a4,a5
    2044:	000287b7          	lui	a5,0x28
    2048:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    204c:	00f687b3          	add	a5,a3,a5
    2050:	00e78023          	sb	a4,0(a5)
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
    2054:	fe744703          	lbu	a4,-25(s0)
    2058:	000287b7          	lui	a5,0x28
    205c:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    2060:	00f707b3          	add	a5,a4,a5
    2064:	0007c783          	lbu	a5,0(a5)
    2068:	02079863          	bnez	a5,2098 <OS_EventTaskWaitMulti+0x168>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
    206c:	000287b7          	lui	a5,0x28
    2070:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    2074:	03e7c783          	lbu	a5,62(a5)
    2078:	fff7c793          	not	a5,a5
    207c:	0ff7f713          	zext.b	a4,a5
    2080:	000287b7          	lui	a5,0x28
    2084:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    2088:	00f777b3          	and	a5,a4,a5
    208c:	0ff7f713          	zext.b	a4,a5
    2090:	000287b7          	lui	a5,0x28
    2094:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
    }
}
    2098:	00000013          	nop
    209c:	02c12403          	lw	s0,44(sp)
    20a0:	03010113          	add	sp,sp,48
    20a4:	00008067          	ret

000020a8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    20a8:	fd010113          	add	sp,sp,-48
    20ac:	02812623          	sw	s0,44(sp)
    20b0:	03010413          	add	s0,sp,48
    20b4:	fca42e23          	sw	a0,-36(s0)
    20b8:	fcb42c23          	sw	a1,-40(s0)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    20bc:	fdc42783          	lw	a5,-36(s0)
    20c0:	03c7c783          	lbu	a5,60(a5)
    20c4:	fef407a3          	sb	a5,-17(s0)
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
    20c8:	fef44783          	lbu	a5,-17(s0)
    20cc:	fd842703          	lw	a4,-40(s0)
    20d0:	00f707b3          	add	a5,a4,a5
    20d4:	00b7c683          	lbu	a3,11(a5)
    20d8:	fdc42783          	lw	a5,-36(s0)
    20dc:	03d7c783          	lbu	a5,61(a5)
    20e0:	fff7c793          	not	a5,a5
    20e4:	0ff7f713          	zext.b	a4,a5
    20e8:	fef44783          	lbu	a5,-17(s0)
    20ec:	00e6f733          	and	a4,a3,a4
    20f0:	0ff77713          	zext.b	a4,a4
    20f4:	fd842683          	lw	a3,-40(s0)
    20f8:	00f687b3          	add	a5,a3,a5
    20fc:	00e785a3          	sb	a4,11(a5)
    if (pevent->OSEventTbl[y] == 0u) {
    2100:	fef44783          	lbu	a5,-17(s0)
    2104:	fd842703          	lw	a4,-40(s0)
    2108:	00f707b3          	add	a5,a4,a5
    210c:	00b7c783          	lbu	a5,11(a5)
    2110:	02079663          	bnez	a5,213c <OS_EventTaskRemove+0x94>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
    2114:	fd842783          	lw	a5,-40(s0)
    2118:	00a7c703          	lbu	a4,10(a5)
    211c:	fdc42783          	lw	a5,-36(s0)
    2120:	03e7c783          	lbu	a5,62(a5)
    2124:	fff7c793          	not	a5,a5
    2128:	0ff7f793          	zext.b	a5,a5
    212c:	00f777b3          	and	a5,a4,a5
    2130:	0ff7f713          	zext.b	a4,a5
    2134:	fd842783          	lw	a5,-40(s0)
    2138:	00e78523          	sb	a4,10(a5)
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
    213c:	fdc42783          	lw	a5,-36(s0)
    2140:	0007ae23          	sw	zero,28(a5)
}
    2144:	00000013          	nop
    2148:	02c12403          	lw	s0,44(sp)
    214c:	03010113          	add	sp,sp,48
    2150:	00008067          	ret

00002154 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    2154:	fd010113          	add	sp,sp,-48
    2158:	02812623          	sw	s0,44(sp)
    215c:	03010413          	add	s0,sp,48
    2160:	fca42e23          	sw	a0,-36(s0)
    2164:	fcb42c23          	sw	a1,-40(s0)
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
    2168:	fdc42783          	lw	a5,-36(s0)
    216c:	03c7c783          	lbu	a5,60(a5)
    2170:	fef403a3          	sb	a5,-25(s0)
    bity    =  ptcb->OSTCBBitY;
    2174:	fdc42783          	lw	a5,-36(s0)
    2178:	03e7c783          	lbu	a5,62(a5)
    217c:	fef40323          	sb	a5,-26(s0)
    bitx    =  ptcb->OSTCBBitX;
    2180:	fdc42783          	lw	a5,-36(s0)
    2184:	03d7c783          	lbu	a5,61(a5)
    2188:	fef402a3          	sb	a5,-27(s0)
    pevents =  pevents_multi;
    218c:	fd842783          	lw	a5,-40(s0)
    2190:	fef42623          	sw	a5,-20(s0)
    pevent  = *pevents;
    2194:	fec42783          	lw	a5,-20(s0)
    2198:	0007a783          	lw	a5,0(a5)
    219c:	fef42423          	sw	a5,-24(s0)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    21a0:	0880006f          	j	2228 <OS_EventTaskRemoveMulti+0xd4>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
    21a4:	fe744783          	lbu	a5,-25(s0)
    21a8:	fe842703          	lw	a4,-24(s0)
    21ac:	00f707b3          	add	a5,a4,a5
    21b0:	00b7c683          	lbu	a3,11(a5)
    21b4:	fe544783          	lbu	a5,-27(s0)
    21b8:	fff7c793          	not	a5,a5
    21bc:	0ff7f713          	zext.b	a4,a5
    21c0:	fe744783          	lbu	a5,-25(s0)
    21c4:	00e6f733          	and	a4,a3,a4
    21c8:	0ff77713          	zext.b	a4,a4
    21cc:	fe842683          	lw	a3,-24(s0)
    21d0:	00f687b3          	add	a5,a3,a5
    21d4:	00e785a3          	sb	a4,11(a5)
        if (pevent->OSEventTbl[y] == 0u) {
    21d8:	fe744783          	lbu	a5,-25(s0)
    21dc:	fe842703          	lw	a4,-24(s0)
    21e0:	00f707b3          	add	a5,a4,a5
    21e4:	00b7c783          	lbu	a5,11(a5)
    21e8:	02079463          	bnez	a5,2210 <OS_EventTaskRemoveMulti+0xbc>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
    21ec:	fe842783          	lw	a5,-24(s0)
    21f0:	00a7c703          	lbu	a4,10(a5)
    21f4:	fe644783          	lbu	a5,-26(s0)
    21f8:	fff7c793          	not	a5,a5
    21fc:	0ff7f793          	zext.b	a5,a5
    2200:	00f777b3          	and	a5,a4,a5
    2204:	0ff7f713          	zext.b	a4,a5
    2208:	fe842783          	lw	a5,-24(s0)
    220c:	00e78523          	sb	a4,10(a5)
        }
        pevents++;
    2210:	fec42783          	lw	a5,-20(s0)
    2214:	00478793          	add	a5,a5,4
    2218:	fef42623          	sw	a5,-20(s0)
        pevent = *pevents;
    221c:	fec42783          	lw	a5,-20(s0)
    2220:	0007a783          	lw	a5,0(a5)
    2224:	fef42423          	sw	a5,-24(s0)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    2228:	fe842783          	lw	a5,-24(s0)
    222c:	f6079ce3          	bnez	a5,21a4 <OS_EventTaskRemoveMulti+0x50>
    }
}
    2230:	00000013          	nop
    2234:	00000013          	nop
    2238:	02c12403          	lw	s0,44(sp)
    223c:	03010113          	add	sp,sp,48
    2240:	00008067          	ret

00002244 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    2244:	fd010113          	add	sp,sp,-48
    2248:	02812623          	sw	s0,44(sp)
    224c:	03010413          	add	s0,sp,48
    2250:	fca42e23          	sw	a0,-36(s0)
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
    2254:	fdc42783          	lw	a5,-36(s0)
    2258:	00078523          	sb	zero,10(a5)
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
    225c:	fe0407a3          	sb	zero,-17(s0)
    2260:	0200006f          	j	2280 <OS_EventWaitListInit+0x3c>
        pevent->OSEventTbl[i] = 0u;
    2264:	fef44783          	lbu	a5,-17(s0)
    2268:	fdc42703          	lw	a4,-36(s0)
    226c:	00f707b3          	add	a5,a4,a5
    2270:	000785a3          	sb	zero,11(a5)
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
    2274:	fef44783          	lbu	a5,-17(s0)
    2278:	00178793          	add	a5,a5,1
    227c:	fef407a3          	sb	a5,-17(s0)
    2280:	fef44703          	lbu	a4,-17(s0)
    2284:	00200793          	li	a5,2
    2288:	fce7fee3          	bgeu	a5,a4,2264 <OS_EventWaitListInit+0x20>
    }
}
    228c:	00000013          	nop
    2290:	00000013          	nop
    2294:	02c12403          	lw	s0,44(sp)
    2298:	03010113          	add	sp,sp,48
    229c:	00008067          	ret

000022a0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    22a0:	fe010113          	add	sp,sp,-32
    22a4:	00112e23          	sw	ra,28(sp)
    22a8:	00812c23          	sw	s0,24(sp)
    22ac:	02010413          	add	s0,sp,32
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    22b0:	4b000593          	li	a1,1200
    22b4:	0002c7b7          	lui	a5,0x2c
    22b8:	9c878513          	add	a0,a5,-1592 # 2b9c8 <OSEventTbl>
    22bc:	424000ef          	jal	26e0 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
    22c0:	fe041723          	sh	zero,-18(s0)
    22c4:	0880006f          	j	234c <OS_InitEventList+0xac>
        ix_next = ix + 1u;
    22c8:	fee45783          	lhu	a5,-18(s0)
    22cc:	00178793          	add	a5,a5,1
    22d0:	fef41323          	sh	a5,-26(s0)
        pevent1 = &OSEventTbl[ix];
    22d4:	fee45703          	lhu	a4,-18(s0)
    22d8:	00070793          	mv	a5,a4
    22dc:	00279793          	sll	a5,a5,0x2
    22e0:	00e787b3          	add	a5,a5,a4
    22e4:	00279793          	sll	a5,a5,0x2
    22e8:	0002c737          	lui	a4,0x2c
    22ec:	9c870713          	add	a4,a4,-1592 # 2b9c8 <OSEventTbl>
    22f0:	00e787b3          	add	a5,a5,a4
    22f4:	fef42423          	sw	a5,-24(s0)
        pevent2 = &OSEventTbl[ix_next];
    22f8:	fe645703          	lhu	a4,-26(s0)
    22fc:	00070793          	mv	a5,a4
    2300:	00279793          	sll	a5,a5,0x2
    2304:	00e787b3          	add	a5,a5,a4
    2308:	00279793          	sll	a5,a5,0x2
    230c:	0002c737          	lui	a4,0x2c
    2310:	9c870713          	add	a4,a4,-1592 # 2b9c8 <OSEventTbl>
    2314:	00e787b3          	add	a5,a5,a4
    2318:	fef42023          	sw	a5,-32(s0)
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    231c:	fe842783          	lw	a5,-24(s0)
    2320:	00078023          	sb	zero,0(a5)
        pevent1->OSEventPtr     = pevent2;
    2324:	fe842783          	lw	a5,-24(s0)
    2328:	fe042703          	lw	a4,-32(s0)
    232c:	00e7a223          	sw	a4,4(a5)
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
    2330:	fe842783          	lw	a5,-24(s0)
    2334:	00023737          	lui	a4,0x23
    2338:	06470713          	add	a4,a4,100 # 23064 <OSUnMapTbl+0x100>
    233c:	00e7a823          	sw	a4,16(a5)
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
    2340:	fee45783          	lhu	a5,-18(s0)
    2344:	00178793          	add	a5,a5,1
    2348:	fef41723          	sh	a5,-18(s0)
    234c:	fee45703          	lhu	a4,-18(s0)
    2350:	03a00793          	li	a5,58
    2354:	f6e7fae3          	bgeu	a5,a4,22c8 <OS_InitEventList+0x28>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
    2358:	fee45703          	lhu	a4,-18(s0)
    235c:	00070793          	mv	a5,a4
    2360:	00279793          	sll	a5,a5,0x2
    2364:	00e787b3          	add	a5,a5,a4
    2368:	00279793          	sll	a5,a5,0x2
    236c:	0002c737          	lui	a4,0x2c
    2370:	9c870713          	add	a4,a4,-1592 # 2b9c8 <OSEventTbl>
    2374:	00e787b3          	add	a5,a5,a4
    2378:	fef42423          	sw	a5,-24(s0)
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    237c:	fe842783          	lw	a5,-24(s0)
    2380:	00078023          	sb	zero,0(a5)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    2384:	fe842783          	lw	a5,-24(s0)
    2388:	0007a223          	sw	zero,4(a5)
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
    238c:	fe842783          	lw	a5,-24(s0)
    2390:	00023737          	lui	a4,0x23
    2394:	06470713          	add	a4,a4,100 # 23064 <OSUnMapTbl+0x100>
    2398:	00e7a823          	sw	a4,16(a5)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    239c:	000277b7          	lui	a5,0x27
    23a0:	0002c737          	lui	a4,0x2c
    23a4:	9c870713          	add	a4,a4,-1592 # 2b9c8 <OSEventTbl>
    23a8:	7ee7aa23          	sw	a4,2036(a5) # 277f4 <OSEventFreeList>
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
    23ac:	00000013          	nop
    23b0:	01c12083          	lw	ra,28(sp)
    23b4:	01812403          	lw	s0,24(sp)
    23b8:	02010113          	add	sp,sp,32
    23bc:	00008067          	ret

000023c0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    23c0:	ff010113          	add	sp,sp,-16
    23c4:	00812623          	sw	s0,12(sp)
    23c8:	01010413          	add	s0,sp,16
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
    23cc:	000287b7          	lui	a5,0x28
    23d0:	8207ae23          	sw	zero,-1988(a5) # 2783c <OSTime>
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
    23d4:	000287b7          	lui	a5,0x28
    23d8:	800784a3          	sb	zero,-2039(a5) # 27809 <OSIntNesting>
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
    23dc:	000287b7          	lui	a5,0x28
    23e0:	80078523          	sb	zero,-2038(a5) # 2780a <OSLockNesting>

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
    23e4:	000287b7          	lui	a5,0x28
    23e8:	80078a23          	sb	zero,-2028(a5) # 27814 <OSTaskCtr>

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
    23ec:	000287b7          	lui	a5,0x28
    23f0:	800789a3          	sb	zero,-2029(a5) # 27813 <OSRunning>

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
    23f4:	000277b7          	lui	a5,0x27
    23f8:	7e07a823          	sw	zero,2032(a5) # 277f0 <OSCtxSwCtr>
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
    23fc:	000287b7          	lui	a5,0x28
    2400:	8007ac23          	sw	zero,-2024(a5) # 27818 <OSIdleCtr>

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
    2404:	000287b7          	lui	a5,0x28
    2408:	8007a223          	sw	zero,-2044(a5) # 27804 <OSIdleCtrRun>
    OSIdleCtrMax              = 0uL;
    240c:	000287b7          	lui	a5,0x28
    2410:	8007a023          	sw	zero,-2048(a5) # 27800 <OSIdleCtrMax>
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
    2414:	000287b7          	lui	a5,0x28
    2418:	80078423          	sb	zero,-2040(a5) # 27808 <OSStatRdy>
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
    241c:	000287b7          	lui	a5,0x28
    2420:	82078c23          	sb	zero,-1992(a5) # 27838 <OSTaskRegNextAvailID>
#endif
}
    2424:	00000013          	nop
    2428:	00c12403          	lw	s0,12(sp)
    242c:	01010113          	add	sp,sp,16
    2430:	00008067          	ret

00002434 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    2434:	fe010113          	add	sp,sp,-32
    2438:	00812e23          	sw	s0,28(sp)
    243c:	02010413          	add	s0,sp,32
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
    2440:	000287b7          	lui	a5,0x28
    2444:	800786a3          	sb	zero,-2035(a5) # 2780d <OSRdyGrp>
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
    2448:	fe0407a3          	sb	zero,-17(s0)
    244c:	0240006f          	j	2470 <OS_InitRdyList+0x3c>
        OSRdyTbl[i] = 0u;
    2450:	fef44703          	lbu	a4,-17(s0)
    2454:	000287b7          	lui	a5,0x28
    2458:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    245c:	00f707b3          	add	a5,a4,a5
    2460:	00078023          	sb	zero,0(a5)
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
    2464:	fef44783          	lbu	a5,-17(s0)
    2468:	00178793          	add	a5,a5,1
    246c:	fef407a3          	sb	a5,-17(s0)
    2470:	fef44703          	lbu	a4,-17(s0)
    2474:	00200793          	li	a5,2
    2478:	fce7fce3          	bgeu	a5,a4,2450 <OS_InitRdyList+0x1c>
    }

    OSPrioCur     = 0u;
    247c:	000287b7          	lui	a5,0x28
    2480:	800785a3          	sb	zero,-2037(a5) # 2780b <OSPrioCur>
    OSPrioHighRdy = 0u;
    2484:	000287b7          	lui	a5,0x28
    2488:	80078623          	sb	zero,-2036(a5) # 2780c <OSPrioHighRdy>

    OSTCBHighRdy  = (OS_TCB *)0;
    248c:	000287b7          	lui	a5,0x28
    2490:	8207a223          	sw	zero,-2012(a5) # 27824 <OSTCBHighRdy>
    OSTCBCur      = (OS_TCB *)0;
    2494:	000287b7          	lui	a5,0x28
    2498:	8007ae23          	sw	zero,-2020(a5) # 2781c <OSTCBCur>
}
    249c:	00000013          	nop
    24a0:	01c12403          	lw	s0,28(sp)
    24a4:	02010113          	add	sp,sp,32
    24a8:	00008067          	ret

000024ac <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    24ac:	fd010113          	add	sp,sp,-48
    24b0:	02112623          	sw	ra,44(sp)
    24b4:	02812423          	sw	s0,40(sp)
    24b8:	03010413          	add	s0,sp,48
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
    24bc:	00300793          	li	a5,3
    24c0:	00f12023          	sw	a5,0(sp)
    24c4:	00000893          	li	a7,0
    24c8:	20000813          	li	a6,512
    24cc:	0002c7b7          	lui	a5,0x2c
    24d0:	7b878793          	add	a5,a5,1976 # 2c7b8 <OSTaskIdleStk>
    24d4:	00010737          	lui	a4,0x10
    24d8:	fff70713          	add	a4,a4,-1 # ffff <__sfvwrite_r+0x9b>
    24dc:	01400693          	li	a3,20
    24e0:	0002d637          	lui	a2,0x2d
    24e4:	fb460613          	add	a2,a2,-76 # 2cfb4 <OSTaskIdleStk+0x7fc>
    24e8:	00000593          	li	a1,0
    24ec:	00003537          	lui	a0,0x3
    24f0:	95450513          	add	a0,a0,-1708 # 2954 <OS_TaskIdle>
    24f4:	02c060ef          	jal	8520 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
    24f8:	fef40793          	add	a5,s0,-17
    24fc:	00078613          	mv	a2,a5
    2500:	000237b7          	lui	a5,0x23
    2504:	06878593          	add	a1,a5,104 # 23068 <OSUnMapTbl+0x104>
    2508:	01400513          	li	a0,20
    250c:	06d060ef          	jal	8d78 <OSTaskNameSet>
#endif
}
    2510:	00000013          	nop
    2514:	02c12083          	lw	ra,44(sp)
    2518:	02812403          	lw	s0,40(sp)
    251c:	03010113          	add	sp,sp,48
    2520:	00008067          	ret

00002524 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
    2524:	fd010113          	add	sp,sp,-48
    2528:	02112623          	sw	ra,44(sp)
    252c:	02812423          	sw	s0,40(sp)
    2530:	03010413          	add	s0,sp,48
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
    2534:	00300793          	li	a5,3
    2538:	00f12023          	sw	a5,0(sp)
    253c:	00000893          	li	a7,0
    2540:	20000813          	li	a6,512
    2544:	0002c7b7          	lui	a5,0x2c
    2548:	fb878793          	add	a5,a5,-72 # 2bfb8 <OSTaskStatStk>
    254c:	00010737          	lui	a4,0x10
    2550:	ffe70713          	add	a4,a4,-2 # fffe <__sfvwrite_r+0x9a>
    2554:	01300693          	li	a3,19
    2558:	0002c637          	lui	a2,0x2c
    255c:	7b460613          	add	a2,a2,1972 # 2c7b4 <OSTaskStatStk+0x7fc>
    2560:	00000593          	li	a1,0
    2564:	00003537          	lui	a0,0x3
    2568:	9b850513          	add	a0,a0,-1608 # 29b8 <OS_TaskStat>
    256c:	7b5050ef          	jal	8520 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
    2570:	fef40793          	add	a5,s0,-17
    2574:	00078613          	mv	a2,a5
    2578:	000237b7          	lui	a5,0x23
    257c:	07878593          	add	a1,a5,120 # 23078 <OSUnMapTbl+0x114>
    2580:	01300513          	li	a0,19
    2584:	7f4060ef          	jal	8d78 <OSTaskNameSet>
#endif
}
    2588:	00000013          	nop
    258c:	02c12083          	lw	ra,44(sp)
    2590:	02812403          	lw	s0,40(sp)
    2594:	03010113          	add	sp,sp,48
    2598:	00008067          	ret

0000259c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    259c:	fe010113          	add	sp,sp,-32
    25a0:	00112e23          	sw	ra,28(sp)
    25a4:	00812c23          	sw	s0,24(sp)
    25a8:	02010413          	add	s0,sp,32
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    25ac:	000017b7          	lui	a5,0x1
    25b0:	a2078593          	add	a1,a5,-1504 # a20 <__env_lock+0x60>
    25b4:	0002d7b7          	lui	a5,0x2d
    25b8:	00c78513          	add	a0,a5,12 # 2d00c <OSTCBTbl>
    25bc:	124000ef          	jal	26e0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    25c0:	05400593          	li	a1,84
    25c4:	0002d7b7          	lui	a5,0x2d
    25c8:	fb878513          	add	a0,a5,-72 # 2cfb8 <OSTCBPrioTbl>
    25cc:	114000ef          	jal	26e0 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
    25d0:	fe0407a3          	sb	zero,-17(s0)
    25d4:	0900006f          	j	2664 <OS_InitTCBList+0xc8>
        ix_next =  ix + 1u;
    25d8:	fef44783          	lbu	a5,-17(s0)
    25dc:	00178793          	add	a5,a5,1
    25e0:	fef403a3          	sb	a5,-25(s0)
        ptcb1   = &OSTCBTbl[ix];
    25e4:	fef44703          	lbu	a4,-17(s0)
    25e8:	00070793          	mv	a5,a4
    25ec:	00379793          	sll	a5,a5,0x3
    25f0:	40e787b3          	sub	a5,a5,a4
    25f4:	00279793          	sll	a5,a5,0x2
    25f8:	40e787b3          	sub	a5,a5,a4
    25fc:	00379793          	sll	a5,a5,0x3
    2600:	0002d737          	lui	a4,0x2d
    2604:	00c70713          	add	a4,a4,12 # 2d00c <OSTCBTbl>
    2608:	00e787b3          	add	a5,a5,a4
    260c:	fef42423          	sw	a5,-24(s0)
        ptcb2   = &OSTCBTbl[ix_next];
    2610:	fe744703          	lbu	a4,-25(s0)
    2614:	00070793          	mv	a5,a4
    2618:	00379793          	sll	a5,a5,0x3
    261c:	40e787b3          	sub	a5,a5,a4
    2620:	00279793          	sll	a5,a5,0x2
    2624:	40e787b3          	sub	a5,a5,a4
    2628:	00379793          	sll	a5,a5,0x3
    262c:	0002d737          	lui	a4,0x2d
    2630:	00c70713          	add	a4,a4,12 # 2d00c <OSTCBTbl>
    2634:	00e787b3          	add	a5,a5,a4
    2638:	fef42023          	sw	a5,-32(s0)
        ptcb1->OSTCBNext = ptcb2;
    263c:	fe842783          	lw	a5,-24(s0)
    2640:	fe042703          	lw	a4,-32(s0)
    2644:	00e7aa23          	sw	a4,20(a5)
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
    2648:	fe842783          	lw	a5,-24(s0)
    264c:	00023737          	lui	a4,0x23
    2650:	06470713          	add	a4,a4,100 # 23064 <OSUnMapTbl+0x100>
    2654:	04e7aa23          	sw	a4,84(a5)
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
    2658:	fef44783          	lbu	a5,-17(s0)
    265c:	00178793          	add	a5,a5,1
    2660:	fef407a3          	sb	a5,-17(s0)
    2664:	fef44703          	lbu	a4,-17(s0)
    2668:	00a00793          	li	a5,10
    266c:	f6e7f6e3          	bgeu	a5,a4,25d8 <OS_InitTCBList+0x3c>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
    2670:	fef44703          	lbu	a4,-17(s0)
    2674:	00070793          	mv	a5,a4
    2678:	00379793          	sll	a5,a5,0x3
    267c:	40e787b3          	sub	a5,a5,a4
    2680:	00279793          	sll	a5,a5,0x2
    2684:	40e787b3          	sub	a5,a5,a4
    2688:	00379793          	sll	a5,a5,0x3
    268c:	0002d737          	lui	a4,0x2d
    2690:	00c70713          	add	a4,a4,12 # 2d00c <OSTCBTbl>
    2694:	00e787b3          	add	a5,a5,a4
    2698:	fef42423          	sw	a5,-24(s0)
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
    269c:	fe842783          	lw	a5,-24(s0)
    26a0:	0007aa23          	sw	zero,20(a5)
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
    26a4:	fe842783          	lw	a5,-24(s0)
    26a8:	00023737          	lui	a4,0x23
    26ac:	06470713          	add	a4,a4,100 # 23064 <OSUnMapTbl+0x100>
    26b0:	04e7aa23          	sw	a4,84(a5)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    26b4:	000287b7          	lui	a5,0x28
    26b8:	8207a423          	sw	zero,-2008(a5) # 27828 <OSTCBList>
    OSTCBFreeList           = &OSTCBTbl[0];
    26bc:	000287b7          	lui	a5,0x28
    26c0:	0002d737          	lui	a4,0x2d
    26c4:	00c70713          	add	a4,a4,12 # 2d00c <OSTCBTbl>
    26c8:	82e7a023          	sw	a4,-2016(a5) # 27820 <OSTCBFreeList>
}
    26cc:	00000013          	nop
    26d0:	01c12083          	lw	ra,28(sp)
    26d4:	01812403          	lw	s0,24(sp)
    26d8:	02010113          	add	sp,sp,32
    26dc:	00008067          	ret

000026e0 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
    26e0:	fe010113          	add	sp,sp,-32
    26e4:	00812e23          	sw	s0,28(sp)
    26e8:	02010413          	add	s0,sp,32
    26ec:	fea42623          	sw	a0,-20(s0)
    26f0:	00058793          	mv	a5,a1
    26f4:	fef41523          	sh	a5,-22(s0)
    while (size > 0u) {
    26f8:	0200006f          	j	2718 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    26fc:	fec42783          	lw	a5,-20(s0)
    2700:	00178713          	add	a4,a5,1
    2704:	fee42623          	sw	a4,-20(s0)
    2708:	00078023          	sb	zero,0(a5)
        size--;
    270c:	fea45783          	lhu	a5,-22(s0)
    2710:	fff78793          	add	a5,a5,-1
    2714:	fef41523          	sh	a5,-22(s0)
    while (size > 0u) {
    2718:	fea45783          	lhu	a5,-22(s0)
    271c:	fe0790e3          	bnez	a5,26fc <OS_MemClr+0x1c>
    }
}
    2720:	00000013          	nop
    2724:	00000013          	nop
    2728:	01c12403          	lw	s0,28(sp)
    272c:	02010113          	add	sp,sp,32
    2730:	00008067          	ret

00002734 <OS_MemCopy>:
*/

void  OS_MemCopy (INT8U  *pdest,
                  INT8U  *psrc,
                  INT16U  size)
{
    2734:	fe010113          	add	sp,sp,-32
    2738:	00812e23          	sw	s0,28(sp)
    273c:	02010413          	add	s0,sp,32
    2740:	fea42623          	sw	a0,-20(s0)
    2744:	feb42423          	sw	a1,-24(s0)
    2748:	00060793          	mv	a5,a2
    274c:	fef41323          	sh	a5,-26(s0)
    while (size > 0u) {
    2750:	0300006f          	j	2780 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    2754:	fe842703          	lw	a4,-24(s0)
    2758:	00170793          	add	a5,a4,1
    275c:	fef42423          	sw	a5,-24(s0)
    2760:	fec42783          	lw	a5,-20(s0)
    2764:	00178693          	add	a3,a5,1
    2768:	fed42623          	sw	a3,-20(s0)
    276c:	00074703          	lbu	a4,0(a4)
    2770:	00e78023          	sb	a4,0(a5)
        size--;
    2774:	fe645783          	lhu	a5,-26(s0)
    2778:	fff78793          	add	a5,a5,-1
    277c:	fef41323          	sh	a5,-26(s0)
    while (size > 0u) {
    2780:	fe645783          	lhu	a5,-26(s0)
    2784:	fc0798e3          	bnez	a5,2754 <OS_MemCopy+0x20>
    }
}
    2788:	00000013          	nop
    278c:	00000013          	nop
    2790:	01c12403          	lw	s0,28(sp)
    2794:	02010113          	add	sp,sp,32
    2798:	00008067          	ret

0000279c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    279c:	fe010113          	add	sp,sp,-32
    27a0:	00112e23          	sw	ra,28(sp)
    27a4:	00812c23          	sw	s0,24(sp)
    27a8:	02010413          	add	s0,sp,32
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
    27ac:	fe042623          	sw	zero,-20(s0)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    27b0:	00800793          	li	a5,8
    27b4:	3007b7f3          	csrrc	a5,mstatus,a5
    27b8:	fef42423          	sw	a5,-24(s0)
    return context;
    27bc:	fe842783          	lw	a5,-24(s0)
#endif



    OS_ENTER_CRITICAL();
    27c0:	fef42623          	sw	a5,-20(s0)
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
    27c4:	000287b7          	lui	a5,0x28
    27c8:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    27cc:	06079e63          	bnez	a5,2848 <OS_Sched+0xac>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
    27d0:	000287b7          	lui	a5,0x28
    27d4:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    27d8:	06079863          	bnez	a5,2848 <OS_Sched+0xac>
            OS_SchedNew();
    27dc:	098000ef          	jal	2874 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    27e0:	000287b7          	lui	a5,0x28
    27e4:	80c7c783          	lbu	a5,-2036(a5) # 2780c <OSPrioHighRdy>
    27e8:	00078693          	mv	a3,a5
    27ec:	0002d7b7          	lui	a5,0x2d
    27f0:	fb878713          	add	a4,a5,-72 # 2cfb8 <OSTCBPrioTbl>
    27f4:	00269793          	sll	a5,a3,0x2
    27f8:	00f707b3          	add	a5,a4,a5
    27fc:	0007a703          	lw	a4,0(a5)
    2800:	000287b7          	lui	a5,0x28
    2804:	82e7a223          	sw	a4,-2012(a5) # 27824 <OSTCBHighRdy>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    2808:	000287b7          	lui	a5,0x28
    280c:	80c7c703          	lbu	a4,-2036(a5) # 2780c <OSPrioHighRdy>
    2810:	000287b7          	lui	a5,0x28
    2814:	80b7c783          	lbu	a5,-2037(a5) # 2780b <OSPrioCur>
    2818:	02f70863          	beq	a4,a5,2848 <OS_Sched+0xac>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    281c:	000287b7          	lui	a5,0x28
    2820:	8247a783          	lw	a5,-2012(a5) # 27824 <OSTCBHighRdy>
    2824:	0407a703          	lw	a4,64(a5)
    2828:	00170713          	add	a4,a4,1
    282c:	04e7a023          	sw	a4,64(a5)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    2830:	000277b7          	lui	a5,0x27
    2834:	7f07a783          	lw	a5,2032(a5) # 277f0 <OSCtxSwCtr>
    2838:	00178713          	add	a4,a5,1
    283c:	000277b7          	lui	a5,0x27
    2840:	7ee7a823          	sw	a4,2032(a5) # 277f0 <OSCtxSwCtr>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
    2844:	4d8080ef          	jal	ad1c <OSCtxSw>
    2848:	fec42783          	lw	a5,-20(s0)
    284c:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2850:	fe442783          	lw	a5,-28(s0)
    2854:	0087f793          	and	a5,a5,8
    2858:	3007a073          	csrs	mstatus,a5
}
    285c:	00000013          	nop
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    2860:	00000013          	nop
    2864:	01c12083          	lw	ra,28(sp)
    2868:	01812403          	lw	s0,24(sp)
    286c:	02010113          	add	sp,sp,32
    2870:	00008067          	ret

00002874 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    2874:	fe010113          	add	sp,sp,-32
    2878:	00812e23          	sw	s0,28(sp)
    287c:	02010413          	add	s0,sp,32
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    2880:	000287b7          	lui	a5,0x28
    2884:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    2888:	00078713          	mv	a4,a5
    288c:	000237b7          	lui	a5,0x23
    2890:	f6478793          	add	a5,a5,-156 # 22f64 <OSUnMapTbl>
    2894:	00e787b3          	add	a5,a5,a4
    2898:	0007c783          	lbu	a5,0(a5)
    289c:	fef407a3          	sb	a5,-17(s0)
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
    28a0:	fef44783          	lbu	a5,-17(s0)
    28a4:	00379793          	sll	a5,a5,0x3
    28a8:	0ff7f713          	zext.b	a4,a5
    28ac:	fef44683          	lbu	a3,-17(s0)
    28b0:	000287b7          	lui	a5,0x28
    28b4:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    28b8:	00f687b3          	add	a5,a3,a5
    28bc:	0007c783          	lbu	a5,0(a5)
    28c0:	00078693          	mv	a3,a5
    28c4:	000237b7          	lui	a5,0x23
    28c8:	f6478793          	add	a5,a5,-156 # 22f64 <OSUnMapTbl>
    28cc:	00d787b3          	add	a5,a5,a3
    28d0:	0007c783          	lbu	a5,0(a5)
    28d4:	00f707b3          	add	a5,a4,a5
    28d8:	0ff7f713          	zext.b	a4,a5
    28dc:	000287b7          	lui	a5,0x28
    28e0:	80e78623          	sb	a4,-2036(a5) # 2780c <OSPrioHighRdy>
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
    28e4:	00000013          	nop
    28e8:	01c12403          	lw	s0,28(sp)
    28ec:	02010113          	add	sp,sp,32
    28f0:	00008067          	ret

000028f4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_EN > 0u) || (OS_FLAG_NAME_EN > 0u) || (OS_MEM_NAME_EN > 0u) || (OS_TASK_NAME_EN > 0u) || (OS_TMR_CFG_NAME_EN > 0u)
INT8U  OS_StrLen (INT8U *psrc)
{
    28f4:	fd010113          	add	sp,sp,-48
    28f8:	02812623          	sw	s0,44(sp)
    28fc:	03010413          	add	s0,sp,48
    2900:	fca42e23          	sw	a0,-36(s0)
    INT8U  len;


#if OS_ARG_CHK_EN > 0u
    if (psrc == (INT8U *)0) {
    2904:	fdc42783          	lw	a5,-36(s0)
    2908:	00079663          	bnez	a5,2914 <OS_StrLen+0x20>
        return (0u);
    290c:	00000793          	li	a5,0
    2910:	0340006f          	j	2944 <OS_StrLen+0x50>
    }
#endif

    len = 0u;
    2914:	fe0407a3          	sb	zero,-17(s0)
    while (*psrc != OS_ASCII_NUL) {
    2918:	01c0006f          	j	2934 <OS_StrLen+0x40>
        psrc++;
    291c:	fdc42783          	lw	a5,-36(s0)
    2920:	00178793          	add	a5,a5,1
    2924:	fcf42e23          	sw	a5,-36(s0)
        len++;
    2928:	fef44783          	lbu	a5,-17(s0)
    292c:	00178793          	add	a5,a5,1
    2930:	fef407a3          	sb	a5,-17(s0)
    while (*psrc != OS_ASCII_NUL) {
    2934:	fdc42783          	lw	a5,-36(s0)
    2938:	0007c783          	lbu	a5,0(a5)
    293c:	fe0790e3          	bnez	a5,291c <OS_StrLen+0x28>
    }
    return (len);
    2940:	fef44783          	lbu	a5,-17(s0)
}
    2944:	00078513          	mv	a0,a5
    2948:	02c12403          	lw	s0,44(sp)
    294c:	03010113          	add	sp,sp,48
    2950:	00008067          	ret

00002954 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    2954:	fd010113          	add	sp,sp,-48
    2958:	02112623          	sw	ra,44(sp)
    295c:	02812423          	sw	s0,40(sp)
    2960:	03010413          	add	s0,sp,48
    2964:	fca42e23          	sw	a0,-36(s0)
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    2968:	fe042623          	sw	zero,-20(s0)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    296c:	00800793          	li	a5,8
    2970:	3007b7f3          	csrrc	a5,mstatus,a5
    2974:	fef42223          	sw	a5,-28(s0)
    return context;
    2978:	fe442783          	lw	a5,-28(s0)
#endif

    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    297c:	fef42623          	sw	a5,-20(s0)
        OSIdleCtr++;
    2980:	000287b7          	lui	a5,0x28
    2984:	8187a783          	lw	a5,-2024(a5) # 27818 <OSIdleCtr>
    2988:	00178713          	add	a4,a5,1
    298c:	000287b7          	lui	a5,0x28
    2990:	80e7ac23          	sw	a4,-2024(a5) # 27818 <OSIdleCtr>
    2994:	fec42783          	lw	a5,-20(s0)
    2998:	fef42423          	sw	a5,-24(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    299c:	fe842783          	lw	a5,-24(s0)
    29a0:	0087f793          	and	a5,a5,8
    29a4:	3007a073          	csrs	mstatus,a5
}
    29a8:	00000013          	nop
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    29ac:	2fc090ef          	jal	bca8 <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
    29b0:	00000013          	nop
    29b4:	fb9ff06f          	j	296c <OS_TaskIdle+0x18>

000029b8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
    29b8:	fc010113          	add	sp,sp,-64
    29bc:	02112e23          	sw	ra,60(sp)
    29c0:	02812c23          	sw	s0,56(sp)
    29c4:	04010413          	add	s0,sp,64
    29c8:	fca42623          	sw	a0,-52(s0)
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    29cc:	fe042623          	sw	zero,-20(s0)
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    29d0:	00c0006f          	j	29dc <OS_TaskStat+0x24>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
    29d4:	0c800513          	li	a0,200
    29d8:	75d060ef          	jal	9934 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
    29dc:	000287b7          	lui	a5,0x28
    29e0:	8087c783          	lbu	a5,-2040(a5) # 27808 <OSStatRdy>
    29e4:	fe0788e3          	beqz	a5,29d4 <OS_TaskStat+0x1c>
    }
    OSIdleCtrMax /= 100uL;
    29e8:	000287b7          	lui	a5,0x28
    29ec:	8007a783          	lw	a5,-2048(a5) # 27800 <OSIdleCtrMax>
    29f0:	06400593          	li	a1,100
    29f4:	00078513          	mv	a0,a5
    29f8:	1681f0ef          	jal	21b60 <__hidden___udivsi3>
    29fc:	00050793          	mv	a5,a0
    2a00:	00078713          	mv	a4,a5
    2a04:	000287b7          	lui	a5,0x28
    2a08:	80e7a023          	sw	a4,-2048(a5) # 27800 <OSIdleCtrMax>
    if (OSIdleCtrMax == 0uL) {
    2a0c:	000287b7          	lui	a5,0x28
    2a10:	8007a783          	lw	a5,-2048(a5) # 27800 <OSIdleCtrMax>
    2a14:	00079a63          	bnez	a5,2a28 <OS_TaskStat+0x70>
        OSCPUUsage = 0u;
    2a18:	000277b7          	lui	a5,0x27
    2a1c:	7e078e23          	sb	zero,2044(a5) # 277fc <OSCPUUsage>
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
    2a20:	0ff00513          	li	a0,255
    2a24:	065060ef          	jal	9288 <OSTaskSuspend>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2a28:	00800793          	li	a5,8
    2a2c:	3007b7f3          	csrrc	a5,mstatus,a5
    2a30:	fef42023          	sw	a5,-32(s0)
    return context;
    2a34:	fe042783          	lw	a5,-32(s0)
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
    2a38:	fef42623          	sw	a5,-20(s0)
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
    2a3c:	000287b7          	lui	a5,0x28
    2a40:	8007a703          	lw	a4,-2048(a5) # 27800 <OSIdleCtrMax>
    2a44:	00070793          	mv	a5,a4
    2a48:	00179793          	sll	a5,a5,0x1
    2a4c:	00e787b3          	add	a5,a5,a4
    2a50:	00379793          	sll	a5,a5,0x3
    2a54:	00e787b3          	add	a5,a5,a4
    2a58:	00279793          	sll	a5,a5,0x2
    2a5c:	00078713          	mv	a4,a5
    2a60:	000287b7          	lui	a5,0x28
    2a64:	80e7ac23          	sw	a4,-2024(a5) # 27818 <OSIdleCtr>
    2a68:	fec42783          	lw	a5,-20(s0)
    2a6c:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2a70:	fe442783          	lw	a5,-28(s0)
    2a74:	0087f793          	and	a5,a5,8
    2a78:	3007a073          	csrs	mstatus,a5
}
    2a7c:	00000013          	nop
    OS_EXIT_CRITICAL();
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
    2a80:	00100513          	li	a0,1
    2a84:	6b1060ef          	jal	9934 <OSTimeDly>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2a88:	00800793          	li	a5,8
    2a8c:	3007b7f3          	csrrc	a5,mstatus,a5
    2a90:	fcf42823          	sw	a5,-48(s0)
    return context;
    2a94:	fd042783          	lw	a5,-48(s0)

        OS_ENTER_CRITICAL();
    2a98:	fef42623          	sw	a5,-20(s0)
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
    2a9c:	000287b7          	lui	a5,0x28
    2aa0:	8007ac23          	sw	zero,-2024(a5) # 27818 <OSIdleCtr>
    2aa4:	fec42783          	lw	a5,-20(s0)
    2aa8:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2aac:	fd442783          	lw	a5,-44(s0)
    2ab0:	0087f793          	and	a5,a5,8
    2ab4:	3007a073          	csrs	mstatus,a5
}
    2ab8:	00000013          	nop
        OS_EXIT_CRITICAL();

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
    2abc:	06400513          	li	a0,100
    2ac0:	675060ef          	jal	9934 <OSTimeDly>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2ac4:	00800793          	li	a5,8
    2ac8:	3007b7f3          	csrrc	a5,mstatus,a5
    2acc:	fcf42c23          	sw	a5,-40(s0)
    return context;
    2ad0:	fd842783          	lw	a5,-40(s0)

        OS_ENTER_CRITICAL();
    2ad4:	fef42623          	sw	a5,-20(s0)
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
    2ad8:	000287b7          	lui	a5,0x28
    2adc:	8187a703          	lw	a4,-2024(a5) # 27818 <OSIdleCtr>
    2ae0:	000287b7          	lui	a5,0x28
    2ae4:	80e7a223          	sw	a4,-2044(a5) # 27804 <OSIdleCtrRun>
    2ae8:	fec42783          	lw	a5,-20(s0)
    2aec:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2af0:	fdc42783          	lw	a5,-36(s0)
    2af4:	0087f793          	and	a5,a5,8
    2af8:	3007a073          	csrs	mstatus,a5
}
    2afc:	00000013          	nop
        OS_EXIT_CRITICAL();

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
    2b00:	000287b7          	lui	a5,0x28
    2b04:	8047a703          	lw	a4,-2044(a5) # 27804 <OSIdleCtrRun>
    2b08:	000287b7          	lui	a5,0x28
    2b0c:	8007a783          	lw	a5,-2048(a5) # 27800 <OSIdleCtrMax>
    2b10:	00078593          	mv	a1,a5
    2b14:	00070513          	mv	a0,a4
    2b18:	0481f0ef          	jal	21b60 <__hidden___udivsi3>
    2b1c:	00050793          	mv	a5,a0
    2b20:	0ff7f793          	zext.b	a5,a5
    2b24:	06400713          	li	a4,100
    2b28:	40f707b3          	sub	a5,a4,a5
    2b2c:	0ff7f793          	zext.b	a5,a5
    2b30:	fef405a3          	sb	a5,-21(s0)
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
    2b34:	feb40783          	lb	a5,-21(s0)
    2b38:	0007ca63          	bltz	a5,2b4c <OS_TaskStat+0x194>
            OSCPUUsage   = (INT8U)usage;
    2b3c:	feb44703          	lbu	a4,-21(s0)
    2b40:	000277b7          	lui	a5,0x27
    2b44:	7ee78e23          	sb	a4,2044(a5) # 277fc <OSCPUUsage>
    2b48:	0300006f          	j	2b78 <OS_TaskStat+0x1c0>
        } else {
            OSCPUUsage   = 0u;
    2b4c:	000277b7          	lui	a5,0x27
    2b50:	7e078e23          	sb	zero,2044(a5) # 277fc <OSCPUUsage>
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
    2b54:	000287b7          	lui	a5,0x28
    2b58:	8047a783          	lw	a5,-2044(a5) # 27804 <OSIdleCtrRun>
    2b5c:	06400593          	li	a1,100
    2b60:	00078513          	mv	a0,a5
    2b64:	7fd1e0ef          	jal	21b60 <__hidden___udivsi3>
    2b68:	00050793          	mv	a5,a0
    2b6c:	00078713          	mv	a4,a5
    2b70:	000287b7          	lui	a5,0x28
    2b74:	80e7a023          	sw	a4,-2048(a5) # 27800 <OSIdleCtrMax>
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
    2b78:	0c0090ef          	jal	bc38 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    2b7c:	008000ef          	jal	2b84 <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
    2b80:	f01ff06f          	j	2a80 <OS_TaskStat+0xc8>

00002b84 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
    2b84:	fe010113          	add	sp,sp,-32
    2b88:	00112e23          	sw	ra,28(sp)
    2b8c:	00812c23          	sw	s0,24(sp)
    2b90:	02010413          	add	s0,sp,32
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
    2b94:	fe0407a3          	sb	zero,-17(s0)
    2b98:	0900006f          	j	2c28 <OS_TaskStatStkChk+0xa4>
        err = OSTaskStkChk(prio, &stk_data);
    2b9c:	fe040713          	add	a4,s0,-32
    2ba0:	fef44783          	lbu	a5,-17(s0)
    2ba4:	00070593          	mv	a1,a4
    2ba8:	00078513          	mv	a0,a5
    2bac:	524060ef          	jal	90d0 <OSTaskStkChk>
    2bb0:	00050793          	mv	a5,a0
    2bb4:	fef40723          	sb	a5,-18(s0)
        if (err == OS_ERR_NONE) {
    2bb8:	fee44783          	lbu	a5,-18(s0)
    2bbc:	06079063          	bnez	a5,2c1c <OS_TaskStatStkChk+0x98>
            ptcb = OSTCBPrioTbl[prio];
    2bc0:	fef44783          	lbu	a5,-17(s0)
    2bc4:	0002d737          	lui	a4,0x2d
    2bc8:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    2bcc:	00279793          	sll	a5,a5,0x2
    2bd0:	00f707b3          	add	a5,a4,a5
    2bd4:	0007a783          	lw	a5,0(a5)
    2bd8:	fef42423          	sw	a5,-24(s0)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    2bdc:	fe842783          	lw	a5,-24(s0)
    2be0:	02078e63          	beqz	a5,2c1c <OS_TaskStatStkChk+0x98>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    2be4:	fe842703          	lw	a4,-24(s0)
    2be8:	00100793          	li	a5,1
    2bec:	02f70863          	beq	a4,a5,2c1c <OS_TaskStatStkChk+0x98>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    2bf0:	fe842783          	lw	a5,-24(s0)
    2bf4:	0087a703          	lw	a4,8(a5)
    2bf8:	fe842783          	lw	a5,-24(s0)
    2bfc:	00c7a783          	lw	a5,12(a5)
    2c00:	00279793          	sll	a5,a5,0x2
    2c04:	00f70733          	add	a4,a4,a5
    2c08:	fe842783          	lw	a5,-24(s0)
    2c0c:	04e7a623          	sw	a4,76(a5)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
    2c10:	fe442703          	lw	a4,-28(s0)
    2c14:	fe842783          	lw	a5,-24(s0)
    2c18:	04e7a823          	sw	a4,80(a5)
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
    2c1c:	fef44783          	lbu	a5,-17(s0)
    2c20:	00178793          	add	a5,a5,1
    2c24:	fef407a3          	sb	a5,-17(s0)
    2c28:	fef44703          	lbu	a4,-17(s0)
    2c2c:	01400793          	li	a5,20
    2c30:	f6e7f6e3          	bgeu	a5,a4,2b9c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    2c34:	00000013          	nop
    2c38:	00000013          	nop
    2c3c:	01c12083          	lw	ra,28(sp)
    2c40:	01812403          	lw	s0,24(sp)
    2c44:	02010113          	add	sp,sp,32
    2c48:	00008067          	ret

00002c4c <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
    2c4c:	fa010113          	add	sp,sp,-96
    2c50:	04112e23          	sw	ra,92(sp)
    2c54:	04812c23          	sw	s0,88(sp)
    2c58:	06010413          	add	s0,sp,96
    2c5c:	fab42c23          	sw	a1,-72(s0)
    2c60:	fac42a23          	sw	a2,-76(s0)
    2c64:	fae42823          	sw	a4,-80(s0)
    2c68:	faf42623          	sw	a5,-84(s0)
    2c6c:	00080713          	mv	a4,a6
    2c70:	00050793          	mv	a5,a0
    2c74:	faf40fa3          	sb	a5,-65(s0)
    2c78:	00068793          	mv	a5,a3
    2c7c:	faf41e23          	sh	a5,-68(s0)
    2c80:	00070793          	mv	a5,a4
    2c84:	faf41523          	sh	a5,-86(s0)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
    2c88:	fe042423          	sw	zero,-24(s0)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2c8c:	00800793          	li	a5,8
    2c90:	3007b7f3          	csrrc	a5,mstatus,a5
    2c94:	fef42023          	sw	a5,-32(s0)
    return context;
    2c98:	fe042783          	lw	a5,-32(s0)
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
    2c9c:	fef42423          	sw	a5,-24(s0)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    2ca0:	000287b7          	lui	a5,0x28
    2ca4:	8207a783          	lw	a5,-2016(a5) # 27820 <OSTCBFreeList>
    2ca8:	fef42223          	sw	a5,-28(s0)
    if (ptcb != (OS_TCB *)0) {
    2cac:	fe442783          	lw	a5,-28(s0)
    2cb0:	2e078463          	beqz	a5,2f98 <OS_TCBInit+0x34c>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    2cb4:	fe442783          	lw	a5,-28(s0)
    2cb8:	0147a703          	lw	a4,20(a5)
    2cbc:	000287b7          	lui	a5,0x28
    2cc0:	82e7a023          	sw	a4,-2016(a5) # 27820 <OSTCBFreeList>
    2cc4:	fe842783          	lw	a5,-24(s0)
    2cc8:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2ccc:	fdc42783          	lw	a5,-36(s0)
    2cd0:	0087f793          	and	a5,a5,8
    2cd4:	3007a073          	csrs	mstatus,a5
}
    2cd8:	00000013          	nop
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    2cdc:	fe442783          	lw	a5,-28(s0)
    2ce0:	fb842703          	lw	a4,-72(s0)
    2ce4:	00e7a023          	sw	a4,0(a5)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    2ce8:	fe442783          	lw	a5,-28(s0)
    2cec:	fbf44703          	lbu	a4,-65(s0)
    2cf0:	02e78d23          	sb	a4,58(a5)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    2cf4:	fe442783          	lw	a5,-28(s0)
    2cf8:	02078c23          	sb	zero,56(a5)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    2cfc:	fe442783          	lw	a5,-28(s0)
    2d00:	02078ca3          	sb	zero,57(a5)
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
    2d04:	fe442783          	lw	a5,-28(s0)
    2d08:	0207aa23          	sw	zero,52(a5)

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    2d0c:	fe442783          	lw	a5,-28(s0)
    2d10:	fac42703          	lw	a4,-84(s0)
    2d14:	00e7a223          	sw	a4,4(a5)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    2d18:	fe442783          	lw	a5,-28(s0)
    2d1c:	fb042703          	lw	a4,-80(s0)
    2d20:	00e7a623          	sw	a4,12(a5)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    2d24:	fe442783          	lw	a5,-28(s0)
    2d28:	fb442703          	lw	a4,-76(s0)
    2d2c:	00e7a423          	sw	a4,8(a5)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    2d30:	fe442783          	lw	a5,-28(s0)
    2d34:	faa45703          	lhu	a4,-86(s0)
    2d38:	00e79823          	sh	a4,16(a5)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    2d3c:	fe442783          	lw	a5,-28(s0)
    2d40:	fbc45703          	lhu	a4,-68(s0)
    2d44:	00e79923          	sh	a4,18(a5)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    2d48:	fe442783          	lw	a5,-28(s0)
    2d4c:	02078fa3          	sb	zero,63(a5)
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
    2d50:	fbf44783          	lbu	a5,-65(s0)
    2d54:	0037d793          	srl	a5,a5,0x3
    2d58:	0ff7f713          	zext.b	a4,a5
    2d5c:	fe442783          	lw	a5,-28(s0)
    2d60:	02e78e23          	sb	a4,60(a5)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
    2d64:	fbf44783          	lbu	a5,-65(s0)
    2d68:	0077f793          	and	a5,a5,7
    2d6c:	0ff7f713          	zext.b	a4,a5
    2d70:	fe442783          	lw	a5,-28(s0)
    2d74:	02e78da3          	sb	a4,59(a5)
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
    2d78:	fe442783          	lw	a5,-28(s0)
    2d7c:	03c7c783          	lbu	a5,60(a5)
    2d80:	00078713          	mv	a4,a5
    2d84:	00100793          	li	a5,1
    2d88:	00e797b3          	sll	a5,a5,a4
    2d8c:	0ff7f713          	zext.b	a4,a5
    2d90:	fe442783          	lw	a5,-28(s0)
    2d94:	02e78f23          	sb	a4,62(a5)
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
    2d98:	fe442783          	lw	a5,-28(s0)
    2d9c:	03b7c783          	lbu	a5,59(a5)
    2da0:	00078713          	mv	a4,a5
    2da4:	00100793          	li	a5,1
    2da8:	00e797b3          	sll	a5,a5,a4
    2dac:	0ff7f713          	zext.b	a4,a5
    2db0:	fe442783          	lw	a5,-28(s0)
    2db4:	02e78ea3          	sb	a4,61(a5)

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    2db8:	fe442783          	lw	a5,-28(s0)
    2dbc:	0007ae23          	sw	zero,28(a5)
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    2dc0:	fe442783          	lw	a5,-28(s0)
    2dc4:	0207a023          	sw	zero,32(a5)
        ptcb->OSTCBEventMultiRdy = (OS_EVENT  *)0;         /* No events readied for Multipend          */
    2dc8:	fe442783          	lw	a5,-28(s0)
    2dcc:	0207a223          	sw	zero,36(a5)
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
    2dd0:	fe442783          	lw	a5,-28(s0)
    2dd4:	0207a623          	sw	zero,44(a5)
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
    2dd8:	fe442783          	lw	a5,-28(s0)
    2ddc:	0207a423          	sw	zero,40(a5)
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
    2de0:	fe442783          	lw	a5,-28(s0)
    2de4:	0407a023          	sw	zero,64(a5)
        ptcb->OSTCBCyclesStart   = 0uL;
    2de8:	fe442783          	lw	a5,-28(s0)
    2dec:	0407a423          	sw	zero,72(a5)
        ptcb->OSTCBCyclesTot     = 0uL;
    2df0:	fe442783          	lw	a5,-28(s0)
    2df4:	0407a223          	sw	zero,68(a5)
        ptcb->OSTCBStkBase       = (OS_STK *)0;
    2df8:	fe442783          	lw	a5,-28(s0)
    2dfc:	0407a623          	sw	zero,76(a5)
        ptcb->OSTCBStkUsed       = 0uL;
    2e00:	fe442783          	lw	a5,-28(s0)
    2e04:	0407a823          	sw	zero,80(a5)
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
    2e08:	fe442783          	lw	a5,-28(s0)
    2e0c:	00023737          	lui	a4,0x23
    2e10:	06470713          	add	a4,a4,100 # 23064 <OSUnMapTbl+0x100>
    2e14:	04e7aa23          	sw	a4,84(a5)
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
    2e18:	fe0407a3          	sb	zero,-17(s0)
    2e1c:	0280006f          	j	2e44 <OS_TCBInit+0x1f8>
            ptcb->OSTCBRegTbl[i] = 0u;
    2e20:	fef44783          	lbu	a5,-17(s0)
    2e24:	fe442703          	lw	a4,-28(s0)
    2e28:	01478793          	add	a5,a5,20
    2e2c:	00279793          	sll	a5,a5,0x2
    2e30:	00f707b3          	add	a5,a4,a5
    2e34:	0007a423          	sw	zero,8(a5)
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
    2e38:	fef44783          	lbu	a5,-17(s0)
    2e3c:	00178793          	add	a5,a5,1
    2e40:	fef407a3          	sb	a5,-17(s0)
    2e44:	fef44703          	lbu	a4,-17(s0)
    2e48:	01f00793          	li	a5,31
    2e4c:	fce7fae3          	bgeu	a5,a4,2e20 <OS_TCBInit+0x1d4>
        }
#endif

        OSTCBInitHook(ptcb);
    2e50:	fe442503          	lw	a0,-28(s0)
    2e54:	691080ef          	jal	bce4 <OSTCBInitHook>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2e58:	00800793          	li	a5,8
    2e5c:	3007b7f3          	csrrc	a5,mstatus,a5
    2e60:	fcf42823          	sw	a5,-48(s0)
    return context;
    2e64:	fd042783          	lw	a5,-48(s0)

        OS_ENTER_CRITICAL();
    2e68:	fef42423          	sw	a5,-24(s0)
        OSTCBPrioTbl[prio] = ptcb;
    2e6c:	fbf44783          	lbu	a5,-65(s0)
    2e70:	0002d737          	lui	a4,0x2d
    2e74:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    2e78:	00279793          	sll	a5,a5,0x2
    2e7c:	00f707b3          	add	a5,a4,a5
    2e80:	fe442703          	lw	a4,-28(s0)
    2e84:	00e7a023          	sw	a4,0(a5)
    2e88:	fe842783          	lw	a5,-24(s0)
    2e8c:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2e90:	fd442783          	lw	a5,-44(s0)
    2e94:	0087f793          	and	a5,a5,8
    2e98:	3007a073          	csrs	mstatus,a5
}
    2e9c:	00000013          	nop
        OS_EXIT_CRITICAL();

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    2ea0:	fe442503          	lw	a0,-28(s0)
    2ea4:	539080ef          	jal	bbdc <OSTaskCreateHook>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2ea8:	00800793          	li	a5,8
    2eac:	3007b7f3          	csrrc	a5,mstatus,a5
    2eb0:	fcf42c23          	sw	a5,-40(s0)
    return context;
    2eb4:	fd842783          	lw	a5,-40(s0)
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
    2eb8:	fef42423          	sw	a5,-24(s0)
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
    2ebc:	000287b7          	lui	a5,0x28
    2ec0:	8287a703          	lw	a4,-2008(a5) # 27828 <OSTCBList>
    2ec4:	fe442783          	lw	a5,-28(s0)
    2ec8:	00e7aa23          	sw	a4,20(a5)
        ptcb->OSTCBPrev = (OS_TCB *)0;
    2ecc:	fe442783          	lw	a5,-28(s0)
    2ed0:	0007ac23          	sw	zero,24(a5)
        if (OSTCBList != (OS_TCB *)0) {
    2ed4:	000287b7          	lui	a5,0x28
    2ed8:	8287a783          	lw	a5,-2008(a5) # 27828 <OSTCBList>
    2edc:	00078a63          	beqz	a5,2ef0 <OS_TCBInit+0x2a4>
            OSTCBList->OSTCBPrev = ptcb;
    2ee0:	000287b7          	lui	a5,0x28
    2ee4:	8287a783          	lw	a5,-2008(a5) # 27828 <OSTCBList>
    2ee8:	fe442703          	lw	a4,-28(s0)
    2eec:	00e7ac23          	sw	a4,24(a5)
        }
        OSTCBList               = ptcb;
    2ef0:	000287b7          	lui	a5,0x28
    2ef4:	fe442703          	lw	a4,-28(s0)
    2ef8:	82e7a423          	sw	a4,-2008(a5) # 27828 <OSTCBList>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    2efc:	fe442783          	lw	a5,-28(s0)
    2f00:	03e7c703          	lbu	a4,62(a5)
    2f04:	000287b7          	lui	a5,0x28
    2f08:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    2f0c:	00f767b3          	or	a5,a4,a5
    2f10:	0ff7f713          	zext.b	a4,a5
    2f14:	000287b7          	lui	a5,0x28
    2f18:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    2f1c:	fe442783          	lw	a5,-28(s0)
    2f20:	03c7c783          	lbu	a5,60(a5)
    2f24:	00078713          	mv	a4,a5
    2f28:	000287b7          	lui	a5,0x28
    2f2c:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    2f30:	00f707b3          	add	a5,a4,a5
    2f34:	0007c703          	lbu	a4,0(a5)
    2f38:	fe442783          	lw	a5,-28(s0)
    2f3c:	03d7c783          	lbu	a5,61(a5)
    2f40:	fe442683          	lw	a3,-28(s0)
    2f44:	03c6c683          	lbu	a3,60(a3)
    2f48:	00f767b3          	or	a5,a4,a5
    2f4c:	0ff7f713          	zext.b	a4,a5
    2f50:	000287b7          	lui	a5,0x28
    2f54:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    2f58:	00f687b3          	add	a5,a3,a5
    2f5c:	00e78023          	sb	a4,0(a5)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    2f60:	000287b7          	lui	a5,0x28
    2f64:	8147c783          	lbu	a5,-2028(a5) # 27814 <OSTaskCtr>
    2f68:	00178793          	add	a5,a5,1
    2f6c:	0ff7f713          	zext.b	a4,a5
    2f70:	000287b7          	lui	a5,0x28
    2f74:	80e78a23          	sb	a4,-2028(a5) # 27814 <OSTaskCtr>
    2f78:	fe842783          	lw	a5,-24(s0)
    2f7c:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2f80:	fcc42783          	lw	a5,-52(s0)
    2f84:	0087f793          	and	a5,a5,8
    2f88:	3007a073          	csrs	mstatus,a5
}
    2f8c:	00000013          	nop
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    2f90:	00000793          	li	a5,0
    2f94:	0200006f          	j	2fb4 <OS_TCBInit+0x368>
    2f98:	fe842783          	lw	a5,-24(s0)
    2f9c:	fcf42423          	sw	a5,-56(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    2fa0:	fc842783          	lw	a5,-56(s0)
    2fa4:	0087f793          	and	a5,a5,8
    2fa8:	3007a073          	csrs	mstatus,a5
}
    2fac:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    2fb0:	04200793          	li	a5,66
}
    2fb4:	00078513          	mv	a0,a5
    2fb8:	05c12083          	lw	ra,92(sp)
    2fbc:	05812403          	lw	s0,88(sp)
    2fc0:	06010113          	add	sp,sp,96
    2fc4:	00008067          	ret

00002fc8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
    2fc8:	fe010113          	add	sp,sp,-32
    2fcc:	00812e23          	sw	s0,28(sp)
    2fd0:	02010413          	add	s0,sp,32
    void  const  *ptemp;


    ptemp = (void const *)&OSDebugEn;
    2fd4:	000247b7          	lui	a5,0x24
    2fd8:	f5078793          	add	a5,a5,-176 # 23f50 <OSDebugEn>
    2fdc:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSEndiannessTest;
    2fe0:	000247b7          	lui	a5,0x24
    2fe4:	f5478793          	add	a5,a5,-172 # 23f54 <OSEndiannessTest>
    2fe8:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSEventMax;
    2fec:	000247b7          	lui	a5,0x24
    2ff0:	f5a78793          	add	a5,a5,-166 # 23f5a <OSEventMax>
    2ff4:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSEventNameEn;
    2ff8:	000247b7          	lui	a5,0x24
    2ffc:	f5c78793          	add	a5,a5,-164 # 23f5c <OSEventNameEn>
    3000:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSEventEn;
    3004:	000247b7          	lui	a5,0x24
    3008:	f5878793          	add	a5,a5,-168 # 23f58 <OSEventEn>
    300c:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSEventSize;
    3010:	000247b7          	lui	a5,0x24
    3014:	f5e78793          	add	a5,a5,-162 # 23f5e <OSEventSize>
    3018:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSEventTblSize;
    301c:	000247b7          	lui	a5,0x24
    3020:	f6078793          	add	a5,a5,-160 # 23f60 <OSEventTblSize>
    3024:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSEventMultiEn;
    3028:	000247b7          	lui	a5,0x24
    302c:	f6278793          	add	a5,a5,-158 # 23f62 <OSEventMultiEn>
    3030:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSFlagEn;
    3034:	000247b7          	lui	a5,0x24
    3038:	f6478793          	add	a5,a5,-156 # 23f64 <OSFlagEn>
    303c:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSFlagGrpSize;
    3040:	000247b7          	lui	a5,0x24
    3044:	f6678793          	add	a5,a5,-154 # 23f66 <OSFlagGrpSize>
    3048:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSFlagNodeSize;
    304c:	000247b7          	lui	a5,0x24
    3050:	f6878793          	add	a5,a5,-152 # 23f68 <OSFlagNodeSize>
    3054:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSFlagWidth;
    3058:	000247b7          	lui	a5,0x24
    305c:	f6a78793          	add	a5,a5,-150 # 23f6a <OSFlagWidth>
    3060:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSFlagMax;
    3064:	000247b7          	lui	a5,0x24
    3068:	f6c78793          	add	a5,a5,-148 # 23f6c <OSFlagMax>
    306c:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSFlagNameEn;
    3070:	000247b7          	lui	a5,0x24
    3074:	f6e78793          	add	a5,a5,-146 # 23f6e <OSFlagNameEn>
    3078:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSLowestPrio;
    307c:	000247b7          	lui	a5,0x24
    3080:	f7078793          	add	a5,a5,-144 # 23f70 <OSLowestPrio>
    3084:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSMboxEn;
    3088:	000247b7          	lui	a5,0x24
    308c:	f7278793          	add	a5,a5,-142 # 23f72 <OSMboxEn>
    3090:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSMemEn;
    3094:	000247b7          	lui	a5,0x24
    3098:	f7478793          	add	a5,a5,-140 # 23f74 <OSMemEn>
    309c:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSMemMax;
    30a0:	000247b7          	lui	a5,0x24
    30a4:	f7678793          	add	a5,a5,-138 # 23f76 <OSMemMax>
    30a8:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSMemNameEn;
    30ac:	000247b7          	lui	a5,0x24
    30b0:	f7878793          	add	a5,a5,-136 # 23f78 <OSMemNameEn>
    30b4:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSMemSize;
    30b8:	000247b7          	lui	a5,0x24
    30bc:	f7a78793          	add	a5,a5,-134 # 23f7a <OSMemSize>
    30c0:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSMemTblSize;
    30c4:	000247b7          	lui	a5,0x24
    30c8:	f7c78793          	add	a5,a5,-132 # 23f7c <OSMemTblSize>
    30cc:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSMutexEn;
    30d0:	000247b7          	lui	a5,0x24
    30d4:	f7e78793          	add	a5,a5,-130 # 23f7e <OSMutexEn>
    30d8:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSPtrSize;
    30dc:	000247b7          	lui	a5,0x24
    30e0:	f8078793          	add	a5,a5,-128 # 23f80 <OSPtrSize>
    30e4:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSQEn;
    30e8:	000247b7          	lui	a5,0x24
    30ec:	f8278793          	add	a5,a5,-126 # 23f82 <OSQEn>
    30f0:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSQMax;
    30f4:	000247b7          	lui	a5,0x24
    30f8:	f8478793          	add	a5,a5,-124 # 23f84 <OSQMax>
    30fc:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSQSize;
    3100:	000247b7          	lui	a5,0x24
    3104:	f8678793          	add	a5,a5,-122 # 23f86 <OSQSize>
    3108:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSRdyTblSize;
    310c:	000247b7          	lui	a5,0x24
    3110:	f8878793          	add	a5,a5,-120 # 23f88 <OSRdyTblSize>
    3114:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSSemEn;
    3118:	000247b7          	lui	a5,0x24
    311c:	f8a78793          	add	a5,a5,-118 # 23f8a <OSSemEn>
    3120:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSStkWidth;
    3124:	000247b7          	lui	a5,0x24
    3128:	f8c78793          	add	a5,a5,-116 # 23f8c <OSStkWidth>
    312c:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSTaskCreateEn;
    3130:	000247b7          	lui	a5,0x24
    3134:	f8e78793          	add	a5,a5,-114 # 23f8e <OSTaskCreateEn>
    3138:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSTaskCreateExtEn;
    313c:	000247b7          	lui	a5,0x24
    3140:	f9078793          	add	a5,a5,-112 # 23f90 <OSTaskCreateExtEn>
    3144:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSTaskDelEn;
    3148:	000247b7          	lui	a5,0x24
    314c:	f9278793          	add	a5,a5,-110 # 23f92 <OSTaskDelEn>
    3150:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSTaskIdleStkSize;
    3154:	000247b7          	lui	a5,0x24
    3158:	f9478793          	add	a5,a5,-108 # 23f94 <OSTaskIdleStkSize>
    315c:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSTaskProfileEn;
    3160:	000247b7          	lui	a5,0x24
    3164:	f9678793          	add	a5,a5,-106 # 23f96 <OSTaskProfileEn>
    3168:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSTaskMax;
    316c:	000247b7          	lui	a5,0x24
    3170:	f9878793          	add	a5,a5,-104 # 23f98 <OSTaskMax>
    3174:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSTaskNameEn;
    3178:	000247b7          	lui	a5,0x24
    317c:	f9a78793          	add	a5,a5,-102 # 23f9a <OSTaskNameEn>
    3180:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSTaskStatEn;
    3184:	000247b7          	lui	a5,0x24
    3188:	f9c78793          	add	a5,a5,-100 # 23f9c <OSTaskStatEn>
    318c:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSTaskStatStkSize;
    3190:	000247b7          	lui	a5,0x24
    3194:	f9e78793          	add	a5,a5,-98 # 23f9e <OSTaskStatStkSize>
    3198:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSTaskStatStkChkEn;
    319c:	000247b7          	lui	a5,0x24
    31a0:	fa078793          	add	a5,a5,-96 # 23fa0 <OSTaskStatStkChkEn>
    31a4:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSTaskSwHookEn;
    31a8:	000247b7          	lui	a5,0x24
    31ac:	fa278793          	add	a5,a5,-94 # 23fa2 <OSTaskSwHookEn>
    31b0:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSTCBPrioTblMax;
    31b4:	000247b7          	lui	a5,0x24
    31b8:	fa678793          	add	a5,a5,-90 # 23fa6 <OSTCBPrioTblMax>
    31bc:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSTCBSize;
    31c0:	000247b7          	lui	a5,0x24
    31c4:	fa878793          	add	a5,a5,-88 # 23fa8 <OSTCBSize>
    31c8:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSTicksPerSec;
    31cc:	000247b7          	lui	a5,0x24
    31d0:	faa78793          	add	a5,a5,-86 # 23faa <OSTicksPerSec>
    31d4:	fef42623          	sw	a5,-20(s0)
    ptemp = (void const *)&OSTimeTickHookEn;
    31d8:	000247b7          	lui	a5,0x24
    31dc:	fac78793          	add	a5,a5,-84 # 23fac <OSTimeTickHookEn>
    31e0:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSTmrWheelSize;
    ptemp = (void const *)&OSTmrWheelTblSize;
#endif

    ptemp = (void const *)&OSVersionNbr;
    31e4:	000247b7          	lui	a5,0x24
    31e8:	fae78793          	add	a5,a5,-82 # 23fae <OSVersionNbr>
    31ec:	fef42623          	sw	a5,-20(s0)

    ptemp = (void const *)&OSDataSize;
    31f0:	000247b7          	lui	a5,0x24
    31f4:	fc478793          	add	a5,a5,-60 # 23fc4 <OSDataSize>
    31f8:	fef42623          	sw	a5,-20(s0)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    31fc:	00000013          	nop
    3200:	01c12403          	lw	s0,28(sp)
    3204:	02010113          	add	sp,sp,32
    3208:	00008067          	ret

0000320c <OSFlagAccept>:
#if OS_FLAG_ACCEPT_EN > 0u
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP  *pgrp,
                        OS_FLAGS      flags,
                        INT8U         wait_type,
                        INT8U        *perr)
{
    320c:	fb010113          	add	sp,sp,-80
    3210:	04812623          	sw	s0,76(sp)
    3214:	05010413          	add	s0,sp,80
    3218:	faa42e23          	sw	a0,-68(s0)
    321c:	00058793          	mv	a5,a1
    3220:	00060713          	mv	a4,a2
    3224:	fad42a23          	sw	a3,-76(s0)
    3228:	faf41d23          	sh	a5,-70(s0)
    322c:	00070793          	mv	a5,a4
    3230:	faf40ca3          	sb	a5,-71(s0)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0u;
    3234:	fe042423          	sw	zero,-24(s0)
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    3238:	fbc42783          	lw	a5,-68(s0)
    323c:	00079c63          	bnez	a5,3254 <OSFlagAccept+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3240:	fb442783          	lw	a5,-76(s0)
    3244:	06e00713          	li	a4,110
    3248:	00e78023          	sb	a4,0(a5)
        return ((OS_FLAGS)0);
    324c:	00000793          	li	a5,0
    3250:	2e00006f          	j	3530 <OSFlagAccept+0x324>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    3254:	fbc42783          	lw	a5,-68(s0)
    3258:	0007c703          	lbu	a4,0(a5)
    325c:	00500793          	li	a5,5
    3260:	00f70c63          	beq	a4,a5,3278 <OSFlagAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    3264:	fb442783          	lw	a5,-76(s0)
    3268:	00100713          	li	a4,1
    326c:	00e78023          	sb	a4,0(a5)
        return ((OS_FLAGS)0);
    3270:	00000793          	li	a5,0
    3274:	2bc0006f          	j	3530 <OSFlagAccept+0x324>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    3278:	fb944783          	lbu	a5,-71(s0)
    327c:	f807f793          	and	a5,a5,-128
    3280:	fef403a3          	sb	a5,-25(s0)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    3284:	fe744783          	lbu	a5,-25(s0)
    3288:	00078e63          	beqz	a5,32a4 <OSFlagAccept+0x98>
        wait_type &= ~OS_FLAG_CONSUME;
    328c:	fb944783          	lbu	a5,-71(s0)
    3290:	07f7f793          	and	a5,a5,127
    3294:	faf40ca3          	sb	a5,-71(s0)
        consume    = OS_TRUE;
    3298:	00100793          	li	a5,1
    329c:	fef406a3          	sb	a5,-19(s0)
    32a0:	0080006f          	j	32a8 <OSFlagAccept+0x9c>
    } else {
        consume    = OS_FALSE;
    32a4:	fe0406a3          	sb	zero,-19(s0)
    }

    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    32a8:	fb442783          	lw	a5,-76(s0)
    32ac:	00078023          	sb	zero,0(a5)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    32b0:	00800793          	li	a5,8
    32b4:	3007b7f3          	csrrc	a5,mstatus,a5
    32b8:	fef42023          	sw	a5,-32(s0)
    return context;
    32bc:	fe042783          	lw	a5,-32(s0)
    OS_ENTER_CRITICAL();
    32c0:	fef42423          	sw	a5,-24(s0)
    switch (wait_type) {
    32c4:	fb944783          	lbu	a5,-71(s0)
    32c8:	00300713          	li	a4,3
    32cc:	0ae78863          	beq	a5,a4,337c <OSFlagAccept+0x170>
    32d0:	00300713          	li	a4,3
    32d4:	22f74663          	blt	a4,a5,3500 <OSFlagAccept+0x2f4>
    32d8:	00200713          	li	a4,2
    32dc:	00e78e63          	beq	a5,a4,32f8 <OSFlagAccept+0xec>
    32e0:	00200713          	li	a4,2
    32e4:	20f74e63          	blt	a4,a5,3500 <OSFlagAccept+0x2f4>
    32e8:	10078a63          	beqz	a5,33fc <OSFlagAccept+0x1f0>
    32ec:	00100713          	li	a4,1
    32f0:	18e78863          	beq	a5,a4,3480 <OSFlagAccept+0x274>
    32f4:	20c0006f          	j	3500 <OSFlagAccept+0x2f4>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    32f8:	fbc42783          	lw	a5,-68(s0)
    32fc:	0087d783          	lhu	a5,8(a5)
    3300:	fba45703          	lhu	a4,-70(s0)
    3304:	00e7f7b3          	and	a5,a5,a4
    3308:	fef41723          	sh	a5,-18(s0)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    330c:	fee45703          	lhu	a4,-18(s0)
    3310:	fba45783          	lhu	a5,-70(s0)
    3314:	04f71063          	bne	a4,a5,3354 <OSFlagAccept+0x148>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3318:	fed44703          	lbu	a4,-19(s0)
    331c:	00100793          	li	a5,1
    3320:	04f71063          	bne	a4,a5,3360 <OSFlagAccept+0x154>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we wanted  */
    3324:	fbc42783          	lw	a5,-68(s0)
    3328:	0087d703          	lhu	a4,8(a5)
    332c:	fee45783          	lhu	a5,-18(s0)
    3330:	fff7c793          	not	a5,a5
    3334:	01079793          	sll	a5,a5,0x10
    3338:	0107d793          	srl	a5,a5,0x10
    333c:	00f777b3          	and	a5,a4,a5
    3340:	01079713          	sll	a4,a5,0x10
    3344:	01075713          	srl	a4,a4,0x10
    3348:	fbc42783          	lw	a5,-68(s0)
    334c:	00e79423          	sh	a4,8(a5)
    3350:	0100006f          	j	3360 <OSFlagAccept+0x154>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    3354:	fb442783          	lw	a5,-76(s0)
    3358:	07000713          	li	a4,112
    335c:	00e78023          	sb	a4,0(a5)
    3360:	fe842783          	lw	a5,-24(s0)
    3364:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3368:	fdc42783          	lw	a5,-36(s0)
    336c:	0087f793          	and	a5,a5,8
    3370:	3007a073          	csrs	mstatus,a5
}
    3374:	00000013          	nop
             }
             OS_EXIT_CRITICAL();
             break;
    3378:	1b40006f          	j	352c <OSFlagAccept+0x320>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    337c:	fbc42783          	lw	a5,-68(s0)
    3380:	0087d783          	lhu	a5,8(a5)
    3384:	fba45703          	lhu	a4,-70(s0)
    3388:	00e7f7b3          	and	a5,a5,a4
    338c:	fef41723          	sh	a5,-18(s0)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    3390:	fee45783          	lhu	a5,-18(s0)
    3394:	04078063          	beqz	a5,33d4 <OSFlagAccept+0x1c8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3398:	fed44703          	lbu	a4,-19(s0)
    339c:	00100793          	li	a5,1
    33a0:	04f71063          	bne	a4,a5,33e0 <OSFlagAccept+0x1d4>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we got     */
    33a4:	fbc42783          	lw	a5,-68(s0)
    33a8:	0087d703          	lhu	a4,8(a5)
    33ac:	fee45783          	lhu	a5,-18(s0)
    33b0:	fff7c793          	not	a5,a5
    33b4:	01079793          	sll	a5,a5,0x10
    33b8:	0107d793          	srl	a5,a5,0x10
    33bc:	00f777b3          	and	a5,a4,a5
    33c0:	01079713          	sll	a4,a5,0x10
    33c4:	01075713          	srl	a4,a4,0x10
    33c8:	fbc42783          	lw	a5,-68(s0)
    33cc:	00e79423          	sh	a4,8(a5)
    33d0:	0100006f          	j	33e0 <OSFlagAccept+0x1d4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    33d4:	fb442783          	lw	a5,-76(s0)
    33d8:	07000713          	li	a4,112
    33dc:	00e78023          	sb	a4,0(a5)
    33e0:	fe842783          	lw	a5,-24(s0)
    33e4:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    33e8:	fd842783          	lw	a5,-40(s0)
    33ec:	0087f793          	and	a5,a5,8
    33f0:	3007a073          	csrs	mstatus,a5
}
    33f4:	00000013          	nop
             }
             OS_EXIT_CRITICAL();
             break;
    33f8:	1340006f          	j	352c <OSFlagAccept+0x320>

#if OS_FLAG_WAIT_CLR_EN > 0u
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want     */
    33fc:	fbc42783          	lw	a5,-68(s0)
    3400:	0087d783          	lhu	a5,8(a5)
    3404:	fff7c793          	not	a5,a5
    3408:	01079793          	sll	a5,a5,0x10
    340c:	0107d793          	srl	a5,a5,0x10
    3410:	fba45703          	lhu	a4,-70(s0)
    3414:	00e7f7b3          	and	a5,a5,a4
    3418:	fef41723          	sh	a5,-18(s0)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    341c:	fee45703          	lhu	a4,-18(s0)
    3420:	fba45783          	lhu	a5,-70(s0)
    3424:	02f71a63          	bne	a4,a5,3458 <OSFlagAccept+0x24c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3428:	fed44703          	lbu	a4,-19(s0)
    342c:	00100793          	li	a5,1
    3430:	02f71a63          	bne	a4,a5,3464 <OSFlagAccept+0x258>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    3434:	fbc42783          	lw	a5,-68(s0)
    3438:	0087d783          	lhu	a5,8(a5)
    343c:	fee45703          	lhu	a4,-18(s0)
    3440:	00e7e7b3          	or	a5,a5,a4
    3444:	01079713          	sll	a4,a5,0x10
    3448:	01075713          	srl	a4,a4,0x10
    344c:	fbc42783          	lw	a5,-68(s0)
    3450:	00e79423          	sh	a4,8(a5)
    3454:	0100006f          	j	3464 <OSFlagAccept+0x258>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    3458:	fb442783          	lw	a5,-76(s0)
    345c:	07000713          	li	a4,112
    3460:	00e78023          	sb	a4,0(a5)
    3464:	fe842783          	lw	a5,-24(s0)
    3468:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    346c:	fd442783          	lw	a5,-44(s0)
    3470:	0087f793          	and	a5,a5,8
    3474:	3007a073          	csrs	mstatus,a5
}
    3478:	00000013          	nop
             }
             OS_EXIT_CRITICAL();
             break;
    347c:	0b00006f          	j	352c <OSFlagAccept+0x320>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want      */
    3480:	fbc42783          	lw	a5,-68(s0)
    3484:	0087d783          	lhu	a5,8(a5)
    3488:	fff7c793          	not	a5,a5
    348c:	01079793          	sll	a5,a5,0x10
    3490:	0107d793          	srl	a5,a5,0x10
    3494:	fba45703          	lhu	a4,-70(s0)
    3498:	00e7f7b3          	and	a5,a5,a4
    349c:	fef41723          	sh	a5,-18(s0)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    34a0:	fee45783          	lhu	a5,-18(s0)
    34a4:	02078a63          	beqz	a5,34d8 <OSFlagAccept+0x2cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    34a8:	fed44703          	lbu	a4,-19(s0)
    34ac:	00100793          	li	a5,1
    34b0:	02f71a63          	bne	a4,a5,34e4 <OSFlagAccept+0x2d8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    34b4:	fbc42783          	lw	a5,-68(s0)
    34b8:	0087d783          	lhu	a5,8(a5)
    34bc:	fee45703          	lhu	a4,-18(s0)
    34c0:	00e7e7b3          	or	a5,a5,a4
    34c4:	01079713          	sll	a4,a5,0x10
    34c8:	01075713          	srl	a4,a4,0x10
    34cc:	fbc42783          	lw	a5,-68(s0)
    34d0:	00e79423          	sh	a4,8(a5)
    34d4:	0100006f          	j	34e4 <OSFlagAccept+0x2d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    34d8:	fb442783          	lw	a5,-76(s0)
    34dc:	07000713          	li	a4,112
    34e0:	00e78023          	sb	a4,0(a5)
    34e4:	fe842783          	lw	a5,-24(s0)
    34e8:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    34ec:	fd042783          	lw	a5,-48(s0)
    34f0:	0087f793          	and	a5,a5,8
    34f4:	3007a073          	csrs	mstatus,a5
}
    34f8:	00000013          	nop
             }
             OS_EXIT_CRITICAL();
             break;
    34fc:	0300006f          	j	352c <OSFlagAccept+0x320>
    3500:	fe842783          	lw	a5,-24(s0)
    3504:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3508:	fcc42783          	lw	a5,-52(s0)
    350c:	0087f793          	and	a5,a5,8
    3510:	3007a073          	csrs	mstatus,a5
}
    3514:	00000013          	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    3518:	fe041723          	sh	zero,-18(s0)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    351c:	fb442783          	lw	a5,-76(s0)
    3520:	06f00713          	li	a4,111
    3524:	00e78023          	sb	a4,0(a5)
             break;
    3528:	00000013          	nop
    }
    return (flags_rdy);
    352c:	fee45783          	lhu	a5,-18(s0)
}
    3530:	00078513          	mv	a0,a5
    3534:	04c12403          	lw	s0,76(sp)
    3538:	05010113          	add	sp,sp,80
    353c:	00008067          	ret

00003540 <OSFlagCreate>:
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS  flags,
                            INT8U    *perr)
{
    3540:	fc010113          	add	sp,sp,-64
    3544:	02812e23          	sw	s0,60(sp)
    3548:	04010413          	add	s0,sp,64
    354c:	00050793          	mv	a5,a0
    3550:	fcb42423          	sw	a1,-56(s0)
    3554:	fcf41723          	sh	a5,-50(s0)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3u                        /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0u;
    3558:	fe042623          	sw	zero,-20(s0)
        *perr = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
        return ((OS_FLAG_GRP *)0);
    }
#endif

    if (OSIntNesting > 0u) {                        /* See if called from ISR ...                      */
    355c:	000287b7          	lui	a5,0x28
    3560:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    3564:	00078c63          	beqz	a5,357c <OSFlagCreate+0x3c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    3568:	fc842783          	lw	a5,-56(s0)
    356c:	01000713          	li	a4,16
    3570:	00e78023          	sb	a4,0(a5)
        return ((OS_FLAG_GRP *)0);
    3574:	00000793          	li	a5,0
    3578:	0bc0006f          	j	3634 <OSFlagCreate+0xf4>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    357c:	00800793          	li	a5,8
    3580:	3007b7f3          	csrrc	a5,mstatus,a5
    3584:	fef42223          	sw	a5,-28(s0)
    return context;
    3588:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    358c:	fef42623          	sw	a5,-20(s0)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    3590:	000277b7          	lui	a5,0x27
    3594:	7f87a783          	lw	a5,2040(a5) # 277f8 <OSFlagFreeList>
    3598:	fef42423          	sw	a5,-24(s0)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    359c:	fe842783          	lw	a5,-24(s0)
    35a0:	06078663          	beqz	a5,360c <OSFlagCreate+0xcc>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    35a4:	000277b7          	lui	a5,0x27
    35a8:	7f87a783          	lw	a5,2040(a5) # 277f8 <OSFlagFreeList>
    35ac:	0047a703          	lw	a4,4(a5)
    35b0:	000277b7          	lui	a5,0x27
    35b4:	7ee7ac23          	sw	a4,2040(a5) # 277f8 <OSFlagFreeList>
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    35b8:	fe842783          	lw	a5,-24(s0)
    35bc:	00500713          	li	a4,5
    35c0:	00e78023          	sb	a4,0(a5)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    35c4:	fe842783          	lw	a5,-24(s0)
    35c8:	fce45703          	lhu	a4,-50(s0)
    35cc:	00e79423          	sh	a4,8(a5)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    35d0:	fe842783          	lw	a5,-24(s0)
    35d4:	0007a223          	sw	zero,4(a5)
#if OS_FLAG_NAME_EN > 0u
        pgrp->OSFlagName     = (INT8U *)(void *)"?";
    35d8:	fe842783          	lw	a5,-24(s0)
    35dc:	00023737          	lui	a4,0x23
    35e0:	08870713          	add	a4,a4,136 # 23088 <OSUnMapTbl+0x124>
    35e4:	00e7a623          	sw	a4,12(a5)
    35e8:	fec42783          	lw	a5,-20(s0)
    35ec:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    35f0:	fe042783          	lw	a5,-32(s0)
    35f4:	0087f793          	and	a5,a5,8
    35f8:	3007a073          	csrs	mstatus,a5
}
    35fc:	00000013          	nop
#endif
        OS_TRACE_FLAG_CREATE(pgrp, pgrp->OSFlagName);
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    3600:	fc842783          	lw	a5,-56(s0)
    3604:	00078023          	sb	zero,0(a5)
    3608:	0280006f          	j	3630 <OSFlagCreate+0xf0>
    360c:	fec42783          	lw	a5,-20(s0)
    3610:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3614:	fdc42783          	lw	a5,-36(s0)
    3618:	0087f793          	and	a5,a5,8
    361c:	3007a073          	csrs	mstatus,a5
}
    3620:	00000013          	nop
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    3624:	fc842783          	lw	a5,-56(s0)
    3628:	07200713          	li	a4,114
    362c:	00e78023          	sb	a4,0(a5)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    3630:	fe842783          	lw	a5,-24(s0)
}
    3634:	00078513          	mv	a0,a5
    3638:	03c12403          	lw	s0,60(sp)
    363c:	04010113          	add	sp,sp,64
    3640:	00008067          	ret

00003644 <OSFlagDel>:

#if OS_FLAG_DEL_EN > 0u
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP  *pgrp,
                         INT8U         opt,
                         INT8U        *perr)
{
    3644:	fb010113          	add	sp,sp,-80
    3648:	04112623          	sw	ra,76(sp)
    364c:	04812423          	sw	s0,72(sp)
    3650:	05010413          	add	s0,sp,80
    3654:	faa42e23          	sw	a0,-68(s0)
    3658:	00058793          	mv	a5,a1
    365c:	fac42a23          	sw	a2,-76(s0)
    3660:	faf40da3          	sb	a5,-69(s0)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0u;
    3664:	fe042023          	sw	zero,-32(s0)
        return ((OS_FLAG_GRP *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    3668:	fbc42783          	lw	a5,-68(s0)
    366c:	00079c63          	bnez	a5,3684 <OSFlagDel+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3670:	fb442783          	lw	a5,-76(s0)
    3674:	06e00713          	li	a4,110
    3678:	00e78023          	sb	a4,0(a5)
        return (pgrp);
    367c:	fbc42783          	lw	a5,-68(s0)
    3680:	2040006f          	j	3884 <OSFlagDel+0x240>
    }
#endif

    OS_TRACE_FLAG_DEL_ENTER(pgrp, opt);

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
    3684:	000287b7          	lui	a5,0x28
    3688:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    368c:	00078c63          	beqz	a5,36a4 <OSFlagDel+0x60>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    3690:	fb442783          	lw	a5,-76(s0)
    3694:	00f00713          	li	a4,15
    3698:	00e78023          	sb	a4,0(a5)
        OS_TRACE_FLAG_DEL_EXIT(*perr);
        return (pgrp);
    369c:	fbc42783          	lw	a5,-68(s0)
    36a0:	1e40006f          	j	3884 <OSFlagDel+0x240>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    36a4:	fbc42783          	lw	a5,-68(s0)
    36a8:	0007c703          	lbu	a4,0(a5)
    36ac:	00500793          	li	a5,5
    36b0:	00f70c63          	beq	a4,a5,36c8 <OSFlagDel+0x84>
        *perr = OS_ERR_EVENT_TYPE;
    36b4:	fb442783          	lw	a5,-76(s0)
    36b8:	00100713          	li	a4,1
    36bc:	00e78023          	sb	a4,0(a5)
        OS_TRACE_FLAG_DEL_EXIT(*perr);
        return (pgrp);
    36c0:	fbc42783          	lw	a5,-68(s0)
    36c4:	1c00006f          	j	3884 <OSFlagDel+0x240>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    36c8:	00800793          	li	a5,8
    36cc:	3007b7f3          	csrrc	a5,mstatus,a5
    36d0:	fcf42e23          	sw	a5,-36(s0)
    return context;
    36d4:	fdc42783          	lw	a5,-36(s0)
    }
    OS_ENTER_CRITICAL();
    36d8:	fef42023          	sw	a5,-32(s0)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    36dc:	fbc42783          	lw	a5,-68(s0)
    36e0:	0047a783          	lw	a5,4(a5)
    36e4:	00078863          	beqz	a5,36f4 <OSFlagDel+0xb0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    36e8:	00100793          	li	a5,1
    36ec:	fef407a3          	sb	a5,-17(s0)
    36f0:	0080006f          	j	36f8 <OSFlagDel+0xb4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    36f4:	fe0407a3          	sb	zero,-17(s0)
    }
    switch (opt) {
    36f8:	fbb44783          	lbu	a5,-69(s0)
    36fc:	00078863          	beqz	a5,370c <OSFlagDel+0xc8>
    3700:	00100713          	li	a4,1
    3704:	0ae78263          	beq	a5,a4,37a8 <OSFlagDel+0x164>
    3708:	1480006f          	j	3850 <OSFlagDel+0x20c>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    370c:	fef44783          	lbu	a5,-17(s0)
    3710:	06079463          	bnez	a5,3778 <OSFlagDel+0x134>
#if OS_FLAG_NAME_EN > 0u
                 pgrp->OSFlagName     = (INT8U *)(void *)"?";
    3714:	fbc42783          	lw	a5,-68(s0)
    3718:	00023737          	lui	a4,0x23
    371c:	08870713          	add	a4,a4,136 # 23088 <OSUnMapTbl+0x124>
    3720:	00e7a623          	sw	a4,12(a5)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    3724:	fbc42783          	lw	a5,-68(s0)
    3728:	00078023          	sb	zero,0(a5)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    372c:	000277b7          	lui	a5,0x27
    3730:	7f87a703          	lw	a4,2040(a5) # 277f8 <OSFlagFreeList>
    3734:	fbc42783          	lw	a5,-68(s0)
    3738:	00e7a223          	sw	a4,4(a5)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    373c:	fbc42783          	lw	a5,-68(s0)
    3740:	00079423          	sh	zero,8(a5)
                 OSFlagFreeList       = pgrp;
    3744:	000277b7          	lui	a5,0x27
    3748:	fbc42703          	lw	a4,-68(s0)
    374c:	7ee7ac23          	sw	a4,2040(a5) # 277f8 <OSFlagFreeList>
    3750:	fe042783          	lw	a5,-32(s0)
    3754:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3758:	fd842783          	lw	a5,-40(s0)
    375c:	0087f793          	and	a5,a5,8
    3760:	3007a073          	csrs	mstatus,a5
}
    3764:	00000013          	nop
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    3768:	fb442783          	lw	a5,-76(s0)
    376c:	00078023          	sb	zero,0(a5)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    3770:	fe042223          	sw	zero,-28(s0)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    3774:	10c0006f          	j	3880 <OSFlagDel+0x23c>
    3778:	fe042783          	lw	a5,-32(s0)
    377c:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3780:	fd442783          	lw	a5,-44(s0)
    3784:	0087f793          	and	a5,a5,8
    3788:	3007a073          	csrs	mstatus,a5
}
    378c:	00000013          	nop
                 *perr                = OS_ERR_TASK_WAITING;
    3790:	fb442783          	lw	a5,-76(s0)
    3794:	04900713          	li	a4,73
    3798:	00e78023          	sb	a4,0(a5)
                 pgrp_return          = pgrp;
    379c:	fbc42783          	lw	a5,-68(s0)
    37a0:	fef42223          	sw	a5,-28(s0)
             break;
    37a4:	0dc0006f          	j	3880 <OSFlagDel+0x23c>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    37a8:	fbc42783          	lw	a5,-68(s0)
    37ac:	0047a783          	lw	a5,4(a5)
    37b0:	fef42423          	sw	a5,-24(s0)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    37b4:	0200006f          	j	37d4 <OSFlagDel+0x190>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0, OS_STAT_PEND_ABORT);
    37b8:	00200613          	li	a2,2
    37bc:	00000593          	li	a1,0
    37c0:	fe842503          	lw	a0,-24(s0)
    37c4:	050010ef          	jal	4814 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    37c8:	fe842783          	lw	a5,-24(s0)
    37cc:	0007a783          	lw	a5,0(a5)
    37d0:	fef42423          	sw	a5,-24(s0)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    37d4:	fe842783          	lw	a5,-24(s0)
    37d8:	fe0790e3          	bnez	a5,37b8 <OSFlagDel+0x174>
             }
#if OS_FLAG_NAME_EN > 0u
             pgrp->OSFlagName     = (INT8U *)(void *)"?";
    37dc:	fbc42783          	lw	a5,-68(s0)
    37e0:	00023737          	lui	a4,0x23
    37e4:	08870713          	add	a4,a4,136 # 23088 <OSUnMapTbl+0x124>
    37e8:	00e7a623          	sw	a4,12(a5)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    37ec:	fbc42783          	lw	a5,-68(s0)
    37f0:	00078023          	sb	zero,0(a5)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    37f4:	000277b7          	lui	a5,0x27
    37f8:	7f87a703          	lw	a4,2040(a5) # 277f8 <OSFlagFreeList>
    37fc:	fbc42783          	lw	a5,-68(s0)
    3800:	00e7a223          	sw	a4,4(a5)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    3804:	fbc42783          	lw	a5,-68(s0)
    3808:	00079423          	sh	zero,8(a5)
             OSFlagFreeList       = pgrp;
    380c:	000277b7          	lui	a5,0x27
    3810:	fbc42703          	lw	a4,-68(s0)
    3814:	7ee7ac23          	sw	a4,2040(a5) # 277f8 <OSFlagFreeList>
    3818:	fe042783          	lw	a5,-32(s0)
    381c:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3820:	fd042783          	lw	a5,-48(s0)
    3824:	0087f793          	and	a5,a5,8
    3828:	3007a073          	csrs	mstatus,a5
}
    382c:	00000013          	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    3830:	fef44703          	lbu	a4,-17(s0)
    3834:	00100793          	li	a5,1
    3838:	00f71463          	bne	a4,a5,3840 <OSFlagDel+0x1fc>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    383c:	f61fe0ef          	jal	279c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    3840:	fb442783          	lw	a5,-76(s0)
    3844:	00078023          	sb	zero,0(a5)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    3848:	fe042223          	sw	zero,-28(s0)
             break;
    384c:	0340006f          	j	3880 <OSFlagDel+0x23c>
    3850:	fe042783          	lw	a5,-32(s0)
    3854:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3858:	fcc42783          	lw	a5,-52(s0)
    385c:	0087f793          	and	a5,a5,8
    3860:	3007a073          	csrs	mstatus,a5
}
    3864:	00000013          	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    3868:	fb442783          	lw	a5,-76(s0)
    386c:	00700713          	li	a4,7
    3870:	00e78023          	sb	a4,0(a5)
             pgrp_return          = pgrp;
    3874:	fbc42783          	lw	a5,-68(s0)
    3878:	fef42223          	sw	a5,-28(s0)
             break;
    387c:	00000013          	nop
    }

    OS_TRACE_FLAG_DEL_EXIT(*perr);

    return (pgrp_return);
    3880:	fe442783          	lw	a5,-28(s0)
}
    3884:	00078513          	mv	a0,a5
    3888:	04c12083          	lw	ra,76(sp)
    388c:	04812403          	lw	s0,72(sp)
    3890:	05010113          	add	sp,sp,80
    3894:	00008067          	ret

00003898 <OSFlagNameGet>:

#if OS_FLAG_NAME_EN > 0u
INT8U  OSFlagNameGet (OS_FLAG_GRP   *pgrp,
                      INT8U        **pname,
                      INT8U         *perr)
{
    3898:	fc010113          	add	sp,sp,-64
    389c:	02112e23          	sw	ra,60(sp)
    38a0:	02812c23          	sw	s0,56(sp)
    38a4:	04010413          	add	s0,sp,64
    38a8:	fca42623          	sw	a0,-52(s0)
    38ac:	fcb42423          	sw	a1,-56(s0)
    38b0:	fcc42223          	sw	a2,-60(s0)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    38b4:	fe042623          	sw	zero,-20(s0)
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    38b8:	fcc42783          	lw	a5,-52(s0)
    38bc:	00079c63          	bnez	a5,38d4 <OSFlagNameGet+0x3c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    38c0:	fc442783          	lw	a5,-60(s0)
    38c4:	06e00713          	li	a4,110
    38c8:	00e78023          	sb	a4,0(a5)
        return (0u);
    38cc:	00000793          	li	a5,0
    38d0:	0dc0006f          	j	39ac <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U **)0) {                   /* Is 'pname' a NULL pointer?                         */
    38d4:	fc842783          	lw	a5,-56(s0)
    38d8:	00079c63          	bnez	a5,38f0 <OSFlagNameGet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    38dc:	fc442783          	lw	a5,-60(s0)
    38e0:	00c00713          	li	a4,12
    38e4:	00e78023          	sb	a4,0(a5)
        return (0u);
    38e8:	00000793          	li	a5,0
    38ec:	0c00006f          	j	39ac <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
    38f0:	000287b7          	lui	a5,0x28
    38f4:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    38f8:	00078c63          	beqz	a5,3910 <OSFlagNameGet+0x78>
        *perr = OS_ERR_NAME_GET_ISR;
    38fc:	fc442783          	lw	a5,-60(s0)
    3900:	01100713          	li	a4,17
    3904:	00e78023          	sb	a4,0(a5)
        return (0u);
    3908:	00000793          	li	a5,0
    390c:	0a00006f          	j	39ac <OSFlagNameGet+0x114>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3910:	00800793          	li	a5,8
    3914:	3007b7f3          	csrrc	a5,mstatus,a5
    3918:	fef42223          	sw	a5,-28(s0)
    return context;
    391c:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    3920:	fef42623          	sw	a5,-20(s0)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    3924:	fcc42783          	lw	a5,-52(s0)
    3928:	0007c703          	lbu	a4,0(a5)
    392c:	00500793          	li	a5,5
    3930:	02f70863          	beq	a4,a5,3960 <OSFlagNameGet+0xc8>
    3934:	fec42783          	lw	a5,-20(s0)
    3938:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    393c:	fe042783          	lw	a5,-32(s0)
    3940:	0087f793          	and	a5,a5,8
    3944:	3007a073          	csrs	mstatus,a5
}
    3948:	00000013          	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    394c:	fc442783          	lw	a5,-60(s0)
    3950:	00100713          	li	a4,1
    3954:	00e78023          	sb	a4,0(a5)
        return (0u);
    3958:	00000793          	li	a5,0
    395c:	0500006f          	j	39ac <OSFlagNameGet+0x114>
    }
    *pname = pgrp->OSFlagName;
    3960:	fcc42783          	lw	a5,-52(s0)
    3964:	00c7a703          	lw	a4,12(a5)
    3968:	fc842783          	lw	a5,-56(s0)
    396c:	00e7a023          	sw	a4,0(a5)
    len    = OS_StrLen(*pname);
    3970:	fc842783          	lw	a5,-56(s0)
    3974:	0007a783          	lw	a5,0(a5)
    3978:	00078513          	mv	a0,a5
    397c:	f79fe0ef          	jal	28f4 <OS_StrLen>
    3980:	00050793          	mv	a5,a0
    3984:	fef405a3          	sb	a5,-21(s0)
    3988:	fec42783          	lw	a5,-20(s0)
    398c:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3990:	fdc42783          	lw	a5,-36(s0)
    3994:	0087f793          	and	a5,a5,8
    3998:	3007a073          	csrs	mstatus,a5
}
    399c:	00000013          	nop
    OS_EXIT_CRITICAL();
    *perr  = OS_ERR_NONE;
    39a0:	fc442783          	lw	a5,-60(s0)
    39a4:	00078023          	sb	zero,0(a5)
    return (len);
    39a8:	feb44783          	lbu	a5,-21(s0)
}
    39ac:	00078513          	mv	a0,a5
    39b0:	03c12083          	lw	ra,60(sp)
    39b4:	03812403          	lw	s0,56(sp)
    39b8:	04010113          	add	sp,sp,64
    39bc:	00008067          	ret

000039c0 <OSFlagNameSet>:

#if OS_FLAG_NAME_EN > 0u
void  OSFlagNameSet (OS_FLAG_GRP  *pgrp,
                     INT8U        *pname,
                     INT8U        *perr)
{
    39c0:	fd010113          	add	sp,sp,-48
    39c4:	02812623          	sw	s0,44(sp)
    39c8:	03010413          	add	s0,sp,48
    39cc:	fca42e23          	sw	a0,-36(s0)
    39d0:	fcb42c23          	sw	a1,-40(s0)
    39d4:	fcc42a23          	sw	a2,-44(s0)
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    39d8:	fe042623          	sw	zero,-20(s0)
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    39dc:	fdc42783          	lw	a5,-36(s0)
    39e0:	00079a63          	bnez	a5,39f4 <OSFlagNameSet+0x34>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    39e4:	fd442783          	lw	a5,-44(s0)
    39e8:	06e00713          	li	a4,110
    39ec:	00e78023          	sb	a4,0(a5)
        return;
    39f0:	0b40006f          	j	3aa4 <OSFlagNameSet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    39f4:	fd842783          	lw	a5,-40(s0)
    39f8:	00079a63          	bnez	a5,3a0c <OSFlagNameSet+0x4c>
        *perr = OS_ERR_PNAME_NULL;
    39fc:	fd442783          	lw	a5,-44(s0)
    3a00:	00c00713          	li	a4,12
    3a04:	00e78023          	sb	a4,0(a5)
        return;
    3a08:	09c0006f          	j	3aa4 <OSFlagNameSet+0xe4>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
    3a0c:	000287b7          	lui	a5,0x28
    3a10:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    3a14:	00078a63          	beqz	a5,3a28 <OSFlagNameSet+0x68>
        *perr = OS_ERR_NAME_SET_ISR;
    3a18:	fd442783          	lw	a5,-44(s0)
    3a1c:	01200713          	li	a4,18
    3a20:	00e78023          	sb	a4,0(a5)
        return;
    3a24:	0800006f          	j	3aa4 <OSFlagNameSet+0xe4>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3a28:	00800793          	li	a5,8
    3a2c:	3007b7f3          	csrrc	a5,mstatus,a5
    3a30:	fef42423          	sw	a5,-24(s0)
    return context;
    3a34:	fe842783          	lw	a5,-24(s0)
    }
    OS_ENTER_CRITICAL();
    3a38:	fef42623          	sw	a5,-20(s0)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    3a3c:	fdc42783          	lw	a5,-36(s0)
    3a40:	0007c703          	lbu	a4,0(a5)
    3a44:	00500793          	li	a5,5
    3a48:	02f70663          	beq	a4,a5,3a74 <OSFlagNameSet+0xb4>
    3a4c:	fec42783          	lw	a5,-20(s0)
    3a50:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3a54:	fe442783          	lw	a5,-28(s0)
    3a58:	0087f793          	and	a5,a5,8
    3a5c:	3007a073          	csrs	mstatus,a5
}
    3a60:	00000013          	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    3a64:	fd442783          	lw	a5,-44(s0)
    3a68:	00100713          	li	a4,1
    3a6c:	00e78023          	sb	a4,0(a5)
        return;
    3a70:	0340006f          	j	3aa4 <OSFlagNameSet+0xe4>
    }
    pgrp->OSFlagName = pname;
    3a74:	fdc42783          	lw	a5,-36(s0)
    3a78:	fd842703          	lw	a4,-40(s0)
    3a7c:	00e7a623          	sw	a4,12(a5)
    3a80:	fec42783          	lw	a5,-20(s0)
    3a84:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3a88:	fe042783          	lw	a5,-32(s0)
    3a8c:	0087f793          	and	a5,a5,8
    3a90:	3007a073          	csrs	mstatus,a5
}
    3a94:	00000013          	nop
    OS_EXIT_CRITICAL();
    OS_TRACE_EVENT_NAME_SET(pgrp, pname);
    *perr            = OS_ERR_NONE;
    3a98:	fd442783          	lw	a5,-44(s0)
    3a9c:	00078023          	sb	zero,0(a5)
    return;
    3aa0:	00000013          	nop
}
    3aa4:	02c12403          	lw	s0,44(sp)
    3aa8:	03010113          	add	sp,sp,48
    3aac:	00008067          	ret

00003ab0 <OSFlagPend>:
OS_FLAGS  OSFlagPend (OS_FLAG_GRP  *pgrp,
                      OS_FLAGS      flags,
                      INT8U         wait_type,
                      INT32U        timeout,
                      INT8U        *perr)
{
    3ab0:	f8010113          	add	sp,sp,-128
    3ab4:	06112e23          	sw	ra,124(sp)
    3ab8:	06812c23          	sw	s0,120(sp)
    3abc:	08010413          	add	s0,sp,128
    3ac0:	f8a42623          	sw	a0,-116(s0)
    3ac4:	00058793          	mv	a5,a1
    3ac8:	f8d42223          	sw	a3,-124(s0)
    3acc:	f8e42023          	sw	a4,-128(s0)
    3ad0:	f8f41523          	sh	a5,-118(s0)
    3ad4:	00060793          	mv	a5,a2
    3ad8:	f8f404a3          	sb	a5,-119(s0)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0u;
    3adc:	fe042423          	sw	zero,-24(s0)
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    3ae0:	f8c42783          	lw	a5,-116(s0)
    3ae4:	00079c63          	bnez	a5,3afc <OSFlagPend+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3ae8:	f8042783          	lw	a5,-128(s0)
    3aec:	06e00713          	li	a4,110
    3af0:	00e78023          	sb	a4,0(a5)
        return ((OS_FLAGS)0);
    3af4:	00000793          	li	a5,0
    3af8:	5b40006f          	j	40ac <OSFlagPend+0x5fc>
    }
#endif

    OS_TRACE_FLAG_PEND_ENTER(pgrp, flags, timeout, wait_type);

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
    3afc:	000287b7          	lui	a5,0x28
    3b00:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    3b04:	00078c63          	beqz	a5,3b1c <OSFlagPend+0x6c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    3b08:	f8042783          	lw	a5,-128(s0)
    3b0c:	00200713          	li	a4,2
    3b10:	00e78023          	sb	a4,0(a5)
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
    3b14:	00000793          	li	a5,0
    3b18:	5940006f          	j	40ac <OSFlagPend+0x5fc>
    }
    if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
    3b1c:	000287b7          	lui	a5,0x28
    3b20:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    3b24:	00078c63          	beqz	a5,3b3c <OSFlagPend+0x8c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    3b28:	f8042783          	lw	a5,-128(s0)
    3b2c:	00d00713          	li	a4,13
    3b30:	00e78023          	sb	a4,0(a5)
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
    3b34:	00000793          	li	a5,0
    3b38:	5740006f          	j	40ac <OSFlagPend+0x5fc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    3b3c:	f8c42783          	lw	a5,-116(s0)
    3b40:	0007c703          	lbu	a4,0(a5)
    3b44:	00500793          	li	a5,5
    3b48:	00f70c63          	beq	a4,a5,3b60 <OSFlagPend+0xb0>
        *perr = OS_ERR_EVENT_TYPE;
    3b4c:	f8042783          	lw	a5,-128(s0)
    3b50:	00100713          	li	a4,1
    3b54:	00e78023          	sb	a4,0(a5)
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
    3b58:	00000793          	li	a5,0
    3b5c:	5500006f          	j	40ac <OSFlagPend+0x5fc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    3b60:	f8944783          	lbu	a5,-119(s0)
    3b64:	f807f793          	and	a5,a5,-128
    3b68:	fef403a3          	sb	a5,-25(s0)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    3b6c:	fe744783          	lbu	a5,-25(s0)
    3b70:	00078e63          	beqz	a5,3b8c <OSFlagPend+0xdc>
        wait_type &= (INT8U)~(INT8U)OS_FLAG_CONSUME;
    3b74:	f8944783          	lbu	a5,-119(s0)
    3b78:	07f7f793          	and	a5,a5,127
    3b7c:	f8f404a3          	sb	a5,-119(s0)
        consume    = OS_TRUE;
    3b80:	00100793          	li	a5,1
    3b84:	fef407a3          	sb	a5,-17(s0)
    3b88:	0080006f          	j	3b90 <OSFlagPend+0xe0>
    } else {
        consume    = OS_FALSE;
    3b8c:	fe0407a3          	sb	zero,-17(s0)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3b90:	00800793          	li	a5,8
    3b94:	3007b7f3          	csrrc	a5,mstatus,a5
    3b98:	fcf42e23          	sw	a5,-36(s0)
    return context;
    3b9c:	fdc42783          	lw	a5,-36(s0)
    }

    OS_ENTER_CRITICAL();
    3ba0:	fef42423          	sw	a5,-24(s0)
    switch (wait_type) {
    3ba4:	f8944783          	lbu	a5,-119(s0)
    3ba8:	00300713          	li	a4,3
    3bac:	0ee78a63          	beq	a5,a4,3ca0 <OSFlagPend+0x1f0>
    3bb0:	00300713          	li	a4,3
    3bb4:	32f74e63          	blt	a4,a5,3ef0 <OSFlagPend+0x440>
    3bb8:	00200713          	li	a4,2
    3bbc:	00e78e63          	beq	a5,a4,3bd8 <OSFlagPend+0x128>
    3bc0:	00200713          	li	a4,2
    3bc4:	32f74663          	blt	a4,a5,3ef0 <OSFlagPend+0x440>
    3bc8:	18078e63          	beqz	a5,3d64 <OSFlagPend+0x2b4>
    3bcc:	00100713          	li	a4,1
    3bd0:	24e78e63          	beq	a5,a4,3e2c <OSFlagPend+0x37c>
    3bd4:	31c0006f          	j	3ef0 <OSFlagPend+0x440>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    3bd8:	f8c42783          	lw	a5,-116(s0)
    3bdc:	0087d783          	lhu	a5,8(a5)
    3be0:	f8a45703          	lhu	a4,-118(s0)
    3be4:	00e7f7b3          	and	a5,a5,a4
    3be8:	fef41223          	sh	a5,-28(s0)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    3bec:	fe445703          	lhu	a4,-28(s0)
    3bf0:	f8a45783          	lhu	a5,-118(s0)
    3bf4:	06f71a63          	bne	a4,a5,3c68 <OSFlagPend+0x1b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3bf8:	fef44703          	lbu	a4,-17(s0)
    3bfc:	00100793          	li	a5,1
    3c00:	02f71863          	bne	a4,a5,3c30 <OSFlagPend+0x180>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;   /* Clear ONLY the flags we wanted    */
    3c04:	f8c42783          	lw	a5,-116(s0)
    3c08:	0087d703          	lhu	a4,8(a5)
    3c0c:	fe445783          	lhu	a5,-28(s0)
    3c10:	fff7c793          	not	a5,a5
    3c14:	01079793          	sll	a5,a5,0x10
    3c18:	0107d793          	srl	a5,a5,0x10
    3c1c:	00f777b3          	and	a5,a4,a5
    3c20:	01079713          	sll	a4,a5,0x10
    3c24:	01075713          	srl	a4,a4,0x10
    3c28:	f8c42783          	lw	a5,-116(s0)
    3c2c:	00e79423          	sh	a4,8(a5)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    3c30:	000287b7          	lui	a5,0x28
    3c34:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    3c38:	fe445703          	lhu	a4,-28(s0)
    3c3c:	02e79823          	sh	a4,48(a5)
    3c40:	fe842783          	lw	a5,-24(s0)
    3c44:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3c48:	fd842783          	lw	a5,-40(s0)
    3c4c:	0087f793          	and	a5,a5,8
    3c50:	3007a073          	csrs	mstatus,a5
}
    3c54:	00000013          	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    3c58:	f8042783          	lw	a5,-128(s0)
    3c5c:	00078023          	sb	zero,0(a5)
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
    3c60:	fe445783          	lhu	a5,-28(s0)
    3c64:	4480006f          	j	40ac <OSFlagPend+0x5fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    3c68:	f8944683          	lbu	a3,-119(s0)
    3c6c:	f8a45603          	lhu	a2,-118(s0)
    3c70:	f9440793          	add	a5,s0,-108
    3c74:	f8442703          	lw	a4,-124(s0)
    3c78:	00078593          	mv	a1,a5
    3c7c:	f8c42503          	lw	a0,-116(s0)
    3c80:	105000ef          	jal	4584 <OS_FlagBlock>
    3c84:	fe842783          	lw	a5,-24(s0)
    3c88:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3c8c:	fd442783          	lw	a5,-44(s0)
    3c90:	0087f793          	and	a5,a5,8
    3c94:	3007a073          	csrs	mstatus,a5
}
    3c98:	00000013          	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    3c9c:	2840006f          	j	3f20 <OSFlagPend+0x470>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    3ca0:	f8c42783          	lw	a5,-116(s0)
    3ca4:	0087d783          	lhu	a5,8(a5)
    3ca8:	f8a45703          	lhu	a4,-118(s0)
    3cac:	00e7f7b3          	and	a5,a5,a4
    3cb0:	fef41223          	sh	a5,-28(s0)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    3cb4:	fe445783          	lhu	a5,-28(s0)
    3cb8:	06078a63          	beqz	a5,3d2c <OSFlagPend+0x27c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3cbc:	fef44703          	lbu	a4,-17(s0)
    3cc0:	00100793          	li	a5,1
    3cc4:	02f71863          	bne	a4,a5,3cf4 <OSFlagPend+0x244>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;    /* Clear ONLY the flags that we got */
    3cc8:	f8c42783          	lw	a5,-116(s0)
    3ccc:	0087d703          	lhu	a4,8(a5)
    3cd0:	fe445783          	lhu	a5,-28(s0)
    3cd4:	fff7c793          	not	a5,a5
    3cd8:	01079793          	sll	a5,a5,0x10
    3cdc:	0107d793          	srl	a5,a5,0x10
    3ce0:	00f777b3          	and	a5,a4,a5
    3ce4:	01079713          	sll	a4,a5,0x10
    3ce8:	01075713          	srl	a4,a4,0x10
    3cec:	f8c42783          	lw	a5,-116(s0)
    3cf0:	00e79423          	sh	a4,8(a5)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    3cf4:	000287b7          	lui	a5,0x28
    3cf8:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    3cfc:	fe445703          	lhu	a4,-28(s0)
    3d00:	02e79823          	sh	a4,48(a5)
    3d04:	fe842783          	lw	a5,-24(s0)
    3d08:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3d0c:	fd042783          	lw	a5,-48(s0)
    3d10:	0087f793          	and	a5,a5,8
    3d14:	3007a073          	csrs	mstatus,a5
}
    3d18:	00000013          	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    3d1c:	f8042783          	lw	a5,-128(s0)
    3d20:	00078023          	sb	zero,0(a5)
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
    3d24:	fe445783          	lhu	a5,-28(s0)
    3d28:	3840006f          	j	40ac <OSFlagPend+0x5fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    3d2c:	f8944683          	lbu	a3,-119(s0)
    3d30:	f8a45603          	lhu	a2,-118(s0)
    3d34:	f9440793          	add	a5,s0,-108
    3d38:	f8442703          	lw	a4,-124(s0)
    3d3c:	00078593          	mv	a1,a5
    3d40:	f8c42503          	lw	a0,-116(s0)
    3d44:	041000ef          	jal	4584 <OS_FlagBlock>
    3d48:	fe842783          	lw	a5,-24(s0)
    3d4c:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3d50:	fcc42783          	lw	a5,-52(s0)
    3d54:	0087f793          	and	a5,a5,8
    3d58:	3007a073          	csrs	mstatus,a5
}
    3d5c:	00000013          	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    3d60:	1c00006f          	j	3f20 <OSFlagPend+0x470>

#if OS_FLAG_WAIT_CLR_EN > 0u
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want     */
    3d64:	f8c42783          	lw	a5,-116(s0)
    3d68:	0087d783          	lhu	a5,8(a5)
    3d6c:	fff7c793          	not	a5,a5
    3d70:	01079793          	sll	a5,a5,0x10
    3d74:	0107d793          	srl	a5,a5,0x10
    3d78:	f8a45703          	lhu	a4,-118(s0)
    3d7c:	00e7f7b3          	and	a5,a5,a4
    3d80:	fef41223          	sh	a5,-28(s0)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    3d84:	fe445703          	lhu	a4,-28(s0)
    3d88:	f8a45783          	lhu	a5,-118(s0)
    3d8c:	06f71463          	bne	a4,a5,3df4 <OSFlagPend+0x344>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3d90:	fef44703          	lbu	a4,-17(s0)
    3d94:	00100793          	li	a5,1
    3d98:	02f71263          	bne	a4,a5,3dbc <OSFlagPend+0x30c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    3d9c:	f8c42783          	lw	a5,-116(s0)
    3da0:	0087d783          	lhu	a5,8(a5)
    3da4:	fe445703          	lhu	a4,-28(s0)
    3da8:	00e7e7b3          	or	a5,a5,a4
    3dac:	01079713          	sll	a4,a5,0x10
    3db0:	01075713          	srl	a4,a4,0x10
    3db4:	f8c42783          	lw	a5,-116(s0)
    3db8:	00e79423          	sh	a4,8(a5)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    3dbc:	000287b7          	lui	a5,0x28
    3dc0:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    3dc4:	fe445703          	lhu	a4,-28(s0)
    3dc8:	02e79823          	sh	a4,48(a5)
    3dcc:	fe842783          	lw	a5,-24(s0)
    3dd0:	fcf42423          	sw	a5,-56(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3dd4:	fc842783          	lw	a5,-56(s0)
    3dd8:	0087f793          	and	a5,a5,8
    3ddc:	3007a073          	csrs	mstatus,a5
}
    3de0:	00000013          	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    3de4:	f8042783          	lw	a5,-128(s0)
    3de8:	00078023          	sb	zero,0(a5)
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
    3dec:	fe445783          	lhu	a5,-28(s0)
    3df0:	2bc0006f          	j	40ac <OSFlagPend+0x5fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    3df4:	f8944683          	lbu	a3,-119(s0)
    3df8:	f8a45603          	lhu	a2,-118(s0)
    3dfc:	f9440793          	add	a5,s0,-108
    3e00:	f8442703          	lw	a4,-124(s0)
    3e04:	00078593          	mv	a1,a5
    3e08:	f8c42503          	lw	a0,-116(s0)
    3e0c:	778000ef          	jal	4584 <OS_FlagBlock>
    3e10:	fe842783          	lw	a5,-24(s0)
    3e14:	fcf42223          	sw	a5,-60(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3e18:	fc442783          	lw	a5,-60(s0)
    3e1c:	0087f793          	and	a5,a5,8
    3e20:	3007a073          	csrs	mstatus,a5
}
    3e24:	00000013          	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    3e28:	0f80006f          	j	3f20 <OSFlagPend+0x470>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want      */
    3e2c:	f8c42783          	lw	a5,-116(s0)
    3e30:	0087d783          	lhu	a5,8(a5)
    3e34:	fff7c793          	not	a5,a5
    3e38:	01079793          	sll	a5,a5,0x10
    3e3c:	0107d793          	srl	a5,a5,0x10
    3e40:	f8a45703          	lhu	a4,-118(s0)
    3e44:	00e7f7b3          	and	a5,a5,a4
    3e48:	fef41223          	sh	a5,-28(s0)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    3e4c:	fe445783          	lhu	a5,-28(s0)
    3e50:	06078463          	beqz	a5,3eb8 <OSFlagPend+0x408>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3e54:	fef44703          	lbu	a4,-17(s0)
    3e58:	00100793          	li	a5,1
    3e5c:	02f71263          	bne	a4,a5,3e80 <OSFlagPend+0x3d0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    3e60:	f8c42783          	lw	a5,-116(s0)
    3e64:	0087d783          	lhu	a5,8(a5)
    3e68:	fe445703          	lhu	a4,-28(s0)
    3e6c:	00e7e7b3          	or	a5,a5,a4
    3e70:	01079713          	sll	a4,a5,0x10
    3e74:	01075713          	srl	a4,a4,0x10
    3e78:	f8c42783          	lw	a5,-116(s0)
    3e7c:	00e79423          	sh	a4,8(a5)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    3e80:	000287b7          	lui	a5,0x28
    3e84:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    3e88:	fe445703          	lhu	a4,-28(s0)
    3e8c:	02e79823          	sh	a4,48(a5)
    3e90:	fe842783          	lw	a5,-24(s0)
    3e94:	fcf42023          	sw	a5,-64(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3e98:	fc042783          	lw	a5,-64(s0)
    3e9c:	0087f793          	and	a5,a5,8
    3ea0:	3007a073          	csrs	mstatus,a5
}
    3ea4:	00000013          	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    3ea8:	f8042783          	lw	a5,-128(s0)
    3eac:	00078023          	sb	zero,0(a5)
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
    3eb0:	fe445783          	lhu	a5,-28(s0)
    3eb4:	1f80006f          	j	40ac <OSFlagPend+0x5fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    3eb8:	f8944683          	lbu	a3,-119(s0)
    3ebc:	f8a45603          	lhu	a2,-118(s0)
    3ec0:	f9440793          	add	a5,s0,-108
    3ec4:	f8442703          	lw	a4,-124(s0)
    3ec8:	00078593          	mv	a1,a5
    3ecc:	f8c42503          	lw	a0,-116(s0)
    3ed0:	6b4000ef          	jal	4584 <OS_FlagBlock>
    3ed4:	fe842783          	lw	a5,-24(s0)
    3ed8:	faf42e23          	sw	a5,-68(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3edc:	fbc42783          	lw	a5,-68(s0)
    3ee0:	0087f793          	and	a5,a5,8
    3ee4:	3007a073          	csrs	mstatus,a5
}
    3ee8:	00000013          	nop
                 OS_EXIT_CRITICAL();
             }
             break;
    3eec:	0340006f          	j	3f20 <OSFlagPend+0x470>
    3ef0:	fe842783          	lw	a5,-24(s0)
    3ef4:	faf42c23          	sw	a5,-72(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3ef8:	fb842783          	lw	a5,-72(s0)
    3efc:	0087f793          	and	a5,a5,8
    3f00:	3007a073          	csrs	mstatus,a5
}
    3f04:	00000013          	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    3f08:	fe041223          	sh	zero,-28(s0)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    3f0c:	f8042783          	lw	a5,-128(s0)
    3f10:	06f00713          	li	a4,111
    3f14:	00e78023          	sb	a4,0(a5)
             OS_TRACE_FLAG_PEND_EXIT(*perr);
             return (flags_rdy);
    3f18:	fe445783          	lhu	a5,-28(s0)
    3f1c:	1900006f          	j	40ac <OSFlagPend+0x5fc>
    }

    OS_Sched();                                            /* Find next HPT ready to run               */
    3f20:	87dfe0ef          	jal	279c <OS_Sched>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3f24:	00800793          	li	a5,8
    3f28:	3007b7f3          	csrrc	a5,mstatus,a5
    3f2c:	faf42a23          	sw	a5,-76(s0)
    return context;
    3f30:	fb442783          	lw	a5,-76(s0)
    OS_ENTER_CRITICAL();
    3f34:	fef42423          	sw	a5,-24(s0)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    3f38:	000287b7          	lui	a5,0x28
    3f3c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    3f40:	0397c783          	lbu	a5,57(a5)
    3f44:	08078463          	beqz	a5,3fcc <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    3f48:	000287b7          	lui	a5,0x28
    3f4c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    3f50:	0397c783          	lbu	a5,57(a5)
    3f54:	fef401a3          	sb	a5,-29(s0)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    3f58:	000287b7          	lui	a5,0x28
    3f5c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    3f60:	02078ca3          	sb	zero,57(a5)
        OS_FlagUnlink(&node);
    3f64:	f9440793          	add	a5,s0,-108
    3f68:	00078513          	mv	a0,a5
    3f6c:	1b5000ef          	jal	4920 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    3f70:	000287b7          	lui	a5,0x28
    3f74:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    3f78:	02078c23          	sb	zero,56(a5)
    3f7c:	fe842783          	lw	a5,-24(s0)
    3f80:	faf42823          	sw	a5,-80(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    3f84:	fb042783          	lw	a5,-80(s0)
    3f88:	0087f793          	and	a5,a5,8
    3f8c:	3007a073          	csrs	mstatus,a5
}
    3f90:	00000013          	nop
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    3f94:	fe041223          	sh	zero,-28(s0)
        switch (pend_stat) {
    3f98:	fe344703          	lbu	a4,-29(s0)
    3f9c:	00200793          	li	a5,2
    3fa0:	00f71a63          	bne	a4,a5,3fb4 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                /* Indicate that we aborted   waiting       */
    3fa4:	f8042783          	lw	a5,-128(s0)
    3fa8:	00e00713          	li	a4,14
    3fac:	00e78023          	sb	a4,0(a5)
                 break;
    3fb0:	0140006f          	j	3fc4 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                   /* Indicate that we timed-out waiting       */
    3fb4:	f8042783          	lw	a5,-128(s0)
    3fb8:	00a00713          	li	a4,10
    3fbc:	00e78023          	sb	a4,0(a5)
                 break;
    3fc0:	00000013          	nop
        }
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return (flags_rdy);
    3fc4:	fe445783          	lhu	a5,-28(s0)
    3fc8:	0e40006f          	j	40ac <OSFlagPend+0x5fc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    3fcc:	000287b7          	lui	a5,0x28
    3fd0:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    3fd4:	0307d783          	lhu	a5,48(a5)
    3fd8:	fef41223          	sh	a5,-28(s0)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    3fdc:	fef44703          	lbu	a4,-17(s0)
    3fe0:	00100793          	li	a5,1
    3fe4:	0af71263          	bne	a4,a5,4088 <OSFlagPend+0x5d8>
        switch (wait_type) {
    3fe8:	f8944783          	lbu	a5,-119(s0)
    3fec:	00100713          	li	a4,1
    3ff0:	00f74663          	blt	a4,a5,3ffc <OSFlagPend+0x54c>
    3ff4:	0407d263          	bgez	a5,4038 <OSFlagPend+0x588>
    3ff8:	0640006f          	j	405c <OSFlagPend+0x5ac>
    3ffc:	ffe78713          	add	a4,a5,-2
    4000:	00100793          	li	a5,1
    4004:	04e7ec63          	bltu	a5,a4,405c <OSFlagPend+0x5ac>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;
    4008:	f8c42783          	lw	a5,-116(s0)
    400c:	0087d703          	lhu	a4,8(a5)
    4010:	fe445783          	lhu	a5,-28(s0)
    4014:	fff7c793          	not	a5,a5
    4018:	01079793          	sll	a5,a5,0x10
    401c:	0107d793          	srl	a5,a5,0x10
    4020:	00f777b3          	and	a5,a4,a5
    4024:	01079713          	sll	a4,a5,0x10
    4028:	01075713          	srl	a4,a4,0x10
    402c:	f8c42783          	lw	a5,-116(s0)
    4030:	00e79423          	sh	a4,8(a5)
                 break;
    4034:	0540006f          	j	4088 <OSFlagPend+0x5d8>

#if OS_FLAG_WAIT_CLR_EN > 0u
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    4038:	f8c42783          	lw	a5,-116(s0)
    403c:	0087d783          	lhu	a5,8(a5)
    4040:	fe445703          	lhu	a4,-28(s0)
    4044:	00e7e7b3          	or	a5,a5,a4
    4048:	01079713          	sll	a4,a5,0x10
    404c:	01075713          	srl	a4,a4,0x10
    4050:	f8c42783          	lw	a5,-116(s0)
    4054:	00e79423          	sh	a4,8(a5)
                 break;
    4058:	0300006f          	j	4088 <OSFlagPend+0x5d8>
    405c:	fe842783          	lw	a5,-24(s0)
    4060:	faf42623          	sw	a5,-84(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4064:	fac42783          	lw	a5,-84(s0)
    4068:	0087f793          	and	a5,a5,8
    406c:	3007a073          	csrs	mstatus,a5
}
    4070:	00000013          	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    4074:	f8042783          	lw	a5,-128(s0)
    4078:	06f00713          	li	a4,111
    407c:	00e78023          	sb	a4,0(a5)
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return ((OS_FLAGS)0);
    4080:	00000793          	li	a5,0
    4084:	0280006f          	j	40ac <OSFlagPend+0x5fc>
    4088:	fe842783          	lw	a5,-24(s0)
    408c:	faf42423          	sw	a5,-88(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4090:	fa842783          	lw	a5,-88(s0)
    4094:	0087f793          	and	a5,a5,8
    4098:	3007a073          	csrs	mstatus,a5
}
    409c:	00000013          	nop
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    40a0:	f8042783          	lw	a5,-128(s0)
    40a4:	00078023          	sb	zero,0(a5)
    OS_TRACE_FLAG_PEND_EXIT(*perr);
    return (flags_rdy);
    40a8:	fe445783          	lhu	a5,-28(s0)
}
    40ac:	00078513          	mv	a0,a5
    40b0:	07c12083          	lw	ra,124(sp)
    40b4:	07812403          	lw	s0,120(sp)
    40b8:	08010113          	add	sp,sp,128
    40bc:	00008067          	ret

000040c0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    40c0:	fe010113          	add	sp,sp,-32
    40c4:	00812e23          	sw	s0,28(sp)
    40c8:	02010413          	add	s0,sp,32
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0u;
    40cc:	fe042623          	sw	zero,-20(s0)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    40d0:	00800793          	li	a5,8
    40d4:	3007b7f3          	csrrc	a5,mstatus,a5
    40d8:	fef42023          	sw	a5,-32(s0)
    return context;
    40dc:	fe042783          	lw	a5,-32(s0)
#endif



    OS_ENTER_CRITICAL();
    40e0:	fef42623          	sw	a5,-20(s0)
    flags = OSTCBCur->OSTCBFlagsRdy;
    40e4:	000287b7          	lui	a5,0x28
    40e8:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    40ec:	0307d783          	lhu	a5,48(a5)
    40f0:	fef41523          	sh	a5,-22(s0)
    40f4:	fec42783          	lw	a5,-20(s0)
    40f8:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    40fc:	fe442783          	lw	a5,-28(s0)
    4100:	0087f793          	and	a5,a5,8
    4104:	3007a073          	csrs	mstatus,a5
}
    4108:	00000013          	nop
    OS_EXIT_CRITICAL();
    return (flags);
    410c:	fea45783          	lhu	a5,-22(s0)
}
    4110:	00078513          	mv	a0,a5
    4114:	01c12403          	lw	s0,28(sp)
    4118:	02010113          	add	sp,sp,32
    411c:	00008067          	ret

00004120 <OSFlagPost>:
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *pgrp,
                      OS_FLAGS      flags,
                      INT8U         opt,
                      INT8U        *perr)
{
    4120:	fb010113          	add	sp,sp,-80
    4124:	04112623          	sw	ra,76(sp)
    4128:	04812423          	sw	s0,72(sp)
    412c:	05010413          	add	s0,sp,80
    4130:	faa42e23          	sw	a0,-68(s0)
    4134:	00058793          	mv	a5,a1
    4138:	00060713          	mv	a4,a2
    413c:	fad42a23          	sw	a3,-76(s0)
    4140:	faf41d23          	sh	a5,-70(s0)
    4144:	00070793          	mv	a5,a4
    4148:	faf40ca3          	sb	a5,-71(s0)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0u;
    414c:	fe042223          	sw	zero,-28(s0)
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    4150:	fbc42783          	lw	a5,-68(s0)
    4154:	00079c63          	bnez	a5,416c <OSFlagPost+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    4158:	fb442783          	lw	a5,-76(s0)
    415c:	06e00713          	li	a4,110
    4160:	00e78023          	sb	a4,0(a5)
        return ((OS_FLAGS)0);
    4164:	00000793          	li	a5,0
    4168:	35c0006f          	j	44c4 <OSFlagPost+0x3a4>
    }
#endif

    OS_TRACE_FLAG_POST_ENTER(pgrp, flags, opt);

    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    416c:	fbc42783          	lw	a5,-68(s0)
    4170:	0007c703          	lbu	a4,0(a5)
    4174:	00500793          	li	a5,5
    4178:	00f70c63          	beq	a4,a5,4190 <OSFlagPost+0x70>
        *perr = OS_ERR_EVENT_TYPE;
    417c:	fb442783          	lw	a5,-76(s0)
    4180:	00100713          	li	a4,1
    4184:	00e78023          	sb	a4,0(a5)
        OS_TRACE_FLAG_POST_EXIT(*perr);
        return ((OS_FLAGS)0);
    4188:	00000793          	li	a5,0
    418c:	3380006f          	j	44c4 <OSFlagPost+0x3a4>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4190:	00800793          	li	a5,8
    4194:	3007b7f3          	csrrc	a5,mstatus,a5
    4198:	fcf42c23          	sw	a5,-40(s0)
    return context;
    419c:	fd842783          	lw	a5,-40(s0)
    }

    OS_ENTER_CRITICAL();
    41a0:	fef42223          	sw	a5,-28(s0)
    switch (opt) {
    41a4:	fb944783          	lbu	a5,-71(s0)
    41a8:	00078863          	beqz	a5,41b8 <OSFlagPost+0x98>
    41ac:	00100713          	li	a4,1
    41b0:	02e78c63          	beq	a5,a4,41e8 <OSFlagPost+0xc8>
    41b4:	0580006f          	j	420c <OSFlagPost+0xec>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= (OS_FLAGS)~flags;  /* Clear the flags specified in the group         */
    41b8:	fbc42783          	lw	a5,-68(s0)
    41bc:	0087d703          	lhu	a4,8(a5)
    41c0:	fba45783          	lhu	a5,-70(s0)
    41c4:	fff7c793          	not	a5,a5
    41c8:	01079793          	sll	a5,a5,0x10
    41cc:	0107d793          	srl	a5,a5,0x10
    41d0:	00f777b3          	and	a5,a4,a5
    41d4:	01079713          	sll	a4,a5,0x10
    41d8:	01075713          	srl	a4,a4,0x10
    41dc:	fbc42783          	lw	a5,-68(s0)
    41e0:	00e79423          	sh	a4,8(a5)
             break;
    41e4:	0540006f          	j	4238 <OSFlagPost+0x118>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    41e8:	fbc42783          	lw	a5,-68(s0)
    41ec:	0087d783          	lhu	a5,8(a5)
    41f0:	fba45703          	lhu	a4,-70(s0)
    41f4:	00e7e7b3          	or	a5,a5,a4
    41f8:	01079713          	sll	a4,a5,0x10
    41fc:	01075713          	srl	a4,a4,0x10
    4200:	fbc42783          	lw	a5,-68(s0)
    4204:	00e79423          	sh	a4,8(a5)
             break;
    4208:	0300006f          	j	4238 <OSFlagPost+0x118>
    420c:	fe442783          	lw	a5,-28(s0)
    4210:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4214:	fd442783          	lw	a5,-44(s0)
    4218:	0087f793          	and	a5,a5,8
    421c:	3007a073          	csrs	mstatus,a5
}
    4220:	00000013          	nop

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    4224:	fb442783          	lw	a5,-76(s0)
    4228:	07100713          	li	a4,113
    422c:	00e78023          	sb	a4,0(a5)
             OS_TRACE_FLAG_POST_EXIT(*perr);
             return ((OS_FLAGS)0);
    4230:	00000793          	li	a5,0
    4234:	2900006f          	j	44c4 <OSFlagPost+0x3a4>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    4238:	fe0405a3          	sb	zero,-21(s0)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    423c:	fbc42783          	lw	a5,-68(s0)
    4240:	0047a783          	lw	a5,4(a5)
    4244:	fef42623          	sw	a5,-20(s0)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    4248:	2080006f          	j	4450 <OSFlagPost+0x330>
        switch (pnode->OSFlagNodeWaitType) {
    424c:	fec42783          	lw	a5,-20(s0)
    4250:	0127c783          	lbu	a5,18(a5)
    4254:	00300713          	li	a4,3
    4258:	08e78463          	beq	a5,a4,42e0 <OSFlagPost+0x1c0>
    425c:	00300713          	li	a4,3
    4260:	18f74e63          	blt	a4,a5,43fc <OSFlagPost+0x2dc>
    4264:	00200713          	li	a4,2
    4268:	00e78e63          	beq	a5,a4,4284 <OSFlagPost+0x164>
    426c:	00200713          	li	a4,2
    4270:	18f74663          	blt	a4,a5,43fc <OSFlagPost+0x2dc>
    4274:	0c078063          	beqz	a5,4334 <OSFlagPost+0x214>
    4278:	00100713          	li	a4,1
    427c:	12e78063          	beq	a5,a4,439c <OSFlagPost+0x27c>
    4280:	17c0006f          	j	43fc <OSFlagPost+0x2dc>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    4284:	fbc42783          	lw	a5,-68(s0)
    4288:	0087d703          	lhu	a4,8(a5)
    428c:	fec42783          	lw	a5,-20(s0)
    4290:	0107d783          	lhu	a5,16(a5)
    4294:	00f777b3          	and	a5,a4,a5
    4298:	fef41023          	sh	a5,-32(s0)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd          */
    429c:	fec42783          	lw	a5,-20(s0)
    42a0:	0107d783          	lhu	a5,16(a5)
    42a4:	fe045703          	lhu	a4,-32(s0)
    42a8:	18f71063          	bne	a4,a5,4428 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
    42ac:	fe045783          	lhu	a5,-32(s0)
    42b0:	00000613          	li	a2,0
    42b4:	00078593          	mv	a1,a5
    42b8:	fec42503          	lw	a0,-20(s0)
    42bc:	558000ef          	jal	4814 <OS_FlagTaskRdy>
    42c0:	00050793          	mv	a5,a0
    42c4:	fcf40fa3          	sb	a5,-33(s0)
                     if (rdy == OS_TRUE) {
    42c8:	fdf44703          	lbu	a4,-33(s0)
    42cc:	00100793          	li	a5,1
    42d0:	14f71c63          	bne	a4,a5,4428 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    42d4:	00100793          	li	a5,1
    42d8:	fef405a3          	sb	a5,-21(s0)
                     }
                 }
                 break;
    42dc:	14c0006f          	j	4428 <OSFlagPost+0x308>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    42e0:	fbc42783          	lw	a5,-68(s0)
    42e4:	0087d703          	lhu	a4,8(a5)
    42e8:	fec42783          	lw	a5,-20(s0)
    42ec:	0107d783          	lhu	a5,16(a5)
    42f0:	00f777b3          	and	a5,a4,a5
    42f4:	fef41023          	sh	a5,-32(s0)
                 if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd          */
    42f8:	fe045783          	lhu	a5,-32(s0)
    42fc:	12078a63          	beqz	a5,4430 <OSFlagPost+0x310>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
    4300:	fe045783          	lhu	a5,-32(s0)
    4304:	00000613          	li	a2,0
    4308:	00078593          	mv	a1,a5
    430c:	fec42503          	lw	a0,-20(s0)
    4310:	504000ef          	jal	4814 <OS_FlagTaskRdy>
    4314:	00050793          	mv	a5,a0
    4318:	fcf40fa3          	sb	a5,-33(s0)
                     if (rdy == OS_TRUE) {
    431c:	fdf44703          	lbu	a4,-33(s0)
    4320:	00100793          	li	a5,1
    4324:	10f71663          	bne	a4,a5,4430 <OSFlagPost+0x310>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    4328:	00100793          	li	a5,1
    432c:	fef405a3          	sb	a5,-21(s0)
                     }
                 }
                 break;
    4330:	1000006f          	j	4430 <OSFlagPost+0x310>

#if OS_FLAG_WAIT_CLR_EN > 0u
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
    4334:	fbc42783          	lw	a5,-68(s0)
    4338:	0087d783          	lhu	a5,8(a5)
    433c:	fff7c793          	not	a5,a5
    4340:	01079713          	sll	a4,a5,0x10
    4344:	01075713          	srl	a4,a4,0x10
    4348:	fec42783          	lw	a5,-20(s0)
    434c:	0107d783          	lhu	a5,16(a5)
    4350:	00f777b3          	and	a5,a4,a5
    4354:	fef41023          	sh	a5,-32(s0)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd          */
    4358:	fec42783          	lw	a5,-20(s0)
    435c:	0107d783          	lhu	a5,16(a5)
    4360:	fe045703          	lhu	a4,-32(s0)
    4364:	0cf71a63          	bne	a4,a5,4438 <OSFlagPost+0x318>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
    4368:	fe045783          	lhu	a5,-32(s0)
    436c:	00000613          	li	a2,0
    4370:	00078593          	mv	a1,a5
    4374:	fec42503          	lw	a0,-20(s0)
    4378:	49c000ef          	jal	4814 <OS_FlagTaskRdy>
    437c:	00050793          	mv	a5,a0
    4380:	fcf40fa3          	sb	a5,-33(s0)
                     if (rdy == OS_TRUE) {
    4384:	fdf44703          	lbu	a4,-33(s0)
    4388:	00100793          	li	a5,1
    438c:	0af71663          	bne	a4,a5,4438 <OSFlagPost+0x318>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    4390:	00100793          	li	a5,1
    4394:	fef405a3          	sb	a5,-21(s0)
                     }
                 }
                 break;
    4398:	0a00006f          	j	4438 <OSFlagPost+0x318>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
    439c:	fbc42783          	lw	a5,-68(s0)
    43a0:	0087d783          	lhu	a5,8(a5)
    43a4:	fff7c793          	not	a5,a5
    43a8:	01079713          	sll	a4,a5,0x10
    43ac:	01075713          	srl	a4,a4,0x10
    43b0:	fec42783          	lw	a5,-20(s0)
    43b4:	0107d783          	lhu	a5,16(a5)
    43b8:	00f777b3          	and	a5,a4,a5
    43bc:	fef41023          	sh	a5,-32(s0)
                 if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd          */
    43c0:	fe045783          	lhu	a5,-32(s0)
    43c4:	06078e63          	beqz	a5,4440 <OSFlagPost+0x320>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
    43c8:	fe045783          	lhu	a5,-32(s0)
    43cc:	00000613          	li	a2,0
    43d0:	00078593          	mv	a1,a5
    43d4:	fec42503          	lw	a0,-20(s0)
    43d8:	43c000ef          	jal	4814 <OS_FlagTaskRdy>
    43dc:	00050793          	mv	a5,a0
    43e0:	fcf40fa3          	sb	a5,-33(s0)
                     if (rdy == OS_TRUE) {
    43e4:	fdf44703          	lbu	a4,-33(s0)
    43e8:	00100793          	li	a5,1
    43ec:	04f71a63          	bne	a4,a5,4440 <OSFlagPost+0x320>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    43f0:	00100793          	li	a5,1
    43f4:	fef405a3          	sb	a5,-21(s0)
                     }
                 }
                 break;
    43f8:	0480006f          	j	4440 <OSFlagPost+0x320>
    43fc:	fe442783          	lw	a5,-28(s0)
    4400:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4404:	fd042783          	lw	a5,-48(s0)
    4408:	0087f793          	and	a5,a5,8
    440c:	3007a073          	csrs	mstatus,a5
}
    4410:	00000013          	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    4414:	fb442783          	lw	a5,-76(s0)
    4418:	06f00713          	li	a4,111
    441c:	00e78023          	sb	a4,0(a5)
                 OS_TRACE_FLAG_POST_EXIT(*perr);
                 return ((OS_FLAGS)0);
    4420:	00000793          	li	a5,0
    4424:	0a00006f          	j	44c4 <OSFlagPost+0x3a4>
                 break;
    4428:	00000013          	nop
    442c:	0180006f          	j	4444 <OSFlagPost+0x324>
                 break;
    4430:	00000013          	nop
    4434:	0100006f          	j	4444 <OSFlagPost+0x324>
                 break;
    4438:	00000013          	nop
    443c:	0080006f          	j	4444 <OSFlagPost+0x324>
                 break;
    4440:	00000013          	nop
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    4444:	fec42783          	lw	a5,-20(s0)
    4448:	0007a783          	lw	a5,0(a5)
    444c:	fef42623          	sw	a5,-20(s0)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    4450:	fec42783          	lw	a5,-20(s0)
    4454:	de079ce3          	bnez	a5,424c <OSFlagPost+0x12c>
    4458:	fe442783          	lw	a5,-28(s0)
    445c:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4460:	fcc42783          	lw	a5,-52(s0)
    4464:	0087f793          	and	a5,a5,8
    4468:	3007a073          	csrs	mstatus,a5
}
    446c:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    4470:	feb44703          	lbu	a4,-21(s0)
    4474:	00100793          	li	a5,1
    4478:	00f71463          	bne	a4,a5,4480 <OSFlagPost+0x360>
        OS_Sched();
    447c:	b20fe0ef          	jal	279c <OS_Sched>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4480:	00800793          	li	a5,8
    4484:	3007b7f3          	csrrc	a5,mstatus,a5
    4488:	fcf42223          	sw	a5,-60(s0)
    return context;
    448c:	fc442783          	lw	a5,-60(s0)
    }
    OS_ENTER_CRITICAL();
    4490:	fef42223          	sw	a5,-28(s0)
    flags_cur = pgrp->OSFlagFlags;
    4494:	fbc42783          	lw	a5,-68(s0)
    4498:	0087d783          	lhu	a5,8(a5)
    449c:	fef41123          	sh	a5,-30(s0)
    44a0:	fe442783          	lw	a5,-28(s0)
    44a4:	fcf42423          	sw	a5,-56(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    44a8:	fc842783          	lw	a5,-56(s0)
    44ac:	0087f793          	and	a5,a5,8
    44b0:	3007a073          	csrs	mstatus,a5
}
    44b4:	00000013          	nop
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    44b8:	fb442783          	lw	a5,-76(s0)
    44bc:	00078023          	sb	zero,0(a5)
    OS_TRACE_FLAG_POST_EXIT(*perr);

    return (flags_cur);
    44c0:	fe245783          	lhu	a5,-30(s0)
}
    44c4:	00078513          	mv	a0,a5
    44c8:	04c12083          	lw	ra,76(sp)
    44cc:	04812403          	lw	s0,72(sp)
    44d0:	05010113          	add	sp,sp,80
    44d4:	00008067          	ret

000044d8 <OSFlagQuery>:
*/

#if OS_FLAG_QUERY_EN > 0u
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP  *pgrp,
                       INT8U        *perr)
{
    44d8:	fd010113          	add	sp,sp,-48
    44dc:	02812623          	sw	s0,44(sp)
    44e0:	03010413          	add	s0,sp,48
    44e4:	fca42e23          	sw	a0,-36(s0)
    44e8:	fcb42c23          	sw	a1,-40(s0)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3u                      /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0u;
    44ec:	fe042623          	sw	zero,-20(s0)
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    44f0:	fdc42783          	lw	a5,-36(s0)
    44f4:	00079c63          	bnez	a5,450c <OSFlagQuery+0x34>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    44f8:	fd842783          	lw	a5,-40(s0)
    44fc:	06e00713          	li	a4,110
    4500:	00e78023          	sb	a4,0(a5)
        return ((OS_FLAGS)0);
    4504:	00000793          	li	a5,0
    4508:	06c0006f          	j	4574 <OSFlagQuery+0x9c>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    450c:	fdc42783          	lw	a5,-36(s0)
    4510:	0007c703          	lbu	a4,0(a5)
    4514:	00500793          	li	a5,5
    4518:	00f70c63          	beq	a4,a5,4530 <OSFlagQuery+0x58>
        *perr = OS_ERR_EVENT_TYPE;
    451c:	fd842783          	lw	a5,-40(s0)
    4520:	00100713          	li	a4,1
    4524:	00e78023          	sb	a4,0(a5)
        return ((OS_FLAGS)0);
    4528:	00000793          	li	a5,0
    452c:	0480006f          	j	4574 <OSFlagQuery+0x9c>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4530:	00800793          	li	a5,8
    4534:	3007b7f3          	csrrc	a5,mstatus,a5
    4538:	fef42023          	sw	a5,-32(s0)
    return context;
    453c:	fe042783          	lw	a5,-32(s0)
    }
    OS_ENTER_CRITICAL();
    4540:	fef42623          	sw	a5,-20(s0)
    flags = pgrp->OSFlagFlags;
    4544:	fdc42783          	lw	a5,-36(s0)
    4548:	0087d783          	lhu	a5,8(a5)
    454c:	fef41523          	sh	a5,-22(s0)
    4550:	fec42783          	lw	a5,-20(s0)
    4554:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4558:	fe442783          	lw	a5,-28(s0)
    455c:	0087f793          	and	a5,a5,8
    4560:	3007a073          	csrs	mstatus,a5
}
    4564:	00000013          	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4568:	fd842783          	lw	a5,-40(s0)
    456c:	00078023          	sb	zero,0(a5)
    return (flags);                               /* Return the current value of the event flags       */
    4570:	fea45783          	lhu	a5,-22(s0)
}
    4574:	00078513          	mv	a0,a5
    4578:	02c12403          	lw	s0,44(sp)
    457c:	03010113          	add	sp,sp,48
    4580:	00008067          	ret

00004584 <OS_FlagBlock>:
static  void  OS_FlagBlock (OS_FLAG_GRP  *pgrp,
                            OS_FLAG_NODE *pnode,
                            OS_FLAGS      flags,
                            INT8U         wait_type,
                            INT32U        timeout)
{
    4584:	fd010113          	add	sp,sp,-48
    4588:	02812623          	sw	s0,44(sp)
    458c:	03010413          	add	s0,sp,48
    4590:	fca42e23          	sw	a0,-36(s0)
    4594:	fcb42c23          	sw	a1,-40(s0)
    4598:	00060793          	mv	a5,a2
    459c:	fce42823          	sw	a4,-48(s0)
    45a0:	fcf41b23          	sh	a5,-42(s0)
    45a4:	00068793          	mv	a5,a3
    45a8:	fcf40aa3          	sb	a5,-43(s0)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    45ac:	000287b7          	lui	a5,0x28
    45b0:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    45b4:	0387c703          	lbu	a4,56(a5)
    45b8:	000287b7          	lui	a5,0x28
    45bc:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    45c0:	02076713          	or	a4,a4,32
    45c4:	0ff77713          	zext.b	a4,a4
    45c8:	02e78c23          	sb	a4,56(a5)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    45cc:	000287b7          	lui	a5,0x28
    45d0:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    45d4:	02078ca3          	sb	zero,57(a5)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    45d8:	000287b7          	lui	a5,0x28
    45dc:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    45e0:	fd042703          	lw	a4,-48(s0)
    45e4:	02e7aa23          	sw	a4,52(a5)
#if OS_TASK_DEL_EN > 0u
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    45e8:	000287b7          	lui	a5,0x28
    45ec:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    45f0:	fd842703          	lw	a4,-40(s0)
    45f4:	02e7a623          	sw	a4,44(a5)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    45f8:	fd842783          	lw	a5,-40(s0)
    45fc:	fd645703          	lhu	a4,-42(s0)
    4600:	00e79823          	sh	a4,16(a5)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    4604:	fd842783          	lw	a5,-40(s0)
    4608:	fd544703          	lbu	a4,-43(s0)
    460c:	00e78923          	sb	a4,18(a5)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    4610:	000287b7          	lui	a5,0x28
    4614:	81c7a703          	lw	a4,-2020(a5) # 2781c <OSTCBCur>
    4618:	fd842783          	lw	a5,-40(s0)
    461c:	00e7a423          	sw	a4,8(a5)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    4620:	fdc42783          	lw	a5,-36(s0)
    4624:	0047a703          	lw	a4,4(a5)
    4628:	fd842783          	lw	a5,-40(s0)
    462c:	00e7a023          	sw	a4,0(a5)
    pnode->OSFlagNodePrev     = (void *)0;
    4630:	fd842783          	lw	a5,-40(s0)
    4634:	0007a223          	sw	zero,4(a5)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    4638:	fd842783          	lw	a5,-40(s0)
    463c:	fdc42703          	lw	a4,-36(s0)
    4640:	00e7a623          	sw	a4,12(a5)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    4644:	fdc42783          	lw	a5,-36(s0)
    4648:	0047a783          	lw	a5,4(a5)
    464c:	fef42623          	sw	a5,-20(s0)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    4650:	fec42783          	lw	a5,-20(s0)
    4654:	00078863          	beqz	a5,4664 <OS_FlagBlock+0xe0>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    4658:	fec42783          	lw	a5,-20(s0)
    465c:	fd842703          	lw	a4,-40(s0)
    4660:	00e7a223          	sw	a4,4(a5)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    4664:	fdc42783          	lw	a5,-36(s0)
    4668:	fd842703          	lw	a4,-40(s0)
    466c:	00e7a223          	sw	a4,4(a5)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    4670:	000287b7          	lui	a5,0x28
    4674:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    4678:	03c7c783          	lbu	a5,60(a5)
    467c:	fef405a3          	sb	a5,-21(s0)
    OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
    4680:	feb44703          	lbu	a4,-21(s0)
    4684:	000287b7          	lui	a5,0x28
    4688:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    468c:	00f707b3          	add	a5,a4,a5
    4690:	0007c703          	lbu	a4,0(a5)
    4694:	000287b7          	lui	a5,0x28
    4698:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    469c:	03d7c783          	lbu	a5,61(a5)
    46a0:	fff7c793          	not	a5,a5
    46a4:	0ff7f793          	zext.b	a5,a5
    46a8:	feb44683          	lbu	a3,-21(s0)
    46ac:	00f777b3          	and	a5,a4,a5
    46b0:	0ff7f713          	zext.b	a4,a5
    46b4:	000287b7          	lui	a5,0x28
    46b8:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    46bc:	00f687b3          	add	a5,a3,a5
    46c0:	00e78023          	sb	a4,0(a5)
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0x00u) {
    46c4:	feb44703          	lbu	a4,-21(s0)
    46c8:	000287b7          	lui	a5,0x28
    46cc:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    46d0:	00f707b3          	add	a5,a4,a5
    46d4:	0007c783          	lbu	a5,0(a5)
    46d8:	02079863          	bnez	a5,4708 <OS_FlagBlock+0x184>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
    46dc:	000287b7          	lui	a5,0x28
    46e0:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    46e4:	03e7c783          	lbu	a5,62(a5)
    46e8:	fff7c793          	not	a5,a5
    46ec:	0ff7f713          	zext.b	a4,a5
    46f0:	000287b7          	lui	a5,0x28
    46f4:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    46f8:	00f777b3          	and	a5,a4,a5
    46fc:	0ff7f713          	zext.b	a4,a5
    4700:	000287b7          	lui	a5,0x28
    4704:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
    }
}
    4708:	00000013          	nop
    470c:	02c12403          	lw	s0,44(sp)
    4710:	03010113          	add	sp,sp,48
    4714:	00008067          	ret

00004718 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    4718:	fe010113          	add	sp,sp,-32
    471c:	00112e23          	sw	ra,28(sp)
    4720:	00812c23          	sw	s0,24(sp)
    4724:	02010413          	add	s0,sp,32
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    4728:	14000593          	li	a1,320
    472c:	0002c7b7          	lui	a5,0x2c
    4730:	e7878513          	add	a0,a5,-392 # 2be78 <OSFlagTbl>
    4734:	fadfd0ef          	jal	26e0 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
    4738:	fe041723          	sh	zero,-18(s0)
    473c:	0700006f          	j	47ac <OS_FlagInit+0x94>
        ix_next = ix + 1u;
    4740:	fee45783          	lhu	a5,-18(s0)
    4744:	00178793          	add	a5,a5,1
    4748:	fef41323          	sh	a5,-26(s0)
        pgrp1 = &OSFlagTbl[ix];
    474c:	fee45783          	lhu	a5,-18(s0)
    4750:	00479713          	sll	a4,a5,0x4
    4754:	0002c7b7          	lui	a5,0x2c
    4758:	e7878793          	add	a5,a5,-392 # 2be78 <OSFlagTbl>
    475c:	00f707b3          	add	a5,a4,a5
    4760:	fef42423          	sw	a5,-24(s0)
        pgrp2 = &OSFlagTbl[ix_next];
    4764:	fe645783          	lhu	a5,-26(s0)
    4768:	00479713          	sll	a4,a5,0x4
    476c:	0002c7b7          	lui	a5,0x2c
    4770:	e7878793          	add	a5,a5,-392 # 2be78 <OSFlagTbl>
    4774:	00f707b3          	add	a5,a4,a5
    4778:	fef42023          	sw	a5,-32(s0)
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    477c:	fe842783          	lw	a5,-24(s0)
    4780:	00078023          	sb	zero,0(a5)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    4784:	fe842783          	lw	a5,-24(s0)
    4788:	fe042703          	lw	a4,-32(s0)
    478c:	00e7a223          	sw	a4,4(a5)
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
    4790:	fe842783          	lw	a5,-24(s0)
    4794:	00023737          	lui	a4,0x23
    4798:	08870713          	add	a4,a4,136 # 23088 <OSUnMapTbl+0x124>
    479c:	00e7a623          	sw	a4,12(a5)
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
    47a0:	fee45783          	lhu	a5,-18(s0)
    47a4:	00178793          	add	a5,a5,1
    47a8:	fef41723          	sh	a5,-18(s0)
    47ac:	fee45703          	lhu	a4,-18(s0)
    47b0:	01200793          	li	a5,18
    47b4:	f8e7f6e3          	bgeu	a5,a4,4740 <OS_FlagInit+0x28>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
    47b8:	fee45783          	lhu	a5,-18(s0)
    47bc:	00479713          	sll	a4,a5,0x4
    47c0:	0002c7b7          	lui	a5,0x2c
    47c4:	e7878793          	add	a5,a5,-392 # 2be78 <OSFlagTbl>
    47c8:	00f707b3          	add	a5,a4,a5
    47cc:	fef42423          	sw	a5,-24(s0)
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    47d0:	fe842783          	lw	a5,-24(s0)
    47d4:	00078023          	sb	zero,0(a5)
    pgrp1->OSFlagWaitList = (void *)0;
    47d8:	fe842783          	lw	a5,-24(s0)
    47dc:	0007a223          	sw	zero,4(a5)
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
    47e0:	fe842783          	lw	a5,-24(s0)
    47e4:	00023737          	lui	a4,0x23
    47e8:	08870713          	add	a4,a4,136 # 23088 <OSUnMapTbl+0x124>
    47ec:	00e7a623          	sw	a4,12(a5)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    47f0:	000277b7          	lui	a5,0x27
    47f4:	0002c737          	lui	a4,0x2c
    47f8:	e7870713          	add	a4,a4,-392 # 2be78 <OSFlagTbl>
    47fc:	7ee7ac23          	sw	a4,2040(a5) # 277f8 <OSFlagFreeList>
#endif
}
    4800:	00000013          	nop
    4804:	01c12083          	lw	ra,28(sp)
    4808:	01812403          	lw	s0,24(sp)
    480c:	02010113          	add	sp,sp,32
    4810:	00008067          	ret

00004814 <OS_FlagTaskRdy>:
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode,
                                 OS_FLAGS      flags_rdy,
                                 INT8U         pend_stat)
{
    4814:	fd010113          	add	sp,sp,-48
    4818:	02112623          	sw	ra,44(sp)
    481c:	02812423          	sw	s0,40(sp)
    4820:	03010413          	add	s0,sp,48
    4824:	fca42e23          	sw	a0,-36(s0)
    4828:	00058793          	mv	a5,a1
    482c:	00060713          	mv	a4,a2
    4830:	fcf41d23          	sh	a5,-38(s0)
    4834:	00070793          	mv	a5,a4
    4838:	fcf40ca3          	sb	a5,-39(s0)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    483c:	fdc42783          	lw	a5,-36(s0)
    4840:	0087a783          	lw	a5,8(a5)
    4844:	fef42423          	sw	a5,-24(s0)
    ptcb->OSTCBDly       = 0u;
    4848:	fe842783          	lw	a5,-24(s0)
    484c:	0207aa23          	sw	zero,52(a5)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    4850:	fe842783          	lw	a5,-24(s0)
    4854:	fda45703          	lhu	a4,-38(s0)
    4858:	02e79823          	sh	a4,48(a5)
    ptcb->OSTCBStat     &= (INT8U)~(INT8U)OS_STAT_FLAG;
    485c:	fe842783          	lw	a5,-24(s0)
    4860:	0387c783          	lbu	a5,56(a5)
    4864:	fdf7f793          	and	a5,a5,-33
    4868:	0ff7f713          	zext.b	a4,a5
    486c:	fe842783          	lw	a5,-24(s0)
    4870:	02e78c23          	sb	a4,56(a5)
    ptcb->OSTCBStatPend  = pend_stat;
    4874:	fe842783          	lw	a5,-24(s0)
    4878:	fd944703          	lbu	a4,-39(s0)
    487c:	02e78ca3          	sb	a4,57(a5)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    4880:	fe842783          	lw	a5,-24(s0)
    4884:	0387c783          	lbu	a5,56(a5)
    4888:	06079a63          	bnez	a5,48fc <OS_FlagTaskRdy+0xe8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    488c:	fe842783          	lw	a5,-24(s0)
    4890:	03e7c703          	lbu	a4,62(a5)
    4894:	000287b7          	lui	a5,0x28
    4898:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    489c:	00f767b3          	or	a5,a4,a5
    48a0:	0ff7f713          	zext.b	a4,a5
    48a4:	000287b7          	lui	a5,0x28
    48a8:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    48ac:	fe842783          	lw	a5,-24(s0)
    48b0:	03c7c783          	lbu	a5,60(a5)
    48b4:	00078713          	mv	a4,a5
    48b8:	000287b7          	lui	a5,0x28
    48bc:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    48c0:	00f707b3          	add	a5,a4,a5
    48c4:	0007c703          	lbu	a4,0(a5)
    48c8:	fe842783          	lw	a5,-24(s0)
    48cc:	03d7c783          	lbu	a5,61(a5)
    48d0:	fe842683          	lw	a3,-24(s0)
    48d4:	03c6c683          	lbu	a3,60(a3)
    48d8:	00f767b3          	or	a5,a4,a5
    48dc:	0ff7f713          	zext.b	a4,a5
    48e0:	000287b7          	lui	a5,0x28
    48e4:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    48e8:	00f687b3          	add	a5,a3,a5
    48ec:	00e78023          	sb	a4,0(a5)
        OS_TRACE_TASK_READY(ptcb);
        sched                   = OS_TRUE;
    48f0:	00100793          	li	a5,1
    48f4:	fef407a3          	sb	a5,-17(s0)
    48f8:	0080006f          	j	4900 <OS_FlagTaskRdy+0xec>
    } else {
        sched                   = OS_FALSE;
    48fc:	fe0407a3          	sb	zero,-17(s0)
    }
    OS_FlagUnlink(pnode);
    4900:	fdc42503          	lw	a0,-36(s0)
    4904:	01c000ef          	jal	4920 <OS_FlagUnlink>
    return (sched);
    4908:	fef44783          	lbu	a5,-17(s0)
}
    490c:	00078513          	mv	a0,a5
    4910:	02c12083          	lw	ra,44(sp)
    4914:	02812403          	lw	s0,40(sp)
    4918:	03010113          	add	sp,sp,48
    491c:	00008067          	ret

00004920 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    4920:	fd010113          	add	sp,sp,-48
    4924:	02812623          	sw	s0,44(sp)
    4928:	03010413          	add	s0,sp,48
    492c:	fca42e23          	sw	a0,-36(s0)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    4930:	fdc42783          	lw	a5,-36(s0)
    4934:	0047a783          	lw	a5,4(a5)
    4938:	fef42623          	sw	a5,-20(s0)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    493c:	fdc42783          	lw	a5,-36(s0)
    4940:	0007a783          	lw	a5,0(a5)
    4944:	fef42423          	sw	a5,-24(s0)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    4948:	fec42783          	lw	a5,-20(s0)
    494c:	02079863          	bnez	a5,497c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    4950:	fdc42783          	lw	a5,-36(s0)
    4954:	00c7a783          	lw	a5,12(a5)
    4958:	fef42223          	sw	a5,-28(s0)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    495c:	fe442783          	lw	a5,-28(s0)
    4960:	fe842703          	lw	a4,-24(s0)
    4964:	00e7a223          	sw	a4,4(a5)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    4968:	fe842783          	lw	a5,-24(s0)
    496c:	02078863          	beqz	a5,499c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    4970:	fe842783          	lw	a5,-24(s0)
    4974:	0007a223          	sw	zero,4(a5)
    4978:	0240006f          	j	499c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    497c:	fec42783          	lw	a5,-20(s0)
    4980:	fe842703          	lw	a4,-24(s0)
    4984:	00e7a023          	sw	a4,0(a5)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    4988:	fe842783          	lw	a5,-24(s0)
    498c:	00078863          	beqz	a5,499c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    4990:	fe842783          	lw	a5,-24(s0)
    4994:	fec42703          	lw	a4,-20(s0)
    4998:	00e7a223          	sw	a4,4(a5)
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    499c:	fdc42783          	lw	a5,-36(s0)
    49a0:	0087a783          	lw	a5,8(a5)
    49a4:	fef42023          	sw	a5,-32(s0)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    49a8:	fe042783          	lw	a5,-32(s0)
    49ac:	0207a623          	sw	zero,44(a5)
#endif
}
    49b0:	00000013          	nop
    49b4:	02c12403          	lw	s0,44(sp)
    49b8:	03010113          	add	sp,sp,48
    49bc:	00008067          	ret

000049c0 <OSMemCreate>:

OS_MEM  *OSMemCreate (void   *addr,
                      INT32U  nblks,
                      INT32U  blksize,
                      INT8U  *perr)
{
    49c0:	fc010113          	add	sp,sp,-64
    49c4:	02812e23          	sw	s0,60(sp)
    49c8:	04010413          	add	s0,sp,64
    49cc:	fca42623          	sw	a0,-52(s0)
    49d0:	fcb42423          	sw	a1,-56(s0)
    49d4:	fcc42223          	sw	a2,-60(s0)
    49d8:	fcd42023          	sw	a3,-64(s0)
    INT8U     *pblk;
    void     **plink;
    INT32U     loops;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
    49dc:	fe042023          	sw	zero,-32(s0)
        return ((OS_MEM *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    49e0:	fcc42783          	lw	a5,-52(s0)
    49e4:	00079c63          	bnez	a5,49fc <OSMemCreate+0x3c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    49e8:	fc042783          	lw	a5,-64(s0)
    49ec:	06200713          	li	a4,98
    49f0:	00e78023          	sb	a4,0(a5)
        return ((OS_MEM *)0);
    49f4:	00000793          	li	a5,0
    49f8:	1880006f          	j	4b80 <OSMemCreate+0x1c0>
    }
    if (((INT32U)addr & (sizeof(void *) - 1u)) != 0u){  /* Must be pointer size aligned                */
    49fc:	fcc42783          	lw	a5,-52(s0)
    4a00:	0037f793          	and	a5,a5,3
    4a04:	00078c63          	beqz	a5,4a1c <OSMemCreate+0x5c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    4a08:	fc042783          	lw	a5,-64(s0)
    4a0c:	06200713          	li	a4,98
    4a10:	00e78023          	sb	a4,0(a5)
        return ((OS_MEM *)0);
    4a14:	00000793          	li	a5,0
    4a18:	1680006f          	j	4b80 <OSMemCreate+0x1c0>
    }
    if (nblks < 2u) {                                 /* Must have at least 2 blocks per partition     */
    4a1c:	fc842703          	lw	a4,-56(s0)
    4a20:	00100793          	li	a5,1
    4a24:	00e7ec63          	bltu	a5,a4,4a3c <OSMemCreate+0x7c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    4a28:	fc042783          	lw	a5,-64(s0)
    4a2c:	05b00713          	li	a4,91
    4a30:	00e78023          	sb	a4,0(a5)
        return ((OS_MEM *)0);
    4a34:	00000793          	li	a5,0
    4a38:	1480006f          	j	4b80 <OSMemCreate+0x1c0>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    4a3c:	fc442703          	lw	a4,-60(s0)
    4a40:	00300793          	li	a5,3
    4a44:	00e7ec63          	bltu	a5,a4,4a5c <OSMemCreate+0x9c>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    4a48:	fc042783          	lw	a5,-64(s0)
    4a4c:	05c00713          	li	a4,92
    4a50:	00e78023          	sb	a4,0(a5)
        return ((OS_MEM *)0);
    4a54:	00000793          	li	a5,0
    4a58:	1280006f          	j	4b80 <OSMemCreate+0x1c0>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4a5c:	00800793          	li	a5,8
    4a60:	3007b7f3          	csrrc	a5,mstatus,a5
    4a64:	fcf42a23          	sw	a5,-44(s0)
    return context;
    4a68:	fd442783          	lw	a5,-44(s0)
    }
#endif
    OS_ENTER_CRITICAL();
    4a6c:	fef42023          	sw	a5,-32(s0)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    4a70:	000287b7          	lui	a5,0x28
    4a74:	8307a783          	lw	a5,-2000(a5) # 27830 <OSMemFreeList>
    4a78:	fcf42e23          	sw	a5,-36(s0)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    4a7c:	000287b7          	lui	a5,0x28
    4a80:	8307a783          	lw	a5,-2000(a5) # 27830 <OSMemFreeList>
    4a84:	00078c63          	beqz	a5,4a9c <OSMemCreate+0xdc>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    4a88:	000287b7          	lui	a5,0x28
    4a8c:	8307a783          	lw	a5,-2000(a5) # 27830 <OSMemFreeList>
    4a90:	0047a703          	lw	a4,4(a5)
    4a94:	000287b7          	lui	a5,0x28
    4a98:	82e7a823          	sw	a4,-2000(a5) # 27830 <OSMemFreeList>
    4a9c:	fe042783          	lw	a5,-32(s0)
    4aa0:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4aa4:	fd042783          	lw	a5,-48(s0)
    4aa8:	0087f793          	and	a5,a5,8
    4aac:	3007a073          	csrs	mstatus,a5
}
    4ab0:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    4ab4:	fdc42783          	lw	a5,-36(s0)
    4ab8:	00079c63          	bnez	a5,4ad0 <OSMemCreate+0x110>
        *perr = OS_ERR_MEM_INVALID_PART;
    4abc:	fc042783          	lw	a5,-64(s0)
    4ac0:	05a00713          	li	a4,90
    4ac4:	00e78023          	sb	a4,0(a5)
        return ((OS_MEM *)0);
    4ac8:	00000793          	li	a5,0
    4acc:	0b40006f          	j	4b80 <OSMemCreate+0x1c0>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    4ad0:	fcc42783          	lw	a5,-52(s0)
    4ad4:	fef42423          	sw	a5,-24(s0)
    pblk  = (INT8U *)addr;
    4ad8:	fcc42783          	lw	a5,-52(s0)
    4adc:	fef42623          	sw	a5,-20(s0)
    loops  = nblks - 1u;
    4ae0:	fc842783          	lw	a5,-56(s0)
    4ae4:	fff78793          	add	a5,a5,-1
    4ae8:	fcf42c23          	sw	a5,-40(s0)
    for (i = 0u; i < loops; i++) {
    4aec:	fe042223          	sw	zero,-28(s0)
    4af0:	0340006f          	j	4b24 <OSMemCreate+0x164>
        pblk +=  blksize;                             /* Point to the FOLLOWING block                  */
    4af4:	fec42703          	lw	a4,-20(s0)
    4af8:	fc442783          	lw	a5,-60(s0)
    4afc:	00f707b3          	add	a5,a4,a5
    4b00:	fef42623          	sw	a5,-20(s0)
       *plink = (void  *)pblk;                        /* Save pointer to NEXT block in CURRENT block   */
    4b04:	fe842783          	lw	a5,-24(s0)
    4b08:	fec42703          	lw	a4,-20(s0)
    4b0c:	00e7a023          	sw	a4,0(a5)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    4b10:	fec42783          	lw	a5,-20(s0)
    4b14:	fef42423          	sw	a5,-24(s0)
    for (i = 0u; i < loops; i++) {
    4b18:	fe442783          	lw	a5,-28(s0)
    4b1c:	00178793          	add	a5,a5,1
    4b20:	fef42223          	sw	a5,-28(s0)
    4b24:	fe442703          	lw	a4,-28(s0)
    4b28:	fd842783          	lw	a5,-40(s0)
    4b2c:	fcf764e3          	bltu	a4,a5,4af4 <OSMemCreate+0x134>
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    4b30:	fe842783          	lw	a5,-24(s0)
    4b34:	0007a023          	sw	zero,0(a5)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    4b38:	fdc42783          	lw	a5,-36(s0)
    4b3c:	fcc42703          	lw	a4,-52(s0)
    4b40:	00e7a023          	sw	a4,0(a5)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    4b44:	fdc42783          	lw	a5,-36(s0)
    4b48:	fcc42703          	lw	a4,-52(s0)
    4b4c:	00e7a223          	sw	a4,4(a5)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    4b50:	fdc42783          	lw	a5,-36(s0)
    4b54:	fc842703          	lw	a4,-56(s0)
    4b58:	00e7a823          	sw	a4,16(a5)
    pmem->OSMemNBlks    = nblks;
    4b5c:	fdc42783          	lw	a5,-36(s0)
    4b60:	fc842703          	lw	a4,-56(s0)
    4b64:	00e7a623          	sw	a4,12(a5)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    4b68:	fdc42783          	lw	a5,-36(s0)
    4b6c:	fc442703          	lw	a4,-60(s0)
    4b70:	00e7a423          	sw	a4,8(a5)

    OS_TRACE_MEM_CREATE(pmem);

    *perr               = OS_ERR_NONE;
    4b74:	fc042783          	lw	a5,-64(s0)
    4b78:	00078023          	sb	zero,0(a5)
    return (pmem);
    4b7c:	fdc42783          	lw	a5,-36(s0)
}
    4b80:	00078513          	mv	a0,a5
    4b84:	03c12403          	lw	s0,60(sp)
    4b88:	04010113          	add	sp,sp,64
    4b8c:	00008067          	ret

00004b90 <OSMemGet>:
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM  *pmem,
                 INT8U   *perr)
{
    4b90:	fc010113          	add	sp,sp,-64
    4b94:	02812e23          	sw	s0,60(sp)
    4b98:	04010413          	add	s0,sp,64
    4b9c:	fca42623          	sw	a0,-52(s0)
    4ba0:	fcb42423          	sw	a1,-56(s0)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
    4ba4:	fe042623          	sw	zero,-20(s0)
        return ((void *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    4ba8:	fcc42783          	lw	a5,-52(s0)
    4bac:	00079c63          	bnez	a5,4bc4 <OSMemGet+0x34>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    4bb0:	fc842783          	lw	a5,-56(s0)
    4bb4:	06000713          	li	a4,96
    4bb8:	00e78023          	sb	a4,0(a5)
        return ((void *)0);
    4bbc:	00000793          	li	a5,0
    4bc0:	0a40006f          	j	4c64 <OSMemGet+0xd4>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4bc4:	00800793          	li	a5,8
    4bc8:	3007b7f3          	csrrc	a5,mstatus,a5
    4bcc:	fef42223          	sw	a5,-28(s0)
    return context;
    4bd0:	fe442783          	lw	a5,-28(s0)
    }
#endif

    OS_TRACE_MEM_GET_ENTER(pmem);

    OS_ENTER_CRITICAL();
    4bd4:	fef42623          	sw	a5,-20(s0)
    if (pmem->OSMemNFree > 0u) {                      /* See if there are any free memory blocks       */
    4bd8:	fcc42783          	lw	a5,-52(s0)
    4bdc:	0107a783          	lw	a5,16(a5)
    4be0:	04078e63          	beqz	a5,4c3c <OSMemGet+0xac>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    4be4:	fcc42783          	lw	a5,-52(s0)
    4be8:	0047a783          	lw	a5,4(a5)
    4bec:	fef42423          	sw	a5,-24(s0)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    4bf0:	fe842783          	lw	a5,-24(s0)
    4bf4:	0007a703          	lw	a4,0(a5)
    4bf8:	fcc42783          	lw	a5,-52(s0)
    4bfc:	00e7a223          	sw	a4,4(a5)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    4c00:	fcc42783          	lw	a5,-52(s0)
    4c04:	0107a783          	lw	a5,16(a5)
    4c08:	fff78713          	add	a4,a5,-1
    4c0c:	fcc42783          	lw	a5,-52(s0)
    4c10:	00e7a823          	sw	a4,16(a5)
    4c14:	fec42783          	lw	a5,-20(s0)
    4c18:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4c1c:	fe042783          	lw	a5,-32(s0)
    4c20:	0087f793          	and	a5,a5,8
    4c24:	3007a073          	csrs	mstatus,a5
}
    4c28:	00000013          	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    4c2c:	fc842783          	lw	a5,-56(s0)
    4c30:	00078023          	sb	zero,0(a5)
        OS_TRACE_MEM_GET_EXIT(*perr);
        return (pblk);                                /*      Return memory block to caller            */
    4c34:	fe842783          	lw	a5,-24(s0)
    4c38:	02c0006f          	j	4c64 <OSMemGet+0xd4>
    4c3c:	fec42783          	lw	a5,-20(s0)
    4c40:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4c44:	fdc42783          	lw	a5,-36(s0)
    4c48:	0087f793          	and	a5,a5,8
    4c4c:	3007a073          	csrs	mstatus,a5
}
    4c50:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    4c54:	fc842783          	lw	a5,-56(s0)
    4c58:	05d00713          	li	a4,93
    4c5c:	00e78023          	sb	a4,0(a5)
    OS_TRACE_MEM_GET_EXIT(*perr);
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    4c60:	00000793          	li	a5,0
}
    4c64:	00078513          	mv	a0,a5
    4c68:	03c12403          	lw	s0,60(sp)
    4c6c:	04010113          	add	sp,sp,64
    4c70:	00008067          	ret

00004c74 <OSMemNameGet>:

#if OS_MEM_NAME_EN > 0u
INT8U  OSMemNameGet (OS_MEM   *pmem,
                     INT8U   **pname,
                     INT8U    *perr)
{
    4c74:	fd010113          	add	sp,sp,-48
    4c78:	02112623          	sw	ra,44(sp)
    4c7c:	02812423          	sw	s0,40(sp)
    4c80:	03010413          	add	s0,sp,48
    4c84:	fca42e23          	sw	a0,-36(s0)
    4c88:	fcb42c23          	sw	a1,-40(s0)
    4c8c:	fcc42a23          	sw	a2,-44(s0)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    4c90:	fe042623          	sw	zero,-20(s0)
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    4c94:	fdc42783          	lw	a5,-36(s0)
    4c98:	00079c63          	bnez	a5,4cb0 <OSMemNameGet+0x3c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    4c9c:	fd442783          	lw	a5,-44(s0)
    4ca0:	06000713          	li	a4,96
    4ca4:	00e78023          	sb	a4,0(a5)
        return (0u);
    4ca8:	00000793          	li	a5,0
    4cac:	0a00006f          	j	4d4c <OSMemNameGet+0xd8>
    }
    if (pname == (INT8U **)0) {                  /* Is 'pname' a NULL pointer?                         */
    4cb0:	fd842783          	lw	a5,-40(s0)
    4cb4:	00079c63          	bnez	a5,4ccc <OSMemNameGet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    4cb8:	fd442783          	lw	a5,-44(s0)
    4cbc:	00c00713          	li	a4,12
    4cc0:	00e78023          	sb	a4,0(a5)
        return (0u);
    4cc4:	00000793          	li	a5,0
    4cc8:	0840006f          	j	4d4c <OSMemNameGet+0xd8>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
    4ccc:	000287b7          	lui	a5,0x28
    4cd0:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    4cd4:	00078c63          	beqz	a5,4cec <OSMemNameGet+0x78>
        *perr = OS_ERR_NAME_GET_ISR;
    4cd8:	fd442783          	lw	a5,-44(s0)
    4cdc:	01100713          	li	a4,17
    4ce0:	00e78023          	sb	a4,0(a5)
        return (0u);
    4ce4:	00000793          	li	a5,0
    4ce8:	0640006f          	j	4d4c <OSMemNameGet+0xd8>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4cec:	00800793          	li	a5,8
    4cf0:	3007b7f3          	csrrc	a5,mstatus,a5
    4cf4:	fef42023          	sw	a5,-32(s0)
    return context;
    4cf8:	fe042783          	lw	a5,-32(s0)
    }
    OS_ENTER_CRITICAL();
    4cfc:	fef42623          	sw	a5,-20(s0)
    *pname = pmem->OSMemName;
    4d00:	fdc42783          	lw	a5,-36(s0)
    4d04:	0147a703          	lw	a4,20(a5)
    4d08:	fd842783          	lw	a5,-40(s0)
    4d0c:	00e7a023          	sw	a4,0(a5)
    len    = OS_StrLen(*pname);
    4d10:	fd842783          	lw	a5,-40(s0)
    4d14:	0007a783          	lw	a5,0(a5)
    4d18:	00078513          	mv	a0,a5
    4d1c:	bd9fd0ef          	jal	28f4 <OS_StrLen>
    4d20:	00050793          	mv	a5,a0
    4d24:	fef405a3          	sb	a5,-21(s0)
    4d28:	fec42783          	lw	a5,-20(s0)
    4d2c:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4d30:	fe442783          	lw	a5,-28(s0)
    4d34:	0087f793          	and	a5,a5,8
    4d38:	3007a073          	csrs	mstatus,a5
}
    4d3c:	00000013          	nop
    OS_EXIT_CRITICAL();
    *perr  = OS_ERR_NONE;
    4d40:	fd442783          	lw	a5,-44(s0)
    4d44:	00078023          	sb	zero,0(a5)
    return (len);
    4d48:	feb44783          	lbu	a5,-21(s0)
}
    4d4c:	00078513          	mv	a0,a5
    4d50:	02c12083          	lw	ra,44(sp)
    4d54:	02812403          	lw	s0,40(sp)
    4d58:	03010113          	add	sp,sp,48
    4d5c:	00008067          	ret

00004d60 <OSMemNameSet>:

#if OS_MEM_NAME_EN > 0u
void  OSMemNameSet (OS_MEM  *pmem,
                    INT8U   *pname,
                    INT8U   *perr)
{
    4d60:	fd010113          	add	sp,sp,-48
    4d64:	02812623          	sw	s0,44(sp)
    4d68:	03010413          	add	s0,sp,48
    4d6c:	fca42e23          	sw	a0,-36(s0)
    4d70:	fcb42c23          	sw	a1,-40(s0)
    4d74:	fcc42a23          	sw	a2,-44(s0)
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    4d78:	fe042623          	sw	zero,-20(s0)
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    4d7c:	fdc42783          	lw	a5,-36(s0)
    4d80:	00079a63          	bnez	a5,4d94 <OSMemNameSet+0x34>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    4d84:	fd442783          	lw	a5,-44(s0)
    4d88:	06000713          	li	a4,96
    4d8c:	00e78023          	sb	a4,0(a5)
        return;
    4d90:	0780006f          	j	4e08 <OSMemNameSet+0xa8>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4d94:	fd842783          	lw	a5,-40(s0)
    4d98:	00079a63          	bnez	a5,4dac <OSMemNameSet+0x4c>
        *perr = OS_ERR_PNAME_NULL;
    4d9c:	fd442783          	lw	a5,-44(s0)
    4da0:	00c00713          	li	a4,12
    4da4:	00e78023          	sb	a4,0(a5)
        return;
    4da8:	0600006f          	j	4e08 <OSMemNameSet+0xa8>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
    4dac:	000287b7          	lui	a5,0x28
    4db0:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    4db4:	00078a63          	beqz	a5,4dc8 <OSMemNameSet+0x68>
        *perr = OS_ERR_NAME_SET_ISR;
    4db8:	fd442783          	lw	a5,-44(s0)
    4dbc:	01200713          	li	a4,18
    4dc0:	00e78023          	sb	a4,0(a5)
        return;
    4dc4:	0440006f          	j	4e08 <OSMemNameSet+0xa8>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4dc8:	00800793          	li	a5,8
    4dcc:	3007b7f3          	csrrc	a5,mstatus,a5
    4dd0:	fef42223          	sw	a5,-28(s0)
    return context;
    4dd4:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    4dd8:	fef42623          	sw	a5,-20(s0)
    pmem->OSMemName = pname;
    4ddc:	fdc42783          	lw	a5,-36(s0)
    4de0:	fd842703          	lw	a4,-40(s0)
    4de4:	00e7aa23          	sw	a4,20(a5)
    4de8:	fec42783          	lw	a5,-20(s0)
    4dec:	fef42423          	sw	a5,-24(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4df0:	fe842783          	lw	a5,-24(s0)
    4df4:	0087f793          	and	a5,a5,8
    4df8:	3007a073          	csrs	mstatus,a5
}
    4dfc:	00000013          	nop
    OS_EXIT_CRITICAL();
    OS_TRACE_EVENT_NAME_SET(pmem, pname);
    *perr           = OS_ERR_NONE;
    4e00:	fd442783          	lw	a5,-44(s0)
    4e04:	00078023          	sb	zero,0(a5)
}
    4e08:	02c12403          	lw	s0,44(sp)
    4e0c:	03010113          	add	sp,sp,48
    4e10:	00008067          	ret

00004e14 <OSMemPut>:
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM  *pmem,
                 void    *pblk)
{
    4e14:	fd010113          	add	sp,sp,-48
    4e18:	02812623          	sw	s0,44(sp)
    4e1c:	03010413          	add	s0,sp,48
    4e20:	fca42e23          	sw	a0,-36(s0)
    4e24:	fcb42c23          	sw	a1,-40(s0)
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    4e28:	fe042623          	sw	zero,-20(s0)
#endif


#if OS_ARG_CHK_EN > 0u
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    4e2c:	fdc42783          	lw	a5,-36(s0)
    4e30:	00079663          	bnez	a5,4e3c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    4e34:	06000793          	li	a5,96
    4e38:	0a80006f          	j	4ee0 <OSMemPut+0xcc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    4e3c:	fd842783          	lw	a5,-40(s0)
    4e40:	00079663          	bnez	a5,4e4c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    4e44:	05f00793          	li	a5,95
    4e48:	0980006f          	j	4ee0 <OSMemPut+0xcc>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4e4c:	00800793          	li	a5,8
    4e50:	3007b7f3          	csrrc	a5,mstatus,a5
    4e54:	fef42423          	sw	a5,-24(s0)
    return context;
    4e58:	fe842783          	lw	a5,-24(s0)
    }
#endif

    OS_TRACE_MEM_PUT_ENTER(pmem, pblk);

    OS_ENTER_CRITICAL();
    4e5c:	fef42623          	sw	a5,-20(s0)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    4e60:	fdc42783          	lw	a5,-36(s0)
    4e64:	0107a703          	lw	a4,16(a5)
    4e68:	fdc42783          	lw	a5,-36(s0)
    4e6c:	00c7a783          	lw	a5,12(a5)
    4e70:	02f76263          	bltu	a4,a5,4e94 <OSMemPut+0x80>
    4e74:	fec42783          	lw	a5,-20(s0)
    4e78:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4e7c:	fe442783          	lw	a5,-28(s0)
    4e80:	0087f793          	and	a5,a5,8
    4e84:	3007a073          	csrs	mstatus,a5
}
    4e88:	00000013          	nop
        OS_EXIT_CRITICAL();
        OS_TRACE_MEM_PUT_EXIT(OS_ERR_MEM_FULL);
        return (OS_ERR_MEM_FULL);
    4e8c:	05e00793          	li	a5,94
    4e90:	0500006f          	j	4ee0 <OSMemPut+0xcc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    4e94:	fdc42783          	lw	a5,-36(s0)
    4e98:	0047a703          	lw	a4,4(a5)
    4e9c:	fd842783          	lw	a5,-40(s0)
    4ea0:	00e7a023          	sw	a4,0(a5)
    pmem->OSMemFreeList = pblk;
    4ea4:	fdc42783          	lw	a5,-36(s0)
    4ea8:	fd842703          	lw	a4,-40(s0)
    4eac:	00e7a223          	sw	a4,4(a5)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    4eb0:	fdc42783          	lw	a5,-36(s0)
    4eb4:	0107a783          	lw	a5,16(a5)
    4eb8:	00178713          	add	a4,a5,1
    4ebc:	fdc42783          	lw	a5,-36(s0)
    4ec0:	00e7a823          	sw	a4,16(a5)
    4ec4:	fec42783          	lw	a5,-20(s0)
    4ec8:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4ecc:	fe042783          	lw	a5,-32(s0)
    4ed0:	0087f793          	and	a5,a5,8
    4ed4:	3007a073          	csrs	mstatus,a5
}
    4ed8:	00000013          	nop
    OS_EXIT_CRITICAL();
    OS_TRACE_MEM_PUT_EXIT(OS_ERR_NONE);
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    4edc:	00000793          	li	a5,0
}
    4ee0:	00078513          	mv	a0,a5
    4ee4:	02c12403          	lw	s0,44(sp)
    4ee8:	03010113          	add	sp,sp,48
    4eec:	00008067          	ret

00004ef0 <OSMemQuery>:
*/

#if OS_MEM_QUERY_EN > 0u
INT8U  OSMemQuery (OS_MEM       *pmem,
                   OS_MEM_DATA  *p_mem_data)
{
    4ef0:	fd010113          	add	sp,sp,-48
    4ef4:	02812623          	sw	s0,44(sp)
    4ef8:	03010413          	add	s0,sp,48
    4efc:	fca42e23          	sw	a0,-36(s0)
    4f00:	fcb42c23          	sw	a1,-40(s0)
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    4f04:	fe042623          	sw	zero,-20(s0)
#endif



#if OS_ARG_CHK_EN > 0u
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    4f08:	fdc42783          	lw	a5,-36(s0)
    4f0c:	00079663          	bnez	a5,4f18 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    4f10:	06000793          	li	a5,96
    4f14:	0b00006f          	j	4fc4 <OSMemQuery+0xd4>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    4f18:	fd842783          	lw	a5,-40(s0)
    4f1c:	00079663          	bnez	a5,4f28 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    4f20:	06100793          	li	a5,97
    4f24:	0a00006f          	j	4fc4 <OSMemQuery+0xd4>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4f28:	00800793          	li	a5,8
    4f2c:	3007b7f3          	csrrc	a5,mstatus,a5
    4f30:	fef42223          	sw	a5,-28(s0)
    return context;
    4f34:	fe442783          	lw	a5,-28(s0)
    }
#endif
    OS_ENTER_CRITICAL();
    4f38:	fef42623          	sw	a5,-20(s0)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    4f3c:	fdc42783          	lw	a5,-36(s0)
    4f40:	0007a703          	lw	a4,0(a5)
    4f44:	fd842783          	lw	a5,-40(s0)
    4f48:	00e7a023          	sw	a4,0(a5)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    4f4c:	fdc42783          	lw	a5,-36(s0)
    4f50:	0047a703          	lw	a4,4(a5)
    4f54:	fd842783          	lw	a5,-40(s0)
    4f58:	00e7a223          	sw	a4,4(a5)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    4f5c:	fdc42783          	lw	a5,-36(s0)
    4f60:	0087a703          	lw	a4,8(a5)
    4f64:	fd842783          	lw	a5,-40(s0)
    4f68:	00e7a423          	sw	a4,8(a5)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    4f6c:	fdc42783          	lw	a5,-36(s0)
    4f70:	00c7a703          	lw	a4,12(a5)
    4f74:	fd842783          	lw	a5,-40(s0)
    4f78:	00e7a623          	sw	a4,12(a5)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    4f7c:	fdc42783          	lw	a5,-36(s0)
    4f80:	0107a703          	lw	a4,16(a5)
    4f84:	fd842783          	lw	a5,-40(s0)
    4f88:	00e7a823          	sw	a4,16(a5)
    4f8c:	fec42783          	lw	a5,-20(s0)
    4f90:	fef42423          	sw	a5,-24(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    4f94:	fe842783          	lw	a5,-24(s0)
    4f98:	0087f793          	and	a5,a5,8
    4f9c:	3007a073          	csrs	mstatus,a5
}
    4fa0:	00000013          	nop
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    4fa4:	fd842783          	lw	a5,-40(s0)
    4fa8:	00c7a703          	lw	a4,12(a5)
    4fac:	fd842783          	lw	a5,-40(s0)
    4fb0:	0107a783          	lw	a5,16(a5)
    4fb4:	40f70733          	sub	a4,a4,a5
    4fb8:	fd842783          	lw	a5,-40(s0)
    4fbc:	00e7aa23          	sw	a4,20(a5)
    return (OS_ERR_NONE);
    4fc0:	00000793          	li	a5,0
}
    4fc4:	00078513          	mv	a0,a5
    4fc8:	02c12403          	lw	s0,44(sp)
    4fcc:	03010113          	add	sp,sp,48
    4fd0:	00008067          	ret

00004fd4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    4fd4:	fe010113          	add	sp,sp,-32
    4fd8:	00112e23          	sw	ra,28(sp)
    4fdc:	00812c23          	sw	s0,24(sp)
    4fe0:	02010413          	add	s0,sp,32
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    4fe4:	5a000593          	li	a1,1440
    4fe8:	0002e7b7          	lui	a5,0x2e
    4fec:	a2c78513          	add	a0,a5,-1492 # 2da2c <OSMemTbl>
    4ff0:	ef0fd0ef          	jal	26e0 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
    4ff4:	fe041723          	sh	zero,-18(s0)
    4ff8:	0700006f          	j	5068 <OS_MemInit+0x94>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
    4ffc:	fee45703          	lhu	a4,-18(s0)
    5000:	00070793          	mv	a5,a4
    5004:	00179793          	sll	a5,a5,0x1
    5008:	00e787b3          	add	a5,a5,a4
    500c:	00379793          	sll	a5,a5,0x3
    5010:	0002e737          	lui	a4,0x2e
    5014:	a2c70713          	add	a4,a4,-1492 # 2da2c <OSMemTbl>
    5018:	00e787b3          	add	a5,a5,a4
    501c:	fef42423          	sw	a5,-24(s0)
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
    5020:	fee45783          	lhu	a5,-18(s0)
    5024:	00178713          	add	a4,a5,1
    5028:	00070793          	mv	a5,a4
    502c:	00179793          	sll	a5,a5,0x1
    5030:	00e787b3          	add	a5,a5,a4
    5034:	00379793          	sll	a5,a5,0x3
    5038:	0002e737          	lui	a4,0x2e
    503c:	a2c70713          	add	a4,a4,-1492 # 2da2c <OSMemTbl>
    5040:	00e78733          	add	a4,a5,a4
    5044:	fe842783          	lw	a5,-24(s0)
    5048:	00e7a223          	sw	a4,4(a5)
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
    504c:	fe842783          	lw	a5,-24(s0)
    5050:	00023737          	lui	a4,0x23
    5054:	08c70713          	add	a4,a4,140 # 2308c <OSUnMapTbl+0x128>
    5058:	00e7aa23          	sw	a4,20(a5)
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
    505c:	fee45783          	lhu	a5,-18(s0)
    5060:	00178793          	add	a5,a5,1
    5064:	fef41723          	sh	a5,-18(s0)
    5068:	fee45703          	lhu	a4,-18(s0)
    506c:	03a00793          	li	a5,58
    5070:	f8e7f6e3          	bgeu	a5,a4,4ffc <OS_MemInit+0x28>
#endif
    }
    pmem                = &OSMemTbl[i];
    5074:	fee45703          	lhu	a4,-18(s0)
    5078:	00070793          	mv	a5,a4
    507c:	00179793          	sll	a5,a5,0x1
    5080:	00e787b3          	add	a5,a5,a4
    5084:	00379793          	sll	a5,a5,0x3
    5088:	0002e737          	lui	a4,0x2e
    508c:	a2c70713          	add	a4,a4,-1492 # 2da2c <OSMemTbl>
    5090:	00e787b3          	add	a5,a5,a4
    5094:	fef42423          	sw	a5,-24(s0)
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    5098:	fe842783          	lw	a5,-24(s0)
    509c:	0007a223          	sw	zero,4(a5)
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
    50a0:	fe842783          	lw	a5,-24(s0)
    50a4:	00023737          	lui	a4,0x23
    50a8:	08c70713          	add	a4,a4,140 # 2308c <OSUnMapTbl+0x128>
    50ac:	00e7aa23          	sw	a4,20(a5)
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
    50b0:	000287b7          	lui	a5,0x28
    50b4:	0002e737          	lui	a4,0x2e
    50b8:	a2c70713          	add	a4,a4,-1492 # 2da2c <OSMemTbl>
    50bc:	82e7a823          	sw	a4,-2000(a5) # 27830 <OSMemFreeList>
#endif
}
    50c0:	00000013          	nop
    50c4:	01c12083          	lw	ra,28(sp)
    50c8:	01812403          	lw	s0,24(sp)
    50cc:	02010113          	add	sp,sp,32
    50d0:	00008067          	ret

000050d4 <OSMutexAccept>:
*/

#if OS_MUTEX_ACCEPT_EN > 0u
BOOLEAN  OSMutexAccept (OS_EVENT  *pevent,
                        INT8U     *perr)
{
    50d4:	fc010113          	add	sp,sp,-64
    50d8:	02812e23          	sw	s0,60(sp)
    50dc:	04010413          	add	s0,sp,64
    50e0:	fca42623          	sw	a0,-52(s0)
    50e4:	fcb42423          	sw	a1,-56(s0)
    INT8U      pcp;                                    /* Priority Ceiling Priority (PCP)              */
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
    50e8:	fe042623          	sw	zero,-20(s0)
        return (OS_FALSE);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    50ec:	fcc42783          	lw	a5,-52(s0)
    50f0:	00079c63          	bnez	a5,5108 <OSMutexAccept+0x34>
        *perr = OS_ERR_PEVENT_NULL;
    50f4:	fc842783          	lw	a5,-56(s0)
    50f8:	00400713          	li	a4,4
    50fc:	00e78023          	sb	a4,0(a5)
        return (OS_FALSE);
    5100:	00000793          	li	a5,0
    5104:	1700006f          	j	5274 <OSMutexAccept+0x1a0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
    5108:	fcc42783          	lw	a5,-52(s0)
    510c:	0007c703          	lbu	a4,0(a5)
    5110:	00400793          	li	a5,4
    5114:	00f70c63          	beq	a4,a5,512c <OSMutexAccept+0x58>
        *perr = OS_ERR_EVENT_TYPE;
    5118:	fc842783          	lw	a5,-56(s0)
    511c:	00100713          	li	a4,1
    5120:	00e78023          	sb	a4,0(a5)
        return (OS_FALSE);
    5124:	00000793          	li	a5,0
    5128:	14c0006f          	j	5274 <OSMutexAccept+0x1a0>
    }
    if (OSIntNesting > 0u) {                           /* Make sure it's not called from an ISR        */
    512c:	000287b7          	lui	a5,0x28
    5130:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    5134:	00078c63          	beqz	a5,514c <OSMutexAccept+0x78>
        *perr = OS_ERR_PEND_ISR;
    5138:	fc842783          	lw	a5,-56(s0)
    513c:	00200713          	li	a4,2
    5140:	00e78023          	sb	a4,0(a5)
        return (OS_FALSE);
    5144:	00000793          	li	a5,0
    5148:	12c0006f          	j	5274 <OSMutexAccept+0x1a0>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    514c:	00800793          	li	a5,8
    5150:	3007b7f3          	csrrc	a5,mstatus,a5
    5154:	fef42223          	sw	a5,-28(s0)
    return context;
    5158:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
    515c:	fef42623          	sw	a5,-20(s0)
    pcp = (INT8U)(pevent->OSEventCnt >> 8u);           /* Get PCP from mutex                           */
    5160:	fcc42783          	lw	a5,-52(s0)
    5164:	0087d783          	lhu	a5,8(a5)
    5168:	0087d793          	srl	a5,a5,0x8
    516c:	01079793          	sll	a5,a5,0x10
    5170:	0107d793          	srl	a5,a5,0x10
    5174:	fef405a3          	sb	a5,-21(s0)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
    5178:	fcc42783          	lw	a5,-52(s0)
    517c:	0087d783          	lhu	a5,8(a5)
    5180:	0ff7f713          	zext.b	a4,a5
    5184:	0ff00793          	li	a5,255
    5188:	0cf71463          	bne	a4,a5,5250 <OSMutexAccept+0x17c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
    518c:	fcc42783          	lw	a5,-52(s0)
    5190:	0087d783          	lhu	a5,8(a5)
    5194:	f007f793          	and	a5,a5,-256
    5198:	01079713          	sll	a4,a5,0x10
    519c:	01075713          	srl	a4,a4,0x10
    51a0:	fcc42783          	lw	a5,-52(s0)
    51a4:	00e79423          	sh	a4,8(a5)
        pevent->OSEventCnt |= (INT16U)OSTCBCur->OSTCBPrio;  /* Save current task priority in LSByte    */
    51a8:	fcc42783          	lw	a5,-52(s0)
    51ac:	0087d783          	lhu	a5,8(a5)
    51b0:	00028737          	lui	a4,0x28
    51b4:	81c72703          	lw	a4,-2020(a4) # 2781c <OSTCBCur>
    51b8:	03a74703          	lbu	a4,58(a4)
    51bc:	00e7e7b3          	or	a5,a5,a4
    51c0:	01079713          	sll	a4,a5,0x10
    51c4:	01075713          	srl	a4,a4,0x10
    51c8:	fcc42783          	lw	a5,-52(s0)
    51cc:	00e79423          	sh	a4,8(a5)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
    51d0:	000287b7          	lui	a5,0x28
    51d4:	81c7a703          	lw	a4,-2020(a5) # 2781c <OSTCBCur>
    51d8:	fcc42783          	lw	a5,-52(s0)
    51dc:	00e7a223          	sw	a4,4(a5)
        if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
    51e0:	feb44703          	lbu	a4,-21(s0)
    51e4:	0ff00793          	li	a5,255
    51e8:	04f70063          	beq	a4,a5,5228 <OSMutexAccept+0x154>
            (OSTCBCur->OSTCBPrio <= pcp)) {            /*      PCP 'must' have a SMALLER prio ...      */
    51ec:	000287b7          	lui	a5,0x28
    51f0:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    51f4:	03a7c783          	lbu	a5,58(a5)
        if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
    51f8:	feb44703          	lbu	a4,-21(s0)
    51fc:	02f76663          	bltu	a4,a5,5228 <OSMutexAccept+0x154>
    5200:	fec42783          	lw	a5,-20(s0)
    5204:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5208:	fe042783          	lw	a5,-32(s0)
    520c:	0087f793          	and	a5,a5,8
    5210:	3007a073          	csrs	mstatus,a5
}
    5214:	00000013          	nop
             OS_EXIT_CRITICAL();                       /*      ... than current task!                  */
            *perr = OS_ERR_PCP_LOWER;
    5218:	fc842783          	lw	a5,-56(s0)
    521c:	07800713          	li	a4,120
    5220:	00e78023          	sb	a4,0(a5)
    5224:	0240006f          	j	5248 <OSMutexAccept+0x174>
    5228:	fec42783          	lw	a5,-20(s0)
    522c:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5230:	fdc42783          	lw	a5,-36(s0)
    5234:	0087f793          	and	a5,a5,8
    5238:	3007a073          	csrs	mstatus,a5
}
    523c:	00000013          	nop
        } else {
             OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
    5240:	fc842783          	lw	a5,-56(s0)
    5244:	00078023          	sb	zero,0(a5)
        }
        return (OS_TRUE);
    5248:	00100793          	li	a5,1
    524c:	0280006f          	j	5274 <OSMutexAccept+0x1a0>
    5250:	fec42783          	lw	a5,-20(s0)
    5254:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5258:	fd842783          	lw	a5,-40(s0)
    525c:	0087f793          	and	a5,a5,8
    5260:	3007a073          	csrs	mstatus,a5
}
    5264:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    5268:	fc842783          	lw	a5,-56(s0)
    526c:	00078023          	sb	zero,0(a5)
    return (OS_FALSE);
    5270:	00000793          	li	a5,0
}
    5274:	00078513          	mv	a0,a5
    5278:	03c12403          	lw	s0,60(sp)
    527c:	04010113          	add	sp,sp,64
    5280:	00008067          	ret

00005284 <OSMutexCreate>:
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U   prio,
                          INT8U  *perr)
{
    5284:	fc010113          	add	sp,sp,-64
    5288:	02112e23          	sw	ra,60(sp)
    528c:	02812c23          	sw	s0,56(sp)
    5290:	04010413          	add	s0,sp,64
    5294:	00050793          	mv	a5,a0
    5298:	fcb42423          	sw	a1,-56(s0)
    529c:	fcf407a3          	sb	a5,-49(s0)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
    52a0:	fe042623          	sw	zero,-20(s0)
        return ((OS_EVENT *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
    52a4:	fcf44703          	lbu	a4,-49(s0)
    52a8:	0ff00793          	li	a5,255
    52ac:	02f70263          	beq	a4,a5,52d0 <OSMutexCreate+0x4c>
        if (prio >= OS_LOWEST_PRIO) {                      /* Validate PCP                             */
    52b0:	fcf44703          	lbu	a4,-49(s0)
    52b4:	01300793          	li	a5,19
    52b8:	00e7fc63          	bgeu	a5,a4,52d0 <OSMutexCreate+0x4c>
           *perr = OS_ERR_PRIO_INVALID;
    52bc:	fc842783          	lw	a5,-56(s0)
    52c0:	02a00713          	li	a4,42
    52c4:	00e78023          	sb	a4,0(a5)
            return ((OS_EVENT *)0);
    52c8:	00000793          	li	a5,0
    52cc:	19c0006f          	j	5468 <OSMutexCreate+0x1e4>
        }
    }
#endif
    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
    52d0:	000287b7          	lui	a5,0x28
    52d4:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    52d8:	00078c63          	beqz	a5,52f0 <OSMutexCreate+0x6c>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
    52dc:	fc842783          	lw	a5,-56(s0)
    52e0:	01000713          	li	a4,16
    52e4:	00e78023          	sb	a4,0(a5)
        return ((OS_EVENT *)0);
    52e8:	00000793          	li	a5,0
    52ec:	17c0006f          	j	5468 <OSMutexCreate+0x1e4>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    52f0:	00800793          	li	a5,8
    52f4:	3007b7f3          	csrrc	a5,mstatus,a5
    52f8:	fef42223          	sw	a5,-28(s0)
    return context;
    52fc:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    5300:	fef42623          	sw	a5,-20(s0)
    if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
    5304:	fcf44703          	lbu	a4,-49(s0)
    5308:	0ff00793          	li	a5,255
    530c:	06f70463          	beq	a4,a5,5374 <OSMutexCreate+0xf0>
        if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {           /* Mutex priority must not already exist    */
    5310:	fcf44783          	lbu	a5,-49(s0)
    5314:	0002d737          	lui	a4,0x2d
    5318:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    531c:	00279793          	sll	a5,a5,0x2
    5320:	00f707b3          	add	a5,a4,a5
    5324:	0007a783          	lw	a5,0(a5)
    5328:	02078863          	beqz	a5,5358 <OSMutexCreate+0xd4>
    532c:	fec42783          	lw	a5,-20(s0)
    5330:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5334:	fe042783          	lw	a5,-32(s0)
    5338:	0087f793          	and	a5,a5,8
    533c:	3007a073          	csrs	mstatus,a5
}
    5340:	00000013          	nop
            OS_EXIT_CRITICAL();                            /* Task already exist at priority ...       */
           *perr = OS_ERR_PRIO_EXIST;                      /* ... ceiling priority                     */
    5344:	fc842783          	lw	a5,-56(s0)
    5348:	02800713          	li	a4,40
    534c:	00e78023          	sb	a4,0(a5)
            return ((OS_EVENT *)0);
    5350:	00000793          	li	a5,0
    5354:	1140006f          	j	5468 <OSMutexCreate+0x1e4>
        }
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;              /* Reserve the table entry                  */
    5358:	fcf44783          	lbu	a5,-49(s0)
    535c:	0002d737          	lui	a4,0x2d
    5360:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    5364:	00279793          	sll	a5,a5,0x2
    5368:	00f707b3          	add	a5,a4,a5
    536c:	00100713          	li	a4,1
    5370:	00e7a023          	sw	a4,0(a5)
    }

    pevent = OSEventFreeList;                              /* Get next free event control block        */
    5374:	000277b7          	lui	a5,0x27
    5378:	7f47a783          	lw	a5,2036(a5) # 277f4 <OSEventFreeList>
    537c:	fef42423          	sw	a5,-24(s0)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
    5380:	fe842783          	lw	a5,-24(s0)
    5384:	04079a63          	bnez	a5,53d8 <OSMutexCreate+0x154>
        if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
    5388:	fcf44703          	lbu	a4,-49(s0)
    538c:	0ff00793          	li	a5,255
    5390:	00f70e63          	beq	a4,a5,53ac <OSMutexCreate+0x128>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;              /* No, Release the table entry              */
    5394:	fcf44783          	lbu	a5,-49(s0)
    5398:	0002d737          	lui	a4,0x2d
    539c:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    53a0:	00279793          	sll	a5,a5,0x2
    53a4:	00f707b3          	add	a5,a4,a5
    53a8:	0007a023          	sw	zero,0(a5)
    53ac:	fec42783          	lw	a5,-20(s0)
    53b0:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    53b4:	fdc42783          	lw	a5,-36(s0)
    53b8:	0087f793          	and	a5,a5,8
    53bc:	3007a073          	csrs	mstatus,a5
}
    53c0:	00000013          	nop
        }
        OS_EXIT_CRITICAL();
       *perr = OS_ERR_PEVENT_NULL;                         /* No more event control blocks             */
    53c4:	fc842783          	lw	a5,-56(s0)
    53c8:	00400713          	li	a4,4
    53cc:	00e78023          	sb	a4,0(a5)
        return (pevent);
    53d0:	fe842783          	lw	a5,-24(s0)
    53d4:	0940006f          	j	5468 <OSMutexCreate+0x1e4>
    }
    OSEventFreeList     = (OS_EVENT *)OSEventFreeList->OSEventPtr; /* Adjust the free list             */
    53d8:	000277b7          	lui	a5,0x27
    53dc:	7f47a783          	lw	a5,2036(a5) # 277f4 <OSEventFreeList>
    53e0:	0047a703          	lw	a4,4(a5)
    53e4:	000277b7          	lui	a5,0x27
    53e8:	7ee7aa23          	sw	a4,2036(a5) # 277f4 <OSEventFreeList>
    53ec:	fec42783          	lw	a5,-20(s0)
    53f0:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    53f4:	fd842783          	lw	a5,-40(s0)
    53f8:	0087f793          	and	a5,a5,8
    53fc:	3007a073          	csrs	mstatus,a5
}
    5400:	00000013          	nop
    OS_EXIT_CRITICAL();
    pevent->OSEventType = OS_EVENT_TYPE_MUTEX;
    5404:	fe842783          	lw	a5,-24(s0)
    5408:	00400713          	li	a4,4
    540c:	00e78023          	sb	a4,0(a5)
    pevent->OSEventCnt  = (INT16U)((INT16U)prio << 8u) | OS_MUTEX_AVAILABLE; /* Resource is avail.     */
    5410:	fcf44783          	lbu	a5,-49(s0)
    5414:	01079793          	sll	a5,a5,0x10
    5418:	0107d793          	srl	a5,a5,0x10
    541c:	00879793          	sll	a5,a5,0x8
    5420:	01079793          	sll	a5,a5,0x10
    5424:	0107d793          	srl	a5,a5,0x10
    5428:	0ff7e793          	or	a5,a5,255
    542c:	01079713          	sll	a4,a5,0x10
    5430:	01075713          	srl	a4,a4,0x10
    5434:	fe842783          	lw	a5,-24(s0)
    5438:	00e79423          	sh	a4,8(a5)
    pevent->OSEventPtr  = (void *)0;                       /* No task owning the mutex                 */
    543c:	fe842783          	lw	a5,-24(s0)
    5440:	0007a223          	sw	zero,4(a5)
#if OS_EVENT_NAME_EN > 0u
    pevent->OSEventName = (INT8U *)(void *)"?";
    5444:	fe842783          	lw	a5,-24(s0)
    5448:	00023737          	lui	a4,0x23
    544c:	09070713          	add	a4,a4,144 # 23090 <OSUnMapTbl+0x12c>
    5450:	00e7a823          	sw	a4,16(a5)
#endif
    OS_EventWaitListInit(pevent);
    5454:	fe842503          	lw	a0,-24(s0)
    5458:	dedfc0ef          	jal	2244 <OS_EventWaitListInit>
    OS_TRACE_MUTEX_CREATE(pevent, pevent->OSEventName);
   *perr = OS_ERR_NONE;
    545c:	fc842783          	lw	a5,-56(s0)
    5460:	00078023          	sb	zero,0(a5)
    return (pevent);
    5464:	fe842783          	lw	a5,-24(s0)
}
    5468:	00078513          	mv	a0,a5
    546c:	03c12083          	lw	ra,60(sp)
    5470:	03812403          	lw	s0,56(sp)
    5474:	04010113          	add	sp,sp,64
    5478:	00008067          	ret

0000547c <OSMutexDel>:

#if OS_MUTEX_DEL_EN > 0u
OS_EVENT  *OSMutexDel (OS_EVENT  *pevent,
                       INT8U      opt,
                       INT8U     *perr)
{
    547c:	fb010113          	add	sp,sp,-80
    5480:	04112623          	sw	ra,76(sp)
    5484:	04812423          	sw	s0,72(sp)
    5488:	05010413          	add	s0,sp,80
    548c:	faa42e23          	sw	a0,-68(s0)
    5490:	00058793          	mv	a5,a1
    5494:	fac42a23          	sw	a2,-76(s0)
    5498:	faf40da3          	sb	a5,-69(s0)
    OS_EVENT  *pevent_return;
    INT8U      pcp;                                        /* Priority ceiling priority                */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
    549c:	fe042223          	sw	zero,-28(s0)
        return ((OS_EVENT *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    54a0:	fbc42783          	lw	a5,-68(s0)
    54a4:	00079c63          	bnez	a5,54bc <OSMutexDel+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    54a8:	fb442783          	lw	a5,-76(s0)
    54ac:	00400713          	li	a4,4
    54b0:	00e78023          	sb	a4,0(a5)
        return (pevent);
    54b4:	fbc42783          	lw	a5,-68(s0)
    54b8:	2d00006f          	j	5788 <OSMutexDel+0x30c>
    }
#endif

    OS_TRACE_MUTEX_DEL_ENTER(pevent, opt);

    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
    54bc:	fbc42783          	lw	a5,-68(s0)
    54c0:	0007c703          	lbu	a4,0(a5)
    54c4:	00400793          	li	a5,4
    54c8:	00f70c63          	beq	a4,a5,54e0 <OSMutexDel+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    54cc:	fb442783          	lw	a5,-76(s0)
    54d0:	00100713          	li	a4,1
    54d4:	00e78023          	sb	a4,0(a5)
        OS_TRACE_MUTEX_DEL_EXIT(*perr);
        return (pevent);
    54d8:	fbc42783          	lw	a5,-68(s0)
    54dc:	2ac0006f          	j	5788 <OSMutexDel+0x30c>
    }
    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
    54e0:	000287b7          	lui	a5,0x28
    54e4:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    54e8:	00078c63          	beqz	a5,5500 <OSMutexDel+0x84>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    54ec:	fb442783          	lw	a5,-76(s0)
    54f0:	00f00713          	li	a4,15
    54f4:	00e78023          	sb	a4,0(a5)
        OS_TRACE_MUTEX_DEL_EXIT(*perr);
        return (pevent);
    54f8:	fbc42783          	lw	a5,-68(s0)
    54fc:	28c0006f          	j	5788 <OSMutexDel+0x30c>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5500:	00800793          	li	a5,8
    5504:	3007b7f3          	csrrc	a5,mstatus,a5
    5508:	fcf42c23          	sw	a5,-40(s0)
    return context;
    550c:	fd842783          	lw	a5,-40(s0)
    }
    OS_ENTER_CRITICAL();
    5510:	fef42223          	sw	a5,-28(s0)
    if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mutex        */
    5514:	fbc42783          	lw	a5,-68(s0)
    5518:	00a7c783          	lbu	a5,10(a5)
    551c:	00078863          	beqz	a5,552c <OSMutexDel+0xb0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    5520:	00100793          	li	a5,1
    5524:	fef407a3          	sb	a5,-17(s0)
    5528:	0080006f          	j	5530 <OSMutexDel+0xb4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    552c:	fe0407a3          	sb	zero,-17(s0)
    }
    switch (opt) {
    5530:	fbb44783          	lbu	a5,-69(s0)
    5534:	00078863          	beqz	a5,5544 <OSMutexDel+0xc8>
    5538:	00100713          	li	a4,1
    553c:	0ee78063          	beq	a5,a4,561c <OSMutexDel+0x1a0>
    5540:	2140006f          	j	5754 <OSMutexDel+0x2d8>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
    5544:	fef44783          	lbu	a5,-17(s0)
    5548:	0a079263          	bnez	a5,55ec <OSMutexDel+0x170>
#if OS_EVENT_NAME_EN > 0u
                 pevent->OSEventName   = (INT8U *)(void *)"?";
    554c:	fbc42783          	lw	a5,-68(s0)
    5550:	00023737          	lui	a4,0x23
    5554:	09070713          	add	a4,a4,144 # 23090 <OSUnMapTbl+0x12c>
    5558:	00e7a823          	sw	a4,16(a5)
#endif
                 pcp                   = (INT8U)(pevent->OSEventCnt >> 8u);
    555c:	fbc42783          	lw	a5,-68(s0)
    5560:	0087d783          	lhu	a5,8(a5)
    5564:	0087d793          	srl	a5,a5,0x8
    5568:	01079793          	sll	a5,a5,0x10
    556c:	0107d793          	srl	a5,a5,0x10
    5570:	fef401a3          	sb	a5,-29(s0)
                 if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
    5574:	fe344703          	lbu	a4,-29(s0)
    5578:	0ff00793          	li	a5,255
    557c:	00f70e63          	beq	a4,a5,5598 <OSMutexDel+0x11c>
                     OSTCBPrioTbl[pcp] = (OS_TCB *)0;      /* Free up the PCP                          */
    5580:	fe344783          	lbu	a5,-29(s0)
    5584:	0002d737          	lui	a4,0x2d
    5588:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    558c:	00279793          	sll	a5,a5,0x2
    5590:	00f707b3          	add	a5,a4,a5
    5594:	0007a023          	sw	zero,0(a5)
                 }
                 pevent->OSEventType   = OS_EVENT_TYPE_UNUSED;
    5598:	fbc42783          	lw	a5,-68(s0)
    559c:	00078023          	sb	zero,0(a5)
                 pevent->OSEventPtr    = OSEventFreeList;  /* Return Event Control Block to free list  */
    55a0:	000277b7          	lui	a5,0x27
    55a4:	7f47a703          	lw	a4,2036(a5) # 277f4 <OSEventFreeList>
    55a8:	fbc42783          	lw	a5,-68(s0)
    55ac:	00e7a223          	sw	a4,4(a5)
                 pevent->OSEventCnt    = 0u;
    55b0:	fbc42783          	lw	a5,-68(s0)
    55b4:	00079423          	sh	zero,8(a5)
                 OSEventFreeList       = pevent;
    55b8:	000277b7          	lui	a5,0x27
    55bc:	fbc42703          	lw	a4,-68(s0)
    55c0:	7ee7aa23          	sw	a4,2036(a5) # 277f4 <OSEventFreeList>
    55c4:	fe442783          	lw	a5,-28(s0)
    55c8:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    55cc:	fd442783          	lw	a5,-44(s0)
    55d0:	0087f793          	and	a5,a5,8
    55d4:	3007a073          	csrs	mstatus,a5
}
    55d8:	00000013          	nop
                 OS_EXIT_CRITICAL();
                 *perr                 = OS_ERR_NONE;
    55dc:	fb442783          	lw	a5,-76(s0)
    55e0:	00078023          	sb	zero,0(a5)
                 pevent_return         = (OS_EVENT *)0;    /* Mutex has been deleted                   */
    55e4:	fe042423          	sw	zero,-24(s0)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                 = OS_ERR_TASK_WAITING;
                 pevent_return         = pevent;
             }
             break;
    55e8:	19c0006f          	j	5784 <OSMutexDel+0x308>
    55ec:	fe442783          	lw	a5,-28(s0)
    55f0:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    55f4:	fd042783          	lw	a5,-48(s0)
    55f8:	0087f793          	and	a5,a5,8
    55fc:	3007a073          	csrs	mstatus,a5
}
    5600:	00000013          	nop
                 *perr                 = OS_ERR_TASK_WAITING;
    5604:	fb442783          	lw	a5,-76(s0)
    5608:	04900713          	li	a4,73
    560c:	00e78023          	sb	a4,0(a5)
                 pevent_return         = pevent;
    5610:	fbc42783          	lw	a5,-68(s0)
    5614:	fef42423          	sw	a5,-24(s0)
             break;
    5618:	16c0006f          	j	5784 <OSMutexDel+0x308>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pcp  = (INT8U)(pevent->OSEventCnt >> 8u);                       /* Get PCP of mutex       */
    561c:	fbc42783          	lw	a5,-68(s0)
    5620:	0087d783          	lhu	a5,8(a5)
    5624:	0087d793          	srl	a5,a5,0x8
    5628:	01079793          	sll	a5,a5,0x10
    562c:	0107d793          	srl	a5,a5,0x10
    5630:	fef401a3          	sb	a5,-29(s0)
             if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
    5634:	fe344703          	lbu	a4,-29(s0)
    5638:	0ff00793          	li	a5,255
    563c:	04f70e63          	beq	a4,a5,5698 <OSMutexDel+0x21c>
                 prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8); /* Get owner's orig prio  */
    5640:	fbc42783          	lw	a5,-68(s0)
    5644:	0087d783          	lhu	a5,8(a5)
    5648:	fef40123          	sb	a5,-30(s0)
                 ptcb = (OS_TCB *)pevent->OSEventPtr;
    564c:	fbc42783          	lw	a5,-68(s0)
    5650:	0047a783          	lw	a5,4(a5)
    5654:	fcf42e23          	sw	a5,-36(s0)
                 if (ptcb != (OS_TCB *)0) {                /* See if any task owns the mutex           */
    5658:	fdc42783          	lw	a5,-36(s0)
    565c:	02078e63          	beqz	a5,5698 <OSMutexDel+0x21c>
                     if (ptcb->OSTCBPrio == pcp) {         /* See if original prio was changed         */
    5660:	fdc42783          	lw	a5,-36(s0)
    5664:	03a7c783          	lbu	a5,58(a5)
    5668:	fe344703          	lbu	a4,-29(s0)
    566c:	02f71663          	bne	a4,a5,5698 <OSMutexDel+0x21c>
                         OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(OSTCBCur, prio);
                         OSMutex_RdyAtPrio(ptcb, prio);    /* Yes, Restore the task's original prio    */
    5670:	fe244783          	lbu	a5,-30(s0)
    5674:	00078593          	mv	a1,a5
    5678:	fdc42503          	lw	a0,-36(s0)
    567c:	2b9000ef          	jal	6134 <OSMutex_RdyAtPrio>
                     }
                 }
             }
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mutex        */
    5680:	0180006f          	j	5698 <OSMutexDel+0x21c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_ABORT);
    5684:	00200693          	li	a3,2
    5688:	01000613          	li	a2,16
    568c:	00000593          	li	a1,0
    5690:	fbc42503          	lw	a0,-68(s0)
    5694:	dbcfc0ef          	jal	1c50 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mutex        */
    5698:	fbc42783          	lw	a5,-68(s0)
    569c:	00a7c783          	lbu	a5,10(a5)
    56a0:	fe0792e3          	bnez	a5,5684 <OSMutexDel+0x208>
             }
#if OS_EVENT_NAME_EN > 0u
             pevent->OSEventName   = (INT8U *)(void *)"?";
    56a4:	fbc42783          	lw	a5,-68(s0)
    56a8:	00023737          	lui	a4,0x23
    56ac:	09070713          	add	a4,a4,144 # 23090 <OSUnMapTbl+0x12c>
    56b0:	00e7a823          	sw	a4,16(a5)
#endif
             pcp                   = (INT8U)(pevent->OSEventCnt >> 8u);
    56b4:	fbc42783          	lw	a5,-68(s0)
    56b8:	0087d783          	lhu	a5,8(a5)
    56bc:	0087d793          	srl	a5,a5,0x8
    56c0:	01079793          	sll	a5,a5,0x10
    56c4:	0107d793          	srl	a5,a5,0x10
    56c8:	fef401a3          	sb	a5,-29(s0)
             if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
    56cc:	fe344703          	lbu	a4,-29(s0)
    56d0:	0ff00793          	li	a5,255
    56d4:	00f70e63          	beq	a4,a5,56f0 <OSMutexDel+0x274>
                 OSTCBPrioTbl[pcp] = (OS_TCB *)0;          /* Free up the PCP                          */
    56d8:	fe344783          	lbu	a5,-29(s0)
    56dc:	0002d737          	lui	a4,0x2d
    56e0:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    56e4:	00279793          	sll	a5,a5,0x2
    56e8:	00f707b3          	add	a5,a4,a5
    56ec:	0007a023          	sw	zero,0(a5)
             }
             pevent->OSEventType   = OS_EVENT_TYPE_UNUSED;
    56f0:	fbc42783          	lw	a5,-68(s0)
    56f4:	00078023          	sb	zero,0(a5)
             pevent->OSEventPtr    = OSEventFreeList;      /* Return Event Control Block to free list  */
    56f8:	000277b7          	lui	a5,0x27
    56fc:	7f47a703          	lw	a4,2036(a5) # 277f4 <OSEventFreeList>
    5700:	fbc42783          	lw	a5,-68(s0)
    5704:	00e7a223          	sw	a4,4(a5)
             pevent->OSEventCnt    = 0u;
    5708:	fbc42783          	lw	a5,-68(s0)
    570c:	00079423          	sh	zero,8(a5)
             OSEventFreeList       = pevent;               /* Get next free event control block        */
    5710:	000277b7          	lui	a5,0x27
    5714:	fbc42703          	lw	a4,-68(s0)
    5718:	7ee7aa23          	sw	a4,2036(a5) # 277f4 <OSEventFreeList>
    571c:	fe442783          	lw	a5,-28(s0)
    5720:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5724:	fcc42783          	lw	a5,-52(s0)
    5728:	0087f793          	and	a5,a5,8
    572c:	3007a073          	csrs	mstatus,a5
}
    5730:	00000013          	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    5734:	fef44703          	lbu	a4,-17(s0)
    5738:	00100793          	li	a5,1
    573c:	00f71463          	bne	a4,a5,5744 <OSMutexDel+0x2c8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    5740:	85cfd0ef          	jal	279c <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
    5744:	fb442783          	lw	a5,-76(s0)
    5748:	00078023          	sb	zero,0(a5)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
    574c:	fe042423          	sw	zero,-24(s0)
             break;
    5750:	0340006f          	j	5784 <OSMutexDel+0x308>
    5754:	fe442783          	lw	a5,-28(s0)
    5758:	fcf42423          	sw	a5,-56(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    575c:	fc842783          	lw	a5,-56(s0)
    5760:	0087f793          	and	a5,a5,8
    5764:	3007a073          	csrs	mstatus,a5
}
    5768:	00000013          	nop

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
    576c:	fb442783          	lw	a5,-76(s0)
    5770:	00700713          	li	a4,7
    5774:	00e78023          	sb	a4,0(a5)
             pevent_return = pevent;
    5778:	fbc42783          	lw	a5,-68(s0)
    577c:	fef42423          	sw	a5,-24(s0)
             break;
    5780:	00000013          	nop
    }

    OS_TRACE_MUTEX_DEL_EXIT(*perr);

    return (pevent_return);
    5784:	fe842783          	lw	a5,-24(s0)
}
    5788:	00078513          	mv	a0,a5
    578c:	04c12083          	lw	ra,76(sp)
    5790:	04812403          	lw	s0,72(sp)
    5794:	05010113          	add	sp,sp,80
    5798:	00008067          	ret

0000579c <OSMutexPend>:
*/

void  OSMutexPend (OS_EVENT  *pevent,
                   INT32U     timeout,
                   INT8U     *perr)
{
    579c:	fb010113          	add	sp,sp,-80
    57a0:	04112623          	sw	ra,76(sp)
    57a4:	04812423          	sw	s0,72(sp)
    57a8:	05010413          	add	s0,sp,80
    57ac:	faa42e23          	sw	a0,-68(s0)
    57b0:	fab42c23          	sw	a1,-72(s0)
    57b4:	fac42a23          	sw	a2,-76(s0)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
    57b8:	fe042423          	sw	zero,-24(s0)
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    57bc:	fbc42783          	lw	a5,-68(s0)
    57c0:	00079a63          	bnez	a5,57d4 <OSMutexPend+0x38>
        *perr = OS_ERR_PEVENT_NULL;
    57c4:	fb442783          	lw	a5,-76(s0)
    57c8:	00400713          	li	a4,4
    57cc:	00e78023          	sb	a4,0(a5)
        return;
    57d0:	59c0006f          	j	5d6c <OSMutexPend+0x5d0>
    }
#endif

    OS_TRACE_MUTEX_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
    57d4:	fbc42783          	lw	a5,-68(s0)
    57d8:	0007c703          	lbu	a4,0(a5)
    57dc:	00400793          	li	a5,4
    57e0:	00f70a63          	beq	a4,a5,57f4 <OSMutexPend+0x58>
        *perr = OS_ERR_EVENT_TYPE;
    57e4:	fb442783          	lw	a5,-76(s0)
    57e8:	00100713          	li	a4,1
    57ec:	00e78023          	sb	a4,0(a5)
        OS_TRACE_MUTEX_PEND_EXIT(*perr);
        return;
    57f0:	57c0006f          	j	5d6c <OSMutexPend+0x5d0>
    }
    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
    57f4:	000287b7          	lui	a5,0x28
    57f8:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    57fc:	00078a63          	beqz	a5,5810 <OSMutexPend+0x74>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    5800:	fb442783          	lw	a5,-76(s0)
    5804:	00200713          	li	a4,2
    5808:	00e78023          	sb	a4,0(a5)
        OS_TRACE_MUTEX_PEND_EXIT(*perr);
        return;
    580c:	5600006f          	j	5d6c <OSMutexPend+0x5d0>
    }
    if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
    5810:	000287b7          	lui	a5,0x28
    5814:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    5818:	00078a63          	beqz	a5,582c <OSMutexPend+0x90>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    581c:	fb442783          	lw	a5,-76(s0)
    5820:	00d00713          	li	a4,13
    5824:	00e78023          	sb	a4,0(a5)
        OS_TRACE_MUTEX_PEND_EXIT(*perr);
        return;
    5828:	5440006f          	j	5d6c <OSMutexPend+0x5d0>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    582c:	00800793          	li	a5,8
    5830:	3007b7f3          	csrrc	a5,mstatus,a5
    5834:	fcf42a23          	sw	a5,-44(s0)
    return context;
    5838:	fd442783          	lw	a5,-44(s0)
    }

    OS_ENTER_CRITICAL();
    583c:	fef42423          	sw	a5,-24(s0)
    pcp = (INT8U)(pevent->OSEventCnt >> 8u);               /* Get PCP from mutex                       */
    5840:	fbc42783          	lw	a5,-68(s0)
    5844:	0087d783          	lhu	a5,8(a5)
    5848:	0087d793          	srl	a5,a5,0x8
    584c:	01079793          	sll	a5,a5,0x10
    5850:	0107d793          	srl	a5,a5,0x10
    5854:	fef403a3          	sb	a5,-25(s0)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
    5858:	fbc42783          	lw	a5,-68(s0)
    585c:	0087d783          	lhu	a5,8(a5)
    5860:	0ff7f713          	zext.b	a4,a5
    5864:	0ff00793          	li	a5,255
    5868:	0cf71263          	bne	a4,a5,592c <OSMutexPend+0x190>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
    586c:	fbc42783          	lw	a5,-68(s0)
    5870:	0087d783          	lhu	a5,8(a5)
    5874:	f007f793          	and	a5,a5,-256
    5878:	01079713          	sll	a4,a5,0x10
    587c:	01075713          	srl	a4,a4,0x10
    5880:	fbc42783          	lw	a5,-68(s0)
    5884:	00e79423          	sh	a4,8(a5)
        pevent->OSEventCnt |= (INT16U)OSTCBCur->OSTCBPrio; /*      Save priority of owning task        */
    5888:	fbc42783          	lw	a5,-68(s0)
    588c:	0087d783          	lhu	a5,8(a5)
    5890:	00028737          	lui	a4,0x28
    5894:	81c72703          	lw	a4,-2020(a4) # 2781c <OSTCBCur>
    5898:	03a74703          	lbu	a4,58(a4)
    589c:	00e7e7b3          	or	a5,a5,a4
    58a0:	01079713          	sll	a4,a5,0x10
    58a4:	01075713          	srl	a4,a4,0x10
    58a8:	fbc42783          	lw	a5,-68(s0)
    58ac:	00e79423          	sh	a4,8(a5)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
    58b0:	000287b7          	lui	a5,0x28
    58b4:	81c7a703          	lw	a4,-2020(a5) # 2781c <OSTCBCur>
    58b8:	fbc42783          	lw	a5,-68(s0)
    58bc:	00e7a223          	sw	a4,4(a5)
        if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
    58c0:	fe744703          	lbu	a4,-25(s0)
    58c4:	0ff00793          	li	a5,255
    58c8:	04f70063          	beq	a4,a5,5908 <OSMutexPend+0x16c>
            (OSTCBCur->OSTCBPrio <= pcp)) {                /*      PCP 'must' have a SMALLER prio ...  */
    58cc:	000287b7          	lui	a5,0x28
    58d0:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    58d4:	03a7c783          	lbu	a5,58(a5)
        if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
    58d8:	fe744703          	lbu	a4,-25(s0)
    58dc:	02f76663          	bltu	a4,a5,5908 <OSMutexPend+0x16c>
    58e0:	fe842783          	lw	a5,-24(s0)
    58e4:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    58e8:	fd042783          	lw	a5,-48(s0)
    58ec:	0087f793          	and	a5,a5,8
    58f0:	3007a073          	csrs	mstatus,a5
}
    58f4:	00000013          	nop
             OS_EXIT_CRITICAL();                           /*      ... than current task!              */
            *perr = OS_ERR_PCP_LOWER;
    58f8:	fb442783          	lw	a5,-76(s0)
    58fc:	07800713          	li	a4,120
    5900:	00e78023          	sb	a4,0(a5)
        } else {
             OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        OS_TRACE_MUTEX_PEND_EXIT(*perr);
        return;
    5904:	4680006f          	j	5d6c <OSMutexPend+0x5d0>
    5908:	fe842783          	lw	a5,-24(s0)
    590c:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5910:	fcc42783          	lw	a5,-52(s0)
    5914:	0087f793          	and	a5,a5,8
    5918:	3007a073          	csrs	mstatus,a5
}
    591c:	00000013          	nop
            *perr = OS_ERR_NONE;
    5920:	fb442783          	lw	a5,-76(s0)
    5924:	00078023          	sb	zero,0(a5)
        return;
    5928:	4440006f          	j	5d6c <OSMutexPend+0x5d0>
    }
    if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
    592c:	fe744703          	lbu	a4,-25(s0)
    5930:	0ff00793          	li	a5,255
    5934:	30f70a63          	beq	a4,a5,5c48 <OSMutexPend+0x4ac>
        mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8); /*  Get priority of mutex owner   */
    5938:	fbc42783          	lw	a5,-68(s0)
    593c:	0087d783          	lhu	a5,8(a5)
    5940:	fef40323          	sb	a5,-26(s0)
        ptcb  = (OS_TCB *)(pevent->OSEventPtr);                   /*     Point to TCB of mutex owner   */
    5944:	fbc42783          	lw	a5,-68(s0)
    5948:	0047a783          	lw	a5,4(a5)
    594c:	fef42023          	sw	a5,-32(s0)
        if (ptcb->OSTCBPrio > pcp) {                              /*     Need to promote prio of owner?*/
    5950:	fe042783          	lw	a5,-32(s0)
    5954:	03a7c783          	lbu	a5,58(a5)
    5958:	fe744703          	lbu	a4,-25(s0)
    595c:	2ef77663          	bgeu	a4,a5,5c48 <OSMutexPend+0x4ac>
            if (mprio > OSTCBCur->OSTCBPrio) {
    5960:	000287b7          	lui	a5,0x28
    5964:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5968:	03a7c783          	lbu	a5,58(a5)
    596c:	fe644703          	lbu	a4,-26(s0)
    5970:	2ce7fc63          	bgeu	a5,a4,5c48 <OSMutexPend+0x4ac>
                y = ptcb->OSTCBY;
    5974:	fe042783          	lw	a5,-32(s0)
    5978:	03c7c783          	lbu	a5,60(a5)
    597c:	fcf40fa3          	sb	a5,-33(s0)
                if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0u) {      /*     See if mutex owner is ready   */
    5980:	fdf44703          	lbu	a4,-33(s0)
    5984:	000287b7          	lui	a5,0x28
    5988:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    598c:	00f707b3          	add	a5,a4,a5
    5990:	0007c703          	lbu	a4,0(a5)
    5994:	fe042783          	lw	a5,-32(s0)
    5998:	03d7c783          	lbu	a5,61(a5)
    599c:	00f777b3          	and	a5,a4,a5
    59a0:	0ff7f793          	zext.b	a5,a5
    59a4:	08078863          	beqz	a5,5a34 <OSMutexPend+0x298>
                    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;     /*     Yes, Remove owner from Rdy ...*/
    59a8:	fdf44703          	lbu	a4,-33(s0)
    59ac:	000287b7          	lui	a5,0x28
    59b0:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    59b4:	00f707b3          	add	a5,a4,a5
    59b8:	0007c703          	lbu	a4,0(a5)
    59bc:	fe042783          	lw	a5,-32(s0)
    59c0:	03d7c783          	lbu	a5,61(a5)
    59c4:	fff7c793          	not	a5,a5
    59c8:	0ff7f793          	zext.b	a5,a5
    59cc:	fdf44683          	lbu	a3,-33(s0)
    59d0:	00f777b3          	and	a5,a4,a5
    59d4:	0ff7f713          	zext.b	a4,a5
    59d8:	000287b7          	lui	a5,0x28
    59dc:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    59e0:	00f687b3          	add	a5,a3,a5
    59e4:	00e78023          	sb	a4,0(a5)
                    if (OSRdyTbl[y] == 0u) {                      /*          ... list at current prio */
    59e8:	fdf44703          	lbu	a4,-33(s0)
    59ec:	000287b7          	lui	a5,0x28
    59f0:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    59f4:	00f707b3          	add	a5,a4,a5
    59f8:	0007c783          	lbu	a5,0(a5)
    59fc:	02079663          	bnez	a5,5a28 <OSMutexPend+0x28c>
                        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
    5a00:	fe042783          	lw	a5,-32(s0)
    5a04:	03e7c783          	lbu	a5,62(a5)
    5a08:	fff7c793          	not	a5,a5
    5a0c:	0ff7f713          	zext.b	a4,a5
    5a10:	000287b7          	lui	a5,0x28
    5a14:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    5a18:	00f777b3          	and	a5,a4,a5
    5a1c:	0ff7f713          	zext.b	a4,a5
    5a20:	000287b7          	lui	a5,0x28
    5a24:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
                    }
                    rdy = OS_TRUE;
    5a28:	00100793          	li	a5,1
    5a2c:	fef407a3          	sb	a5,-17(s0)
    5a30:	09c0006f          	j	5acc <OSMutexPend+0x330>
                } else {
                    pevent2 = ptcb->OSTCBEventPtr;
    5a34:	fe042783          	lw	a5,-32(s0)
    5a38:	01c7a783          	lw	a5,28(a5)
    5a3c:	fcf42c23          	sw	a5,-40(s0)
                    if (pevent2 != (OS_EVENT *)0) {               /* Remove from event wait list       */
    5a40:	fd842783          	lw	a5,-40(s0)
    5a44:	08078263          	beqz	a5,5ac8 <OSMutexPend+0x32c>
                        y = ptcb->OSTCBY;
    5a48:	fe042783          	lw	a5,-32(s0)
    5a4c:	03c7c783          	lbu	a5,60(a5)
    5a50:	fcf40fa3          	sb	a5,-33(s0)
                        pevent2->OSEventTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
    5a54:	fdf44783          	lbu	a5,-33(s0)
    5a58:	fd842703          	lw	a4,-40(s0)
    5a5c:	00f707b3          	add	a5,a4,a5
    5a60:	00b7c683          	lbu	a3,11(a5)
    5a64:	fe042783          	lw	a5,-32(s0)
    5a68:	03d7c783          	lbu	a5,61(a5)
    5a6c:	fff7c793          	not	a5,a5
    5a70:	0ff7f713          	zext.b	a4,a5
    5a74:	fdf44783          	lbu	a5,-33(s0)
    5a78:	00e6f733          	and	a4,a3,a4
    5a7c:	0ff77713          	zext.b	a4,a4
    5a80:	fd842683          	lw	a3,-40(s0)
    5a84:	00f687b3          	add	a5,a3,a5
    5a88:	00e785a3          	sb	a4,11(a5)
                        if (pevent2->OSEventTbl[y] == 0u) {
    5a8c:	fdf44783          	lbu	a5,-33(s0)
    5a90:	fd842703          	lw	a4,-40(s0)
    5a94:	00f707b3          	add	a5,a4,a5
    5a98:	00b7c783          	lbu	a5,11(a5)
    5a9c:	02079663          	bnez	a5,5ac8 <OSMutexPend+0x32c>
                            pevent2->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
    5aa0:	fd842783          	lw	a5,-40(s0)
    5aa4:	00a7c703          	lbu	a4,10(a5)
    5aa8:	fe042783          	lw	a5,-32(s0)
    5aac:	03e7c783          	lbu	a5,62(a5)
    5ab0:	fff7c793          	not	a5,a5
    5ab4:	0ff7f793          	zext.b	a5,a5
    5ab8:	00f777b3          	and	a5,a4,a5
    5abc:	0ff7f713          	zext.b	a4,a5
    5ac0:	fd842783          	lw	a5,-40(s0)
    5ac4:	00e78523          	sb	a4,10(a5)
                        }
                    }
                    rdy = OS_FALSE;                        /* No                                       */
    5ac8:	fe0407a3          	sb	zero,-17(s0)
                }
                ptcb->OSTCBPrio = pcp;                     /* Change owner task prio to PCP            */
    5acc:	fe042783          	lw	a5,-32(s0)
    5ad0:	fe744703          	lbu	a4,-25(s0)
    5ad4:	02e78d23          	sb	a4,58(a5)

                OS_TRACE_MUTEX_TASK_PRIO_INHERIT(ptcb, pcp);

#if OS_LOWEST_PRIO <= 63u
                ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3u);
    5ad8:	fe042783          	lw	a5,-32(s0)
    5adc:	03a7c783          	lbu	a5,58(a5)
    5ae0:	0037d793          	srl	a5,a5,0x3
    5ae4:	0ff7f713          	zext.b	a4,a5
    5ae8:	fe042783          	lw	a5,-32(s0)
    5aec:	02e78e23          	sb	a4,60(a5)
                ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07u);
    5af0:	fe042783          	lw	a5,-32(s0)
    5af4:	03a7c783          	lbu	a5,58(a5)
    5af8:	0077f793          	and	a5,a5,7
    5afc:	0ff7f713          	zext.b	a4,a5
    5b00:	fe042783          	lw	a5,-32(s0)
    5b04:	02e78da3          	sb	a4,59(a5)
#else
                ptcb->OSTCBY    = (INT8U)((INT8U)(ptcb->OSTCBPrio >> 4u) & 0xFFu);
                ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0Fu);
#endif
                ptcb->OSTCBBitY = (OS_PRIO)(1uL << ptcb->OSTCBY);
    5b08:	fe042783          	lw	a5,-32(s0)
    5b0c:	03c7c783          	lbu	a5,60(a5)
    5b10:	00078713          	mv	a4,a5
    5b14:	00100793          	li	a5,1
    5b18:	00e797b3          	sll	a5,a5,a4
    5b1c:	0ff7f713          	zext.b	a4,a5
    5b20:	fe042783          	lw	a5,-32(s0)
    5b24:	02e78f23          	sb	a4,62(a5)
                ptcb->OSTCBBitX = (OS_PRIO)(1uL << ptcb->OSTCBX);
    5b28:	fe042783          	lw	a5,-32(s0)
    5b2c:	03b7c783          	lbu	a5,59(a5)
    5b30:	00078713          	mv	a4,a5
    5b34:	00100793          	li	a5,1
    5b38:	00e797b3          	sll	a5,a5,a4
    5b3c:	0ff7f713          	zext.b	a4,a5
    5b40:	fe042783          	lw	a5,-32(s0)
    5b44:	02e78ea3          	sb	a4,61(a5)

                if (rdy == OS_TRUE) {                      /* If task was ready at owner's priority ...*/
    5b48:	fef44703          	lbu	a4,-17(s0)
    5b4c:	00100793          	li	a5,1
    5b50:	06f71663          	bne	a4,a5,5bbc <OSMutexPend+0x420>
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.   */
    5b54:	fe042783          	lw	a5,-32(s0)
    5b58:	03e7c703          	lbu	a4,62(a5)
    5b5c:	000287b7          	lui	a5,0x28
    5b60:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    5b64:	00f767b3          	or	a5,a4,a5
    5b68:	0ff7f713          	zext.b	a4,a5
    5b6c:	000287b7          	lui	a5,0x28
    5b70:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5b74:	fe042783          	lw	a5,-32(s0)
    5b78:	03c7c783          	lbu	a5,60(a5)
    5b7c:	00078713          	mv	a4,a5
    5b80:	000287b7          	lui	a5,0x28
    5b84:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    5b88:	00f707b3          	add	a5,a4,a5
    5b8c:	0007c703          	lbu	a4,0(a5)
    5b90:	fe042783          	lw	a5,-32(s0)
    5b94:	03d7c783          	lbu	a5,61(a5)
    5b98:	fe042683          	lw	a3,-32(s0)
    5b9c:	03c6c683          	lbu	a3,60(a3)
    5ba0:	00f767b3          	or	a5,a4,a5
    5ba4:	0ff7f713          	zext.b	a4,a5
    5ba8:	000287b7          	lui	a5,0x28
    5bac:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    5bb0:	00f687b3          	add	a5,a3,a5
    5bb4:	00e78023          	sb	a4,0(a5)
    5bb8:	0740006f          	j	5c2c <OSMutexPend+0x490>
                } else {
                    pevent2 = ptcb->OSTCBEventPtr;
    5bbc:	fe042783          	lw	a5,-32(s0)
    5bc0:	01c7a783          	lw	a5,28(a5)
    5bc4:	fcf42c23          	sw	a5,-40(s0)
                    if (pevent2 != (OS_EVENT *)0) {        /* Add to event wait list                   */
    5bc8:	fd842783          	lw	a5,-40(s0)
    5bcc:	06078063          	beqz	a5,5c2c <OSMutexPend+0x490>
                        pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
    5bd0:	fd842783          	lw	a5,-40(s0)
    5bd4:	00a7c703          	lbu	a4,10(a5)
    5bd8:	fe042783          	lw	a5,-32(s0)
    5bdc:	03e7c783          	lbu	a5,62(a5)
    5be0:	00f767b3          	or	a5,a4,a5
    5be4:	0ff7f713          	zext.b	a4,a5
    5be8:	fd842783          	lw	a5,-40(s0)
    5bec:	00e78523          	sb	a4,10(a5)
                        pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5bf0:	fe042783          	lw	a5,-32(s0)
    5bf4:	03c7c783          	lbu	a5,60(a5)
    5bf8:	00078713          	mv	a4,a5
    5bfc:	fd842783          	lw	a5,-40(s0)
    5c00:	00e787b3          	add	a5,a5,a4
    5c04:	00b7c703          	lbu	a4,11(a5)
    5c08:	fe042783          	lw	a5,-32(s0)
    5c0c:	03d7c783          	lbu	a5,61(a5)
    5c10:	fe042683          	lw	a3,-32(s0)
    5c14:	03c6c683          	lbu	a3,60(a3)
    5c18:	00f767b3          	or	a5,a4,a5
    5c1c:	0ff7f713          	zext.b	a4,a5
    5c20:	fd842783          	lw	a5,-40(s0)
    5c24:	00d787b3          	add	a5,a5,a3
    5c28:	00e785a3          	sb	a4,11(a5)
                    }
                }
                OSTCBPrioTbl[pcp] = ptcb;
    5c2c:	fe744783          	lbu	a5,-25(s0)
    5c30:	0002d737          	lui	a4,0x2d
    5c34:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    5c38:	00279793          	sll	a5,a5,0x2
    5c3c:	00f707b3          	add	a5,a4,a5
    5c40:	fe042703          	lw	a4,-32(s0)
    5c44:	00e7a023          	sw	a4,0(a5)
            }
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
    5c48:	000287b7          	lui	a5,0x28
    5c4c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5c50:	0387c703          	lbu	a4,56(a5)
    5c54:	000287b7          	lui	a5,0x28
    5c58:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5c5c:	01076713          	or	a4,a4,16
    5c60:	0ff77713          	zext.b	a4,a4
    5c64:	02e78c23          	sb	a4,56(a5)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    5c68:	000287b7          	lui	a5,0x28
    5c6c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5c70:	02078ca3          	sb	zero,57(a5)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
    5c74:	000287b7          	lui	a5,0x28
    5c78:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5c7c:	fb842703          	lw	a4,-72(s0)
    5c80:	02e7aa23          	sw	a4,52(a5)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    5c84:	fbc42503          	lw	a0,-68(s0)
    5c88:	974fc0ef          	jal	1dfc <OS_EventTaskWait>
    5c8c:	fe842783          	lw	a5,-24(s0)
    5c90:	fcf42223          	sw	a5,-60(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5c94:	fc442783          	lw	a5,-60(s0)
    5c98:	0087f793          	and	a5,a5,8
    5c9c:	3007a073          	csrs	mstatus,a5
}
    5ca0:	00000013          	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    5ca4:	af9fc0ef          	jal	279c <OS_Sched>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5ca8:	00800793          	li	a5,8
    5cac:	3007b7f3          	csrrc	a5,mstatus,a5
    5cb0:	fcf42423          	sw	a5,-56(s0)
    return context;
    5cb4:	fc842783          	lw	a5,-56(s0)
    OS_ENTER_CRITICAL();
    5cb8:	fef42423          	sw	a5,-24(s0)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    5cbc:	000287b7          	lui	a5,0x28
    5cc0:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5cc4:	0397c783          	lbu	a5,57(a5)
    5cc8:	00078863          	beqz	a5,5cd8 <OSMutexPend+0x53c>
    5ccc:	00200713          	li	a4,2
    5cd0:	00e78a63          	beq	a5,a4,5ce4 <OSMutexPend+0x548>
    5cd4:	0200006f          	j	5cf4 <OSMutexPend+0x558>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    5cd8:	fb442783          	lw	a5,-76(s0)
    5cdc:	00078023          	sb	zero,0(a5)
             break;
    5ce0:	0380006f          	j	5d18 <OSMutexPend+0x57c>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
    5ce4:	fb442783          	lw	a5,-76(s0)
    5ce8:	00e00713          	li	a4,14
    5cec:	00e78023          	sb	a4,0(a5)
             break;
    5cf0:	0280006f          	j	5d18 <OSMutexPend+0x57c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    5cf4:	000287b7          	lui	a5,0x28
    5cf8:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5cfc:	fbc42583          	lw	a1,-68(s0)
    5d00:	00078513          	mv	a0,a5
    5d04:	ba4fc0ef          	jal	20a8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
    5d08:	fb442783          	lw	a5,-76(s0)
    5d0c:	00a00713          	li	a4,10
    5d10:	00e78023          	sb	a4,0(a5)
             break;
    5d14:	00000013          	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    5d18:	000287b7          	lui	a5,0x28
    5d1c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5d20:	02078c23          	sb	zero,56(a5)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    5d24:	000287b7          	lui	a5,0x28
    5d28:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5d2c:	02078ca3          	sb	zero,57(a5)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    5d30:	000287b7          	lui	a5,0x28
    5d34:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5d38:	0007ae23          	sw	zero,28(a5)
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    5d3c:	000287b7          	lui	a5,0x28
    5d40:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5d44:	0207a023          	sw	zero,32(a5)
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
    5d48:	000287b7          	lui	a5,0x28
    5d4c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5d50:	0207a223          	sw	zero,36(a5)
    5d54:	fe842783          	lw	a5,-24(s0)
    5d58:	fcf42023          	sw	a5,-64(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5d5c:	fc042783          	lw	a5,-64(s0)
    5d60:	0087f793          	and	a5,a5,8
    5d64:	3007a073          	csrs	mstatus,a5
}
    5d68:	00000013          	nop
#endif
    OS_EXIT_CRITICAL();

    OS_TRACE_MUTEX_PEND_EXIT(*perr);
}
    5d6c:	04c12083          	lw	ra,76(sp)
    5d70:	04812403          	lw	s0,72(sp)
    5d74:	05010113          	add	sp,sp,80
    5d78:	00008067          	ret

00005d7c <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
    5d7c:	fc010113          	add	sp,sp,-64
    5d80:	02112e23          	sw	ra,60(sp)
    5d84:	02812c23          	sw	s0,56(sp)
    5d88:	04010413          	add	s0,sp,64
    5d8c:	fca42623          	sw	a0,-52(s0)
    INT8U      pcp;                                   /* Priority ceiling priority                     */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
    5d90:	fe042623          	sw	zero,-20(s0)
#endif


    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
    5d94:	000287b7          	lui	a5,0x28
    5d98:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    5d9c:	00078663          	beqz	a5,5da8 <OSMutexPost+0x2c>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
    5da0:	00500793          	li	a5,5
    5da4:	2180006f          	j	5fbc <OSMutexPost+0x240>
    }
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    5da8:	fcc42783          	lw	a5,-52(s0)
    5dac:	00079663          	bnez	a5,5db8 <OSMutexPost+0x3c>
        return (OS_ERR_PEVENT_NULL);
    5db0:	00400793          	li	a5,4
    5db4:	2080006f          	j	5fbc <OSMutexPost+0x240>
    }
#endif

    OS_TRACE_MUTEX_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
    5db8:	fcc42783          	lw	a5,-52(s0)
    5dbc:	0007c703          	lbu	a4,0(a5)
    5dc0:	00400793          	li	a5,4
    5dc4:	00f70663          	beq	a4,a5,5dd0 <OSMutexPost+0x54>
        OS_TRACE_MUTEX_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
    5dc8:	00100793          	li	a5,1
    5dcc:	1f00006f          	j	5fbc <OSMutexPost+0x240>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5dd0:	00800793          	li	a5,8
    5dd4:	3007b7f3          	csrrc	a5,mstatus,a5
    5dd8:	fef42223          	sw	a5,-28(s0)
    return context;
    5ddc:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    5de0:	fef42623          	sw	a5,-20(s0)
    pcp  = (INT8U)(pevent->OSEventCnt >> 8u);         /* Get priority ceiling priority of mutex        */
    5de4:	fcc42783          	lw	a5,-52(s0)
    5de8:	0087d783          	lhu	a5,8(a5)
    5dec:	0087d793          	srl	a5,a5,0x8
    5df0:	01079793          	sll	a5,a5,0x10
    5df4:	0107d793          	srl	a5,a5,0x10
    5df8:	fef405a3          	sb	a5,-21(s0)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
    5dfc:	fcc42783          	lw	a5,-52(s0)
    5e00:	0087d783          	lhu	a5,8(a5)
    5e04:	fef40523          	sb	a5,-22(s0)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
    5e08:	fcc42783          	lw	a5,-52(s0)
    5e0c:	0047a703          	lw	a4,4(a5)
    5e10:	000287b7          	lui	a5,0x28
    5e14:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5e18:	02f70263          	beq	a4,a5,5e3c <OSMutexPost+0xc0>
    5e1c:	fec42783          	lw	a5,-20(s0)
    5e20:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5e24:	fe042783          	lw	a5,-32(s0)
    5e28:	0087f793          	and	a5,a5,8
    5e2c:	3007a073          	csrs	mstatus,a5
}
    5e30:	00000013          	nop
        OS_EXIT_CRITICAL();
        OS_TRACE_MUTEX_POST_EXIT(OS_ERR_NOT_MUTEX_OWNER);
        return (OS_ERR_NOT_MUTEX_OWNER);
    5e34:	06400793          	li	a5,100
    5e38:	1840006f          	j	5fbc <OSMutexPost+0x240>
    }
    if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
    5e3c:	feb44703          	lbu	a4,-21(s0)
    5e40:	0ff00793          	li	a5,255
    5e44:	04f70663          	beq	a4,a5,5e90 <OSMutexPost+0x114>
        if (OSTCBCur->OSTCBPrio == pcp) {             /* Did we have to raise current task's priority? */
    5e48:	000287b7          	lui	a5,0x28
    5e4c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5e50:	03a7c783          	lbu	a5,58(a5)
    5e54:	feb44703          	lbu	a4,-21(s0)
    5e58:	00f71e63          	bne	a4,a5,5e74 <OSMutexPost+0xf8>
            OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(OSTCBCur, prio);
            OSMutex_RdyAtPrio(OSTCBCur, prio);        /* Restore the task's original priority          */
    5e5c:	000287b7          	lui	a5,0x28
    5e60:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    5e64:	fea44703          	lbu	a4,-22(s0)
    5e68:	00070593          	mv	a1,a4
    5e6c:	00078513          	mv	a0,a5
    5e70:	2c4000ef          	jal	6134 <OSMutex_RdyAtPrio>
        }
        OSTCBPrioTbl[pcp] = OS_TCB_RESERVED;          /* Reserve table entry                           */
    5e74:	feb44783          	lbu	a5,-21(s0)
    5e78:	0002d737          	lui	a4,0x2d
    5e7c:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    5e80:	00279793          	sll	a5,a5,0x2
    5e84:	00f707b3          	add	a5,a4,a5
    5e88:	00100713          	li	a4,1
    5e8c:	00e7a023          	sw	a4,0(a5)
    }
    if (pevent->OSEventGrp != 0u) {                   /* Any task waiting for the mutex?               */
    5e90:	fcc42783          	lw	a5,-52(s0)
    5e94:	00a7c783          	lbu	a5,10(a5)
    5e98:	0e078263          	beqz	a5,5f7c <OSMutexPost+0x200>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
    5e9c:	00000693          	li	a3,0
    5ea0:	01000613          	li	a2,16
    5ea4:	00000593          	li	a1,0
    5ea8:	fcc42503          	lw	a0,-52(s0)
    5eac:	da5fb0ef          	jal	1c50 <OS_EventTaskRdy>
    5eb0:	00050793          	mv	a5,a0
    5eb4:	fef40523          	sb	a5,-22(s0)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
    5eb8:	fcc42783          	lw	a5,-52(s0)
    5ebc:	0087d783          	lhu	a5,8(a5)
    5ec0:	f007f793          	and	a5,a5,-256
    5ec4:	01079713          	sll	a4,a5,0x10
    5ec8:	01075713          	srl	a4,a4,0x10
    5ecc:	fcc42783          	lw	a5,-52(s0)
    5ed0:	00e79423          	sh	a4,8(a5)
        pevent->OSEventCnt |= (INT16U)prio;
    5ed4:	fcc42783          	lw	a5,-52(s0)
    5ed8:	0087d703          	lhu	a4,8(a5)
    5edc:	fea44783          	lbu	a5,-22(s0)
    5ee0:	01079793          	sll	a5,a5,0x10
    5ee4:	0107d793          	srl	a5,a5,0x10
    5ee8:	00f767b3          	or	a5,a4,a5
    5eec:	01079713          	sll	a4,a5,0x10
    5ef0:	01075713          	srl	a4,a4,0x10
    5ef4:	fcc42783          	lw	a5,-52(s0)
    5ef8:	00e79423          	sh	a4,8(a5)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
    5efc:	fea44783          	lbu	a5,-22(s0)
    5f00:	0002d737          	lui	a4,0x2d
    5f04:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    5f08:	00279793          	sll	a5,a5,0x2
    5f0c:	00f707b3          	add	a5,a4,a5
    5f10:	0007a703          	lw	a4,0(a5)
    5f14:	fcc42783          	lw	a5,-52(s0)
    5f18:	00e7a223          	sw	a4,4(a5)
        if ((pcp  != OS_PRIO_MUTEX_CEIL_DIS) &&
    5f1c:	feb44703          	lbu	a4,-21(s0)
    5f20:	0ff00793          	li	a5,255
    5f24:	02f70a63          	beq	a4,a5,5f58 <OSMutexPost+0x1dc>
    5f28:	fea44703          	lbu	a4,-22(s0)
    5f2c:	feb44783          	lbu	a5,-21(s0)
    5f30:	02e7e463          	bltu	a5,a4,5f58 <OSMutexPost+0x1dc>
    5f34:	fec42783          	lw	a5,-20(s0)
    5f38:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5f3c:	fdc42783          	lw	a5,-36(s0)
    5f40:	0087f793          	and	a5,a5,8
    5f44:	3007a073          	csrs	mstatus,a5
}
    5f48:	00000013          	nop
            (prio <= pcp)) {                          /*      PCP 'must' have a SMALLER prio ...       */
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
    5f4c:	851fc0ef          	jal	279c <OS_Sched>
            OS_TRACE_MUTEX_POST_EXIT(OS_ERR_PCP_LOWER);
            return (OS_ERR_PCP_LOWER);
    5f50:	07800793          	li	a5,120
    5f54:	0680006f          	j	5fbc <OSMutexPost+0x240>
    5f58:	fec42783          	lw	a5,-20(s0)
    5f5c:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5f60:	fd842783          	lw	a5,-40(s0)
    5f64:	0087f793          	and	a5,a5,8
    5f68:	3007a073          	csrs	mstatus,a5
}
    5f6c:	00000013          	nop
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
    5f70:	82dfc0ef          	jal	279c <OS_Sched>
            OS_TRACE_MUTEX_POST_EXIT(OS_ERR_NONE);
            return (OS_ERR_NONE);
    5f74:	00000793          	li	a5,0
    5f78:	0440006f          	j	5fbc <OSMutexPost+0x240>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
    5f7c:	fcc42783          	lw	a5,-52(s0)
    5f80:	0087d783          	lhu	a5,8(a5)
    5f84:	0ff7e793          	or	a5,a5,255
    5f88:	01079713          	sll	a4,a5,0x10
    5f8c:	01075713          	srl	a4,a4,0x10
    5f90:	fcc42783          	lw	a5,-52(s0)
    5f94:	00e79423          	sh	a4,8(a5)
    pevent->OSEventPtr  = (void *)0;
    5f98:	fcc42783          	lw	a5,-52(s0)
    5f9c:	0007a223          	sw	zero,4(a5)
    5fa0:	fec42783          	lw	a5,-20(s0)
    5fa4:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    5fa8:	fd442783          	lw	a5,-44(s0)
    5fac:	0087f793          	and	a5,a5,8
    5fb0:	3007a073          	csrs	mstatus,a5
}
    5fb4:	00000013          	nop
    OS_EXIT_CRITICAL();
    OS_TRACE_MUTEX_POST_EXIT(OS_ERR_NONE);
    return (OS_ERR_NONE);
    5fb8:	00000793          	li	a5,0
}
    5fbc:	00078513          	mv	a0,a5
    5fc0:	03c12083          	lw	ra,60(sp)
    5fc4:	03812403          	lw	s0,56(sp)
    5fc8:	04010113          	add	sp,sp,64
    5fcc:	00008067          	ret

00005fd0 <OSMutexQuery>:
*/

#if OS_MUTEX_QUERY_EN > 0u
INT8U  OSMutexQuery (OS_EVENT       *pevent,
                     OS_MUTEX_DATA  *p_mutex_data)
{
    5fd0:	fc010113          	add	sp,sp,-64
    5fd4:	02812e23          	sw	s0,60(sp)
    5fd8:	04010413          	add	s0,sp,64
    5fdc:	fca42623          	sw	a0,-52(s0)
    5fe0:	fcb42423          	sw	a1,-56(s0)
    INT8U       i;
    OS_PRIO    *psrc;
    OS_PRIO    *pdest;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR   cpu_sr = 0u;
    5fe4:	fe042023          	sw	zero,-32(s0)
#endif



    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
    5fe8:	000287b7          	lui	a5,0x28
    5fec:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    5ff0:	00078663          	beqz	a5,5ffc <OSMutexQuery+0x2c>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
    5ff4:	00600793          	li	a5,6
    5ff8:	12c0006f          	j	6124 <OSMutexQuery+0x154>
    }
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    5ffc:	fcc42783          	lw	a5,-52(s0)
    6000:	00079663          	bnez	a5,600c <OSMutexQuery+0x3c>
        return (OS_ERR_PEVENT_NULL);
    6004:	00400793          	li	a5,4
    6008:	11c0006f          	j	6124 <OSMutexQuery+0x154>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
    600c:	fc842783          	lw	a5,-56(s0)
    6010:	00079663          	bnez	a5,601c <OSMutexQuery+0x4c>
        return (OS_ERR_PDATA_NULL);
    6014:	00900793          	li	a5,9
    6018:	10c0006f          	j	6124 <OSMutexQuery+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
    601c:	fcc42783          	lw	a5,-52(s0)
    6020:	0007c703          	lbu	a4,0(a5)
    6024:	00400793          	li	a5,4
    6028:	00f70663          	beq	a4,a5,6034 <OSMutexQuery+0x64>
        return (OS_ERR_EVENT_TYPE);
    602c:	00100793          	li	a5,1
    6030:	0f40006f          	j	6124 <OSMutexQuery+0x154>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6034:	00800793          	li	a5,8
    6038:	3007b7f3          	csrrc	a5,mstatus,a5
    603c:	fcf42e23          	sw	a5,-36(s0)
    return context;
    6040:	fdc42783          	lw	a5,-36(s0)
    }
    OS_ENTER_CRITICAL();
    6044:	fef42023          	sw	a5,-32(s0)
    p_mutex_data->OSMutexPCP  = (INT8U)(pevent->OSEventCnt >> 8u);
    6048:	fcc42783          	lw	a5,-52(s0)
    604c:	0087d783          	lhu	a5,8(a5)
    6050:	0087d793          	srl	a5,a5,0x8
    6054:	01079793          	sll	a5,a5,0x10
    6058:	0107d793          	srl	a5,a5,0x10
    605c:	0ff7f713          	zext.b	a4,a5
    6060:	fc842783          	lw	a5,-56(s0)
    6064:	00e78323          	sb	a4,6(a5)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
    6068:	fcc42783          	lw	a5,-52(s0)
    606c:	0087d783          	lhu	a5,8(a5)
    6070:	0ff7f713          	zext.b	a4,a5
    6074:	fc842783          	lw	a5,-56(s0)
    6078:	00e782a3          	sb	a4,5(a5)
    if (p_mutex_data->OSOwnerPrio == 0xFFu) {
    607c:	fc842783          	lw	a5,-56(s0)
    6080:	0057c703          	lbu	a4,5(a5)
    6084:	0ff00793          	li	a5,255
    6088:	00f71a63          	bne	a4,a5,609c <OSMutexQuery+0xcc>
        p_mutex_data->OSValue = OS_TRUE;
    608c:	fc842783          	lw	a5,-56(s0)
    6090:	00100713          	li	a4,1
    6094:	00e78223          	sb	a4,4(a5)
    6098:	00c0006f          	j	60a4 <OSMutexQuery+0xd4>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
    609c:	fc842783          	lw	a5,-56(s0)
    60a0:	00078223          	sb	zero,4(a5)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    60a4:	fcc42783          	lw	a5,-52(s0)
    60a8:	00a7c703          	lbu	a4,10(a5)
    60ac:	fc842783          	lw	a5,-56(s0)
    60b0:	00e781a3          	sb	a4,3(a5)
    psrc                      = &pevent->OSEventTbl[0];
    60b4:	fcc42783          	lw	a5,-52(s0)
    60b8:	00b78793          	add	a5,a5,11
    60bc:	fef42423          	sw	a5,-24(s0)
    pdest                     = &p_mutex_data->OSEventTbl[0];
    60c0:	fc842783          	lw	a5,-56(s0)
    60c4:	fef42223          	sw	a5,-28(s0)
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
    60c8:	fe0407a3          	sb	zero,-17(s0)
    60cc:	0300006f          	j	60fc <OSMutexQuery+0x12c>
        *pdest++ = *psrc++;
    60d0:	fe842703          	lw	a4,-24(s0)
    60d4:	00170793          	add	a5,a4,1
    60d8:	fef42423          	sw	a5,-24(s0)
    60dc:	fe442783          	lw	a5,-28(s0)
    60e0:	00178693          	add	a3,a5,1
    60e4:	fed42223          	sw	a3,-28(s0)
    60e8:	00074703          	lbu	a4,0(a4)
    60ec:	00e78023          	sb	a4,0(a5)
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
    60f0:	fef44783          	lbu	a5,-17(s0)
    60f4:	00178793          	add	a5,a5,1
    60f8:	fef407a3          	sb	a5,-17(s0)
    60fc:	fef44703          	lbu	a4,-17(s0)
    6100:	00200793          	li	a5,2
    6104:	fce7f6e3          	bgeu	a5,a4,60d0 <OSMutexQuery+0x100>
    6108:	fe042783          	lw	a5,-32(s0)
    610c:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6110:	fd842783          	lw	a5,-40(s0)
    6114:	0087f793          	and	a5,a5,8
    6118:	3007a073          	csrs	mstatus,a5
}
    611c:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    6120:	00000793          	li	a5,0
}
    6124:	00078513          	mv	a0,a5
    6128:	03c12403          	lw	s0,60(sp)
    612c:	04010113          	add	sp,sp,64
    6130:	00008067          	ret

00006134 <OSMutex_RdyAtPrio>:
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB  *ptcb,
                                 INT8U    prio)
{
    6134:	fd010113          	add	sp,sp,-48
    6138:	02812623          	sw	s0,44(sp)
    613c:	03010413          	add	s0,sp,48
    6140:	fca42e23          	sw	a0,-36(s0)
    6144:	00058793          	mv	a5,a1
    6148:	fcf40da3          	sb	a5,-37(s0)
    INT8U  y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pcp'    */
    614c:	fdc42783          	lw	a5,-36(s0)
    6150:	03c7c783          	lbu	a5,60(a5)
    6154:	fef407a3          	sb	a5,-17(s0)
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
    6158:	fef44703          	lbu	a4,-17(s0)
    615c:	000287b7          	lui	a5,0x28
    6160:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    6164:	00f707b3          	add	a5,a4,a5
    6168:	0007c703          	lbu	a4,0(a5)
    616c:	fdc42783          	lw	a5,-36(s0)
    6170:	03d7c783          	lbu	a5,61(a5)
    6174:	fff7c793          	not	a5,a5
    6178:	0ff7f793          	zext.b	a5,a5
    617c:	fef44683          	lbu	a3,-17(s0)
    6180:	00f777b3          	and	a5,a4,a5
    6184:	0ff7f713          	zext.b	a4,a5
    6188:	000287b7          	lui	a5,0x28
    618c:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    6190:	00f687b3          	add	a5,a3,a5
    6194:	00e78023          	sb	a4,0(a5)
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[y] == 0u) {
    6198:	fef44703          	lbu	a4,-17(s0)
    619c:	000287b7          	lui	a5,0x28
    61a0:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    61a4:	00f707b3          	add	a5,a4,a5
    61a8:	0007c783          	lbu	a5,0(a5)
    61ac:	02079663          	bnez	a5,61d8 <OSMutex_RdyAtPrio+0xa4>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
    61b0:	fdc42783          	lw	a5,-36(s0)
    61b4:	03e7c783          	lbu	a5,62(a5)
    61b8:	fff7c793          	not	a5,a5
    61bc:	0ff7f713          	zext.b	a4,a5
    61c0:	000287b7          	lui	a5,0x28
    61c4:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    61c8:	00f777b3          	and	a5,a4,a5
    61cc:	0ff7f713          	zext.b	a4,a5
    61d0:	000287b7          	lui	a5,0x28
    61d4:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
    }
    ptcb->OSTCBPrio         = prio;
    61d8:	fdc42783          	lw	a5,-36(s0)
    61dc:	fdb44703          	lbu	a4,-37(s0)
    61e0:	02e78d23          	sb	a4,58(a5)
    OSPrioCur               = prio;                        /* The current task is now at this priority */
    61e4:	000287b7          	lui	a5,0x28
    61e8:	fdb44703          	lbu	a4,-37(s0)
    61ec:	80e785a3          	sb	a4,-2037(a5) # 2780b <OSPrioCur>
#if OS_LOWEST_PRIO <= 63u
    ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 3u) & 0x07u);
    61f0:	fdb44783          	lbu	a5,-37(s0)
    61f4:	0037d793          	srl	a5,a5,0x3
    61f8:	0ff7f793          	zext.b	a5,a5
    61fc:	0077f793          	and	a5,a5,7
    6200:	0ff7f713          	zext.b	a4,a5
    6204:	fdc42783          	lw	a5,-36(s0)
    6208:	02e78e23          	sb	a4,60(a5)
    ptcb->OSTCBX            = (INT8U)(prio & 0x07u);
    620c:	fdb44783          	lbu	a5,-37(s0)
    6210:	0077f793          	and	a5,a5,7
    6214:	0ff7f713          	zext.b	a4,a5
    6218:	fdc42783          	lw	a5,-36(s0)
    621c:	02e78da3          	sb	a4,59(a5)
#else
    ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 4u) & 0x0Fu);
    ptcb->OSTCBX            = (INT8U) (prio & 0x0Fu);
#endif
    ptcb->OSTCBBitY         = (OS_PRIO)(1uL << ptcb->OSTCBY);
    6220:	fdc42783          	lw	a5,-36(s0)
    6224:	03c7c783          	lbu	a5,60(a5)
    6228:	00078713          	mv	a4,a5
    622c:	00100793          	li	a5,1
    6230:	00e797b3          	sll	a5,a5,a4
    6234:	0ff7f713          	zext.b	a4,a5
    6238:	fdc42783          	lw	a5,-36(s0)
    623c:	02e78f23          	sb	a4,62(a5)
    ptcb->OSTCBBitX         = (OS_PRIO)(1uL << ptcb->OSTCBX);
    6240:	fdc42783          	lw	a5,-36(s0)
    6244:	03b7c783          	lbu	a5,59(a5)
    6248:	00078713          	mv	a4,a5
    624c:	00100793          	li	a5,1
    6250:	00e797b3          	sll	a5,a5,a4
    6254:	0ff7f713          	zext.b	a4,a5
    6258:	fdc42783          	lw	a5,-36(s0)
    625c:	02e78ea3          	sb	a4,61(a5)
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
    6260:	fdc42783          	lw	a5,-36(s0)
    6264:	03e7c703          	lbu	a4,62(a5)
    6268:	000287b7          	lui	a5,0x28
    626c:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    6270:	00f767b3          	or	a5,a4,a5
    6274:	0ff7f713          	zext.b	a4,a5
    6278:	000287b7          	lui	a5,0x28
    627c:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    6280:	fdc42783          	lw	a5,-36(s0)
    6284:	03c7c783          	lbu	a5,60(a5)
    6288:	00078713          	mv	a4,a5
    628c:	000287b7          	lui	a5,0x28
    6290:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    6294:	00f707b3          	add	a5,a4,a5
    6298:	0007c703          	lbu	a4,0(a5)
    629c:	fdc42783          	lw	a5,-36(s0)
    62a0:	03d7c783          	lbu	a5,61(a5)
    62a4:	fdc42683          	lw	a3,-36(s0)
    62a8:	03c6c683          	lbu	a3,60(a3)
    62ac:	00f767b3          	or	a5,a4,a5
    62b0:	0ff7f713          	zext.b	a4,a5
    62b4:	000287b7          	lui	a5,0x28
    62b8:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    62bc:	00f687b3          	add	a5,a3,a5
    62c0:	00e78023          	sb	a4,0(a5)
    OSTCBPrioTbl[prio]      = ptcb;
    62c4:	fdb44783          	lbu	a5,-37(s0)
    62c8:	0002d737          	lui	a4,0x2d
    62cc:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    62d0:	00279793          	sll	a5,a5,0x2
    62d4:	00f707b3          	add	a5,a4,a5
    62d8:	fdc42703          	lw	a4,-36(s0)
    62dc:	00e7a023          	sw	a4,0(a5)
    OS_TRACE_TASK_READY(ptcb);
}
    62e0:	00000013          	nop
    62e4:	02c12403          	lw	s0,44(sp)
    62e8:	03010113          	add	sp,sp,48
    62ec:	00008067          	ret

000062f0 <OSQAccept>:
*/

#if OS_Q_ACCEPT_EN > 0u
void  *OSQAccept (OS_EVENT  *pevent,
                  INT8U     *perr)
{
    62f0:	fc010113          	add	sp,sp,-64
    62f4:	02812e23          	sw	s0,60(sp)
    62f8:	04010413          	add	s0,sp,64
    62fc:	fca42623          	sw	a0,-52(s0)
    6300:	fcb42423          	sw	a1,-56(s0)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    6304:	fe042423          	sw	zero,-24(s0)
        return ((void *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    6308:	fcc42783          	lw	a5,-52(s0)
    630c:	00079c63          	bnez	a5,6324 <OSQAccept+0x34>
        *perr = OS_ERR_PEVENT_NULL;
    6310:	fc842783          	lw	a5,-56(s0)
    6314:	00400713          	li	a4,4
    6318:	00e78023          	sb	a4,0(a5)
        return ((void *)0);
    631c:	00000793          	li	a5,0
    6320:	0e80006f          	j	6408 <OSQAccept+0x118>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    6324:	fcc42783          	lw	a5,-52(s0)
    6328:	0007c703          	lbu	a4,0(a5)
    632c:	00200793          	li	a5,2
    6330:	00f70c63          	beq	a4,a5,6348 <OSQAccept+0x58>
        *perr = OS_ERR_EVENT_TYPE;
    6334:	fc842783          	lw	a5,-56(s0)
    6338:	00100713          	li	a4,1
    633c:	00e78023          	sb	a4,0(a5)
        return ((void *)0);
    6340:	00000793          	li	a5,0
    6344:	0c40006f          	j	6408 <OSQAccept+0x118>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6348:	00800793          	li	a5,8
    634c:	3007b7f3          	csrrc	a5,mstatus,a5
    6350:	fef42023          	sw	a5,-32(s0)
    return context;
    6354:	fe042783          	lw	a5,-32(s0)
    }
    OS_ENTER_CRITICAL();
    6358:	fef42423          	sw	a5,-24(s0)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    635c:	fcc42783          	lw	a5,-52(s0)
    6360:	0047a783          	lw	a5,4(a5)
    6364:	fef42223          	sw	a5,-28(s0)
    if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
    6368:	fe442783          	lw	a5,-28(s0)
    636c:	0167d783          	lhu	a5,22(a5)
    6370:	06078663          	beqz	a5,63dc <OSQAccept+0xec>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    6374:	fe442783          	lw	a5,-28(s0)
    6378:	0107a783          	lw	a5,16(a5)
    637c:	00478693          	add	a3,a5,4
    6380:	fe442703          	lw	a4,-28(s0)
    6384:	00d72823          	sw	a3,16(a4)
    6388:	0007a783          	lw	a5,0(a5)
    638c:	fef42623          	sw	a5,-20(s0)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    6390:	fe442783          	lw	a5,-28(s0)
    6394:	0167d783          	lhu	a5,22(a5)
    6398:	fff78793          	add	a5,a5,-1
    639c:	01079713          	sll	a4,a5,0x10
    63a0:	01075713          	srl	a4,a4,0x10
    63a4:	fe442783          	lw	a5,-28(s0)
    63a8:	00e79b23          	sh	a4,22(a5)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    63ac:	fe442783          	lw	a5,-28(s0)
    63b0:	0107a703          	lw	a4,16(a5)
    63b4:	fe442783          	lw	a5,-28(s0)
    63b8:	0087a783          	lw	a5,8(a5)
    63bc:	00f71a63          	bne	a4,a5,63d0 <OSQAccept+0xe0>
            pq->OSQOut = pq->OSQStart;
    63c0:	fe442783          	lw	a5,-28(s0)
    63c4:	0047a703          	lw	a4,4(a5)
    63c8:	fe442783          	lw	a5,-28(s0)
    63cc:	00e7a823          	sw	a4,16(a5)
        }
        *perr = OS_ERR_NONE;
    63d0:	fc842783          	lw	a5,-56(s0)
    63d4:	00078023          	sb	zero,0(a5)
    63d8:	0140006f          	j	63ec <OSQAccept+0xfc>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    63dc:	fc842783          	lw	a5,-56(s0)
    63e0:	01f00713          	li	a4,31
    63e4:	00e78023          	sb	a4,0(a5)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    63e8:	fe042623          	sw	zero,-20(s0)
    63ec:	fe842783          	lw	a5,-24(s0)
    63f0:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    63f4:	fdc42783          	lw	a5,-36(s0)
    63f8:	0087f793          	and	a5,a5,8
    63fc:	3007a073          	csrs	mstatus,a5
}
    6400:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    6404:	fec42783          	lw	a5,-20(s0)
}
    6408:	00078513          	mv	a0,a5
    640c:	03c12403          	lw	s0,60(sp)
    6410:	04010113          	add	sp,sp,64
    6414:	00008067          	ret

00006418 <OSQCreate>:
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void    **start,
                      INT16U    size)
{
    6418:	fc010113          	add	sp,sp,-64
    641c:	02112e23          	sw	ra,60(sp)
    6420:	02812c23          	sw	s0,56(sp)
    6424:	04010413          	add	s0,sp,64
    6428:	fca42623          	sw	a0,-52(s0)
    642c:	00058793          	mv	a5,a1
    6430:	fcf41523          	sh	a5,-54(s0)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    6434:	fe042423          	sw	zero,-24(s0)
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
    6438:	000287b7          	lui	a5,0x28
    643c:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    6440:	00078663          	beqz	a5,644c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    6444:	00000793          	li	a5,0
    6448:	1800006f          	j	65c8 <OSQCreate+0x1b0>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    644c:	00800793          	li	a5,8
    6450:	3007b7f3          	csrrc	a5,mstatus,a5
    6454:	fef42023          	sw	a5,-32(s0)
    return context;
    6458:	fe042783          	lw	a5,-32(s0)
    }
    OS_ENTER_CRITICAL();
    645c:	fef42423          	sw	a5,-24(s0)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    6460:	000277b7          	lui	a5,0x27
    6464:	7f47a783          	lw	a5,2036(a5) # 277f4 <OSEventFreeList>
    6468:	fef42623          	sw	a5,-20(s0)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    646c:	000277b7          	lui	a5,0x27
    6470:	7f47a783          	lw	a5,2036(a5) # 277f4 <OSEventFreeList>
    6474:	00078c63          	beqz	a5,648c <OSQCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    6478:	000277b7          	lui	a5,0x27
    647c:	7f47a783          	lw	a5,2036(a5) # 277f4 <OSEventFreeList>
    6480:	0047a703          	lw	a4,4(a5)
    6484:	000277b7          	lui	a5,0x27
    6488:	7ee7aa23          	sw	a4,2036(a5) # 277f4 <OSEventFreeList>
    648c:	fe842783          	lw	a5,-24(s0)
    6490:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6494:	fdc42783          	lw	a5,-36(s0)
    6498:	0087f793          	and	a5,a5,8
    649c:	3007a073          	csrs	mstatus,a5
}
    64a0:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    64a4:	fec42783          	lw	a5,-20(s0)
    64a8:	10078e63          	beqz	a5,65c4 <OSQCreate+0x1ac>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    64ac:	00800793          	li	a5,8
    64b0:	3007b7f3          	csrrc	a5,mstatus,a5
    64b4:	fcf42c23          	sw	a5,-40(s0)
    return context;
    64b8:	fd842783          	lw	a5,-40(s0)
        OS_ENTER_CRITICAL();
    64bc:	fef42423          	sw	a5,-24(s0)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    64c0:	000287b7          	lui	a5,0x28
    64c4:	8347a783          	lw	a5,-1996(a5) # 27834 <OSQFreeList>
    64c8:	fef42223          	sw	a5,-28(s0)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    64cc:	fe442783          	lw	a5,-28(s0)
    64d0:	0a078e63          	beqz	a5,658c <OSQCreate+0x174>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    64d4:	000287b7          	lui	a5,0x28
    64d8:	8347a783          	lw	a5,-1996(a5) # 27834 <OSQFreeList>
    64dc:	0007a703          	lw	a4,0(a5)
    64e0:	000287b7          	lui	a5,0x28
    64e4:	82e7aa23          	sw	a4,-1996(a5) # 27834 <OSQFreeList>
    64e8:	fe842783          	lw	a5,-24(s0)
    64ec:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    64f0:	fd442783          	lw	a5,-44(s0)
    64f4:	0087f793          	and	a5,a5,8
    64f8:	3007a073          	csrs	mstatus,a5
}
    64fc:	00000013          	nop
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    6500:	fe442783          	lw	a5,-28(s0)
    6504:	fcc42703          	lw	a4,-52(s0)
    6508:	00e7a223          	sw	a4,4(a5)
            pq->OSQEnd             = &start[size];
    650c:	fca45783          	lhu	a5,-54(s0)
    6510:	00279793          	sll	a5,a5,0x2
    6514:	fcc42703          	lw	a4,-52(s0)
    6518:	00f70733          	add	a4,a4,a5
    651c:	fe442783          	lw	a5,-28(s0)
    6520:	00e7a423          	sw	a4,8(a5)
            pq->OSQIn              = start;
    6524:	fe442783          	lw	a5,-28(s0)
    6528:	fcc42703          	lw	a4,-52(s0)
    652c:	00e7a623          	sw	a4,12(a5)
            pq->OSQOut             = start;
    6530:	fe442783          	lw	a5,-28(s0)
    6534:	fcc42703          	lw	a4,-52(s0)
    6538:	00e7a823          	sw	a4,16(a5)
            pq->OSQSize            = size;
    653c:	fe442783          	lw	a5,-28(s0)
    6540:	fca45703          	lhu	a4,-54(s0)
    6544:	00e79a23          	sh	a4,20(a5)
            pq->OSQEntries         = 0u;
    6548:	fe442783          	lw	a5,-28(s0)
    654c:	00079b23          	sh	zero,22(a5)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    6550:	fec42783          	lw	a5,-20(s0)
    6554:	00200713          	li	a4,2
    6558:	00e78023          	sb	a4,0(a5)
            pevent->OSEventCnt     = 0u;
    655c:	fec42783          	lw	a5,-20(s0)
    6560:	00079423          	sh	zero,8(a5)
            pevent->OSEventPtr     = pq;
    6564:	fec42783          	lw	a5,-20(s0)
    6568:	fe442703          	lw	a4,-28(s0)
    656c:	00e7a223          	sw	a4,4(a5)
#if OS_EVENT_NAME_EN > 0u
            pevent->OSEventName    = (INT8U *)(void *)"?";
    6570:	fec42783          	lw	a5,-20(s0)
    6574:	00023737          	lui	a4,0x23
    6578:	09470713          	add	a4,a4,148 # 23094 <OSUnMapTbl+0x130>
    657c:	00e7a823          	sw	a4,16(a5)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initialize the wait list             */
    6580:	fec42503          	lw	a0,-20(s0)
    6584:	cc1fb0ef          	jal	2244 <OS_EventWaitListInit>
    6588:	03c0006f          	j	65c4 <OSQCreate+0x1ac>

            OS_TRACE_Q_CREATE(pevent, pevent->OSEventName);
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    658c:	000277b7          	lui	a5,0x27
    6590:	7f47a703          	lw	a4,2036(a5) # 277f4 <OSEventFreeList>
    6594:	fec42783          	lw	a5,-20(s0)
    6598:	00e7a223          	sw	a4,4(a5)
            OSEventFreeList    = pevent;
    659c:	000277b7          	lui	a5,0x27
    65a0:	fec42703          	lw	a4,-20(s0)
    65a4:	7ee7aa23          	sw	a4,2036(a5) # 277f4 <OSEventFreeList>
    65a8:	fe842783          	lw	a5,-24(s0)
    65ac:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    65b0:	fd042783          	lw	a5,-48(s0)
    65b4:	0087f793          	and	a5,a5,8
    65b8:	3007a073          	csrs	mstatus,a5
}
    65bc:	00000013          	nop
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    65c0:	fe042623          	sw	zero,-20(s0)
        }
    }
    return (pevent);
    65c4:	fec42783          	lw	a5,-20(s0)
}
    65c8:	00078513          	mv	a0,a5
    65cc:	03c12083          	lw	ra,60(sp)
    65d0:	03812403          	lw	s0,56(sp)
    65d4:	04010113          	add	sp,sp,64
    65d8:	00008067          	ret

000065dc <OSQDel>:

#if OS_Q_DEL_EN > 0u
OS_EVENT  *OSQDel (OS_EVENT  *pevent,
                   INT8U      opt,
                   INT8U     *perr)
{
    65dc:	fb010113          	add	sp,sp,-80
    65e0:	04112623          	sw	ra,76(sp)
    65e4:	04812423          	sw	s0,72(sp)
    65e8:	05010413          	add	s0,sp,80
    65ec:	faa42e23          	sw	a0,-68(s0)
    65f0:	00058793          	mv	a5,a1
    65f4:	fac42a23          	sw	a2,-76(s0)
    65f8:	faf40da3          	sb	a5,-69(s0)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
    65fc:	fe042223          	sw	zero,-28(s0)
        return ((OS_EVENT *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    6600:	fbc42783          	lw	a5,-68(s0)
    6604:	00079c63          	bnez	a5,661c <OSQDel+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    6608:	fb442783          	lw	a5,-76(s0)
    660c:	00400713          	li	a4,4
    6610:	00e78023          	sb	a4,0(a5)
        return (pevent);
    6614:	fbc42783          	lw	a5,-68(s0)
    6618:	2400006f          	j	6858 <OSQDel+0x27c>
    }
#endif

    OS_TRACE_Q_DEL_ENTER(pevent, opt);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    661c:	fbc42783          	lw	a5,-68(s0)
    6620:	0007c703          	lbu	a4,0(a5)
    6624:	00200793          	li	a5,2
    6628:	00f70c63          	beq	a4,a5,6640 <OSQDel+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    662c:	fb442783          	lw	a5,-76(s0)
    6630:	00100713          	li	a4,1
    6634:	00e78023          	sb	a4,0(a5)
        OS_TRACE_Q_DEL_EXIT(*perr);
        return (pevent);
    6638:	fbc42783          	lw	a5,-68(s0)
    663c:	21c0006f          	j	6858 <OSQDel+0x27c>
    }
    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
    6640:	000287b7          	lui	a5,0x28
    6644:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    6648:	00078c63          	beqz	a5,6660 <OSQDel+0x84>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    664c:	fb442783          	lw	a5,-76(s0)
    6650:	00f00713          	li	a4,15
    6654:	00e78023          	sb	a4,0(a5)
        OS_TRACE_Q_DEL_EXIT(*perr);
        return (pevent);
    6658:	fbc42783          	lw	a5,-68(s0)
    665c:	1fc0006f          	j	6858 <OSQDel+0x27c>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6660:	00800793          	li	a5,8
    6664:	3007b7f3          	csrrc	a5,mstatus,a5
    6668:	fcf42e23          	sw	a5,-36(s0)
    return context;
    666c:	fdc42783          	lw	a5,-36(s0)
    }
    OS_ENTER_CRITICAL();
    6670:	fef42223          	sw	a5,-28(s0)
    if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on queue        */
    6674:	fbc42783          	lw	a5,-68(s0)
    6678:	00a7c783          	lbu	a5,10(a5)
    667c:	00078863          	beqz	a5,668c <OSQDel+0xb0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    6680:	00100793          	li	a5,1
    6684:	fef407a3          	sb	a5,-17(s0)
    6688:	0080006f          	j	6690 <OSQDel+0xb4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    668c:	fe0407a3          	sb	zero,-17(s0)
    }
    switch (opt) {
    6690:	fbb44783          	lbu	a5,-69(s0)
    6694:	00078863          	beqz	a5,66a4 <OSQDel+0xc8>
    6698:	00100713          	li	a4,1
    669c:	0ee78063          	beq	a5,a4,677c <OSQDel+0x1a0>
    66a0:	1840006f          	j	6824 <OSQDel+0x248>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    66a4:	fef44783          	lbu	a5,-17(s0)
    66a8:	08079863          	bnez	a5,6738 <OSQDel+0x15c>
#if OS_EVENT_NAME_EN > 0u
                 pevent->OSEventName    = (INT8U *)(void *)"?";
    66ac:	fbc42783          	lw	a5,-68(s0)
    66b0:	00023737          	lui	a4,0x23
    66b4:	09470713          	add	a4,a4,148 # 23094 <OSUnMapTbl+0x130>
    66b8:	00e7a823          	sw	a4,16(a5)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    66bc:	fbc42783          	lw	a5,-68(s0)
    66c0:	0047a783          	lw	a5,4(a5)
    66c4:	fef42023          	sw	a5,-32(s0)
                 pq->OSQPtr             = OSQFreeList;
    66c8:	000287b7          	lui	a5,0x28
    66cc:	8347a703          	lw	a4,-1996(a5) # 27834 <OSQFreeList>
    66d0:	fe042783          	lw	a5,-32(s0)
    66d4:	00e7a023          	sw	a4,0(a5)
                 OSQFreeList            = pq;
    66d8:	000287b7          	lui	a5,0x28
    66dc:	fe042703          	lw	a4,-32(s0)
    66e0:	82e7aa23          	sw	a4,-1996(a5) # 27834 <OSQFreeList>
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    66e4:	fbc42783          	lw	a5,-68(s0)
    66e8:	00078023          	sb	zero,0(a5)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    66ec:	000277b7          	lui	a5,0x27
    66f0:	7f47a703          	lw	a4,2036(a5) # 277f4 <OSEventFreeList>
    66f4:	fbc42783          	lw	a5,-68(s0)
    66f8:	00e7a223          	sw	a4,4(a5)
                 pevent->OSEventCnt     = 0u;
    66fc:	fbc42783          	lw	a5,-68(s0)
    6700:	00079423          	sh	zero,8(a5)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    6704:	000277b7          	lui	a5,0x27
    6708:	fbc42703          	lw	a4,-68(s0)
    670c:	7ee7aa23          	sw	a4,2036(a5) # 277f4 <OSEventFreeList>
    6710:	fe442783          	lw	a5,-28(s0)
    6714:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6718:	fd842783          	lw	a5,-40(s0)
    671c:	0087f793          	and	a5,a5,8
    6720:	3007a073          	csrs	mstatus,a5
}
    6724:	00000013          	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    6728:	fb442783          	lw	a5,-76(s0)
    672c:	00078023          	sb	zero,0(a5)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    6730:	fe042423          	sw	zero,-24(s0)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    6734:	1200006f          	j	6854 <OSQDel+0x278>
    6738:	fe442783          	lw	a5,-28(s0)
    673c:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6740:	fd442783          	lw	a5,-44(s0)
    6744:	0087f793          	and	a5,a5,8
    6748:	3007a073          	csrs	mstatus,a5
}
    674c:	00000013          	nop
                 *perr                  = OS_ERR_TASK_WAITING;
    6750:	fb442783          	lw	a5,-76(s0)
    6754:	04900713          	li	a4,73
    6758:	00e78023          	sb	a4,0(a5)
                 pevent_return          = pevent;
    675c:	fbc42783          	lw	a5,-68(s0)
    6760:	fef42423          	sw	a5,-24(s0)
             break;
    6764:	0f00006f          	j	6854 <OSQDel+0x278>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    6768:	00200693          	li	a3,2
    676c:	00400613          	li	a2,4
    6770:	00000593          	li	a1,0
    6774:	fbc42503          	lw	a0,-68(s0)
    6778:	cd8fb0ef          	jal	1c50 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for queue        */
    677c:	fbc42783          	lw	a5,-68(s0)
    6780:	00a7c783          	lbu	a5,10(a5)
    6784:	fe0792e3          	bnez	a5,6768 <OSQDel+0x18c>
             }
#if OS_EVENT_NAME_EN > 0u
             pevent->OSEventName    = (INT8U *)(void *)"?";
    6788:	fbc42783          	lw	a5,-68(s0)
    678c:	00023737          	lui	a4,0x23
    6790:	09470713          	add	a4,a4,148 # 23094 <OSUnMapTbl+0x130>
    6794:	00e7a823          	sw	a4,16(a5)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    6798:	fbc42783          	lw	a5,-68(s0)
    679c:	0047a783          	lw	a5,4(a5)
    67a0:	fef42023          	sw	a5,-32(s0)
             pq->OSQPtr             = OSQFreeList;
    67a4:	000287b7          	lui	a5,0x28
    67a8:	8347a703          	lw	a4,-1996(a5) # 27834 <OSQFreeList>
    67ac:	fe042783          	lw	a5,-32(s0)
    67b0:	00e7a023          	sw	a4,0(a5)
             OSQFreeList            = pq;
    67b4:	000287b7          	lui	a5,0x28
    67b8:	fe042703          	lw	a4,-32(s0)
    67bc:	82e7aa23          	sw	a4,-1996(a5) # 27834 <OSQFreeList>
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    67c0:	fbc42783          	lw	a5,-68(s0)
    67c4:	00078023          	sb	zero,0(a5)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    67c8:	000277b7          	lui	a5,0x27
    67cc:	7f47a703          	lw	a4,2036(a5) # 277f4 <OSEventFreeList>
    67d0:	fbc42783          	lw	a5,-68(s0)
    67d4:	00e7a223          	sw	a4,4(a5)
             pevent->OSEventCnt     = 0u;
    67d8:	fbc42783          	lw	a5,-68(s0)
    67dc:	00079423          	sh	zero,8(a5)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    67e0:	000277b7          	lui	a5,0x27
    67e4:	fbc42703          	lw	a4,-68(s0)
    67e8:	7ee7aa23          	sw	a4,2036(a5) # 277f4 <OSEventFreeList>
    67ec:	fe442783          	lw	a5,-28(s0)
    67f0:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    67f4:	fd042783          	lw	a5,-48(s0)
    67f8:	0087f793          	and	a5,a5,8
    67fc:	3007a073          	csrs	mstatus,a5
}
    6800:	00000013          	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    6804:	fef44703          	lbu	a4,-17(s0)
    6808:	00100793          	li	a5,1
    680c:	00f71463          	bne	a4,a5,6814 <OSQDel+0x238>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    6810:	f8dfb0ef          	jal	279c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    6814:	fb442783          	lw	a5,-76(s0)
    6818:	00078023          	sb	zero,0(a5)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    681c:	fe042423          	sw	zero,-24(s0)
             break;
    6820:	0340006f          	j	6854 <OSQDel+0x278>
    6824:	fe442783          	lw	a5,-28(s0)
    6828:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    682c:	fcc42783          	lw	a5,-52(s0)
    6830:	0087f793          	and	a5,a5,8
    6834:	3007a073          	csrs	mstatus,a5
}
    6838:	00000013          	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    683c:	fb442783          	lw	a5,-76(s0)
    6840:	00700713          	li	a4,7
    6844:	00e78023          	sb	a4,0(a5)
             pevent_return          = pevent;
    6848:	fbc42783          	lw	a5,-68(s0)
    684c:	fef42423          	sw	a5,-24(s0)
             break;
    6850:	00000013          	nop
    }

    OS_TRACE_Q_DEL_EXIT(*perr);

    return (pevent_return);
    6854:	fe842783          	lw	a5,-24(s0)
}
    6858:	00078513          	mv	a0,a5
    685c:	04c12083          	lw	ra,76(sp)
    6860:	04812403          	lw	s0,72(sp)
    6864:	05010113          	add	sp,sp,80
    6868:	00008067          	ret

0000686c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0u
INT8U  OSQFlush (OS_EVENT *pevent)
{
    686c:	fd010113          	add	sp,sp,-48
    6870:	02812623          	sw	s0,44(sp)
    6874:	03010413          	add	s0,sp,48
    6878:	fca42e23          	sw	a0,-36(s0)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
    687c:	fe042623          	sw	zero,-20(s0)
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6880:	fdc42783          	lw	a5,-36(s0)
    6884:	00079663          	bnez	a5,6890 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    6888:	00400793          	li	a5,4
    688c:	0800006f          	j	690c <OSQFlush+0xa0>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    6890:	fdc42783          	lw	a5,-36(s0)
    6894:	0007c703          	lbu	a4,0(a5)
    6898:	00200793          	li	a5,2
    689c:	00f70663          	beq	a4,a5,68a8 <OSQFlush+0x3c>
        return (OS_ERR_EVENT_TYPE);
    68a0:	00100793          	li	a5,1
    68a4:	0680006f          	j	690c <OSQFlush+0xa0>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    68a8:	00800793          	li	a5,8
    68ac:	3007b7f3          	csrrc	a5,mstatus,a5
    68b0:	fef42023          	sw	a5,-32(s0)
    return context;
    68b4:	fe042783          	lw	a5,-32(s0)
    }
#endif
    OS_ENTER_CRITICAL();
    68b8:	fef42623          	sw	a5,-20(s0)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    68bc:	fdc42783          	lw	a5,-36(s0)
    68c0:	0047a783          	lw	a5,4(a5)
    68c4:	fef42423          	sw	a5,-24(s0)
    pq->OSQIn      = pq->OSQStart;
    68c8:	fe842783          	lw	a5,-24(s0)
    68cc:	0047a703          	lw	a4,4(a5)
    68d0:	fe842783          	lw	a5,-24(s0)
    68d4:	00e7a623          	sw	a4,12(a5)
    pq->OSQOut     = pq->OSQStart;
    68d8:	fe842783          	lw	a5,-24(s0)
    68dc:	0047a703          	lw	a4,4(a5)
    68e0:	fe842783          	lw	a5,-24(s0)
    68e4:	00e7a823          	sw	a4,16(a5)
    pq->OSQEntries = 0u;
    68e8:	fe842783          	lw	a5,-24(s0)
    68ec:	00079b23          	sh	zero,22(a5)
    68f0:	fec42783          	lw	a5,-20(s0)
    68f4:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    68f8:	fe442783          	lw	a5,-28(s0)
    68fc:	0087f793          	and	a5,a5,8
    6900:	3007a073          	csrs	mstatus,a5
}
    6904:	00000013          	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    6908:	00000793          	li	a5,0
}
    690c:	00078513          	mv	a0,a5
    6910:	02c12403          	lw	s0,44(sp)
    6914:	03010113          	add	sp,sp,48
    6918:	00008067          	ret

0000691c <OSQPend>:
*/

void  *OSQPend (OS_EVENT  *pevent,
                INT32U     timeout,
                INT8U     *perr)
{
    691c:	fc010113          	add	sp,sp,-64
    6920:	02112e23          	sw	ra,60(sp)
    6924:	02812c23          	sw	s0,56(sp)
    6928:	04010413          	add	s0,sp,64
    692c:	fca42623          	sw	a0,-52(s0)
    6930:	fcb42423          	sw	a1,-56(s0)
    6934:	fcc42223          	sw	a2,-60(s0)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    6938:	fe042423          	sw	zero,-24(s0)
        return ((void *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    693c:	fcc42783          	lw	a5,-52(s0)
    6940:	00079c63          	bnez	a5,6958 <OSQPend+0x3c>
        *perr = OS_ERR_PEVENT_NULL;
    6944:	fc442783          	lw	a5,-60(s0)
    6948:	00400713          	li	a4,4
    694c:	00e78023          	sb	a4,0(a5)
        return ((void *)0);
    6950:	00000793          	li	a5,0
    6954:	2640006f          	j	6bb8 <OSQPend+0x29c>
    }
#endif

    OS_TRACE_Q_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    6958:	fcc42783          	lw	a5,-52(s0)
    695c:	0007c703          	lbu	a4,0(a5)
    6960:	00200793          	li	a5,2
    6964:	00f70c63          	beq	a4,a5,697c <OSQPend+0x60>
        *perr = OS_ERR_EVENT_TYPE;
    6968:	fc442783          	lw	a5,-60(s0)
    696c:	00100713          	li	a4,1
    6970:	00e78023          	sb	a4,0(a5)
        OS_TRACE_Q_PEND_EXIT(*perr);
        return ((void *)0);
    6974:	00000793          	li	a5,0
    6978:	2400006f          	j	6bb8 <OSQPend+0x29c>
    }
    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
    697c:	000287b7          	lui	a5,0x28
    6980:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    6984:	00078c63          	beqz	a5,699c <OSQPend+0x80>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    6988:	fc442783          	lw	a5,-60(s0)
    698c:	00200713          	li	a4,2
    6990:	00e78023          	sb	a4,0(a5)
        OS_TRACE_Q_PEND_EXIT(*perr);
        return ((void *)0);
    6994:	00000793          	li	a5,0
    6998:	2200006f          	j	6bb8 <OSQPend+0x29c>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
    699c:	000287b7          	lui	a5,0x28
    69a0:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    69a4:	00078c63          	beqz	a5,69bc <OSQPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    69a8:	fc442783          	lw	a5,-60(s0)
    69ac:	00d00713          	li	a4,13
    69b0:	00e78023          	sb	a4,0(a5)
        OS_TRACE_Q_PEND_EXIT(*perr);
        return ((void *)0);
    69b4:	00000793          	li	a5,0
    69b8:	2000006f          	j	6bb8 <OSQPend+0x29c>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    69bc:	00800793          	li	a5,8
    69c0:	3007b7f3          	csrrc	a5,mstatus,a5
    69c4:	fef42023          	sw	a5,-32(s0)
    return context;
    69c8:	fe042783          	lw	a5,-32(s0)
    }
    OS_ENTER_CRITICAL();
    69cc:	fef42423          	sw	a5,-24(s0)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    69d0:	fcc42783          	lw	a5,-52(s0)
    69d4:	0047a783          	lw	a5,4(a5)
    69d8:	fef42223          	sw	a5,-28(s0)
    if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
    69dc:	fe442783          	lw	a5,-28(s0)
    69e0:	0167d783          	lhu	a5,22(a5)
    69e4:	08078463          	beqz	a5,6a6c <OSQPend+0x150>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    69e8:	fe442783          	lw	a5,-28(s0)
    69ec:	0107a783          	lw	a5,16(a5)
    69f0:	00478693          	add	a3,a5,4
    69f4:	fe442703          	lw	a4,-28(s0)
    69f8:	00d72823          	sw	a3,16(a4)
    69fc:	0007a783          	lw	a5,0(a5)
    6a00:	fef42623          	sw	a5,-20(s0)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    6a04:	fe442783          	lw	a5,-28(s0)
    6a08:	0167d783          	lhu	a5,22(a5)
    6a0c:	fff78793          	add	a5,a5,-1
    6a10:	01079713          	sll	a4,a5,0x10
    6a14:	01075713          	srl	a4,a4,0x10
    6a18:	fe442783          	lw	a5,-28(s0)
    6a1c:	00e79b23          	sh	a4,22(a5)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    6a20:	fe442783          	lw	a5,-28(s0)
    6a24:	0107a703          	lw	a4,16(a5)
    6a28:	fe442783          	lw	a5,-28(s0)
    6a2c:	0087a783          	lw	a5,8(a5)
    6a30:	00f71a63          	bne	a4,a5,6a44 <OSQPend+0x128>
            pq->OSQOut = pq->OSQStart;
    6a34:	fe442783          	lw	a5,-28(s0)
    6a38:	0047a703          	lw	a4,4(a5)
    6a3c:	fe442783          	lw	a5,-28(s0)
    6a40:	00e7a823          	sw	a4,16(a5)
    6a44:	fe842783          	lw	a5,-24(s0)
    6a48:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6a4c:	fdc42783          	lw	a5,-36(s0)
    6a50:	0087f793          	and	a5,a5,8
    6a54:	3007a073          	csrs	mstatus,a5
}
    6a58:	00000013          	nop
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    6a5c:	fc442783          	lw	a5,-60(s0)
    6a60:	00078023          	sb	zero,0(a5)
        OS_TRACE_Q_PEND_EXIT(*perr);
        return (pmsg);                           /* Return message received                            */
    6a64:	fec42783          	lw	a5,-20(s0)
    6a68:	1500006f          	j	6bb8 <OSQPend+0x29c>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    6a6c:	000287b7          	lui	a5,0x28
    6a70:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6a74:	0387c703          	lbu	a4,56(a5)
    6a78:	000287b7          	lui	a5,0x28
    6a7c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6a80:	00476713          	or	a4,a4,4
    6a84:	0ff77713          	zext.b	a4,a4
    6a88:	02e78c23          	sb	a4,56(a5)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6a8c:	000287b7          	lui	a5,0x28
    6a90:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6a94:	02078ca3          	sb	zero,57(a5)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    6a98:	000287b7          	lui	a5,0x28
    6a9c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6aa0:	fc842703          	lw	a4,-56(s0)
    6aa4:	02e7aa23          	sw	a4,52(a5)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    6aa8:	fcc42503          	lw	a0,-52(s0)
    6aac:	b50fb0ef          	jal	1dfc <OS_EventTaskWait>
    6ab0:	fe842783          	lw	a5,-24(s0)
    6ab4:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6ab8:	fd442783          	lw	a5,-44(s0)
    6abc:	0087f793          	and	a5,a5,8
    6ac0:	3007a073          	csrs	mstatus,a5
}
    6ac4:	00000013          	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    6ac8:	cd5fb0ef          	jal	279c <OS_Sched>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6acc:	00800793          	li	a5,8
    6ad0:	3007b7f3          	csrrc	a5,mstatus,a5
    6ad4:	fcf42c23          	sw	a5,-40(s0)
    return context;
    6ad8:	fd842783          	lw	a5,-40(s0)
    OS_ENTER_CRITICAL();
    6adc:	fef42423          	sw	a5,-24(s0)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    6ae0:	000287b7          	lui	a5,0x28
    6ae4:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6ae8:	0397c783          	lbu	a5,57(a5)
    6aec:	00078863          	beqz	a5,6afc <OSQPend+0x1e0>
    6af0:	00200713          	li	a4,2
    6af4:	02e78263          	beq	a5,a4,6b18 <OSQPend+0x1fc>
    6af8:	0340006f          	j	6b2c <OSQPend+0x210>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    6afc:	000287b7          	lui	a5,0x28
    6b00:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6b04:	0287a783          	lw	a5,40(a5)
    6b08:	fef42623          	sw	a5,-20(s0)
            *perr =  OS_ERR_NONE;
    6b0c:	fc442783          	lw	a5,-60(s0)
    6b10:	00078023          	sb	zero,0(a5)
             break;
    6b14:	0400006f          	j	6b54 <OSQPend+0x238>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    6b18:	fe042623          	sw	zero,-20(s0)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    6b1c:	fc442783          	lw	a5,-60(s0)
    6b20:	00e00713          	li	a4,14
    6b24:	00e78023          	sb	a4,0(a5)
             break;
    6b28:	02c0006f          	j	6b54 <OSQPend+0x238>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    6b2c:	000287b7          	lui	a5,0x28
    6b30:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6b34:	fcc42583          	lw	a1,-52(s0)
    6b38:	00078513          	mv	a0,a5
    6b3c:	d6cfb0ef          	jal	20a8 <OS_EventTaskRemove>
             pmsg = (void *)0;
    6b40:	fe042623          	sw	zero,-20(s0)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    6b44:	fc442783          	lw	a5,-60(s0)
    6b48:	00a00713          	li	a4,10
    6b4c:	00e78023          	sb	a4,0(a5)
             break;
    6b50:	00000013          	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    6b54:	000287b7          	lui	a5,0x28
    6b58:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6b5c:	02078c23          	sb	zero,56(a5)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    6b60:	000287b7          	lui	a5,0x28
    6b64:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6b68:	02078ca3          	sb	zero,57(a5)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    6b6c:	000287b7          	lui	a5,0x28
    6b70:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6b74:	0007ae23          	sw	zero,28(a5)
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    6b78:	000287b7          	lui	a5,0x28
    6b7c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6b80:	0207a023          	sw	zero,32(a5)
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
    6b84:	000287b7          	lui	a5,0x28
    6b88:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6b8c:	0207a223          	sw	zero,36(a5)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    6b90:	000287b7          	lui	a5,0x28
    6b94:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    6b98:	0207a423          	sw	zero,40(a5)
    6b9c:	fe842783          	lw	a5,-24(s0)
    6ba0:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6ba4:	fd042783          	lw	a5,-48(s0)
    6ba8:	0087f793          	and	a5,a5,8
    6bac:	3007a073          	csrs	mstatus,a5
}
    6bb0:	00000013          	nop
    OS_EXIT_CRITICAL();
    OS_TRACE_Q_PEND_EXIT(*perr);

    return (pmsg);                                    /* Return received message                       */
    6bb4:	fec42783          	lw	a5,-20(s0)
}
    6bb8:	00078513          	mv	a0,a5
    6bbc:	03c12083          	lw	ra,60(sp)
    6bc0:	03812403          	lw	s0,56(sp)
    6bc4:	04010113          	add	sp,sp,64
    6bc8:	00008067          	ret

00006bcc <OSQPendAbort>:

#if OS_Q_PEND_ABORT_EN > 0u
INT8U  OSQPendAbort (OS_EVENT  *pevent,
                     INT8U      opt,
                     INT8U     *perr)
{
    6bcc:	fc010113          	add	sp,sp,-64
    6bd0:	02112e23          	sw	ra,60(sp)
    6bd4:	02812c23          	sw	s0,56(sp)
    6bd8:	04010413          	add	s0,sp,64
    6bdc:	fca42623          	sw	a0,-52(s0)
    6be0:	00058793          	mv	a5,a1
    6be4:	fcc42223          	sw	a2,-60(s0)
    6be8:	fcf405a3          	sb	a5,-53(s0)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
    6bec:	fe042423          	sw	zero,-24(s0)
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    6bf0:	fcc42783          	lw	a5,-52(s0)
    6bf4:	00079c63          	bnez	a5,6c0c <OSQPendAbort+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    6bf8:	fc442783          	lw	a5,-60(s0)
    6bfc:	00400713          	li	a4,4
    6c00:	00e78023          	sb	a4,0(a5)
        return (0u);
    6c04:	00000793          	li	a5,0
    6c08:	1040006f          	j	6d0c <OSQPendAbort+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    6c0c:	fcc42783          	lw	a5,-52(s0)
    6c10:	0007c703          	lbu	a4,0(a5)
    6c14:	00200793          	li	a5,2
    6c18:	00f70c63          	beq	a4,a5,6c30 <OSQPendAbort+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    6c1c:	fc442783          	lw	a5,-60(s0)
    6c20:	00100713          	li	a4,1
    6c24:	00e78023          	sb	a4,0(a5)
        return (0u);
    6c28:	00000793          	li	a5,0
    6c2c:	0e00006f          	j	6d0c <OSQPendAbort+0x140>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6c30:	00800793          	li	a5,8
    6c34:	3007b7f3          	csrrc	a5,mstatus,a5
    6c38:	fef42223          	sw	a5,-28(s0)
    return context;
    6c3c:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    6c40:	fef42423          	sw	a5,-24(s0)
    if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on queue?        */
    6c44:	fcc42783          	lw	a5,-52(s0)
    6c48:	00a7c783          	lbu	a5,10(a5)
    6c4c:	08078e63          	beqz	a5,6ce8 <OSQPendAbort+0x11c>
        nbr_tasks = 0u;
    6c50:	fe0407a3          	sb	zero,-17(s0)
        switch (opt) {
    6c54:	fcb44703          	lbu	a4,-53(s0)
    6c58:	00100793          	li	a5,1
    6c5c:	02f71c63          	bne	a4,a5,6c94 <OSQPendAbort+0xc8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on queue    */
    6c60:	0240006f          	j	6c84 <OSQPendAbort+0xb8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    6c64:	00200693          	li	a3,2
    6c68:	00400613          	li	a2,4
    6c6c:	00000593          	li	a1,0
    6c70:	fcc42503          	lw	a0,-52(s0)
    6c74:	fddfa0ef          	jal	1c50 <OS_EventTaskRdy>
                     nbr_tasks++;
    6c78:	fef44783          	lbu	a5,-17(s0)
    6c7c:	00178793          	add	a5,a5,1
    6c80:	fef407a3          	sb	a5,-17(s0)
                 while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on queue    */
    6c84:	fcc42783          	lw	a5,-52(s0)
    6c88:	00a7c783          	lbu	a5,10(a5)
    6c8c:	fc079ce3          	bnez	a5,6c64 <OSQPendAbort+0x98>
                 }
                 break;
    6c90:	0280006f          	j	6cb8 <OSQPendAbort+0xec>

            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    6c94:	00200693          	li	a3,2
    6c98:	00400613          	li	a2,4
    6c9c:	00000593          	li	a1,0
    6ca0:	fcc42503          	lw	a0,-52(s0)
    6ca4:	fadfa0ef          	jal	1c50 <OS_EventTaskRdy>
                 nbr_tasks++;
    6ca8:	fef44783          	lbu	a5,-17(s0)
    6cac:	00178793          	add	a5,a5,1
    6cb0:	fef407a3          	sb	a5,-17(s0)
                 break;
    6cb4:	00000013          	nop
    6cb8:	fe842783          	lw	a5,-24(s0)
    6cbc:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6cc0:	fe042783          	lw	a5,-32(s0)
    6cc4:	0087f793          	and	a5,a5,8
    6cc8:	3007a073          	csrs	mstatus,a5
}
    6ccc:	00000013          	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    6cd0:	acdfb0ef          	jal	279c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    6cd4:	fc442783          	lw	a5,-60(s0)
    6cd8:	00e00713          	li	a4,14
    6cdc:	00e78023          	sb	a4,0(a5)
        return (nbr_tasks);
    6ce0:	fef44783          	lbu	a5,-17(s0)
    6ce4:	0280006f          	j	6d0c <OSQPendAbort+0x140>
    6ce8:	fe842783          	lw	a5,-24(s0)
    6cec:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6cf0:	fdc42783          	lw	a5,-36(s0)
    6cf4:	0087f793          	and	a5,a5,8
    6cf8:	3007a073          	csrs	mstatus,a5
}
    6cfc:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6d00:	fc442783          	lw	a5,-60(s0)
    6d04:	00078023          	sb	zero,0(a5)
    return (0u);                                           /* No tasks waiting on queue                */
    6d08:	00000793          	li	a5,0
}
    6d0c:	00078513          	mv	a0,a5
    6d10:	03c12083          	lw	ra,60(sp)
    6d14:	03812403          	lw	s0,56(sp)
    6d18:	04010113          	add	sp,sp,64
    6d1c:	00008067          	ret

00006d20 <OSQPost>:
*/

#if OS_Q_POST_EN > 0u
INT8U  OSQPost (OS_EVENT  *pevent,
                void      *pmsg)
{
    6d20:	fc010113          	add	sp,sp,-64
    6d24:	02112e23          	sw	ra,60(sp)
    6d28:	02812c23          	sw	s0,56(sp)
    6d2c:	04010413          	add	s0,sp,64
    6d30:	fca42623          	sw	a0,-52(s0)
    6d34:	fcb42423          	sw	a1,-56(s0)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
    6d38:	fe042623          	sw	zero,-20(s0)
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    6d3c:	fcc42783          	lw	a5,-52(s0)
    6d40:	00079663          	bnez	a5,6d4c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    6d44:	00400793          	li	a5,4
    6d48:	12c0006f          	j	6e74 <OSQPost+0x154>
    }
#endif

    OS_TRACE_Q_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    6d4c:	fcc42783          	lw	a5,-52(s0)
    6d50:	0007c703          	lbu	a4,0(a5)
    6d54:	00200793          	li	a5,2
    6d58:	00f70663          	beq	a4,a5,6d64 <OSQPost+0x44>
        OS_TRACE_Q_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
    6d5c:	00100793          	li	a5,1
    6d60:	1140006f          	j	6e74 <OSQPost+0x154>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6d64:	00800793          	li	a5,8
    6d68:	3007b7f3          	csrrc	a5,mstatus,a5
    6d6c:	fef42223          	sw	a5,-28(s0)
    return context;
    6d70:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    6d74:	fef42623          	sw	a5,-20(s0)
    if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
    6d78:	fcc42783          	lw	a5,-52(s0)
    6d7c:	00a7c783          	lbu	a5,10(a5)
    6d80:	02078e63          	beqz	a5,6dbc <OSQPost+0x9c>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    6d84:	00000693          	li	a3,0
    6d88:	00400613          	li	a2,4
    6d8c:	fc842583          	lw	a1,-56(s0)
    6d90:	fcc42503          	lw	a0,-52(s0)
    6d94:	ebdfa0ef          	jal	1c50 <OS_EventTaskRdy>
    6d98:	fec42783          	lw	a5,-20(s0)
    6d9c:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6da0:	fe042783          	lw	a5,-32(s0)
    6da4:	0087f793          	and	a5,a5,8
    6da8:	3007a073          	csrs	mstatus,a5
}
    6dac:	00000013          	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    6db0:	9edfb0ef          	jal	279c <OS_Sched>
        OS_TRACE_Q_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
    6db4:	00000793          	li	a5,0
    6db8:	0bc0006f          	j	6e74 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    6dbc:	fcc42783          	lw	a5,-52(s0)
    6dc0:	0047a783          	lw	a5,4(a5)
    6dc4:	fef42423          	sw	a5,-24(s0)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    6dc8:	fe842783          	lw	a5,-24(s0)
    6dcc:	0167d703          	lhu	a4,22(a5)
    6dd0:	fe842783          	lw	a5,-24(s0)
    6dd4:	0147d783          	lhu	a5,20(a5)
    6dd8:	02f76263          	bltu	a4,a5,6dfc <OSQPost+0xdc>
    6ddc:	fec42783          	lw	a5,-20(s0)
    6de0:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6de4:	fdc42783          	lw	a5,-36(s0)
    6de8:	0087f793          	and	a5,a5,8
    6dec:	3007a073          	csrs	mstatus,a5
}
    6df0:	00000013          	nop
        OS_EXIT_CRITICAL();
        OS_TRACE_Q_POST_EXIT(OS_ERR_Q_FULL);
        return (OS_ERR_Q_FULL);
    6df4:	01e00793          	li	a5,30
    6df8:	07c0006f          	j	6e74 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    6dfc:	fe842783          	lw	a5,-24(s0)
    6e00:	00c7a783          	lw	a5,12(a5)
    6e04:	00478693          	add	a3,a5,4
    6e08:	fe842703          	lw	a4,-24(s0)
    6e0c:	00d72623          	sw	a3,12(a4)
    6e10:	fc842703          	lw	a4,-56(s0)
    6e14:	00e7a023          	sw	a4,0(a5)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    6e18:	fe842783          	lw	a5,-24(s0)
    6e1c:	0167d783          	lhu	a5,22(a5)
    6e20:	00178793          	add	a5,a5,1
    6e24:	01079713          	sll	a4,a5,0x10
    6e28:	01075713          	srl	a4,a4,0x10
    6e2c:	fe842783          	lw	a5,-24(s0)
    6e30:	00e79b23          	sh	a4,22(a5)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    6e34:	fe842783          	lw	a5,-24(s0)
    6e38:	00c7a703          	lw	a4,12(a5)
    6e3c:	fe842783          	lw	a5,-24(s0)
    6e40:	0087a783          	lw	a5,8(a5)
    6e44:	00f71a63          	bne	a4,a5,6e58 <OSQPost+0x138>
        pq->OSQIn = pq->OSQStart;
    6e48:	fe842783          	lw	a5,-24(s0)
    6e4c:	0047a703          	lw	a4,4(a5)
    6e50:	fe842783          	lw	a5,-24(s0)
    6e54:	00e7a623          	sw	a4,12(a5)
    6e58:	fec42783          	lw	a5,-20(s0)
    6e5c:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6e60:	fd842783          	lw	a5,-40(s0)
    6e64:	0087f793          	and	a5,a5,8
    6e68:	3007a073          	csrs	mstatus,a5
}
    6e6c:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    OS_TRACE_Q_POST_EXIT(OS_ERR_NONE);

    return (OS_ERR_NONE);
    6e70:	00000793          	li	a5,0
}
    6e74:	00078513          	mv	a0,a5
    6e78:	03c12083          	lw	ra,60(sp)
    6e7c:	03812403          	lw	s0,56(sp)
    6e80:	04010113          	add	sp,sp,64
    6e84:	00008067          	ret

00006e88 <OSQPostFront>:
*/

#if OS_Q_POST_FRONT_EN > 0u
INT8U  OSQPostFront (OS_EVENT  *pevent,
                     void      *pmsg)
{
    6e88:	fc010113          	add	sp,sp,-64
    6e8c:	02112e23          	sw	ra,60(sp)
    6e90:	02812c23          	sw	s0,56(sp)
    6e94:	04010413          	add	s0,sp,64
    6e98:	fca42623          	sw	a0,-52(s0)
    6e9c:	fcb42423          	sw	a1,-56(s0)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
    6ea0:	fe042623          	sw	zero,-20(s0)
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6ea4:	fcc42783          	lw	a5,-52(s0)
    6ea8:	00079663          	bnez	a5,6eb4 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    6eac:	00400793          	li	a5,4
    6eb0:	1340006f          	j	6fe4 <OSQPostFront+0x15c>
    }
#endif

    OS_TRACE_Q_POST_FRONT_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    6eb4:	fcc42783          	lw	a5,-52(s0)
    6eb8:	0007c703          	lbu	a4,0(a5)
    6ebc:	00200793          	li	a5,2
    6ec0:	00f70663          	beq	a4,a5,6ecc <OSQPostFront+0x44>
        OS_TRACE_Q_POST_FRONT_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
    6ec4:	00100793          	li	a5,1
    6ec8:	11c0006f          	j	6fe4 <OSQPostFront+0x15c>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6ecc:	00800793          	li	a5,8
    6ed0:	3007b7f3          	csrrc	a5,mstatus,a5
    6ed4:	fef42223          	sw	a5,-28(s0)
    return context;
    6ed8:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    6edc:	fef42623          	sw	a5,-20(s0)
    if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on queue              */
    6ee0:	fcc42783          	lw	a5,-52(s0)
    6ee4:	00a7c783          	lbu	a5,10(a5)
    6ee8:	02078e63          	beqz	a5,6f24 <OSQPostFront+0x9c>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    6eec:	00000693          	li	a3,0
    6ef0:	00400613          	li	a2,4
    6ef4:	fc842583          	lw	a1,-56(s0)
    6ef8:	fcc42503          	lw	a0,-52(s0)
    6efc:	d55fa0ef          	jal	1c50 <OS_EventTaskRdy>
    6f00:	fec42783          	lw	a5,-20(s0)
    6f04:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6f08:	fe042783          	lw	a5,-32(s0)
    6f0c:	0087f793          	and	a5,a5,8
    6f10:	3007a073          	csrs	mstatus,a5
}
    6f14:	00000013          	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    6f18:	885fb0ef          	jal	279c <OS_Sched>
        OS_TRACE_Q_POST_FRONT_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
    6f1c:	00000793          	li	a5,0
    6f20:	0c40006f          	j	6fe4 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    6f24:	fcc42783          	lw	a5,-52(s0)
    6f28:	0047a783          	lw	a5,4(a5)
    6f2c:	fef42423          	sw	a5,-24(s0)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    6f30:	fe842783          	lw	a5,-24(s0)
    6f34:	0167d703          	lhu	a4,22(a5)
    6f38:	fe842783          	lw	a5,-24(s0)
    6f3c:	0147d783          	lhu	a5,20(a5)
    6f40:	02f76263          	bltu	a4,a5,6f64 <OSQPostFront+0xdc>
    6f44:	fec42783          	lw	a5,-20(s0)
    6f48:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6f4c:	fdc42783          	lw	a5,-36(s0)
    6f50:	0087f793          	and	a5,a5,8
    6f54:	3007a073          	csrs	mstatus,a5
}
    6f58:	00000013          	nop
        OS_EXIT_CRITICAL();
        OS_TRACE_Q_POST_FRONT_EXIT(OS_ERR_Q_FULL);
        return (OS_ERR_Q_FULL);
    6f5c:	01e00793          	li	a5,30
    6f60:	0840006f          	j	6fe4 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    6f64:	fe842783          	lw	a5,-24(s0)
    6f68:	0107a703          	lw	a4,16(a5)
    6f6c:	fe842783          	lw	a5,-24(s0)
    6f70:	0047a783          	lw	a5,4(a5)
    6f74:	00f71a63          	bne	a4,a5,6f88 <OSQPostFront+0x100>
        pq->OSQOut = pq->OSQEnd;
    6f78:	fe842783          	lw	a5,-24(s0)
    6f7c:	0087a703          	lw	a4,8(a5)
    6f80:	fe842783          	lw	a5,-24(s0)
    6f84:	00e7a823          	sw	a4,16(a5)
    }
    pq->OSQOut--;
    6f88:	fe842783          	lw	a5,-24(s0)
    6f8c:	0107a783          	lw	a5,16(a5)
    6f90:	ffc78713          	add	a4,a5,-4
    6f94:	fe842783          	lw	a5,-24(s0)
    6f98:	00e7a823          	sw	a4,16(a5)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    6f9c:	fe842783          	lw	a5,-24(s0)
    6fa0:	0107a783          	lw	a5,16(a5)
    6fa4:	fc842703          	lw	a4,-56(s0)
    6fa8:	00e7a023          	sw	a4,0(a5)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    6fac:	fe842783          	lw	a5,-24(s0)
    6fb0:	0167d783          	lhu	a5,22(a5)
    6fb4:	00178793          	add	a5,a5,1
    6fb8:	01079713          	sll	a4,a5,0x10
    6fbc:	01075713          	srl	a4,a4,0x10
    6fc0:	fe842783          	lw	a5,-24(s0)
    6fc4:	00e79b23          	sh	a4,22(a5)
    6fc8:	fec42783          	lw	a5,-20(s0)
    6fcc:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    6fd0:	fd842783          	lw	a5,-40(s0)
    6fd4:	0087f793          	and	a5,a5,8
    6fd8:	3007a073          	csrs	mstatus,a5
}
    6fdc:	00000013          	nop
    OS_EXIT_CRITICAL();
    OS_TRACE_Q_POST_FRONT_EXIT(OS_ERR_NONE);
    return (OS_ERR_NONE);
    6fe0:	00000793          	li	a5,0
}
    6fe4:	00078513          	mv	a0,a5
    6fe8:	03c12083          	lw	ra,60(sp)
    6fec:	03812403          	lw	s0,56(sp)
    6ff0:	04010113          	add	sp,sp,64
    6ff4:	00008067          	ret

00006ff8 <OSQPostOpt>:

#if OS_Q_POST_OPT_EN > 0u
INT8U  OSQPostOpt (OS_EVENT  *pevent,
                   void      *pmsg,
                   INT8U      opt)
{
    6ff8:	fc010113          	add	sp,sp,-64
    6ffc:	02112e23          	sw	ra,60(sp)
    7000:	02812c23          	sw	s0,56(sp)
    7004:	04010413          	add	s0,sp,64
    7008:	fca42623          	sw	a0,-52(s0)
    700c:	fcb42423          	sw	a1,-56(s0)
    7010:	00060793          	mv	a5,a2
    7014:	fcf403a3          	sb	a5,-57(s0)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
    7018:	fe042623          	sw	zero,-20(s0)
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    701c:	fcc42783          	lw	a5,-52(s0)
    7020:	00079663          	bnez	a5,702c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    7024:	00400793          	li	a5,4
    7028:	1c40006f          	j	71ec <OSQPostOpt+0x1f4>
    }
#endif

    OS_TRACE_Q_POST_OPT_ENTER(pevent, opt);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    702c:	fcc42783          	lw	a5,-52(s0)
    7030:	0007c703          	lbu	a4,0(a5)
    7034:	00200793          	li	a5,2
    7038:	00f70663          	beq	a4,a5,7044 <OSQPostOpt+0x4c>
        OS_TRACE_Q_POST_OPT_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
    703c:	00100793          	li	a5,1
    7040:	1ac0006f          	j	71ec <OSQPostOpt+0x1f4>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7044:	00800793          	li	a5,8
    7048:	3007b7f3          	csrrc	a5,mstatus,a5
    704c:	fef42223          	sw	a5,-28(s0)
    return context;
    7050:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    7054:	fef42623          	sw	a5,-20(s0)
    if (pevent->OSEventGrp != 0x00u) {                /* See if any task pending on queue              */
    7058:	fcc42783          	lw	a5,-52(s0)
    705c:	00a7c783          	lbu	a5,10(a5)
    7060:	06078e63          	beqz	a5,70dc <OSQPostOpt+0xe4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
    7064:	fc744783          	lbu	a5,-57(s0)
    7068:	0017f793          	and	a5,a5,1
    706c:	02078663          	beqz	a5,7098 <OSQPostOpt+0xa0>
            while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on queue       */
    7070:	0180006f          	j	7088 <OSQPostOpt+0x90>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    7074:	00000693          	li	a3,0
    7078:	00400613          	li	a2,4
    707c:	fc842583          	lw	a1,-56(s0)
    7080:	fcc42503          	lw	a0,-52(s0)
    7084:	bcdfa0ef          	jal	1c50 <OS_EventTaskRdy>
            while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on queue       */
    7088:	fcc42783          	lw	a5,-52(s0)
    708c:	00a7c783          	lbu	a5,10(a5)
    7090:	fe0792e3          	bnez	a5,7074 <OSQPostOpt+0x7c>
    7094:	0180006f          	j	70ac <OSQPostOpt+0xb4>
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    7098:	00000693          	li	a3,0
    709c:	00400613          	li	a2,4
    70a0:	fc842583          	lw	a1,-56(s0)
    70a4:	fcc42503          	lw	a0,-52(s0)
    70a8:	ba9fa0ef          	jal	1c50 <OS_EventTaskRdy>
    70ac:	fec42783          	lw	a5,-20(s0)
    70b0:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    70b4:	fe042783          	lw	a5,-32(s0)
    70b8:	0087f793          	and	a5,a5,8
    70bc:	3007a073          	csrs	mstatus,a5
}
    70c0:	00000013          	nop
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
    70c4:	fc744783          	lbu	a5,-57(s0)
    70c8:	0047f793          	and	a5,a5,4
    70cc:	00079463          	bnez	a5,70d4 <OSQPostOpt+0xdc>
            OS_Sched();                               /* Find highest priority task ready to run       */
    70d0:	eccfb0ef          	jal	279c <OS_Sched>
        }
        OS_TRACE_Q_POST_OPT_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
    70d4:	00000793          	li	a5,0
    70d8:	1140006f          	j	71ec <OSQPostOpt+0x1f4>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    70dc:	fcc42783          	lw	a5,-52(s0)
    70e0:	0047a783          	lw	a5,4(a5)
    70e4:	fef42423          	sw	a5,-24(s0)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    70e8:	fe842783          	lw	a5,-24(s0)
    70ec:	0167d703          	lhu	a4,22(a5)
    70f0:	fe842783          	lw	a5,-24(s0)
    70f4:	0147d783          	lhu	a5,20(a5)
    70f8:	02f76263          	bltu	a4,a5,711c <OSQPostOpt+0x124>
    70fc:	fec42783          	lw	a5,-20(s0)
    7100:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7104:	fdc42783          	lw	a5,-36(s0)
    7108:	0087f793          	and	a5,a5,8
    710c:	3007a073          	csrs	mstatus,a5
}
    7110:	00000013          	nop
        OS_EXIT_CRITICAL();
        OS_TRACE_Q_POST_OPT_EXIT(OS_ERR_Q_FULL);
        return (OS_ERR_Q_FULL);
    7114:	01e00793          	li	a5,30
    7118:	0d40006f          	j	71ec <OSQPostOpt+0x1f4>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00u) {         /* Do we post to the FRONT of the queue?         */
    711c:	fc744783          	lbu	a5,-57(s0)
    7120:	0027f793          	and	a5,a5,2
    7124:	04078863          	beqz	a5,7174 <OSQPostOpt+0x17c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    7128:	fe842783          	lw	a5,-24(s0)
    712c:	0107a703          	lw	a4,16(a5)
    7130:	fe842783          	lw	a5,-24(s0)
    7134:	0047a783          	lw	a5,4(a5)
    7138:	00f71a63          	bne	a4,a5,714c <OSQPostOpt+0x154>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    713c:	fe842783          	lw	a5,-24(s0)
    7140:	0087a703          	lw	a4,8(a5)
    7144:	fe842783          	lw	a5,-24(s0)
    7148:	00e7a823          	sw	a4,16(a5)
        }
        pq->OSQOut--;
    714c:	fe842783          	lw	a5,-24(s0)
    7150:	0107a783          	lw	a5,16(a5)
    7154:	ffc78713          	add	a4,a5,-4
    7158:	fe842783          	lw	a5,-24(s0)
    715c:	00e7a823          	sw	a4,16(a5)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    7160:	fe842783          	lw	a5,-24(s0)
    7164:	0107a783          	lw	a5,16(a5)
    7168:	fc842703          	lw	a4,-56(s0)
    716c:	00e7a023          	sw	a4,0(a5)
    7170:	0440006f          	j	71b4 <OSQPostOpt+0x1bc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    7174:	fe842783          	lw	a5,-24(s0)
    7178:	00c7a783          	lw	a5,12(a5)
    717c:	00478693          	add	a3,a5,4
    7180:	fe842703          	lw	a4,-24(s0)
    7184:	00d72623          	sw	a3,12(a4)
    7188:	fc842703          	lw	a4,-56(s0)
    718c:	00e7a023          	sw	a4,0(a5)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    7190:	fe842783          	lw	a5,-24(s0)
    7194:	00c7a703          	lw	a4,12(a5)
    7198:	fe842783          	lw	a5,-24(s0)
    719c:	0087a783          	lw	a5,8(a5)
    71a0:	00f71a63          	bne	a4,a5,71b4 <OSQPostOpt+0x1bc>
            pq->OSQIn = pq->OSQStart;
    71a4:	fe842783          	lw	a5,-24(s0)
    71a8:	0047a703          	lw	a4,4(a5)
    71ac:	fe842783          	lw	a5,-24(s0)
    71b0:	00e7a623          	sw	a4,12(a5)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    71b4:	fe842783          	lw	a5,-24(s0)
    71b8:	0167d783          	lhu	a5,22(a5)
    71bc:	00178793          	add	a5,a5,1
    71c0:	01079713          	sll	a4,a5,0x10
    71c4:	01075713          	srl	a4,a4,0x10
    71c8:	fe842783          	lw	a5,-24(s0)
    71cc:	00e79b23          	sh	a4,22(a5)
    71d0:	fec42783          	lw	a5,-20(s0)
    71d4:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    71d8:	fd842783          	lw	a5,-40(s0)
    71dc:	0087f793          	and	a5,a5,8
    71e0:	3007a073          	csrs	mstatus,a5
}
    71e4:	00000013          	nop
    OS_EXIT_CRITICAL();
    OS_TRACE_Q_POST_OPT_EXIT(OS_ERR_NONE);
    return (OS_ERR_NONE);
    71e8:	00000793          	li	a5,0
}
    71ec:	00078513          	mv	a0,a5
    71f0:	03c12083          	lw	ra,60(sp)
    71f4:	03812403          	lw	s0,56(sp)
    71f8:	04010113          	add	sp,sp,64
    71fc:	00008067          	ret

00007200 <OSQQuery>:
*/

#if OS_Q_QUERY_EN > 0u
INT8U  OSQQuery (OS_EVENT  *pevent,
                 OS_Q_DATA *p_q_data)
{
    7200:	fc010113          	add	sp,sp,-64
    7204:	02812e23          	sw	s0,60(sp)
    7208:	04010413          	add	s0,sp,64
    720c:	fca42623          	sw	a0,-52(s0)
    7210:	fcb42423          	sw	a1,-56(s0)
    OS_Q       *pq;
    INT8U       i;
    OS_PRIO    *psrc;
    OS_PRIO    *pdest;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR   cpu_sr = 0u;
    7214:	fe042023          	sw	zero,-32(s0)
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    7218:	fcc42783          	lw	a5,-52(s0)
    721c:	00079663          	bnez	a5,7228 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    7220:	00400793          	li	a5,4
    7224:	11c0006f          	j	7340 <OSQQuery+0x140>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    7228:	fc842783          	lw	a5,-56(s0)
    722c:	00079663          	bnez	a5,7238 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    7230:	00900793          	li	a5,9
    7234:	10c0006f          	j	7340 <OSQQuery+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    7238:	fcc42783          	lw	a5,-52(s0)
    723c:	0007c703          	lbu	a4,0(a5)
    7240:	00200793          	li	a5,2
    7244:	00f70663          	beq	a4,a5,7250 <OSQQuery+0x50>
        return (OS_ERR_EVENT_TYPE);
    7248:	00100793          	li	a5,1
    724c:	0f40006f          	j	7340 <OSQQuery+0x140>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7250:	00800793          	li	a5,8
    7254:	3007b7f3          	csrrc	a5,mstatus,a5
    7258:	fcf42c23          	sw	a5,-40(s0)
    return context;
    725c:	fd842783          	lw	a5,-40(s0)
    }
    OS_ENTER_CRITICAL();
    7260:	fef42023          	sw	a5,-32(s0)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    7264:	fcc42783          	lw	a5,-52(s0)
    7268:	00a7c703          	lbu	a4,10(a5)
    726c:	fc842783          	lw	a5,-56(s0)
    7270:	00e785a3          	sb	a4,11(a5)
    psrc                 = &pevent->OSEventTbl[0];
    7274:	fcc42783          	lw	a5,-52(s0)
    7278:	00b78793          	add	a5,a5,11
    727c:	fef42423          	sw	a5,-24(s0)
    pdest                = &p_q_data->OSEventTbl[0];
    7280:	fc842783          	lw	a5,-56(s0)
    7284:	00878793          	add	a5,a5,8
    7288:	fef42223          	sw	a5,-28(s0)
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
    728c:	fe0407a3          	sb	zero,-17(s0)
    7290:	0300006f          	j	72c0 <OSQQuery+0xc0>
        *pdest++ = *psrc++;
    7294:	fe842703          	lw	a4,-24(s0)
    7298:	00170793          	add	a5,a4,1
    729c:	fef42423          	sw	a5,-24(s0)
    72a0:	fe442783          	lw	a5,-28(s0)
    72a4:	00178693          	add	a3,a5,1
    72a8:	fed42223          	sw	a3,-28(s0)
    72ac:	00074703          	lbu	a4,0(a4)
    72b0:	00e78023          	sb	a4,0(a5)
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
    72b4:	fef44783          	lbu	a5,-17(s0)
    72b8:	00178793          	add	a5,a5,1
    72bc:	fef407a3          	sb	a5,-17(s0)
    72c0:	fef44703          	lbu	a4,-17(s0)
    72c4:	00200793          	li	a5,2
    72c8:	fce7f6e3          	bgeu	a5,a4,7294 <OSQQuery+0x94>
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    72cc:	fcc42783          	lw	a5,-52(s0)
    72d0:	0047a783          	lw	a5,4(a5)
    72d4:	fcf42e23          	sw	a5,-36(s0)
    if (pq->OSQEntries > 0u) {
    72d8:	fdc42783          	lw	a5,-36(s0)
    72dc:	0167d783          	lhu	a5,22(a5)
    72e0:	00078e63          	beqz	a5,72fc <OSQQuery+0xfc>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    72e4:	fdc42783          	lw	a5,-36(s0)
    72e8:	0107a783          	lw	a5,16(a5)
    72ec:	0007a703          	lw	a4,0(a5)
    72f0:	fc842783          	lw	a5,-56(s0)
    72f4:	00e7a023          	sw	a4,0(a5)
    72f8:	00c0006f          	j	7304 <OSQQuery+0x104>
    } else {
        p_q_data->OSMsg = (void *)0;
    72fc:	fc842783          	lw	a5,-56(s0)
    7300:	0007a023          	sw	zero,0(a5)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    7304:	fdc42783          	lw	a5,-36(s0)
    7308:	0167d703          	lhu	a4,22(a5)
    730c:	fc842783          	lw	a5,-56(s0)
    7310:	00e79223          	sh	a4,4(a5)
    p_q_data->OSQSize = pq->OSQSize;
    7314:	fdc42783          	lw	a5,-36(s0)
    7318:	0147d703          	lhu	a4,20(a5)
    731c:	fc842783          	lw	a5,-56(s0)
    7320:	00e79323          	sh	a4,6(a5)
    7324:	fe042783          	lw	a5,-32(s0)
    7328:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    732c:	fd442783          	lw	a5,-44(s0)
    7330:	0087f793          	and	a5,a5,8
    7334:	3007a073          	csrs	mstatus,a5
}
    7338:	00000013          	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    733c:	00000793          	li	a5,0
}
    7340:	00078513          	mv	a0,a5
    7344:	03c12403          	lw	s0,60(sp)
    7348:	04010113          	add	sp,sp,64
    734c:	00008067          	ret

00007350 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    7350:	fe010113          	add	sp,sp,-32
    7354:	00112e23          	sw	ra,28(sp)
    7358:	00812c23          	sw	s0,24(sp)
    735c:	02010413          	add	s0,sp,32
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    7360:	1e000593          	li	a1,480
    7364:	0002e7b7          	lui	a5,0x2e
    7368:	fcc78513          	add	a0,a5,-52 # 2dfcc <OSQTbl>
    736c:	b74fb0ef          	jal	26e0 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
    7370:	fe041723          	sh	zero,-18(s0)
    7374:	0700006f          	j	73e4 <OS_QInit+0x94>
        ix_next = ix + 1u;
    7378:	fee45783          	lhu	a5,-18(s0)
    737c:	00178793          	add	a5,a5,1
    7380:	fef41323          	sh	a5,-26(s0)
        pq1 = &OSQTbl[ix];
    7384:	fee45703          	lhu	a4,-18(s0)
    7388:	00070793          	mv	a5,a4
    738c:	00179793          	sll	a5,a5,0x1
    7390:	00e787b3          	add	a5,a5,a4
    7394:	00379793          	sll	a5,a5,0x3
    7398:	0002e737          	lui	a4,0x2e
    739c:	fcc70713          	add	a4,a4,-52 # 2dfcc <OSQTbl>
    73a0:	00e787b3          	add	a5,a5,a4
    73a4:	fef42423          	sw	a5,-24(s0)
        pq2 = &OSQTbl[ix_next];
    73a8:	fe645703          	lhu	a4,-26(s0)
    73ac:	00070793          	mv	a5,a4
    73b0:	00179793          	sll	a5,a5,0x1
    73b4:	00e787b3          	add	a5,a5,a4
    73b8:	00379793          	sll	a5,a5,0x3
    73bc:	0002e737          	lui	a4,0x2e
    73c0:	fcc70713          	add	a4,a4,-52 # 2dfcc <OSQTbl>
    73c4:	00e787b3          	add	a5,a5,a4
    73c8:	fef42023          	sw	a5,-32(s0)
        pq1->OSQPtr = pq2;
    73cc:	fe842783          	lw	a5,-24(s0)
    73d0:	fe042703          	lw	a4,-32(s0)
    73d4:	00e7a023          	sw	a4,0(a5)
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
    73d8:	fee45783          	lhu	a5,-18(s0)
    73dc:	00178793          	add	a5,a5,1
    73e0:	fef41723          	sh	a5,-18(s0)
    73e4:	fee45703          	lhu	a4,-18(s0)
    73e8:	01200793          	li	a5,18
    73ec:	f8e7f6e3          	bgeu	a5,a4,7378 <OS_QInit+0x28>
    }
    pq1         = &OSQTbl[ix];
    73f0:	fee45703          	lhu	a4,-18(s0)
    73f4:	00070793          	mv	a5,a4
    73f8:	00179793          	sll	a5,a5,0x1
    73fc:	00e787b3          	add	a5,a5,a4
    7400:	00379793          	sll	a5,a5,0x3
    7404:	0002e737          	lui	a4,0x2e
    7408:	fcc70713          	add	a4,a4,-52 # 2dfcc <OSQTbl>
    740c:	00e787b3          	add	a5,a5,a4
    7410:	fef42423          	sw	a5,-24(s0)
    pq1->OSQPtr = (OS_Q *)0;
    7414:	fe842783          	lw	a5,-24(s0)
    7418:	0007a023          	sw	zero,0(a5)
    OSQFreeList = &OSQTbl[0];
    741c:	000287b7          	lui	a5,0x28
    7420:	0002e737          	lui	a4,0x2e
    7424:	fcc70713          	add	a4,a4,-52 # 2dfcc <OSQTbl>
    7428:	82e7aa23          	sw	a4,-1996(a5) # 27834 <OSQFreeList>
#endif
}
    742c:	00000013          	nop
    7430:	01c12083          	lw	ra,28(sp)
    7434:	01812403          	lw	s0,24(sp)
    7438:	02010113          	add	sp,sp,32
    743c:	00008067          	ret

00007440 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0u
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    7440:	fd010113          	add	sp,sp,-48
    7444:	02812623          	sw	s0,44(sp)
    7448:	03010413          	add	s0,sp,48
    744c:	fca42e23          	sw	a0,-36(s0)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
    7450:	fe042623          	sw	zero,-20(s0)
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7454:	fdc42783          	lw	a5,-36(s0)
    7458:	00079663          	bnez	a5,7464 <OSSemAccept+0x24>
        return (0u);
    745c:	00000793          	li	a5,0
    7460:	07c0006f          	j	74dc <OSSemAccept+0x9c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    7464:	fdc42783          	lw	a5,-36(s0)
    7468:	0007c703          	lbu	a4,0(a5)
    746c:	00300793          	li	a5,3
    7470:	00f70663          	beq	a4,a5,747c <OSSemAccept+0x3c>
        return (0u);
    7474:	00000793          	li	a5,0
    7478:	0640006f          	j	74dc <OSSemAccept+0x9c>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    747c:	00800793          	li	a5,8
    7480:	3007b7f3          	csrrc	a5,mstatus,a5
    7484:	fef42223          	sw	a5,-28(s0)
    return context;
    7488:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    748c:	fef42623          	sw	a5,-20(s0)
    cnt = pevent->OSEventCnt;
    7490:	fdc42783          	lw	a5,-36(s0)
    7494:	0087d783          	lhu	a5,8(a5)
    7498:	fef41523          	sh	a5,-22(s0)
    if (cnt > 0u) {                                   /* See if resource is available                  */
    749c:	fea45783          	lhu	a5,-22(s0)
    74a0:	02078063          	beqz	a5,74c0 <OSSemAccept+0x80>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    74a4:	fdc42783          	lw	a5,-36(s0)
    74a8:	0087d783          	lhu	a5,8(a5)
    74ac:	fff78793          	add	a5,a5,-1
    74b0:	01079713          	sll	a4,a5,0x10
    74b4:	01075713          	srl	a4,a4,0x10
    74b8:	fdc42783          	lw	a5,-36(s0)
    74bc:	00e79423          	sh	a4,8(a5)
    74c0:	fec42783          	lw	a5,-20(s0)
    74c4:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    74c8:	fe042783          	lw	a5,-32(s0)
    74cc:	0087f793          	and	a5,a5,8
    74d0:	3007a073          	csrs	mstatus,a5
}
    74d4:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    74d8:	fea45783          	lhu	a5,-22(s0)
}
    74dc:	00078513          	mv	a0,a5
    74e0:	02c12403          	lw	s0,44(sp)
    74e4:	03010113          	add	sp,sp,48
    74e8:	00008067          	ret

000074ec <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    74ec:	fd010113          	add	sp,sp,-48
    74f0:	02112623          	sw	ra,44(sp)
    74f4:	02812423          	sw	s0,40(sp)
    74f8:	03010413          	add	s0,sp,48
    74fc:	00050793          	mv	a5,a0
    7500:	fcf41f23          	sh	a5,-34(s0)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
    7504:	fe042623          	sw	zero,-20(s0)
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
    7508:	000287b7          	lui	a5,0x28
    750c:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    7510:	00078663          	beqz	a5,751c <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    7514:	00000793          	li	a5,0
    7518:	0a00006f          	j	75b8 <OSSemCreate+0xcc>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    751c:	00800793          	li	a5,8
    7520:	3007b7f3          	csrrc	a5,mstatus,a5
    7524:	fef42223          	sw	a5,-28(s0)
    return context;
    7528:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    752c:	fef42623          	sw	a5,-20(s0)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    7530:	000277b7          	lui	a5,0x27
    7534:	7f47a783          	lw	a5,2036(a5) # 277f4 <OSEventFreeList>
    7538:	fef42423          	sw	a5,-24(s0)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    753c:	000277b7          	lui	a5,0x27
    7540:	7f47a783          	lw	a5,2036(a5) # 277f4 <OSEventFreeList>
    7544:	00078c63          	beqz	a5,755c <OSSemCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    7548:	000277b7          	lui	a5,0x27
    754c:	7f47a783          	lw	a5,2036(a5) # 277f4 <OSEventFreeList>
    7550:	0047a703          	lw	a4,4(a5)
    7554:	000277b7          	lui	a5,0x27
    7558:	7ee7aa23          	sw	a4,2036(a5) # 277f4 <OSEventFreeList>
    755c:	fec42783          	lw	a5,-20(s0)
    7560:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7564:	fe042783          	lw	a5,-32(s0)
    7568:	0087f793          	and	a5,a5,8
    756c:	3007a073          	csrs	mstatus,a5
}
    7570:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    7574:	fe842783          	lw	a5,-24(s0)
    7578:	02078e63          	beqz	a5,75b4 <OSSemCreate+0xc8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    757c:	fe842783          	lw	a5,-24(s0)
    7580:	00300713          	li	a4,3
    7584:	00e78023          	sb	a4,0(a5)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    7588:	fe842783          	lw	a5,-24(s0)
    758c:	fde45703          	lhu	a4,-34(s0)
    7590:	00e79423          	sh	a4,8(a5)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    7594:	fe842783          	lw	a5,-24(s0)
    7598:	0007a223          	sw	zero,4(a5)
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
    759c:	fe842783          	lw	a5,-24(s0)
    75a0:	00023737          	lui	a4,0x23
    75a4:	09870713          	add	a4,a4,152 # 23098 <OSUnMapTbl+0x134>
    75a8:	00e7a823          	sw	a4,16(a5)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    75ac:	fe842503          	lw	a0,-24(s0)
    75b0:	c95fa0ef          	jal	2244 <OS_EventWaitListInit>

        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
    75b4:	fe842783          	lw	a5,-24(s0)
}
    75b8:	00078513          	mv	a0,a5
    75bc:	02c12083          	lw	ra,44(sp)
    75c0:	02812403          	lw	s0,40(sp)
    75c4:	03010113          	add	sp,sp,48
    75c8:	00008067          	ret

000075cc <OSSemDel>:

#if OS_SEM_DEL_EN > 0u
OS_EVENT  *OSSemDel (OS_EVENT  *pevent,
                     INT8U      opt,
                     INT8U     *perr)
{
    75cc:	fc010113          	add	sp,sp,-64
    75d0:	02112e23          	sw	ra,60(sp)
    75d4:	02812c23          	sw	s0,56(sp)
    75d8:	04010413          	add	s0,sp,64
    75dc:	fca42623          	sw	a0,-52(s0)
    75e0:	00058793          	mv	a5,a1
    75e4:	fcc42223          	sw	a2,-60(s0)
    75e8:	fcf405a3          	sb	a5,-53(s0)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
    75ec:	fe042223          	sw	zero,-28(s0)
        return ((OS_EVENT *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    75f0:	fcc42783          	lw	a5,-52(s0)
    75f4:	00079c63          	bnez	a5,760c <OSSemDel+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    75f8:	fc442783          	lw	a5,-60(s0)
    75fc:	00400713          	li	a4,4
    7600:	00e78023          	sb	a4,0(a5)
        return (pevent);
    7604:	fcc42783          	lw	a5,-52(s0)
    7608:	1f00006f          	j	77f8 <OSSemDel+0x22c>
    }
#endif

    OS_TRACE_SEM_DEL_ENTER(pevent, opt);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    760c:	fcc42783          	lw	a5,-52(s0)
    7610:	0007c703          	lbu	a4,0(a5)
    7614:	00300793          	li	a5,3
    7618:	00f70c63          	beq	a4,a5,7630 <OSSemDel+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    761c:	fc442783          	lw	a5,-60(s0)
    7620:	00100713          	li	a4,1
    7624:	00e78023          	sb	a4,0(a5)
        OS_TRACE_SEM_DEL_EXIT(*perr);
        return (pevent);
    7628:	fcc42783          	lw	a5,-52(s0)
    762c:	1cc0006f          	j	77f8 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
    7630:	000287b7          	lui	a5,0x28
    7634:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    7638:	00078c63          	beqz	a5,7650 <OSSemDel+0x84>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    763c:	fc442783          	lw	a5,-60(s0)
    7640:	00f00713          	li	a4,15
    7644:	00e78023          	sb	a4,0(a5)
        OS_TRACE_SEM_DEL_EXIT(*perr);
        return (pevent);
    7648:	fcc42783          	lw	a5,-52(s0)
    764c:	1ac0006f          	j	77f8 <OSSemDel+0x22c>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7650:	00800793          	li	a5,8
    7654:	3007b7f3          	csrrc	a5,mstatus,a5
    7658:	fef42023          	sw	a5,-32(s0)
    return context;
    765c:	fe042783          	lw	a5,-32(s0)
    }
    OS_ENTER_CRITICAL();
    7660:	fef42223          	sw	a5,-28(s0)
    if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on semaphore    */
    7664:	fcc42783          	lw	a5,-52(s0)
    7668:	00a7c783          	lbu	a5,10(a5)
    766c:	00078863          	beqz	a5,767c <OSSemDel+0xb0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    7670:	00100793          	li	a5,1
    7674:	fef407a3          	sb	a5,-17(s0)
    7678:	0080006f          	j	7680 <OSSemDel+0xb4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    767c:	fe0407a3          	sb	zero,-17(s0)
    }
    switch (opt) {
    7680:	fcb44783          	lbu	a5,-53(s0)
    7684:	00078863          	beqz	a5,7694 <OSSemDel+0xc8>
    7688:	00100713          	li	a4,1
    768c:	0ae78c63          	beq	a5,a4,7744 <OSSemDel+0x178>
    7690:	1340006f          	j	77c4 <OSSemDel+0x1f8>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    7694:	fef44783          	lbu	a5,-17(s0)
    7698:	06079463          	bnez	a5,7700 <OSSemDel+0x134>
#if OS_EVENT_NAME_EN > 0u
                 pevent->OSEventName    = (INT8U *)(void *)"?";
    769c:	fcc42783          	lw	a5,-52(s0)
    76a0:	00023737          	lui	a4,0x23
    76a4:	09870713          	add	a4,a4,152 # 23098 <OSUnMapTbl+0x134>
    76a8:	00e7a823          	sw	a4,16(a5)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    76ac:	fcc42783          	lw	a5,-52(s0)
    76b0:	00078023          	sb	zero,0(a5)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    76b4:	000277b7          	lui	a5,0x27
    76b8:	7f47a703          	lw	a4,2036(a5) # 277f4 <OSEventFreeList>
    76bc:	fcc42783          	lw	a5,-52(s0)
    76c0:	00e7a223          	sw	a4,4(a5)
                 pevent->OSEventCnt     = 0u;
    76c4:	fcc42783          	lw	a5,-52(s0)
    76c8:	00079423          	sh	zero,8(a5)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    76cc:	000277b7          	lui	a5,0x27
    76d0:	fcc42703          	lw	a4,-52(s0)
    76d4:	7ee7aa23          	sw	a4,2036(a5) # 277f4 <OSEventFreeList>
    76d8:	fe442783          	lw	a5,-28(s0)
    76dc:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    76e0:	fdc42783          	lw	a5,-36(s0)
    76e4:	0087f793          	and	a5,a5,8
    76e8:	3007a073          	csrs	mstatus,a5
}
    76ec:	00000013          	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    76f0:	fc442783          	lw	a5,-60(s0)
    76f4:	00078023          	sb	zero,0(a5)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    76f8:	fe042423          	sw	zero,-24(s0)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    76fc:	0f80006f          	j	77f4 <OSSemDel+0x228>
    7700:	fe442783          	lw	a5,-28(s0)
    7704:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7708:	fd842783          	lw	a5,-40(s0)
    770c:	0087f793          	and	a5,a5,8
    7710:	3007a073          	csrs	mstatus,a5
}
    7714:	00000013          	nop
                 *perr                  = OS_ERR_TASK_WAITING;
    7718:	fc442783          	lw	a5,-60(s0)
    771c:	04900713          	li	a4,73
    7720:	00e78023          	sb	a4,0(a5)
                 pevent_return          = pevent;
    7724:	fcc42783          	lw	a5,-52(s0)
    7728:	fef42423          	sw	a5,-24(s0)
             break;
    772c:	0c80006f          	j	77f4 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    7730:	00200693          	li	a3,2
    7734:	00100613          	li	a2,1
    7738:	00000593          	li	a1,0
    773c:	fcc42503          	lw	a0,-52(s0)
    7740:	d10fa0ef          	jal	1c50 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for semaphore    */
    7744:	fcc42783          	lw	a5,-52(s0)
    7748:	00a7c783          	lbu	a5,10(a5)
    774c:	fe0792e3          	bnez	a5,7730 <OSSemDel+0x164>
             }
#if OS_EVENT_NAME_EN > 0u
             pevent->OSEventName    = (INT8U *)(void *)"?";
    7750:	fcc42783          	lw	a5,-52(s0)
    7754:	00023737          	lui	a4,0x23
    7758:	09870713          	add	a4,a4,152 # 23098 <OSUnMapTbl+0x134>
    775c:	00e7a823          	sw	a4,16(a5)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    7760:	fcc42783          	lw	a5,-52(s0)
    7764:	00078023          	sb	zero,0(a5)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    7768:	000277b7          	lui	a5,0x27
    776c:	7f47a703          	lw	a4,2036(a5) # 277f4 <OSEventFreeList>
    7770:	fcc42783          	lw	a5,-52(s0)
    7774:	00e7a223          	sw	a4,4(a5)
             pevent->OSEventCnt     = 0u;
    7778:	fcc42783          	lw	a5,-52(s0)
    777c:	00079423          	sh	zero,8(a5)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    7780:	000277b7          	lui	a5,0x27
    7784:	fcc42703          	lw	a4,-52(s0)
    7788:	7ee7aa23          	sw	a4,2036(a5) # 277f4 <OSEventFreeList>
    778c:	fe442783          	lw	a5,-28(s0)
    7790:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7794:	fd442783          	lw	a5,-44(s0)
    7798:	0087f793          	and	a5,a5,8
    779c:	3007a073          	csrs	mstatus,a5
}
    77a0:	00000013          	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    77a4:	fef44703          	lbu	a4,-17(s0)
    77a8:	00100793          	li	a5,1
    77ac:	00f71463          	bne	a4,a5,77b4 <OSSemDel+0x1e8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    77b0:	fedfa0ef          	jal	279c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    77b4:	fc442783          	lw	a5,-60(s0)
    77b8:	00078023          	sb	zero,0(a5)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    77bc:	fe042423          	sw	zero,-24(s0)
             break;
    77c0:	0340006f          	j	77f4 <OSSemDel+0x228>
    77c4:	fe442783          	lw	a5,-28(s0)
    77c8:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    77cc:	fd042783          	lw	a5,-48(s0)
    77d0:	0087f793          	and	a5,a5,8
    77d4:	3007a073          	csrs	mstatus,a5
}
    77d8:	00000013          	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    77dc:	fc442783          	lw	a5,-60(s0)
    77e0:	00700713          	li	a4,7
    77e4:	00e78023          	sb	a4,0(a5)
             pevent_return          = pevent;
    77e8:	fcc42783          	lw	a5,-52(s0)
    77ec:	fef42423          	sw	a5,-24(s0)
             break;
    77f0:	00000013          	nop
    }

    OS_TRACE_SEM_DEL_EXIT(*perr);

    return (pevent_return);
    77f4:	fe842783          	lw	a5,-24(s0)
}
    77f8:	00078513          	mv	a0,a5
    77fc:	03c12083          	lw	ra,60(sp)
    7800:	03812403          	lw	s0,56(sp)
    7804:	04010113          	add	sp,sp,64
    7808:	00008067          	ret

0000780c <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
    780c:	fc010113          	add	sp,sp,-64
    7810:	02112e23          	sw	ra,60(sp)
    7814:	02812c23          	sw	s0,56(sp)
    7818:	04010413          	add	s0,sp,64
    781c:	fca42623          	sw	a0,-52(s0)
    7820:	fcb42423          	sw	a1,-56(s0)
    7824:	fcc42223          	sw	a2,-60(s0)
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
    7828:	fe042623          	sw	zero,-20(s0)
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    782c:	fcc42783          	lw	a5,-52(s0)
    7830:	00079a63          	bnez	a5,7844 <OSSemPend+0x38>
        *perr = OS_ERR_PEVENT_NULL;
    7834:	fc442783          	lw	a5,-60(s0)
    7838:	00400713          	li	a4,4
    783c:	00e78023          	sb	a4,0(a5)
        return;
    7840:	1e00006f          	j	7a20 <OSSemPend+0x214>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    7844:	fcc42783          	lw	a5,-52(s0)
    7848:	0007c703          	lbu	a4,0(a5)
    784c:	00300793          	li	a5,3
    7850:	00f70a63          	beq	a4,a5,7864 <OSSemPend+0x58>
        *perr = OS_ERR_EVENT_TYPE;
    7854:	fc442783          	lw	a5,-60(s0)
    7858:	00100713          	li	a4,1
    785c:	00e78023          	sb	a4,0(a5)
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
    7860:	1c00006f          	j	7a20 <OSSemPend+0x214>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
    7864:	000287b7          	lui	a5,0x28
    7868:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    786c:	00078a63          	beqz	a5,7880 <OSSemPend+0x74>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    7870:	fc442783          	lw	a5,-60(s0)
    7874:	00200713          	li	a4,2
    7878:	00e78023          	sb	a4,0(a5)
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
    787c:	1a40006f          	j	7a20 <OSSemPend+0x214>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
    7880:	000287b7          	lui	a5,0x28
    7884:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    7888:	00078a63          	beqz	a5,789c <OSSemPend+0x90>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    788c:	fc442783          	lw	a5,-60(s0)
    7890:	00d00713          	li	a4,13
    7894:	00e78023          	sb	a4,0(a5)
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
    7898:	1880006f          	j	7a20 <OSSemPend+0x214>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    789c:	00800793          	li	a5,8
    78a0:	3007b7f3          	csrrc	a5,mstatus,a5
    78a4:	fef42423          	sw	a5,-24(s0)
    return context;
    78a8:	fe842783          	lw	a5,-24(s0)
    }
    OS_ENTER_CRITICAL();
    78ac:	fef42623          	sw	a5,-20(s0)
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
    78b0:	fcc42783          	lw	a5,-52(s0)
    78b4:	0087d783          	lhu	a5,8(a5)
    78b8:	04078263          	beqz	a5,78fc <OSSemPend+0xf0>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    78bc:	fcc42783          	lw	a5,-52(s0)
    78c0:	0087d783          	lhu	a5,8(a5)
    78c4:	fff78793          	add	a5,a5,-1
    78c8:	01079713          	sll	a4,a5,0x10
    78cc:	01075713          	srl	a4,a4,0x10
    78d0:	fcc42783          	lw	a5,-52(s0)
    78d4:	00e79423          	sh	a4,8(a5)
    78d8:	fec42783          	lw	a5,-20(s0)
    78dc:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    78e0:	fe442783          	lw	a5,-28(s0)
    78e4:	0087f793          	and	a5,a5,8
    78e8:	3007a073          	csrs	mstatus,a5
}
    78ec:	00000013          	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    78f0:	fc442783          	lw	a5,-60(s0)
    78f4:	00078023          	sb	zero,0(a5)
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
    78f8:	1280006f          	j	7a20 <OSSemPend+0x214>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    78fc:	000287b7          	lui	a5,0x28
    7900:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    7904:	0387c703          	lbu	a4,56(a5)
    7908:	000287b7          	lui	a5,0x28
    790c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    7910:	00176713          	or	a4,a4,1
    7914:	0ff77713          	zext.b	a4,a4
    7918:	02e78c23          	sb	a4,56(a5)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    791c:	000287b7          	lui	a5,0x28
    7920:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    7924:	02078ca3          	sb	zero,57(a5)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    7928:	000287b7          	lui	a5,0x28
    792c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    7930:	fc842703          	lw	a4,-56(s0)
    7934:	02e7aa23          	sw	a4,52(a5)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    7938:	fcc42503          	lw	a0,-52(s0)
    793c:	cc0fa0ef          	jal	1dfc <OS_EventTaskWait>
    7940:	fec42783          	lw	a5,-20(s0)
    7944:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7948:	fdc42783          	lw	a5,-36(s0)
    794c:	0087f793          	and	a5,a5,8
    7950:	3007a073          	csrs	mstatus,a5
}
    7954:	00000013          	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    7958:	e45fa0ef          	jal	279c <OS_Sched>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    795c:	00800793          	li	a5,8
    7960:	3007b7f3          	csrrc	a5,mstatus,a5
    7964:	fef42023          	sw	a5,-32(s0)
    return context;
    7968:	fe042783          	lw	a5,-32(s0)
    OS_ENTER_CRITICAL();
    796c:	fef42623          	sw	a5,-20(s0)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    7970:	000287b7          	lui	a5,0x28
    7974:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    7978:	0397c783          	lbu	a5,57(a5)
    797c:	00078863          	beqz	a5,798c <OSSemPend+0x180>
    7980:	00200713          	li	a4,2
    7984:	00e78a63          	beq	a5,a4,7998 <OSSemPend+0x18c>
    7988:	0200006f          	j	79a8 <OSSemPend+0x19c>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    798c:	fc442783          	lw	a5,-60(s0)
    7990:	00078023          	sb	zero,0(a5)
             break;
    7994:	0380006f          	j	79cc <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    7998:	fc442783          	lw	a5,-60(s0)
    799c:	00e00713          	li	a4,14
    79a0:	00e78023          	sb	a4,0(a5)
             break;
    79a4:	0280006f          	j	79cc <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    79a8:	000287b7          	lui	a5,0x28
    79ac:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    79b0:	fcc42583          	lw	a1,-52(s0)
    79b4:	00078513          	mv	a0,a5
    79b8:	ef0fa0ef          	jal	20a8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    79bc:	fc442783          	lw	a5,-60(s0)
    79c0:	00a00713          	li	a4,10
    79c4:	00e78023          	sb	a4,0(a5)
             break;
    79c8:	00000013          	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    79cc:	000287b7          	lui	a5,0x28
    79d0:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    79d4:	02078c23          	sb	zero,56(a5)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    79d8:	000287b7          	lui	a5,0x28
    79dc:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    79e0:	02078ca3          	sb	zero,57(a5)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    79e4:	000287b7          	lui	a5,0x28
    79e8:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    79ec:	0007ae23          	sw	zero,28(a5)
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    79f0:	000287b7          	lui	a5,0x28
    79f4:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    79f8:	0207a023          	sw	zero,32(a5)
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
    79fc:	000287b7          	lui	a5,0x28
    7a00:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    7a04:	0207a223          	sw	zero,36(a5)
    7a08:	fec42783          	lw	a5,-20(s0)
    7a0c:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7a10:	fd842783          	lw	a5,-40(s0)
    7a14:	0087f793          	and	a5,a5,8
    7a18:	3007a073          	csrs	mstatus,a5
}
    7a1c:	00000013          	nop
#endif
    OS_EXIT_CRITICAL();

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
    7a20:	03c12083          	lw	ra,60(sp)
    7a24:	03812403          	lw	s0,56(sp)
    7a28:	04010113          	add	sp,sp,64
    7a2c:	00008067          	ret

00007a30 <OSSemPendAbort>:

#if OS_SEM_PEND_ABORT_EN > 0u
INT8U  OSSemPendAbort (OS_EVENT  *pevent,
                       INT8U      opt,
                       INT8U     *perr)
{
    7a30:	fc010113          	add	sp,sp,-64
    7a34:	02112e23          	sw	ra,60(sp)
    7a38:	02812c23          	sw	s0,56(sp)
    7a3c:	04010413          	add	s0,sp,64
    7a40:	fca42623          	sw	a0,-52(s0)
    7a44:	00058793          	mv	a5,a1
    7a48:	fcc42223          	sw	a2,-60(s0)
    7a4c:	fcf405a3          	sb	a5,-53(s0)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
    7a50:	fe042423          	sw	zero,-24(s0)
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7a54:	fcc42783          	lw	a5,-52(s0)
    7a58:	00079c63          	bnez	a5,7a70 <OSSemPendAbort+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    7a5c:	fc442783          	lw	a5,-60(s0)
    7a60:	00400713          	li	a4,4
    7a64:	00e78023          	sb	a4,0(a5)
        return (0u);
    7a68:	00000793          	li	a5,0
    7a6c:	1040006f          	j	7b70 <OSSemPendAbort+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    7a70:	fcc42783          	lw	a5,-52(s0)
    7a74:	0007c703          	lbu	a4,0(a5)
    7a78:	00300793          	li	a5,3
    7a7c:	00f70c63          	beq	a4,a5,7a94 <OSSemPendAbort+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    7a80:	fc442783          	lw	a5,-60(s0)
    7a84:	00100713          	li	a4,1
    7a88:	00e78023          	sb	a4,0(a5)
        return (0u);
    7a8c:	00000793          	li	a5,0
    7a90:	0e00006f          	j	7b70 <OSSemPendAbort+0x140>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7a94:	00800793          	li	a5,8
    7a98:	3007b7f3          	csrrc	a5,mstatus,a5
    7a9c:	fef42223          	sw	a5,-28(s0)
    return context;
    7aa0:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    7aa4:	fef42423          	sw	a5,-24(s0)
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting on semaphore?         */
    7aa8:	fcc42783          	lw	a5,-52(s0)
    7aac:	00a7c783          	lbu	a5,10(a5)
    7ab0:	08078e63          	beqz	a5,7b4c <OSSemPendAbort+0x11c>
        nbr_tasks = 0u;
    7ab4:	fe0407a3          	sb	zero,-17(s0)
        switch (opt) {
    7ab8:	fcb44703          	lbu	a4,-53(s0)
    7abc:	00100793          	li	a5,1
    7ac0:	02f71c63          	bne	a4,a5,7af8 <OSSemPendAbort+0xc8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0u) {   /* Yes, ready ALL tasks waiting on semaphore     */
    7ac4:	0240006f          	j	7ae8 <OSSemPendAbort+0xb8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    7ac8:	00200693          	li	a3,2
    7acc:	00100613          	li	a2,1
    7ad0:	00000593          	li	a1,0
    7ad4:	fcc42503          	lw	a0,-52(s0)
    7ad8:	978fa0ef          	jal	1c50 <OS_EventTaskRdy>
                     nbr_tasks++;
    7adc:	fef44783          	lbu	a5,-17(s0)
    7ae0:	00178793          	add	a5,a5,1
    7ae4:	fef407a3          	sb	a5,-17(s0)
                 while (pevent->OSEventGrp != 0u) {   /* Yes, ready ALL tasks waiting on semaphore     */
    7ae8:	fcc42783          	lw	a5,-52(s0)
    7aec:	00a7c783          	lbu	a5,10(a5)
    7af0:	fc079ce3          	bnez	a5,7ac8 <OSSemPendAbort+0x98>
                 }
                 break;
    7af4:	0280006f          	j	7b1c <OSSemPendAbort+0xec>

            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    7af8:	00200693          	li	a3,2
    7afc:	00100613          	li	a2,1
    7b00:	00000593          	li	a1,0
    7b04:	fcc42503          	lw	a0,-52(s0)
    7b08:	948fa0ef          	jal	1c50 <OS_EventTaskRdy>
                 nbr_tasks++;
    7b0c:	fef44783          	lbu	a5,-17(s0)
    7b10:	00178793          	add	a5,a5,1
    7b14:	fef407a3          	sb	a5,-17(s0)
                 break;
    7b18:	00000013          	nop
    7b1c:	fe842783          	lw	a5,-24(s0)
    7b20:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7b24:	fe042783          	lw	a5,-32(s0)
    7b28:	0087f793          	and	a5,a5,8
    7b2c:	3007a073          	csrs	mstatus,a5
}
    7b30:	00000013          	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    7b34:	c69fa0ef          	jal	279c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    7b38:	fc442783          	lw	a5,-60(s0)
    7b3c:	00e00713          	li	a4,14
    7b40:	00e78023          	sb	a4,0(a5)
        return (nbr_tasks);
    7b44:	fef44783          	lbu	a5,-17(s0)
    7b48:	0280006f          	j	7b70 <OSSemPendAbort+0x140>
    7b4c:	fe842783          	lw	a5,-24(s0)
    7b50:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7b54:	fdc42783          	lw	a5,-36(s0)
    7b58:	0087f793          	and	a5,a5,8
    7b5c:	3007a073          	csrs	mstatus,a5
}
    7b60:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7b64:	fc442783          	lw	a5,-60(s0)
    7b68:	00078023          	sb	zero,0(a5)
    return (0u);                                      /* No tasks waiting on semaphore                 */
    7b6c:	00000793          	li	a5,0
}
    7b70:	00078513          	mv	a0,a5
    7b74:	03c12083          	lw	ra,60(sp)
    7b78:	03812403          	lw	s0,56(sp)
    7b7c:	04010113          	add	sp,sp,64
    7b80:	00008067          	ret

00007b84 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    7b84:	fc010113          	add	sp,sp,-64
    7b88:	02112e23          	sw	ra,60(sp)
    7b8c:	02812c23          	sw	s0,56(sp)
    7b90:	04010413          	add	s0,sp,64
    7b94:	fca42623          	sw	a0,-52(s0)
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
    7b98:	fe042623          	sw	zero,-20(s0)
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7b9c:	fcc42783          	lw	a5,-52(s0)
    7ba0:	00079663          	bnez	a5,7bac <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    7ba4:	00400793          	li	a5,4
    7ba8:	0e00006f          	j	7c88 <OSSemPost+0x104>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    7bac:	fcc42783          	lw	a5,-52(s0)
    7bb0:	0007c703          	lbu	a4,0(a5)
    7bb4:	00300793          	li	a5,3
    7bb8:	00f70663          	beq	a4,a5,7bc4 <OSSemPost+0x40>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
    7bbc:	00100793          	li	a5,1
    7bc0:	0c80006f          	j	7c88 <OSSemPost+0x104>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7bc4:	00800793          	li	a5,8
    7bc8:	3007b7f3          	csrrc	a5,mstatus,a5
    7bcc:	fef42423          	sw	a5,-24(s0)
    return context;
    7bd0:	fe842783          	lw	a5,-24(s0)
    }
    OS_ENTER_CRITICAL();
    7bd4:	fef42623          	sw	a5,-20(s0)
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
    7bd8:	fcc42783          	lw	a5,-52(s0)
    7bdc:	00a7c783          	lbu	a5,10(a5)
    7be0:	02078e63          	beqz	a5,7c1c <OSSemPost+0x98>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    7be4:	00000693          	li	a3,0
    7be8:	00100613          	li	a2,1
    7bec:	00000593          	li	a1,0
    7bf0:	fcc42503          	lw	a0,-52(s0)
    7bf4:	85cfa0ef          	jal	1c50 <OS_EventTaskRdy>
    7bf8:	fec42783          	lw	a5,-20(s0)
    7bfc:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7c00:	fe442783          	lw	a5,-28(s0)
    7c04:	0087f793          	and	a5,a5,8
    7c08:	3007a073          	csrs	mstatus,a5
}
    7c0c:	00000013          	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    7c10:	b8dfa0ef          	jal	279c <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
    7c14:	00000793          	li	a5,0
    7c18:	0700006f          	j	7c88 <OSSemPost+0x104>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    7c1c:	fcc42783          	lw	a5,-52(s0)
    7c20:	0087d703          	lhu	a4,8(a5)
    7c24:	000107b7          	lui	a5,0x10
    7c28:	fff78793          	add	a5,a5,-1 # ffff <__sfvwrite_r+0x9b>
    7c2c:	04f70063          	beq	a4,a5,7c6c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    7c30:	fcc42783          	lw	a5,-52(s0)
    7c34:	0087d783          	lhu	a5,8(a5)
    7c38:	00178793          	add	a5,a5,1
    7c3c:	01079713          	sll	a4,a5,0x10
    7c40:	01075713          	srl	a4,a4,0x10
    7c44:	fcc42783          	lw	a5,-52(s0)
    7c48:	00e79423          	sh	a4,8(a5)
    7c4c:	fec42783          	lw	a5,-20(s0)
    7c50:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7c54:	fe042783          	lw	a5,-32(s0)
    7c58:	0087f793          	and	a5,a5,8
    7c5c:	3007a073          	csrs	mstatus,a5
}
    7c60:	00000013          	nop
        OS_EXIT_CRITICAL();
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
    7c64:	00000793          	li	a5,0
    7c68:	0200006f          	j	7c88 <OSSemPost+0x104>
    7c6c:	fec42783          	lw	a5,-20(s0)
    7c70:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7c74:	fdc42783          	lw	a5,-36(s0)
    7c78:	0087f793          	and	a5,a5,8
    7c7c:	3007a073          	csrs	mstatus,a5
}
    7c80:	00000013          	nop
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
    7c84:	03300793          	li	a5,51
}
    7c88:	00078513          	mv	a0,a5
    7c8c:	03c12083          	lw	ra,60(sp)
    7c90:	03812403          	lw	s0,56(sp)
    7c94:	04010113          	add	sp,sp,64
    7c98:	00008067          	ret

00007c9c <OSSemQuery>:
*/

#if OS_SEM_QUERY_EN > 0u
INT8U  OSSemQuery (OS_EVENT     *pevent,
                   OS_SEM_DATA  *p_sem_data)
{
    7c9c:	fc010113          	add	sp,sp,-64
    7ca0:	02812e23          	sw	s0,60(sp)
    7ca4:	04010413          	add	s0,sp,64
    7ca8:	fca42623          	sw	a0,-52(s0)
    7cac:	fcb42423          	sw	a1,-56(s0)
    INT8U       i;
    OS_PRIO    *psrc;
    OS_PRIO    *pdest;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR   cpu_sr = 0u;
    7cb0:	fe042023          	sw	zero,-32(s0)
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    7cb4:	fcc42783          	lw	a5,-52(s0)
    7cb8:	00079663          	bnez	a5,7cc4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    7cbc:	00400793          	li	a5,4
    7cc0:	0d40006f          	j	7d94 <OSSemQuery+0xf8>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    7cc4:	fc842783          	lw	a5,-56(s0)
    7cc8:	00079663          	bnez	a5,7cd4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    7ccc:	00900793          	li	a5,9
    7cd0:	0c40006f          	j	7d94 <OSSemQuery+0xf8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    7cd4:	fcc42783          	lw	a5,-52(s0)
    7cd8:	0007c703          	lbu	a4,0(a5)
    7cdc:	00300793          	li	a5,3
    7ce0:	00f70663          	beq	a4,a5,7cec <OSSemQuery+0x50>
        return (OS_ERR_EVENT_TYPE);
    7ce4:	00100793          	li	a5,1
    7ce8:	0ac0006f          	j	7d94 <OSSemQuery+0xf8>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7cec:	00800793          	li	a5,8
    7cf0:	3007b7f3          	csrrc	a5,mstatus,a5
    7cf4:	fcf42e23          	sw	a5,-36(s0)
    return context;
    7cf8:	fdc42783          	lw	a5,-36(s0)
    }
    OS_ENTER_CRITICAL();
    7cfc:	fef42023          	sw	a5,-32(s0)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    7d00:	fcc42783          	lw	a5,-52(s0)
    7d04:	00a7c703          	lbu	a4,10(a5)
    7d08:	fc842783          	lw	a5,-56(s0)
    7d0c:	00e782a3          	sb	a4,5(a5)
    psrc                   = &pevent->OSEventTbl[0];
    7d10:	fcc42783          	lw	a5,-52(s0)
    7d14:	00b78793          	add	a5,a5,11
    7d18:	fef42423          	sw	a5,-24(s0)
    pdest                  = &p_sem_data->OSEventTbl[0];
    7d1c:	fc842783          	lw	a5,-56(s0)
    7d20:	00278793          	add	a5,a5,2
    7d24:	fef42223          	sw	a5,-28(s0)
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
    7d28:	fe0407a3          	sb	zero,-17(s0)
    7d2c:	0300006f          	j	7d5c <OSSemQuery+0xc0>
        *pdest++ = *psrc++;
    7d30:	fe842703          	lw	a4,-24(s0)
    7d34:	00170793          	add	a5,a4,1
    7d38:	fef42423          	sw	a5,-24(s0)
    7d3c:	fe442783          	lw	a5,-28(s0)
    7d40:	00178693          	add	a3,a5,1
    7d44:	fed42223          	sw	a3,-28(s0)
    7d48:	00074703          	lbu	a4,0(a4)
    7d4c:	00e78023          	sb	a4,0(a5)
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
    7d50:	fef44783          	lbu	a5,-17(s0)
    7d54:	00178793          	add	a5,a5,1
    7d58:	fef407a3          	sb	a5,-17(s0)
    7d5c:	fef44703          	lbu	a4,-17(s0)
    7d60:	00200793          	li	a5,2
    7d64:	fce7f6e3          	bgeu	a5,a4,7d30 <OSSemQuery+0x94>
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    7d68:	fcc42783          	lw	a5,-52(s0)
    7d6c:	0087d703          	lhu	a4,8(a5)
    7d70:	fc842783          	lw	a5,-56(s0)
    7d74:	00e79023          	sh	a4,0(a5)
    7d78:	fe042783          	lw	a5,-32(s0)
    7d7c:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7d80:	fd842783          	lw	a5,-40(s0)
    7d84:	0087f793          	and	a5,a5,8
    7d88:	3007a073          	csrs	mstatus,a5
}
    7d8c:	00000013          	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    7d90:	00000793          	li	a5,0
}
    7d94:	00078513          	mv	a0,a5
    7d98:	03c12403          	lw	s0,60(sp)
    7d9c:	04010113          	add	sp,sp,64
    7da0:	00008067          	ret

00007da4 <OSSemSet>:

#if OS_SEM_SET_EN > 0u
void  OSSemSet (OS_EVENT  *pevent,
                INT16U     cnt,
                INT8U     *perr)
{
    7da4:	fd010113          	add	sp,sp,-48
    7da8:	02812623          	sw	s0,44(sp)
    7dac:	03010413          	add	s0,sp,48
    7db0:	fca42e23          	sw	a0,-36(s0)
    7db4:	00058793          	mv	a5,a1
    7db8:	fcc42a23          	sw	a2,-44(s0)
    7dbc:	fcf41d23          	sh	a5,-38(s0)
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
    7dc0:	fe042623          	sw	zero,-20(s0)
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7dc4:	fdc42783          	lw	a5,-36(s0)
    7dc8:	00079a63          	bnez	a5,7ddc <OSSemSet+0x38>
        *perr = OS_ERR_PEVENT_NULL;
    7dcc:	fd442783          	lw	a5,-44(s0)
    7dd0:	00400713          	li	a4,4
    7dd4:	00e78023          	sb	a4,0(a5)
        return;
    7dd8:	09c0006f          	j	7e74 <OSSemSet+0xd0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    7ddc:	fdc42783          	lw	a5,-36(s0)
    7de0:	0007c703          	lbu	a4,0(a5)
    7de4:	00300793          	li	a5,3
    7de8:	00f70a63          	beq	a4,a5,7dfc <OSSemSet+0x58>
        *perr = OS_ERR_EVENT_TYPE;
    7dec:	fd442783          	lw	a5,-44(s0)
    7df0:	00100713          	li	a4,1
    7df4:	00e78023          	sb	a4,0(a5)
        return;
    7df8:	07c0006f          	j	7e74 <OSSemSet+0xd0>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7dfc:	00800793          	li	a5,8
    7e00:	3007b7f3          	csrrc	a5,mstatus,a5
    7e04:	fef42423          	sw	a5,-24(s0)
    return context;
    7e08:	fe842783          	lw	a5,-24(s0)
    }
    OS_ENTER_CRITICAL();
    7e0c:	fef42623          	sw	a5,-20(s0)
    *perr = OS_ERR_NONE;
    7e10:	fd442783          	lw	a5,-44(s0)
    7e14:	00078023          	sb	zero,0(a5)
    if (pevent->OSEventCnt > 0u) {                    /* See if semaphore already has a count          */
    7e18:	fdc42783          	lw	a5,-36(s0)
    7e1c:	0087d783          	lhu	a5,8(a5)
    7e20:	00078a63          	beqz	a5,7e34 <OSSemSet+0x90>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    7e24:	fdc42783          	lw	a5,-36(s0)
    7e28:	fda45703          	lhu	a4,-38(s0)
    7e2c:	00e79423          	sh	a4,8(a5)
    7e30:	02c0006f          	j	7e5c <OSSemSet+0xb8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0u) {               /*      See if task(s) waiting?                  */
    7e34:	fdc42783          	lw	a5,-36(s0)
    7e38:	00a7c783          	lbu	a5,10(a5)
    7e3c:	00079a63          	bnez	a5,7e50 <OSSemSet+0xac>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    7e40:	fdc42783          	lw	a5,-36(s0)
    7e44:	fda45703          	lhu	a4,-38(s0)
    7e48:	00e79423          	sh	a4,8(a5)
    7e4c:	0100006f          	j	7e5c <OSSemSet+0xb8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    7e50:	fd442783          	lw	a5,-44(s0)
    7e54:	04900713          	li	a4,73
    7e58:	00e78023          	sb	a4,0(a5)
    7e5c:	fec42783          	lw	a5,-20(s0)
    7e60:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7e64:	fe442783          	lw	a5,-28(s0)
    7e68:	0087f793          	and	a5,a5,8
    7e6c:	3007a073          	csrs	mstatus,a5
}
    7e70:	00000013          	nop
        }
    }
    OS_EXIT_CRITICAL();
}
    7e74:	02c12403          	lw	s0,44(sp)
    7e78:	03010113          	add	sp,sp,48
    7e7c:	00008067          	ret

00007e80 <OSTaskChangePrio>:
*/

#if OS_TASK_CHANGE_PRIO_EN > 0u
INT8U  OSTaskChangePrio (INT8U  oldprio,
                         INT8U  newprio)
{
    7e80:	fb010113          	add	sp,sp,-80
    7e84:	04112623          	sw	ra,76(sp)
    7e88:	04812423          	sw	s0,72(sp)
    7e8c:	05010413          	add	s0,sp,80
    7e90:	00050793          	mv	a5,a0
    7e94:	00058713          	mv	a4,a1
    7e98:	faf40fa3          	sb	a5,-65(s0)
    7e9c:	00070793          	mv	a5,a4
    7ea0:	faf40f23          	sb	a5,-66(s0)
    OS_PRIO    bity_new;
    OS_PRIO    bitx_new;
    OS_PRIO    bity_old;
    OS_PRIO    bitx_old;
#if OS_CRITICAL_METHOD == 3u
    OS_CPU_SR  cpu_sr = 0u;                                 /* Storage for CPU status register         */
    7ea4:	fe042223          	sw	zero,-28(s0)
#endif


#if OS_ARG_CHK_EN > 0u
    if (oldprio >= OS_LOWEST_PRIO) {
    7ea8:	fbf44703          	lbu	a4,-65(s0)
    7eac:	01300793          	li	a5,19
    7eb0:	00e7fc63          	bgeu	a5,a4,7ec8 <OSTaskChangePrio+0x48>
        if (oldprio != OS_PRIO_SELF) {
    7eb4:	fbf44703          	lbu	a4,-65(s0)
    7eb8:	0ff00793          	li	a5,255
    7ebc:	00f70663          	beq	a4,a5,7ec8 <OSTaskChangePrio+0x48>
            return (OS_ERR_PRIO_INVALID);
    7ec0:	02a00793          	li	a5,42
    7ec4:	4a00006f          	j	8364 <OSTaskChangePrio+0x4e4>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    7ec8:	fbe44703          	lbu	a4,-66(s0)
    7ecc:	01300793          	li	a5,19
    7ed0:	00e7f663          	bgeu	a5,a4,7edc <OSTaskChangePrio+0x5c>
        return (OS_ERR_PRIO_INVALID);
    7ed4:	02a00793          	li	a5,42
    7ed8:	48c0006f          	j	8364 <OSTaskChangePrio+0x4e4>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7edc:	00800793          	li	a5,8
    7ee0:	3007b7f3          	csrrc	a5,mstatus,a5
    7ee4:	fcf42a23          	sw	a5,-44(s0)
    return context;
    7ee8:	fd442783          	lw	a5,-44(s0)
    }
#endif
    OS_ENTER_CRITICAL();
    7eec:	fef42223          	sw	a5,-28(s0)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    7ef0:	fbe44783          	lbu	a5,-66(s0)
    7ef4:	0002d737          	lui	a4,0x2d
    7ef8:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    7efc:	00279793          	sll	a5,a5,0x2
    7f00:	00f707b3          	add	a5,a4,a5
    7f04:	0007a783          	lw	a5,0(a5)
    7f08:	02078263          	beqz	a5,7f2c <OSTaskChangePrio+0xac>
    7f0c:	fe442783          	lw	a5,-28(s0)
    7f10:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7f14:	fd042783          	lw	a5,-48(s0)
    7f18:	0087f793          	and	a5,a5,8
    7f1c:	3007a073          	csrs	mstatus,a5
}
    7f20:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    7f24:	02800793          	li	a5,40
    7f28:	43c0006f          	j	8364 <OSTaskChangePrio+0x4e4>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    7f2c:	fbf44703          	lbu	a4,-65(s0)
    7f30:	0ff00793          	li	a5,255
    7f34:	00f71a63          	bne	a4,a5,7f48 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    7f38:	000287b7          	lui	a5,0x28
    7f3c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    7f40:	03a7c783          	lbu	a5,58(a5)
    7f44:	faf40fa3          	sb	a5,-65(s0)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    7f48:	fbf44783          	lbu	a5,-65(s0)
    7f4c:	0002d737          	lui	a4,0x2d
    7f50:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    7f54:	00279793          	sll	a5,a5,0x2
    7f58:	00f707b3          	add	a5,a4,a5
    7f5c:	0007a783          	lw	a5,0(a5)
    7f60:	fef42023          	sw	a5,-32(s0)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    7f64:	fe042783          	lw	a5,-32(s0)
    7f68:	02079263          	bnez	a5,7f8c <OSTaskChangePrio+0x10c>
    7f6c:	fe442783          	lw	a5,-28(s0)
    7f70:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7f74:	fcc42783          	lw	a5,-52(s0)
    7f78:	0087f793          	and	a5,a5,8
    7f7c:	3007a073          	csrs	mstatus,a5
}
    7f80:	00000013          	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    7f84:	02900793          	li	a5,41
    7f88:	3dc0006f          	j	8364 <OSTaskChangePrio+0x4e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    7f8c:	fe042703          	lw	a4,-32(s0)
    7f90:	00100793          	li	a5,1
    7f94:	02f71263          	bne	a4,a5,7fb8 <OSTaskChangePrio+0x138>
    7f98:	fe442783          	lw	a5,-28(s0)
    7f9c:	fcf42423          	sw	a5,-56(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    7fa0:	fc842783          	lw	a5,-56(s0)
    7fa4:	0087f793          	and	a5,a5,8
    7fa8:	3007a073          	csrs	mstatus,a5
}
    7fac:	00000013          	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    7fb0:	04300793          	li	a5,67
    7fb4:	3b00006f          	j	8364 <OSTaskChangePrio+0x4e4>
    }
#if OS_LOWEST_PRIO <= 63u
    y_new                 = (INT8U)(newprio >> 3u);         /* Yes, compute new TCB fields             */
    7fb8:	fbe44783          	lbu	a5,-66(s0)
    7fbc:	0037d793          	srl	a5,a5,0x3
    7fc0:	fcf40fa3          	sb	a5,-33(s0)
    x_new                 = (INT8U)(newprio & 0x07u);
    7fc4:	fbe44783          	lbu	a5,-66(s0)
    7fc8:	0077f793          	and	a5,a5,7
    7fcc:	fcf40f23          	sb	a5,-34(s0)
#else
    y_new                 = (INT8U)((INT8U)(newprio >> 4u) & 0x0Fu);
    x_new                 = (INT8U)(newprio & 0x0Fu);
#endif
    bity_new              = (OS_PRIO)(1uL << y_new);
    7fd0:	fdf44783          	lbu	a5,-33(s0)
    7fd4:	00100713          	li	a4,1
    7fd8:	00f717b3          	sll	a5,a4,a5
    7fdc:	fcf40ea3          	sb	a5,-35(s0)
    bitx_new              = (OS_PRIO)(1uL << x_new);
    7fe0:	fde44783          	lbu	a5,-34(s0)
    7fe4:	00100713          	li	a4,1
    7fe8:	00f717b3          	sll	a5,a4,a5
    7fec:	fcf40e23          	sb	a5,-36(s0)

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    7ff0:	fbf44783          	lbu	a5,-65(s0)
    7ff4:	0002d737          	lui	a4,0x2d
    7ff8:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    7ffc:	00279793          	sll	a5,a5,0x2
    8000:	00f707b3          	add	a5,a4,a5
    8004:	0007a023          	sw	zero,0(a5)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    8008:	fbe44783          	lbu	a5,-66(s0)
    800c:	0002d737          	lui	a4,0x2d
    8010:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    8014:	00279793          	sll	a5,a5,0x2
    8018:	00f707b3          	add	a5,a4,a5
    801c:	fe042703          	lw	a4,-32(s0)
    8020:	00e7a023          	sw	a4,0(a5)
    y_old                 =  ptcb->OSTCBY;
    8024:	fe042783          	lw	a5,-32(s0)
    8028:	03c7c783          	lbu	a5,60(a5)
    802c:	fcf40da3          	sb	a5,-37(s0)
    bity_old              =  ptcb->OSTCBBitY;
    8030:	fe042783          	lw	a5,-32(s0)
    8034:	03e7c783          	lbu	a5,62(a5)
    8038:	fcf40d23          	sb	a5,-38(s0)
    bitx_old              =  ptcb->OSTCBBitX;
    803c:	fe042783          	lw	a5,-32(s0)
    8040:	03d7c783          	lbu	a5,61(a5)
    8044:	fcf40ca3          	sb	a5,-39(s0)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0u) {             /* If task is ready make it not            */
    8048:	fdb44703          	lbu	a4,-37(s0)
    804c:	000287b7          	lui	a5,0x28
    8050:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    8054:	00f707b3          	add	a5,a4,a5
    8058:	0007c783          	lbu	a5,0(a5)
    805c:	fd944703          	lbu	a4,-39(s0)
    8060:	00e7f7b3          	and	a5,a5,a4
    8064:	0ff7f793          	zext.b	a5,a5
    8068:	0c078663          	beqz	a5,8134 <OSTaskChangePrio+0x2b4>
         OSRdyTbl[y_old] &= (OS_PRIO)~bitx_old;
    806c:	fdb44703          	lbu	a4,-37(s0)
    8070:	000287b7          	lui	a5,0x28
    8074:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    8078:	00f707b3          	add	a5,a4,a5
    807c:	0007c703          	lbu	a4,0(a5)
    8080:	fd944783          	lbu	a5,-39(s0)
    8084:	fff7c793          	not	a5,a5
    8088:	0ff7f793          	zext.b	a5,a5
    808c:	fdb44683          	lbu	a3,-37(s0)
    8090:	00f777b3          	and	a5,a4,a5
    8094:	0ff7f713          	zext.b	a4,a5
    8098:	000287b7          	lui	a5,0x28
    809c:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    80a0:	00f687b3          	add	a5,a3,a5
    80a4:	00e78023          	sb	a4,0(a5)
         if (OSRdyTbl[y_old] == 0u) {
    80a8:	fdb44703          	lbu	a4,-37(s0)
    80ac:	000287b7          	lui	a5,0x28
    80b0:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    80b4:	00f707b3          	add	a5,a4,a5
    80b8:	0007c783          	lbu	a5,0(a5)
    80bc:	02079463          	bnez	a5,80e4 <OSTaskChangePrio+0x264>
             OSRdyGrp &= (OS_PRIO)~bity_old;
    80c0:	fda44783          	lbu	a5,-38(s0)
    80c4:	fff7c793          	not	a5,a5
    80c8:	0ff7f713          	zext.b	a4,a5
    80cc:	000287b7          	lui	a5,0x28
    80d0:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    80d4:	00f777b3          	and	a5,a4,a5
    80d8:	0ff7f713          	zext.b	a4,a5
    80dc:	000287b7          	lui	a5,0x28
    80e0:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    80e4:	000287b7          	lui	a5,0x28
    80e8:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    80ec:	fdd44703          	lbu	a4,-35(s0)
    80f0:	00e7e7b3          	or	a5,a5,a4
    80f4:	0ff7f713          	zext.b	a4,a5
    80f8:	000287b7          	lui	a5,0x28
    80fc:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
         OSRdyTbl[y_new] |= bitx_new;
    8100:	fdf44703          	lbu	a4,-33(s0)
    8104:	000287b7          	lui	a5,0x28
    8108:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    810c:	00f707b3          	add	a5,a4,a5
    8110:	0007c783          	lbu	a5,0(a5)
    8114:	fdf44683          	lbu	a3,-33(s0)
    8118:	fdc44703          	lbu	a4,-36(s0)
    811c:	00e7e7b3          	or	a5,a5,a4
    8120:	0ff7f713          	zext.b	a4,a5
    8124:	000287b7          	lui	a5,0x28
    8128:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    812c:	00f687b3          	add	a5,a3,a5
    8130:	00e78023          	sb	a4,0(a5)
         OS_TRACE_TASK_READY(ptcb);
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    8134:	fe042783          	lw	a5,-32(s0)
    8138:	01c7a783          	lw	a5,28(a5)
    813c:	fef42623          	sw	a5,-20(s0)
    if (pevent != (OS_EVENT *)0) {
    8140:	fec42783          	lw	a5,-20(s0)
    8144:	0a078c63          	beqz	a5,81fc <OSTaskChangePrio+0x37c>
        pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;    /* Remove old task prio from wait list     */
    8148:	fdb44783          	lbu	a5,-37(s0)
    814c:	fec42703          	lw	a4,-20(s0)
    8150:	00f707b3          	add	a5,a4,a5
    8154:	00b7c683          	lbu	a3,11(a5)
    8158:	fd944783          	lbu	a5,-39(s0)
    815c:	fff7c793          	not	a5,a5
    8160:	0ff7f713          	zext.b	a4,a5
    8164:	fdb44783          	lbu	a5,-37(s0)
    8168:	00e6f733          	and	a4,a3,a4
    816c:	0ff77713          	zext.b	a4,a4
    8170:	fec42683          	lw	a3,-20(s0)
    8174:	00f687b3          	add	a5,a3,a5
    8178:	00e785a3          	sb	a4,11(a5)
        if (pevent->OSEventTbl[y_old] == 0u) {
    817c:	fdb44783          	lbu	a5,-37(s0)
    8180:	fec42703          	lw	a4,-20(s0)
    8184:	00f707b3          	add	a5,a4,a5
    8188:	00b7c783          	lbu	a5,11(a5)
    818c:	02079463          	bnez	a5,81b4 <OSTaskChangePrio+0x334>
            pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
    8190:	fec42783          	lw	a5,-20(s0)
    8194:	00a7c703          	lbu	a4,10(a5)
    8198:	fda44783          	lbu	a5,-38(s0)
    819c:	fff7c793          	not	a5,a5
    81a0:	0ff7f793          	zext.b	a5,a5
    81a4:	00f777b3          	and	a5,a4,a5
    81a8:	0ff7f713          	zext.b	a4,a5
    81ac:	fec42783          	lw	a5,-20(s0)
    81b0:	00e78523          	sb	a4,10(a5)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    81b4:	fec42783          	lw	a5,-20(s0)
    81b8:	00a7c783          	lbu	a5,10(a5)
    81bc:	fdd44703          	lbu	a4,-35(s0)
    81c0:	00e7e7b3          	or	a5,a5,a4
    81c4:	0ff7f713          	zext.b	a4,a5
    81c8:	fec42783          	lw	a5,-20(s0)
    81cc:	00e78523          	sb	a4,10(a5)
        pevent->OSEventTbl[y_new] |= bitx_new;
    81d0:	fdf44783          	lbu	a5,-33(s0)
    81d4:	fec42703          	lw	a4,-20(s0)
    81d8:	00f707b3          	add	a5,a4,a5
    81dc:	00b7c703          	lbu	a4,11(a5)
    81e0:	fdf44783          	lbu	a5,-33(s0)
    81e4:	fdc44683          	lbu	a3,-36(s0)
    81e8:	00d76733          	or	a4,a4,a3
    81ec:	0ff77713          	zext.b	a4,a4
    81f0:	fec42683          	lw	a3,-20(s0)
    81f4:	00f687b3          	add	a5,a3,a5
    81f8:	00e785a3          	sb	a4,11(a5)
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    81fc:	fe042783          	lw	a5,-32(s0)
    8200:	0207a783          	lw	a5,32(a5)
    8204:	0e078a63          	beqz	a5,82f8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
    8208:	fe042783          	lw	a5,-32(s0)
    820c:	0207a783          	lw	a5,32(a5)
    8210:	fef42423          	sw	a5,-24(s0)
        pevent  = *pevents;
    8214:	fe842783          	lw	a5,-24(s0)
    8218:	0007a783          	lw	a5,0(a5)
    821c:	fef42623          	sw	a5,-20(s0)
        while (pevent != (OS_EVENT *)0) {
    8220:	0d00006f          	j	82f0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;   /* Remove old task prio from wait lists */
    8224:	fdb44783          	lbu	a5,-37(s0)
    8228:	fec42703          	lw	a4,-20(s0)
    822c:	00f707b3          	add	a5,a4,a5
    8230:	00b7c683          	lbu	a3,11(a5)
    8234:	fd944783          	lbu	a5,-39(s0)
    8238:	fff7c793          	not	a5,a5
    823c:	0ff7f713          	zext.b	a4,a5
    8240:	fdb44783          	lbu	a5,-37(s0)
    8244:	00e6f733          	and	a4,a3,a4
    8248:	0ff77713          	zext.b	a4,a4
    824c:	fec42683          	lw	a3,-20(s0)
    8250:	00f687b3          	add	a5,a3,a5
    8254:	00e785a3          	sb	a4,11(a5)
            if (pevent->OSEventTbl[y_old] == 0u) {
    8258:	fdb44783          	lbu	a5,-37(s0)
    825c:	fec42703          	lw	a4,-20(s0)
    8260:	00f707b3          	add	a5,a4,a5
    8264:	00b7c783          	lbu	a5,11(a5)
    8268:	02079463          	bnez	a5,8290 <OSTaskChangePrio+0x410>
                pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
    826c:	fec42783          	lw	a5,-20(s0)
    8270:	00a7c703          	lbu	a4,10(a5)
    8274:	fda44783          	lbu	a5,-38(s0)
    8278:	fff7c793          	not	a5,a5
    827c:	0ff7f793          	zext.b	a5,a5
    8280:	00f777b3          	and	a5,a4,a5
    8284:	0ff7f713          	zext.b	a4,a5
    8288:	fec42783          	lw	a5,-20(s0)
    828c:	00e78523          	sb	a4,10(a5)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    8290:	fec42783          	lw	a5,-20(s0)
    8294:	00a7c783          	lbu	a5,10(a5)
    8298:	fdd44703          	lbu	a4,-35(s0)
    829c:	00e7e7b3          	or	a5,a5,a4
    82a0:	0ff7f713          	zext.b	a4,a5
    82a4:	fec42783          	lw	a5,-20(s0)
    82a8:	00e78523          	sb	a4,10(a5)
            pevent->OSEventTbl[y_new] |= bitx_new;
    82ac:	fdf44783          	lbu	a5,-33(s0)
    82b0:	fec42703          	lw	a4,-20(s0)
    82b4:	00f707b3          	add	a5,a4,a5
    82b8:	00b7c703          	lbu	a4,11(a5)
    82bc:	fdf44783          	lbu	a5,-33(s0)
    82c0:	fdc44683          	lbu	a3,-36(s0)
    82c4:	00d76733          	or	a4,a4,a3
    82c8:	0ff77713          	zext.b	a4,a4
    82cc:	fec42683          	lw	a3,-20(s0)
    82d0:	00f687b3          	add	a5,a3,a5
    82d4:	00e785a3          	sb	a4,11(a5)
            pevents++;
    82d8:	fe842783          	lw	a5,-24(s0)
    82dc:	00478793          	add	a5,a5,4
    82e0:	fef42423          	sw	a5,-24(s0)
            pevent                     = *pevents;
    82e4:	fe842783          	lw	a5,-24(s0)
    82e8:	0007a783          	lw	a5,0(a5)
    82ec:	fef42623          	sw	a5,-20(s0)
        while (pevent != (OS_EVENT *)0) {
    82f0:	fec42783          	lw	a5,-20(s0)
    82f4:	f20798e3          	bnez	a5,8224 <OSTaskChangePrio+0x3a4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    82f8:	fe042783          	lw	a5,-32(s0)
    82fc:	fbe44703          	lbu	a4,-66(s0)
    8300:	02e78d23          	sb	a4,58(a5)
    ptcb->OSTCBY    = y_new;
    8304:	fe042783          	lw	a5,-32(s0)
    8308:	fdf44703          	lbu	a4,-33(s0)
    830c:	02e78e23          	sb	a4,60(a5)
    ptcb->OSTCBX    = x_new;
    8310:	fe042783          	lw	a5,-32(s0)
    8314:	fde44703          	lbu	a4,-34(s0)
    8318:	02e78da3          	sb	a4,59(a5)
    ptcb->OSTCBBitY = bity_new;
    831c:	fe042783          	lw	a5,-32(s0)
    8320:	fdd44703          	lbu	a4,-35(s0)
    8324:	02e78f23          	sb	a4,62(a5)
    ptcb->OSTCBBitX = bitx_new;
    8328:	fe042783          	lw	a5,-32(s0)
    832c:	fdc44703          	lbu	a4,-36(s0)
    8330:	02e78ea3          	sb	a4,61(a5)
    8334:	fe442783          	lw	a5,-28(s0)
    8338:	fcf42223          	sw	a5,-60(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    833c:	fc442783          	lw	a5,-60(s0)
    8340:	0087f793          	and	a5,a5,8
    8344:	3007a073          	csrs	mstatus,a5
}
    8348:	00000013          	nop
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    834c:	000287b7          	lui	a5,0x28
    8350:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
    8354:	00100793          	li	a5,1
    8358:	00f71463          	bne	a4,a5,8360 <OSTaskChangePrio+0x4e0>
        OS_Sched();                                         /* Find new highest priority task          */
    835c:	c40fa0ef          	jal	279c <OS_Sched>
    }
    return (OS_ERR_NONE);
    8360:	00000793          	li	a5,0
}
    8364:	00078513          	mv	a0,a5
    8368:	04c12083          	lw	ra,76(sp)
    836c:	04812403          	lw	s0,72(sp)
    8370:	05010113          	add	sp,sp,80
    8374:	00008067          	ret

00008378 <OSTaskCreate>:
#if OS_TASK_CREATE_EN > 0u
INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
{
    8378:	fb010113          	add	sp,sp,-80
    837c:	04112623          	sw	ra,76(sp)
    8380:	04812423          	sw	s0,72(sp)
    8384:	05010413          	add	s0,sp,80
    8388:	faa42e23          	sw	a0,-68(s0)
    838c:	fab42c23          	sw	a1,-72(s0)
    8390:	fac42a23          	sw	a2,-76(s0)
    8394:	00068793          	mv	a5,a3
    8398:	faf409a3          	sb	a5,-77(s0)
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
    839c:	fe042623          	sw	zero,-20(s0)
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    83a0:	fb344703          	lbu	a4,-77(s0)
    83a4:	01400793          	li	a5,20
    83a8:	00e7f663          	bgeu	a5,a4,83b4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    83ac:	02a00793          	li	a5,42
    83b0:	15c0006f          	j	850c <OSTaskCreate+0x194>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    83b4:	00800793          	li	a5,8
    83b8:	3007b7f3          	csrrc	a5,mstatus,a5
    83bc:	fef42023          	sw	a5,-32(s0)
    return context;
    83c0:	fe042783          	lw	a5,-32(s0)
    }
#endif
    OS_ENTER_CRITICAL();
    83c4:	fef42623          	sw	a5,-20(s0)
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
    83c8:	000287b7          	lui	a5,0x28
    83cc:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    83d0:	02078263          	beqz	a5,83f4 <OSTaskCreate+0x7c>
    83d4:	fec42783          	lw	a5,-20(s0)
    83d8:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    83dc:	fdc42783          	lw	a5,-36(s0)
    83e0:	0087f793          	and	a5,a5,8
    83e4:	3007a073          	csrs	mstatus,a5
}
    83e8:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    83ec:	03c00793          	li	a5,60
    83f0:	11c0006f          	j	850c <OSTaskCreate+0x194>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    83f4:	fb344783          	lbu	a5,-77(s0)
    83f8:	0002d737          	lui	a4,0x2d
    83fc:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    8400:	00279793          	sll	a5,a5,0x2
    8404:	00f707b3          	add	a5,a4,a5
    8408:	0007a783          	lw	a5,0(a5)
    840c:	0e079263          	bnez	a5,84f0 <OSTaskCreate+0x178>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    8410:	fb344783          	lbu	a5,-77(s0)
    8414:	0002d737          	lui	a4,0x2d
    8418:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    841c:	00279793          	sll	a5,a5,0x2
    8420:	00f707b3          	add	a5,a4,a5
    8424:	00100713          	li	a4,1
    8428:	00e7a023          	sw	a4,0(a5)
    842c:	fec42783          	lw	a5,-20(s0)
    8430:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8434:	fd842783          	lw	a5,-40(s0)
    8438:	0087f793          	and	a5,a5,8
    843c:	3007a073          	csrs	mstatus,a5
}
    8440:	00000013          	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
    8444:	00000693          	li	a3,0
    8448:	fb442603          	lw	a2,-76(s0)
    844c:	fb842583          	lw	a1,-72(s0)
    8450:	fbc42503          	lw	a0,-68(s0)
    8454:	628030ef          	jal	ba7c <OSTaskStkInit>
    8458:	fea42423          	sw	a0,-24(s0)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
    845c:	fb344503          	lbu	a0,-77(s0)
    8460:	00000813          	li	a6,0
    8464:	00000793          	li	a5,0
    8468:	00000713          	li	a4,0
    846c:	00000693          	li	a3,0
    8470:	00000613          	li	a2,0
    8474:	fe842583          	lw	a1,-24(s0)
    8478:	fd4fa0ef          	jal	2c4c <OS_TCBInit>
    847c:	00050793          	mv	a5,a0
    8480:	fef403a3          	sb	a5,-25(s0)
        if (err == OS_ERR_NONE) {
    8484:	fe744783          	lbu	a5,-25(s0)
    8488:	00079e63          	bnez	a5,84a4 <OSTaskCreate+0x12c>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    848c:	000287b7          	lui	a5,0x28
    8490:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
    8494:	00100793          	li	a5,1
    8498:	04f71863          	bne	a4,a5,84e8 <OSTaskCreate+0x170>
                OS_Sched();
    849c:	b00fa0ef          	jal	279c <OS_Sched>
    84a0:	0480006f          	j	84e8 <OSTaskCreate+0x170>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    84a4:	00800793          	li	a5,8
    84a8:	3007b7f3          	csrrc	a5,mstatus,a5
    84ac:	fcf42823          	sw	a5,-48(s0)
    return context;
    84b0:	fd042783          	lw	a5,-48(s0)
            }
        } else {
            OS_TRACE_TASK_CREATE_FAILED(OSTCBPrioTbl[prio]);
            OS_ENTER_CRITICAL();
    84b4:	fef42623          	sw	a5,-20(s0)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    84b8:	fb344783          	lbu	a5,-77(s0)
    84bc:	0002d737          	lui	a4,0x2d
    84c0:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    84c4:	00279793          	sll	a5,a5,0x2
    84c8:	00f707b3          	add	a5,a4,a5
    84cc:	0007a023          	sw	zero,0(a5)
    84d0:	fec42783          	lw	a5,-20(s0)
    84d4:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    84d8:	fd442783          	lw	a5,-44(s0)
    84dc:	0087f793          	and	a5,a5,8
    84e0:	3007a073          	csrs	mstatus,a5
}
    84e4:	00000013          	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
    84e8:	fe744783          	lbu	a5,-25(s0)
    84ec:	0200006f          	j	850c <OSTaskCreate+0x194>
    84f0:	fec42783          	lw	a5,-20(s0)
    84f4:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    84f8:	fcc42783          	lw	a5,-52(s0)
    84fc:	0087f793          	and	a5,a5,8
    8500:	3007a073          	csrs	mstatus,a5
}
    8504:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    8508:	02800793          	li	a5,40
}
    850c:	00078513          	mv	a0,a5
    8510:	04c12083          	lw	ra,76(sp)
    8514:	04812403          	lw	s0,72(sp)
    8518:	05010113          	add	sp,sp,80
    851c:	00008067          	ret

00008520 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    8520:	fa010113          	add	sp,sp,-96
    8524:	04112e23          	sw	ra,92(sp)
    8528:	04812c23          	sw	s0,88(sp)
    852c:	06010413          	add	s0,sp,96
    8530:	faa42e23          	sw	a0,-68(s0)
    8534:	fab42c23          	sw	a1,-72(s0)
    8538:	fac42a23          	sw	a2,-76(s0)
    853c:	faf42623          	sw	a5,-84(s0)
    8540:	fb042423          	sw	a6,-88(s0)
    8544:	fb142223          	sw	a7,-92(s0)
    8548:	00068793          	mv	a5,a3
    854c:	faf409a3          	sb	a5,-77(s0)
    8550:	00070793          	mv	a5,a4
    8554:	faf41823          	sh	a5,-80(s0)
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
    8558:	fe042623          	sw	zero,-20(s0)
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    855c:	fb344703          	lbu	a4,-77(s0)
    8560:	01400793          	li	a5,20
    8564:	00e7f663          	bgeu	a5,a4,8570 <OSTaskCreateExt+0x50>
        return (OS_ERR_PRIO_INVALID);
    8568:	02a00793          	li	a5,42
    856c:	1780006f          	j	86e4 <OSTaskCreateExt+0x1c4>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8570:	00800793          	li	a5,8
    8574:	3007b7f3          	csrrc	a5,mstatus,a5
    8578:	fef42023          	sw	a5,-32(s0)
    return context;
    857c:	fe042783          	lw	a5,-32(s0)
    }
#endif
    OS_ENTER_CRITICAL();
    8580:	fef42623          	sw	a5,-20(s0)
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
    8584:	000287b7          	lui	a5,0x28
    8588:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    858c:	02078263          	beqz	a5,85b0 <OSTaskCreateExt+0x90>
    8590:	fec42783          	lw	a5,-20(s0)
    8594:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8598:	fdc42783          	lw	a5,-36(s0)
    859c:	0087f793          	and	a5,a5,8
    85a0:	3007a073          	csrs	mstatus,a5
}
    85a4:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    85a8:	03c00793          	li	a5,60
    85ac:	1380006f          	j	86e4 <OSTaskCreateExt+0x1c4>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    85b0:	fb344783          	lbu	a5,-77(s0)
    85b4:	0002d737          	lui	a4,0x2d
    85b8:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    85bc:	00279793          	sll	a5,a5,0x2
    85c0:	00f707b3          	add	a5,a4,a5
    85c4:	0007a783          	lw	a5,0(a5)
    85c8:	10079063          	bnez	a5,86c8 <OSTaskCreateExt+0x1a8>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    85cc:	fb344783          	lbu	a5,-77(s0)
    85d0:	0002d737          	lui	a4,0x2d
    85d4:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    85d8:	00279793          	sll	a5,a5,0x2
    85dc:	00f707b3          	add	a5,a4,a5
    85e0:	00100713          	li	a4,1
    85e4:	00e7a023          	sw	a4,0(a5)
    85e8:	fec42783          	lw	a5,-20(s0)
    85ec:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    85f0:	fd842783          	lw	a5,-40(s0)
    85f4:	0087f793          	and	a5,a5,8
    85f8:	3007a073          	csrs	mstatus,a5
}
    85fc:	00000013          	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    8600:	00045783          	lhu	a5,0(s0)
    8604:	00078613          	mv	a2,a5
    8608:	fa842583          	lw	a1,-88(s0)
    860c:	fac42503          	lw	a0,-84(s0)
    8610:	2b8010ef          	jal	98c8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    8614:	00045783          	lhu	a5,0(s0)
    8618:	00078693          	mv	a3,a5
    861c:	fb442603          	lw	a2,-76(s0)
    8620:	fb842583          	lw	a1,-72(s0)
    8624:	fbc42503          	lw	a0,-68(s0)
    8628:	454030ef          	jal	ba7c <OSTaskStkInit>
    862c:	fea42423          	sw	a0,-24(s0)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    8630:	00045783          	lhu	a5,0(s0)
    8634:	fb045683          	lhu	a3,-80(s0)
    8638:	fb344503          	lbu	a0,-77(s0)
    863c:	00078813          	mv	a6,a5
    8640:	fa442783          	lw	a5,-92(s0)
    8644:	fa842703          	lw	a4,-88(s0)
    8648:	fac42603          	lw	a2,-84(s0)
    864c:	fe842583          	lw	a1,-24(s0)
    8650:	dfcfa0ef          	jal	2c4c <OS_TCBInit>
    8654:	00050793          	mv	a5,a0
    8658:	fef403a3          	sb	a5,-25(s0)
        if (err == OS_ERR_NONE) {
    865c:	fe744783          	lbu	a5,-25(s0)
    8660:	00079e63          	bnez	a5,867c <OSTaskCreateExt+0x15c>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    8664:	000287b7          	lui	a5,0x28
    8668:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
    866c:	00100793          	li	a5,1
    8670:	04f71863          	bne	a4,a5,86c0 <OSTaskCreateExt+0x1a0>
                OS_Sched();
    8674:	928fa0ef          	jal	279c <OS_Sched>
    8678:	0480006f          	j	86c0 <OSTaskCreateExt+0x1a0>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    867c:	00800793          	li	a5,8
    8680:	3007b7f3          	csrrc	a5,mstatus,a5
    8684:	fcf42823          	sw	a5,-48(s0)
    return context;
    8688:	fd042783          	lw	a5,-48(s0)
            }
        } else {
            OS_ENTER_CRITICAL();
    868c:	fef42623          	sw	a5,-20(s0)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    8690:	fb344783          	lbu	a5,-77(s0)
    8694:	0002d737          	lui	a4,0x2d
    8698:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    869c:	00279793          	sll	a5,a5,0x2
    86a0:	00f707b3          	add	a5,a4,a5
    86a4:	0007a023          	sw	zero,0(a5)
    86a8:	fec42783          	lw	a5,-20(s0)
    86ac:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    86b0:	fd442783          	lw	a5,-44(s0)
    86b4:	0087f793          	and	a5,a5,8
    86b8:	3007a073          	csrs	mstatus,a5
}
    86bc:	00000013          	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
    86c0:	fe744783          	lbu	a5,-25(s0)
    86c4:	0200006f          	j	86e4 <OSTaskCreateExt+0x1c4>
    86c8:	fec42783          	lw	a5,-20(s0)
    86cc:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    86d0:	fcc42783          	lw	a5,-52(s0)
    86d4:	0087f793          	and	a5,a5,8
    86d8:	3007a073          	csrs	mstatus,a5
}
    86dc:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    86e0:	02800793          	li	a5,40
}
    86e4:	00078513          	mv	a0,a5
    86e8:	05c12083          	lw	ra,92(sp)
    86ec:	05812403          	lw	s0,88(sp)
    86f0:	06010113          	add	sp,sp,96
    86f4:	00008067          	ret

000086f8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
    86f8:	fb010113          	add	sp,sp,-80
    86fc:	04112623          	sw	ra,76(sp)
    8700:	04812423          	sw	s0,72(sp)
    8704:	05010413          	add	s0,sp,80
    8708:	00050793          	mv	a5,a0
    870c:	faf40fa3          	sb	a5,-65(s0)
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
    8710:	fe042623          	sw	zero,-20(s0)
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
    8714:	000287b7          	lui	a5,0x28
    8718:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    871c:	00078663          	beqz	a5,8728 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
    8720:	04000793          	li	a5,64
    8724:	3440006f          	j	8a68 <OSTaskDel+0x370>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    8728:	fbf44703          	lbu	a4,-65(s0)
    872c:	01400793          	li	a5,20
    8730:	00f71663          	bne	a4,a5,873c <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
    8734:	03e00793          	li	a5,62
    8738:	3300006f          	j	8a68 <OSTaskDel+0x370>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    873c:	fbf44703          	lbu	a4,-65(s0)
    8740:	01300793          	li	a5,19
    8744:	00e7fc63          	bgeu	a5,a4,875c <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
    8748:	fbf44703          	lbu	a4,-65(s0)
    874c:	0ff00793          	li	a5,255
    8750:	00f70663          	beq	a4,a5,875c <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
    8754:	02a00793          	li	a5,42
    8758:	3100006f          	j	8a68 <OSTaskDel+0x370>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    875c:	00800793          	li	a5,8
    8760:	3007b7f3          	csrrc	a5,mstatus,a5
    8764:	fef42023          	sw	a5,-32(s0)
    return context;
    8768:	fe042783          	lw	a5,-32(s0)
        }
    }
#endif

    OS_ENTER_CRITICAL();
    876c:	fef42623          	sw	a5,-20(s0)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    8770:	fbf44703          	lbu	a4,-65(s0)
    8774:	0ff00793          	li	a5,255
    8778:	00f71a63          	bne	a4,a5,878c <OSTaskDel+0x94>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    877c:	000287b7          	lui	a5,0x28
    8780:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    8784:	03a7c783          	lbu	a5,58(a5)
    8788:	faf40fa3          	sb	a5,-65(s0)
    }
    ptcb = OSTCBPrioTbl[prio];
    878c:	fbf44783          	lbu	a5,-65(s0)
    8790:	0002d737          	lui	a4,0x2d
    8794:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    8798:	00279793          	sll	a5,a5,0x2
    879c:	00f707b3          	add	a5,a4,a5
    87a0:	0007a783          	lw	a5,0(a5)
    87a4:	fef42423          	sw	a5,-24(s0)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    87a8:	fe842783          	lw	a5,-24(s0)
    87ac:	02079263          	bnez	a5,87d0 <OSTaskDel+0xd8>
    87b0:	fec42783          	lw	a5,-20(s0)
    87b4:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    87b8:	fdc42783          	lw	a5,-36(s0)
    87bc:	0087f793          	and	a5,a5,8
    87c0:	3007a073          	csrs	mstatus,a5
}
    87c4:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    87c8:	04300793          	li	a5,67
    87cc:	29c0006f          	j	8a68 <OSTaskDel+0x370>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    87d0:	fe842703          	lw	a4,-24(s0)
    87d4:	00100793          	li	a5,1
    87d8:	02f71263          	bne	a4,a5,87fc <OSTaskDel+0x104>
    87dc:	fec42783          	lw	a5,-20(s0)
    87e0:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    87e4:	fd842783          	lw	a5,-40(s0)
    87e8:	0087f793          	and	a5,a5,8
    87ec:	3007a073          	csrs	mstatus,a5
}
    87f0:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    87f4:	03d00793          	li	a5,61
    87f8:	2700006f          	j	8a68 <OSTaskDel+0x370>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
    87fc:	fe842783          	lw	a5,-24(s0)
    8800:	03c7c783          	lbu	a5,60(a5)
    8804:	00078713          	mv	a4,a5
    8808:	000287b7          	lui	a5,0x28
    880c:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    8810:	00f707b3          	add	a5,a4,a5
    8814:	0007c703          	lbu	a4,0(a5)
    8818:	fe842783          	lw	a5,-24(s0)
    881c:	03d7c783          	lbu	a5,61(a5)
    8820:	fff7c793          	not	a5,a5
    8824:	0ff7f793          	zext.b	a5,a5
    8828:	fe842683          	lw	a3,-24(s0)
    882c:	03c6c683          	lbu	a3,60(a3)
    8830:	00f777b3          	and	a5,a4,a5
    8834:	0ff7f713          	zext.b	a4,a5
    8838:	000287b7          	lui	a5,0x28
    883c:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    8840:	00f687b3          	add	a5,a3,a5
    8844:	00e78023          	sb	a4,0(a5)
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
    8848:	fe842783          	lw	a5,-24(s0)
    884c:	03c7c783          	lbu	a5,60(a5)
    8850:	00078713          	mv	a4,a5
    8854:	000287b7          	lui	a5,0x28
    8858:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    885c:	00f707b3          	add	a5,a4,a5
    8860:	0007c783          	lbu	a5,0(a5)
    8864:	02079663          	bnez	a5,8890 <OSTaskDel+0x198>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
    8868:	fe842783          	lw	a5,-24(s0)
    886c:	03e7c783          	lbu	a5,62(a5)
    8870:	fff7c793          	not	a5,a5
    8874:	0ff7f713          	zext.b	a4,a5
    8878:	000287b7          	lui	a5,0x28
    887c:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    8880:	00f777b3          	and	a5,a4,a5
    8884:	0ff7f713          	zext.b	a4,a5
    8888:	000287b7          	lui	a5,0x28
    888c:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    8890:	fe842783          	lw	a5,-24(s0)
    8894:	01c7a783          	lw	a5,28(a5)
    8898:	00078c63          	beqz	a5,88b0 <OSTaskDel+0x1b8>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    889c:	fe842783          	lw	a5,-24(s0)
    88a0:	01c7a783          	lw	a5,28(a5)
    88a4:	00078593          	mv	a1,a5
    88a8:	fe842503          	lw	a0,-24(s0)
    88ac:	ffcf90ef          	jal	20a8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    88b0:	fe842783          	lw	a5,-24(s0)
    88b4:	0207a783          	lw	a5,32(a5)
    88b8:	00078c63          	beqz	a5,88d0 <OSTaskDel+0x1d8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    88bc:	fe842783          	lw	a5,-24(s0)
    88c0:	0207a783          	lw	a5,32(a5)
    88c4:	00078593          	mv	a1,a5
    88c8:	fe842503          	lw	a0,-24(s0)
    88cc:	889f90ef          	jal	2154 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
    88d0:	fe842783          	lw	a5,-24(s0)
    88d4:	02c7a783          	lw	a5,44(a5)
    88d8:	fef42223          	sw	a5,-28(s0)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    88dc:	fe442783          	lw	a5,-28(s0)
    88e0:	00078663          	beqz	a5,88ec <OSTaskDel+0x1f4>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    88e4:	fe442503          	lw	a0,-28(s0)
    88e8:	838fc0ef          	jal	4920 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
    88ec:	fe842783          	lw	a5,-24(s0)
    88f0:	0207aa23          	sw	zero,52(a5)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    88f4:	fe842783          	lw	a5,-24(s0)
    88f8:	02078c23          	sb	zero,56(a5)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    88fc:	fe842783          	lw	a5,-24(s0)
    8900:	02078ca3          	sb	zero,57(a5)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    8904:	000287b7          	lui	a5,0x28
    8908:	80a7c703          	lbu	a4,-2038(a5) # 2780a <OSLockNesting>
    890c:	0ff00793          	li	a5,255
    8910:	00f70e63          	beq	a4,a5,892c <OSTaskDel+0x234>
        OSLockNesting++;
    8914:	000287b7          	lui	a5,0x28
    8918:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    891c:	00178793          	add	a5,a5,1
    8920:	0ff7f713          	zext.b	a4,a5
    8924:	000287b7          	lui	a5,0x28
    8928:	80e78523          	sb	a4,-2038(a5) # 2780a <OSLockNesting>
    892c:	fec42783          	lw	a5,-20(s0)
    8930:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8934:	fd042783          	lw	a5,-48(s0)
    8938:	0087f793          	and	a5,a5,8
    893c:	3007a073          	csrs	mstatus,a5
}
    8940:	00000013          	nop
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    8944:	af0f90ef          	jal	1c34 <OS_Dummy>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8948:	00800793          	li	a5,8
    894c:	3007b7f3          	csrrc	a5,mstatus,a5
    8950:	fcf42a23          	sw	a5,-44(s0)
    return context;
    8954:	fd442783          	lw	a5,-44(s0)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    8958:	fef42623          	sw	a5,-20(s0)
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
    895c:	000287b7          	lui	a5,0x28
    8960:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    8964:	00078e63          	beqz	a5,8980 <OSTaskDel+0x288>
        OSLockNesting--;
    8968:	000287b7          	lui	a5,0x28
    896c:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    8970:	fff78793          	add	a5,a5,-1
    8974:	0ff7f713          	zext.b	a4,a5
    8978:	000287b7          	lui	a5,0x28
    897c:	80e78523          	sb	a4,-2038(a5) # 2780a <OSLockNesting>
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    8980:	fe842503          	lw	a0,-24(s0)
    8984:	278030ef          	jal	bbfc <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
    8988:	000287b7          	lui	a5,0x28
    898c:	8147c783          	lbu	a5,-2028(a5) # 27814 <OSTaskCtr>
    8990:	fff78793          	add	a5,a5,-1
    8994:	0ff7f713          	zext.b	a4,a5
    8998:	000287b7          	lui	a5,0x28
    899c:	80e78a23          	sb	a4,-2028(a5) # 27814 <OSTaskCtr>
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    89a0:	fbf44783          	lbu	a5,-65(s0)
    89a4:	0002d737          	lui	a4,0x2d
    89a8:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    89ac:	00279793          	sll	a5,a5,0x2
    89b0:	00f707b3          	add	a5,a4,a5
    89b4:	0007a023          	sw	zero,0(a5)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    89b8:	fe842783          	lw	a5,-24(s0)
    89bc:	0187a783          	lw	a5,24(a5)
    89c0:	02079263          	bnez	a5,89e4 <OSTaskDel+0x2ec>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    89c4:	fe842783          	lw	a5,-24(s0)
    89c8:	0147a783          	lw	a5,20(a5)
    89cc:	0007ac23          	sw	zero,24(a5)
        OSTCBList                  = ptcb->OSTCBNext;
    89d0:	fe842783          	lw	a5,-24(s0)
    89d4:	0147a703          	lw	a4,20(a5)
    89d8:	000287b7          	lui	a5,0x28
    89dc:	82e7a423          	sw	a4,-2008(a5) # 27828 <OSTCBList>
    89e0:	02c0006f          	j	8a0c <OSTaskDel+0x314>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    89e4:	fe842783          	lw	a5,-24(s0)
    89e8:	0187a783          	lw	a5,24(a5)
    89ec:	fe842703          	lw	a4,-24(s0)
    89f0:	01472703          	lw	a4,20(a4)
    89f4:	00e7aa23          	sw	a4,20(a5)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    89f8:	fe842783          	lw	a5,-24(s0)
    89fc:	0147a783          	lw	a5,20(a5)
    8a00:	fe842703          	lw	a4,-24(s0)
    8a04:	01872703          	lw	a4,24(a4)
    8a08:	00e7ac23          	sw	a4,24(a5)
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
    8a0c:	000287b7          	lui	a5,0x28
    8a10:	8207a703          	lw	a4,-2016(a5) # 27820 <OSTCBFreeList>
    8a14:	fe842783          	lw	a5,-24(s0)
    8a18:	00e7aa23          	sw	a4,20(a5)
    OSTCBFreeList       = ptcb;
    8a1c:	000287b7          	lui	a5,0x28
    8a20:	fe842703          	lw	a4,-24(s0)
    8a24:	82e7a023          	sw	a4,-2016(a5) # 27820 <OSTCBFreeList>
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
    8a28:	fe842783          	lw	a5,-24(s0)
    8a2c:	00023737          	lui	a4,0x23
    8a30:	09c70713          	add	a4,a4,156 # 2309c <OSUnMapTbl+0x138>
    8a34:	04e7aa23          	sw	a4,84(a5)
    8a38:	fec42783          	lw	a5,-20(s0)
    8a3c:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8a40:	fcc42783          	lw	a5,-52(s0)
    8a44:	0087f793          	and	a5,a5,8
    8a48:	3007a073          	csrs	mstatus,a5
}
    8a4c:	00000013          	nop
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    8a50:	000287b7          	lui	a5,0x28
    8a54:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
    8a58:	00100793          	li	a5,1
    8a5c:	00f71463          	bne	a4,a5,8a64 <OSTaskDel+0x36c>
        OS_Sched();                                     /* Find new highest priority task              */
    8a60:	d3df90ef          	jal	279c <OS_Sched>
    }
    return (OS_ERR_NONE);
    8a64:	00000793          	li	a5,0
}
    8a68:	00078513          	mv	a0,a5
    8a6c:	04c12083          	lw	ra,76(sp)
    8a70:	04812403          	lw	s0,72(sp)
    8a74:	05010113          	add	sp,sp,80
    8a78:	00008067          	ret

00008a7c <OSTaskDelReq>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDelReq (INT8U prio)
{
    8a7c:	fb010113          	add	sp,sp,-80
    8a80:	04812623          	sw	s0,76(sp)
    8a84:	05010413          	add	s0,sp,80
    8a88:	00050793          	mv	a5,a0
    8a8c:	faf40fa3          	sb	a5,-65(s0)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    8a90:	fe042623          	sw	zero,-20(s0)
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    8a94:	fbf44703          	lbu	a4,-65(s0)
    8a98:	01400793          	li	a5,20
    8a9c:	00f71663          	bne	a4,a5,8aa8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    8aa0:	03e00793          	li	a5,62
    8aa4:	1200006f          	j	8bc4 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    8aa8:	fbf44703          	lbu	a4,-65(s0)
    8aac:	01300793          	li	a5,19
    8ab0:	00e7fc63          	bgeu	a5,a4,8ac8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    8ab4:	fbf44703          	lbu	a4,-65(s0)
    8ab8:	0ff00793          	li	a5,255
    8abc:	00f70663          	beq	a4,a5,8ac8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    8ac0:	02a00793          	li	a5,42
    8ac4:	1000006f          	j	8bc4 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    8ac8:	fbf44703          	lbu	a4,-65(s0)
    8acc:	0ff00793          	li	a5,255
    8ad0:	04f71463          	bne	a4,a5,8b18 <OSTaskDelReq+0x9c>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8ad4:	00800793          	li	a5,8
    8ad8:	3007b7f3          	csrrc	a5,mstatus,a5
    8adc:	fcf42e23          	sw	a5,-36(s0)
    return context;
    8ae0:	fdc42783          	lw	a5,-36(s0)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    8ae4:	fef42623          	sw	a5,-20(s0)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    8ae8:	000287b7          	lui	a5,0x28
    8aec:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    8af0:	03f7c783          	lbu	a5,63(a5)
    8af4:	fef403a3          	sb	a5,-25(s0)
    8af8:	fec42783          	lw	a5,-20(s0)
    8afc:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8b00:	fe042783          	lw	a5,-32(s0)
    8b04:	0087f793          	and	a5,a5,8
    8b08:	3007a073          	csrs	mstatus,a5
}
    8b0c:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (stat);
    8b10:	fe744783          	lbu	a5,-25(s0)
    8b14:	0b00006f          	j	8bc4 <OSTaskDelReq+0x148>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8b18:	00800793          	li	a5,8
    8b1c:	3007b7f3          	csrrc	a5,mstatus,a5
    8b20:	fcf42c23          	sw	a5,-40(s0)
    return context;
    8b24:	fd842783          	lw	a5,-40(s0)
    }
    OS_ENTER_CRITICAL();
    8b28:	fef42623          	sw	a5,-20(s0)
    ptcb = OSTCBPrioTbl[prio];
    8b2c:	fbf44783          	lbu	a5,-65(s0)
    8b30:	0002d737          	lui	a4,0x2d
    8b34:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    8b38:	00279793          	sll	a5,a5,0x2
    8b3c:	00f707b3          	add	a5,a4,a5
    8b40:	0007a783          	lw	a5,0(a5)
    8b44:	fef42423          	sw	a5,-24(s0)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    8b48:	fe842783          	lw	a5,-24(s0)
    8b4c:	02079263          	bnez	a5,8b70 <OSTaskDelReq+0xf4>
    8b50:	fec42783          	lw	a5,-20(s0)
    8b54:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8b58:	fd442783          	lw	a5,-44(s0)
    8b5c:	0087f793          	and	a5,a5,8
    8b60:	3007a073          	csrs	mstatus,a5
}
    8b64:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    8b68:	04300793          	li	a5,67
    8b6c:	0580006f          	j	8bc4 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    8b70:	fe842703          	lw	a4,-24(s0)
    8b74:	00100793          	li	a5,1
    8b78:	02f71263          	bne	a4,a5,8b9c <OSTaskDelReq+0x120>
    8b7c:	fec42783          	lw	a5,-20(s0)
    8b80:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8b84:	fd042783          	lw	a5,-48(s0)
    8b88:	0087f793          	and	a5,a5,8
    8b8c:	3007a073          	csrs	mstatus,a5
}
    8b90:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    8b94:	03d00793          	li	a5,61
    8b98:	02c0006f          	j	8bc4 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    8b9c:	fe842783          	lw	a5,-24(s0)
    8ba0:	03f00713          	li	a4,63
    8ba4:	02e78fa3          	sb	a4,63(a5)
    8ba8:	fec42783          	lw	a5,-20(s0)
    8bac:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8bb0:	fcc42783          	lw	a5,-52(s0)
    8bb4:	0087f793          	and	a5,a5,8
    8bb8:	3007a073          	csrs	mstatus,a5
}
    8bbc:	00000013          	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8bc0:	00000793          	li	a5,0
}
    8bc4:	00078513          	mv	a0,a5
    8bc8:	04c12403          	lw	s0,76(sp)
    8bcc:	05010113          	add	sp,sp,80
    8bd0:	00008067          	ret

00008bd4 <OSTaskNameGet>:

#if OS_TASK_NAME_EN > 0u
INT8U  OSTaskNameGet (INT8U    prio,
                      INT8U  **pname,
                      INT8U   *perr)
{
    8bd4:	fc010113          	add	sp,sp,-64
    8bd8:	02112e23          	sw	ra,60(sp)
    8bdc:	02812c23          	sw	s0,56(sp)
    8be0:	04010413          	add	s0,sp,64
    8be4:	00050793          	mv	a5,a0
    8be8:	fcb42423          	sw	a1,-56(s0)
    8bec:	fcc42223          	sw	a2,-60(s0)
    8bf0:	fcf407a3          	sb	a5,-49(s0)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3u                             /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0u;
    8bf4:	fe042623          	sw	zero,-20(s0)
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    8bf8:	fcf44703          	lbu	a4,-49(s0)
    8bfc:	01400793          	li	a5,20
    8c00:	02e7f263          	bgeu	a5,a4,8c24 <OSTaskNameGet+0x50>
        if (prio != OS_PRIO_SELF) {
    8c04:	fcf44703          	lbu	a4,-49(s0)
    8c08:	0ff00793          	li	a5,255
    8c0c:	00f70c63          	beq	a4,a5,8c24 <OSTaskNameGet+0x50>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    8c10:	fc442783          	lw	a5,-60(s0)
    8c14:	02a00713          	li	a4,42
    8c18:	00e78023          	sb	a4,0(a5)
            return (0u);
    8c1c:	00000793          	li	a5,0
    8c20:	1440006f          	j	8d64 <OSTaskNameGet+0x190>
        }
    }
    if (pname == (INT8U **)0) {                          /* Is 'pname' a NULL pointer?                 */
    8c24:	fc842783          	lw	a5,-56(s0)
    8c28:	00079c63          	bnez	a5,8c40 <OSTaskNameGet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    8c2c:	fc442783          	lw	a5,-60(s0)
    8c30:	00c00713          	li	a4,12
    8c34:	00e78023          	sb	a4,0(a5)
        return (0u);
    8c38:	00000793          	li	a5,0
    8c3c:	1280006f          	j	8d64 <OSTaskNameGet+0x190>
    }
#endif
    if (OSIntNesting > 0u) {                              /* See if trying to call from an ISR          */
    8c40:	000287b7          	lui	a5,0x28
    8c44:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    8c48:	00078c63          	beqz	a5,8c60 <OSTaskNameGet+0x8c>
        *perr = OS_ERR_NAME_GET_ISR;
    8c4c:	fc442783          	lw	a5,-60(s0)
    8c50:	01100713          	li	a4,17
    8c54:	00e78023          	sb	a4,0(a5)
        return (0u);
    8c58:	00000793          	li	a5,0
    8c5c:	1080006f          	j	8d64 <OSTaskNameGet+0x190>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8c60:	00800793          	li	a5,8
    8c64:	3007b7f3          	csrrc	a5,mstatus,a5
    8c68:	fef42023          	sw	a5,-32(s0)
    return context;
    8c6c:	fe042783          	lw	a5,-32(s0)
    }
    OS_ENTER_CRITICAL();
    8c70:	fef42623          	sw	a5,-20(s0)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    8c74:	fcf44703          	lbu	a4,-49(s0)
    8c78:	0ff00793          	li	a5,255
    8c7c:	00f71a63          	bne	a4,a5,8c90 <OSTaskNameGet+0xbc>
        prio = OSTCBCur->OSTCBPrio;
    8c80:	000287b7          	lui	a5,0x28
    8c84:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    8c88:	03a7c783          	lbu	a5,58(a5)
    8c8c:	fcf407a3          	sb	a5,-49(s0)
    }
    ptcb = OSTCBPrioTbl[prio];
    8c90:	fcf44783          	lbu	a5,-49(s0)
    8c94:	0002d737          	lui	a4,0x2d
    8c98:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    8c9c:	00279793          	sll	a5,a5,0x2
    8ca0:	00f707b3          	add	a5,a4,a5
    8ca4:	0007a783          	lw	a5,0(a5)
    8ca8:	fef42423          	sw	a5,-24(s0)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    8cac:	fe842783          	lw	a5,-24(s0)
    8cb0:	02079863          	bnez	a5,8ce0 <OSTaskNameGet+0x10c>
    8cb4:	fec42783          	lw	a5,-20(s0)
    8cb8:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8cbc:	fdc42783          	lw	a5,-36(s0)
    8cc0:	0087f793          	and	a5,a5,8
    8cc4:	3007a073          	csrs	mstatus,a5
}
    8cc8:	00000013          	nop
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    8ccc:	fc442783          	lw	a5,-60(s0)
    8cd0:	04300713          	li	a4,67
    8cd4:	00e78023          	sb	a4,0(a5)
        return (0u);
    8cd8:	00000793          	li	a5,0
    8cdc:	0880006f          	j	8d64 <OSTaskNameGet+0x190>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    8ce0:	fe842703          	lw	a4,-24(s0)
    8ce4:	00100793          	li	a5,1
    8ce8:	02f71863          	bne	a4,a5,8d18 <OSTaskNameGet+0x144>
    8cec:	fec42783          	lw	a5,-20(s0)
    8cf0:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8cf4:	fd842783          	lw	a5,-40(s0)
    8cf8:	0087f793          	and	a5,a5,8
    8cfc:	3007a073          	csrs	mstatus,a5
}
    8d00:	00000013          	nop
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    8d04:	fc442783          	lw	a5,-60(s0)
    8d08:	04300713          	li	a4,67
    8d0c:	00e78023          	sb	a4,0(a5)
        return (0u);
    8d10:	00000793          	li	a5,0
    8d14:	0500006f          	j	8d64 <OSTaskNameGet+0x190>
    }
    *pname = ptcb->OSTCBTaskName;
    8d18:	fe842783          	lw	a5,-24(s0)
    8d1c:	0547a703          	lw	a4,84(a5)
    8d20:	fc842783          	lw	a5,-56(s0)
    8d24:	00e7a023          	sw	a4,0(a5)
    len    = OS_StrLen(*pname);
    8d28:	fc842783          	lw	a5,-56(s0)
    8d2c:	0007a783          	lw	a5,0(a5)
    8d30:	00078513          	mv	a0,a5
    8d34:	bc1f90ef          	jal	28f4 <OS_StrLen>
    8d38:	00050793          	mv	a5,a0
    8d3c:	fef403a3          	sb	a5,-25(s0)
    8d40:	fec42783          	lw	a5,-20(s0)
    8d44:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8d48:	fd442783          	lw	a5,-44(s0)
    8d4c:	0087f793          	and	a5,a5,8
    8d50:	3007a073          	csrs	mstatus,a5
}
    8d54:	00000013          	nop
    OS_EXIT_CRITICAL();
    *perr  = OS_ERR_NONE;
    8d58:	fc442783          	lw	a5,-60(s0)
    8d5c:	00078023          	sb	zero,0(a5)
    return (len);
    8d60:	fe744783          	lbu	a5,-25(s0)
}
    8d64:	00078513          	mv	a0,a5
    8d68:	03c12083          	lw	ra,60(sp)
    8d6c:	03812403          	lw	s0,56(sp)
    8d70:	04010113          	add	sp,sp,64
    8d74:	00008067          	ret

00008d78 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
    8d78:	fc010113          	add	sp,sp,-64
    8d7c:	02812e23          	sw	s0,60(sp)
    8d80:	04010413          	add	s0,sp,64
    8d84:	00050793          	mv	a5,a0
    8d88:	fcb42423          	sw	a1,-56(s0)
    8d8c:	fcc42223          	sw	a2,-60(s0)
    8d90:	fcf407a3          	sb	a5,-49(s0)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
    8d94:	fe042623          	sw	zero,-20(s0)
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    8d98:	fcf44703          	lbu	a4,-49(s0)
    8d9c:	01400793          	li	a5,20
    8da0:	02e7f063          	bgeu	a5,a4,8dc0 <OSTaskNameSet+0x48>
        if (prio != OS_PRIO_SELF) {
    8da4:	fcf44703          	lbu	a4,-49(s0)
    8da8:	0ff00793          	li	a5,255
    8dac:	00f70a63          	beq	a4,a5,8dc0 <OSTaskNameSet+0x48>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    8db0:	fc442783          	lw	a5,-60(s0)
    8db4:	02a00713          	li	a4,42
    8db8:	00e78023          	sb	a4,0(a5)
            return;
    8dbc:	1140006f          	j	8ed0 <OSTaskNameSet+0x158>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    8dc0:	fc842783          	lw	a5,-56(s0)
    8dc4:	00079a63          	bnez	a5,8dd8 <OSTaskNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    8dc8:	fc442783          	lw	a5,-60(s0)
    8dcc:	00c00713          	li	a4,12
    8dd0:	00e78023          	sb	a4,0(a5)
        return;
    8dd4:	0fc0006f          	j	8ed0 <OSTaskNameSet+0x158>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
    8dd8:	000287b7          	lui	a5,0x28
    8ddc:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    8de0:	00078a63          	beqz	a5,8df4 <OSTaskNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
    8de4:	fc442783          	lw	a5,-60(s0)
    8de8:	01200713          	li	a4,18
    8dec:	00e78023          	sb	a4,0(a5)
        return;
    8df0:	0e00006f          	j	8ed0 <OSTaskNameSet+0x158>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8df4:	00800793          	li	a5,8
    8df8:	3007b7f3          	csrrc	a5,mstatus,a5
    8dfc:	fef42223          	sw	a5,-28(s0)
    return context;
    8e00:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    8e04:	fef42623          	sw	a5,-20(s0)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    8e08:	fcf44703          	lbu	a4,-49(s0)
    8e0c:	0ff00793          	li	a5,255
    8e10:	00f71a63          	bne	a4,a5,8e24 <OSTaskNameSet+0xac>
        prio = OSTCBCur->OSTCBPrio;
    8e14:	000287b7          	lui	a5,0x28
    8e18:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    8e1c:	03a7c783          	lbu	a5,58(a5)
    8e20:	fcf407a3          	sb	a5,-49(s0)
    }
    ptcb = OSTCBPrioTbl[prio];
    8e24:	fcf44783          	lbu	a5,-49(s0)
    8e28:	0002d737          	lui	a4,0x2d
    8e2c:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    8e30:	00279793          	sll	a5,a5,0x2
    8e34:	00f707b3          	add	a5,a4,a5
    8e38:	0007a783          	lw	a5,0(a5)
    8e3c:	fef42423          	sw	a5,-24(s0)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    8e40:	fe842783          	lw	a5,-24(s0)
    8e44:	02079663          	bnez	a5,8e70 <OSTaskNameSet+0xf8>
    8e48:	fec42783          	lw	a5,-20(s0)
    8e4c:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8e50:	fe042783          	lw	a5,-32(s0)
    8e54:	0087f793          	and	a5,a5,8
    8e58:	3007a073          	csrs	mstatus,a5
}
    8e5c:	00000013          	nop
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    8e60:	fc442783          	lw	a5,-60(s0)
    8e64:	04300713          	li	a4,67
    8e68:	00e78023          	sb	a4,0(a5)
        return;
    8e6c:	0640006f          	j	8ed0 <OSTaskNameSet+0x158>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    8e70:	fe842703          	lw	a4,-24(s0)
    8e74:	00100793          	li	a5,1
    8e78:	02f71663          	bne	a4,a5,8ea4 <OSTaskNameSet+0x12c>
    8e7c:	fec42783          	lw	a5,-20(s0)
    8e80:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8e84:	fdc42783          	lw	a5,-36(s0)
    8e88:	0087f793          	and	a5,a5,8
    8e8c:	3007a073          	csrs	mstatus,a5
}
    8e90:	00000013          	nop
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    8e94:	fc442783          	lw	a5,-60(s0)
    8e98:	04300713          	li	a4,67
    8e9c:	00e78023          	sb	a4,0(a5)
        return;
    8ea0:	0300006f          	j	8ed0 <OSTaskNameSet+0x158>
    }
    ptcb->OSTCBTaskName = pname;
    8ea4:	fe842783          	lw	a5,-24(s0)
    8ea8:	fc842703          	lw	a4,-56(s0)
    8eac:	04e7aa23          	sw	a4,84(a5)
    8eb0:	fec42783          	lw	a5,-20(s0)
    8eb4:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8eb8:	fd842783          	lw	a5,-40(s0)
    8ebc:	0087f793          	and	a5,a5,8
    8ec0:	3007a073          	csrs	mstatus,a5
}
    8ec4:	00000013          	nop
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
    *perr               = OS_ERR_NONE;
    8ec8:	fc442783          	lw	a5,-60(s0)
    8ecc:	00078023          	sb	zero,0(a5)
}
    8ed0:	03c12403          	lw	s0,60(sp)
    8ed4:	04010113          	add	sp,sp,64
    8ed8:	00008067          	ret

00008edc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskResume (INT8U prio)
{
    8edc:	fb010113          	add	sp,sp,-80
    8ee0:	04112623          	sw	ra,76(sp)
    8ee4:	04812423          	sw	s0,72(sp)
    8ee8:	05010413          	add	s0,sp,80
    8eec:	00050793          	mv	a5,a0
    8ef0:	faf40fa3          	sb	a5,-65(s0)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
    8ef4:	fe042623          	sw	zero,-20(s0)
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    8ef8:	fbf44703          	lbu	a4,-65(s0)
    8efc:	01300793          	li	a5,19
    8f00:	00e7f663          	bgeu	a5,a4,8f0c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    8f04:	02a00793          	li	a5,42
    8f08:	1b40006f          	j	90bc <OSTaskResume+0x1e0>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8f0c:	00800793          	li	a5,8
    8f10:	3007b7f3          	csrrc	a5,mstatus,a5
    8f14:	fef42223          	sw	a5,-28(s0)
    return context;
    8f18:	fe442783          	lw	a5,-28(s0)
    }
#endif
    OS_ENTER_CRITICAL();
    8f1c:	fef42623          	sw	a5,-20(s0)
    ptcb = OSTCBPrioTbl[prio];
    8f20:	fbf44783          	lbu	a5,-65(s0)
    8f24:	0002d737          	lui	a4,0x2d
    8f28:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    8f2c:	00279793          	sll	a5,a5,0x2
    8f30:	00f707b3          	add	a5,a4,a5
    8f34:	0007a783          	lw	a5,0(a5)
    8f38:	fef42423          	sw	a5,-24(s0)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    8f3c:	fe842783          	lw	a5,-24(s0)
    8f40:	02079263          	bnez	a5,8f64 <OSTaskResume+0x88>
    8f44:	fec42783          	lw	a5,-20(s0)
    8f48:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8f4c:	fe042783          	lw	a5,-32(s0)
    8f50:	0087f793          	and	a5,a5,8
    8f54:	3007a073          	csrs	mstatus,a5
}
    8f58:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    8f5c:	04600793          	li	a5,70
    8f60:	15c0006f          	j	90bc <OSTaskResume+0x1e0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    8f64:	fe842703          	lw	a4,-24(s0)
    8f68:	00100793          	li	a5,1
    8f6c:	02f71263          	bne	a4,a5,8f90 <OSTaskResume+0xb4>
    8f70:	fec42783          	lw	a5,-20(s0)
    8f74:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    8f78:	fdc42783          	lw	a5,-36(s0)
    8f7c:	0087f793          	and	a5,a5,8
    8f80:	3007a073          	csrs	mstatus,a5
}
    8f84:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    8f88:	04300793          	li	a5,67
    8f8c:	1300006f          	j	90bc <OSTaskResume+0x1e0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    8f90:	fe842783          	lw	a5,-24(s0)
    8f94:	0387c783          	lbu	a5,56(a5)
    8f98:	0087f793          	and	a5,a5,8
    8f9c:	10078263          	beqz	a5,90a0 <OSTaskResume+0x1c4>
        ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
    8fa0:	fe842783          	lw	a5,-24(s0)
    8fa4:	0387c783          	lbu	a5,56(a5)
    8fa8:	ff77f793          	and	a5,a5,-9
    8fac:	0ff7f713          	zext.b	a4,a5
    8fb0:	fe842783          	lw	a5,-24(s0)
    8fb4:	02e78c23          	sb	a4,56(a5)
        if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) == OS_STAT_RDY) { /* See if task is now ready         */
    8fb8:	fe842783          	lw	a5,-24(s0)
    8fbc:	0387c783          	lbu	a5,56(a5)
    8fc0:	0377f793          	and	a5,a5,55
    8fc4:	0a079e63          	bnez	a5,9080 <OSTaskResume+0x1a4>
            if (ptcb->OSTCBDly == 0u) {
    8fc8:	fe842783          	lw	a5,-24(s0)
    8fcc:	0347a783          	lw	a5,52(a5)
    8fd0:	08079c63          	bnez	a5,9068 <OSTaskResume+0x18c>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    8fd4:	fe842783          	lw	a5,-24(s0)
    8fd8:	03e7c703          	lbu	a4,62(a5)
    8fdc:	000287b7          	lui	a5,0x28
    8fe0:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    8fe4:	00f767b3          	or	a5,a4,a5
    8fe8:	0ff7f713          	zext.b	a4,a5
    8fec:	000287b7          	lui	a5,0x28
    8ff0:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    8ff4:	fe842783          	lw	a5,-24(s0)
    8ff8:	03c7c783          	lbu	a5,60(a5)
    8ffc:	00078713          	mv	a4,a5
    9000:	000287b7          	lui	a5,0x28
    9004:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    9008:	00f707b3          	add	a5,a4,a5
    900c:	0007c703          	lbu	a4,0(a5)
    9010:	fe842783          	lw	a5,-24(s0)
    9014:	03d7c783          	lbu	a5,61(a5)
    9018:	fe842683          	lw	a3,-24(s0)
    901c:	03c6c683          	lbu	a3,60(a3)
    9020:	00f767b3          	or	a5,a4,a5
    9024:	0ff7f713          	zext.b	a4,a5
    9028:	000287b7          	lui	a5,0x28
    902c:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    9030:	00f687b3          	add	a5,a3,a5
    9034:	00e78023          	sb	a4,0(a5)
    9038:	fec42783          	lw	a5,-20(s0)
    903c:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9040:	fd842783          	lw	a5,-40(s0)
    9044:	0087f793          	and	a5,a5,8
    9048:	3007a073          	csrs	mstatus,a5
}
    904c:	00000013          	nop
                OS_TRACE_TASK_READY(ptcb);
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    9050:	000287b7          	lui	a5,0x28
    9054:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
    9058:	00100793          	li	a5,1
    905c:	02f71e63          	bne	a4,a5,9098 <OSTaskResume+0x1bc>
                    OS_TRACE_TASK_RESUME(ptcb);
                    OS_Sched();                               /* Find new highest priority task        */
    9060:	f3cf90ef          	jal	279c <OS_Sched>
    9064:	0340006f          	j	9098 <OSTaskResume+0x1bc>
    9068:	fec42783          	lw	a5,-20(s0)
    906c:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9070:	fd442783          	lw	a5,-44(s0)
    9074:	0087f793          	and	a5,a5,8
    9078:	3007a073          	csrs	mstatus,a5
}
    907c:	01c0006f          	j	9098 <OSTaskResume+0x1bc>
    9080:	fec42783          	lw	a5,-20(s0)
    9084:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9088:	fd042783          	lw	a5,-48(s0)
    908c:	0087f793          	and	a5,a5,8
    9090:	3007a073          	csrs	mstatus,a5
}
    9094:	00000013          	nop
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    9098:	00000793          	li	a5,0
    909c:	0200006f          	j	90bc <OSTaskResume+0x1e0>
    90a0:	fec42783          	lw	a5,-20(s0)
    90a4:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    90a8:	fcc42783          	lw	a5,-52(s0)
    90ac:	0087f793          	and	a5,a5,8
    90b0:	3007a073          	csrs	mstatus,a5
}
    90b4:	00000013          	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    90b8:	04400793          	li	a5,68
}
    90bc:	00078513          	mv	a0,a5
    90c0:	04c12083          	lw	ra,76(sp)
    90c4:	04812403          	lw	s0,72(sp)
    90c8:	05010113          	add	sp,sp,80
    90cc:	00008067          	ret

000090d0 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
    90d0:	fb010113          	add	sp,sp,-80
    90d4:	04812623          	sw	s0,76(sp)
    90d8:	05010413          	add	s0,sp,80
    90dc:	00050793          	mv	a5,a0
    90e0:	fab42c23          	sw	a1,-72(s0)
    90e4:	faf40fa3          	sb	a5,-65(s0)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
    90e8:	fe042223          	sw	zero,-28(s0)
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    90ec:	fbf44703          	lbu	a4,-65(s0)
    90f0:	01400793          	li	a5,20
    90f4:	00e7fc63          	bgeu	a5,a4,910c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    90f8:	fbf44703          	lbu	a4,-65(s0)
    90fc:	0ff00793          	li	a5,255
    9100:	00f70663          	beq	a4,a5,910c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    9104:	02a00793          	li	a5,42
    9108:	1700006f          	j	9278 <OSTaskStkChk+0x1a8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    910c:	fb842783          	lw	a5,-72(s0)
    9110:	00079663          	bnez	a5,911c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    9114:	00900793          	li	a5,9
    9118:	1600006f          	j	9278 <OSTaskStkChk+0x1a8>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
    911c:	fb842783          	lw	a5,-72(s0)
    9120:	0007a023          	sw	zero,0(a5)
    p_stk_data->OSUsed = 0u;
    9124:	fb842783          	lw	a5,-72(s0)
    9128:	0007a223          	sw	zero,4(a5)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    912c:	00800793          	li	a5,8
    9130:	3007b7f3          	csrrc	a5,mstatus,a5
    9134:	fcf42c23          	sw	a5,-40(s0)
    return context;
    9138:	fd842783          	lw	a5,-40(s0)
    OS_ENTER_CRITICAL();
    913c:	fef42223          	sw	a5,-28(s0)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    9140:	fbf44703          	lbu	a4,-65(s0)
    9144:	0ff00793          	li	a5,255
    9148:	00f71a63          	bne	a4,a5,915c <OSTaskStkChk+0x8c>
        prio = OSTCBCur->OSTCBPrio;
    914c:	000287b7          	lui	a5,0x28
    9150:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    9154:	03a7c783          	lbu	a5,58(a5)
    9158:	faf40fa3          	sb	a5,-65(s0)
    }
    ptcb = OSTCBPrioTbl[prio];
    915c:	fbf44783          	lbu	a5,-65(s0)
    9160:	0002d737          	lui	a4,0x2d
    9164:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    9168:	00279793          	sll	a5,a5,0x2
    916c:	00f707b3          	add	a5,a4,a5
    9170:	0007a783          	lw	a5,0(a5)
    9174:	fef42023          	sw	a5,-32(s0)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    9178:	fe042783          	lw	a5,-32(s0)
    917c:	02079263          	bnez	a5,91a0 <OSTaskStkChk+0xd0>
    9180:	fe442783          	lw	a5,-28(s0)
    9184:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9188:	fd442783          	lw	a5,-44(s0)
    918c:	0087f793          	and	a5,a5,8
    9190:	3007a073          	csrs	mstatus,a5
}
    9194:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    9198:	04300793          	li	a5,67
    919c:	0dc0006f          	j	9278 <OSTaskStkChk+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    91a0:	fe042703          	lw	a4,-32(s0)
    91a4:	00100793          	li	a5,1
    91a8:	02f71263          	bne	a4,a5,91cc <OSTaskStkChk+0xfc>
    91ac:	fe442783          	lw	a5,-28(s0)
    91b0:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    91b4:	fd042783          	lw	a5,-48(s0)
    91b8:	0087f793          	and	a5,a5,8
    91bc:	3007a073          	csrs	mstatus,a5
}
    91c0:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    91c4:	04300793          	li	a5,67
    91c8:	0b00006f          	j	9278 <OSTaskStkChk+0x1a8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
    91cc:	fe042783          	lw	a5,-32(s0)
    91d0:	0107d783          	lhu	a5,16(a5)
    91d4:	0017f793          	and	a5,a5,1
    91d8:	02079263          	bnez	a5,91fc <OSTaskStkChk+0x12c>
    91dc:	fe442783          	lw	a5,-28(s0)
    91e0:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    91e4:	fcc42783          	lw	a5,-52(s0)
    91e8:	0087f793          	and	a5,a5,8
    91ec:	3007a073          	csrs	mstatus,a5
}
    91f0:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    91f4:	04500793          	li	a5,69
    91f8:	0800006f          	j	9278 <OSTaskStkChk+0x1a8>
    }
    nfree = 0u;
    91fc:	fe042423          	sw	zero,-24(s0)
    size  = ptcb->OSTCBStkSize;
    9200:	fe042783          	lw	a5,-32(s0)
    9204:	00c7a783          	lw	a5,12(a5)
    9208:	fcf42e23          	sw	a5,-36(s0)
    pchk  = ptcb->OSTCBStkBottom;
    920c:	fe042783          	lw	a5,-32(s0)
    9210:	0087a783          	lw	a5,8(a5)
    9214:	fef42623          	sw	a5,-20(s0)
    9218:	fe442783          	lw	a5,-28(s0)
    921c:	fcf42423          	sw	a5,-56(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9220:	fc842783          	lw	a5,-56(s0)
    9224:	0087f793          	and	a5,a5,8
    9228:	3007a073          	csrs	mstatus,a5
}
    922c:	00000013          	nop
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    9230:	0100006f          	j	9240 <OSTaskStkChk+0x170>
        nfree++;
    9234:	fe842783          	lw	a5,-24(s0)
    9238:	00178793          	add	a5,a5,1
    923c:	fef42423          	sw	a5,-24(s0)
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    9240:	fec42783          	lw	a5,-20(s0)
    9244:	00478713          	add	a4,a5,4
    9248:	fee42623          	sw	a4,-20(s0)
    924c:	0007a783          	lw	a5,0(a5)
    9250:	fe0782e3          	beqz	a5,9234 <OSTaskStkChk+0x164>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
    9254:	fb842783          	lw	a5,-72(s0)
    9258:	fe842703          	lw	a4,-24(s0)
    925c:	00e7a023          	sw	a4,0(a5)
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
    9260:	fdc42703          	lw	a4,-36(s0)
    9264:	fe842783          	lw	a5,-24(s0)
    9268:	40f70733          	sub	a4,a4,a5
    926c:	fb842783          	lw	a5,-72(s0)
    9270:	00e7a223          	sw	a4,4(a5)
    return (OS_ERR_NONE);
    9274:	00000793          	li	a5,0
}
    9278:	00078513          	mv	a0,a5
    927c:	04c12403          	lw	s0,76(sp)
    9280:	05010113          	add	sp,sp,80
    9284:	00008067          	ret

00009288 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
    9288:	fc010113          	add	sp,sp,-64
    928c:	02112e23          	sw	ra,60(sp)
    9290:	02812c23          	sw	s0,56(sp)
    9294:	04010413          	add	s0,sp,64
    9298:	00050793          	mv	a5,a0
    929c:	fcf407a3          	sb	a5,-49(s0)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    92a0:	fe042423          	sw	zero,-24(s0)
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    92a4:	fcf44703          	lbu	a4,-49(s0)
    92a8:	01400793          	li	a5,20
    92ac:	00f71663          	bne	a4,a5,92b8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    92b0:	04700793          	li	a5,71
    92b4:	1c40006f          	j	9478 <OSTaskSuspend+0x1f0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    92b8:	fcf44703          	lbu	a4,-49(s0)
    92bc:	01300793          	li	a5,19
    92c0:	00e7fc63          	bgeu	a5,a4,92d8 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    92c4:	fcf44703          	lbu	a4,-49(s0)
    92c8:	0ff00793          	li	a5,255
    92cc:	00f70663          	beq	a4,a5,92d8 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    92d0:	02a00793          	li	a5,42
    92d4:	1a40006f          	j	9478 <OSTaskSuspend+0x1f0>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    92d8:	00800793          	li	a5,8
    92dc:	3007b7f3          	csrrc	a5,mstatus,a5
    92e0:	fcf42e23          	sw	a5,-36(s0)
    return context;
    92e4:	fdc42783          	lw	a5,-36(s0)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    92e8:	fef42423          	sw	a5,-24(s0)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    92ec:	fcf44703          	lbu	a4,-49(s0)
    92f0:	0ff00793          	li	a5,255
    92f4:	02f71063          	bne	a4,a5,9314 <OSTaskSuspend+0x8c>
        prio = OSTCBCur->OSTCBPrio;
    92f8:	000287b7          	lui	a5,0x28
    92fc:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    9300:	03a7c783          	lbu	a5,58(a5)
    9304:	fcf407a3          	sb	a5,-49(s0)
        self = OS_TRUE;
    9308:	00100793          	li	a5,1
    930c:	fef407a3          	sb	a5,-17(s0)
    9310:	0280006f          	j	9338 <OSTaskSuspend+0xb0>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    9314:	000287b7          	lui	a5,0x28
    9318:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    931c:	03a7c783          	lbu	a5,58(a5)
    9320:	fcf44703          	lbu	a4,-49(s0)
    9324:	00f71863          	bne	a4,a5,9334 <OSTaskSuspend+0xac>
        self = OS_TRUE;
    9328:	00100793          	li	a5,1
    932c:	fef407a3          	sb	a5,-17(s0)
    9330:	0080006f          	j	9338 <OSTaskSuspend+0xb0>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    9334:	fe0407a3          	sb	zero,-17(s0)
    }
    ptcb = OSTCBPrioTbl[prio];
    9338:	fcf44783          	lbu	a5,-49(s0)
    933c:	0002d737          	lui	a4,0x2d
    9340:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    9344:	00279793          	sll	a5,a5,0x2
    9348:	00f707b3          	add	a5,a4,a5
    934c:	0007a783          	lw	a5,0(a5)
    9350:	fef42223          	sw	a5,-28(s0)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    9354:	fe442783          	lw	a5,-28(s0)
    9358:	02079263          	bnez	a5,937c <OSTaskSuspend+0xf4>
    935c:	fe842783          	lw	a5,-24(s0)
    9360:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9364:	fd842783          	lw	a5,-40(s0)
    9368:	0087f793          	and	a5,a5,8
    936c:	3007a073          	csrs	mstatus,a5
}
    9370:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    9374:	04800793          	li	a5,72
    9378:	1000006f          	j	9478 <OSTaskSuspend+0x1f0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    937c:	fe442703          	lw	a4,-28(s0)
    9380:	00100793          	li	a5,1
    9384:	02f71263          	bne	a4,a5,93a8 <OSTaskSuspend+0x120>
    9388:	fe842783          	lw	a5,-24(s0)
    938c:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9390:	fd442783          	lw	a5,-44(s0)
    9394:	0087f793          	and	a5,a5,8
    9398:	3007a073          	csrs	mstatus,a5
}
    939c:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    93a0:	04300793          	li	a5,67
    93a4:	0d40006f          	j	9478 <OSTaskSuspend+0x1f0>
    }
    y            = ptcb->OSTCBY;
    93a8:	fe442783          	lw	a5,-28(s0)
    93ac:	03c7c783          	lbu	a5,60(a5)
    93b0:	fef401a3          	sb	a5,-29(s0)
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
    93b4:	fe344703          	lbu	a4,-29(s0)
    93b8:	000287b7          	lui	a5,0x28
    93bc:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    93c0:	00f707b3          	add	a5,a4,a5
    93c4:	0007c703          	lbu	a4,0(a5)
    93c8:	fe442783          	lw	a5,-28(s0)
    93cc:	03d7c783          	lbu	a5,61(a5)
    93d0:	fff7c793          	not	a5,a5
    93d4:	0ff7f793          	zext.b	a5,a5
    93d8:	fe344683          	lbu	a3,-29(s0)
    93dc:	00f777b3          	and	a5,a4,a5
    93e0:	0ff7f713          	zext.b	a4,a5
    93e4:	000287b7          	lui	a5,0x28
    93e8:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    93ec:	00f687b3          	add	a5,a3,a5
    93f0:	00e78023          	sb	a4,0(a5)
    if (OSRdyTbl[y] == 0u) {
    93f4:	fe344703          	lbu	a4,-29(s0)
    93f8:	000287b7          	lui	a5,0x28
    93fc:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    9400:	00f707b3          	add	a5,a4,a5
    9404:	0007c783          	lbu	a5,0(a5)
    9408:	02079663          	bnez	a5,9434 <OSTaskSuspend+0x1ac>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
    940c:	fe442783          	lw	a5,-28(s0)
    9410:	03e7c783          	lbu	a5,62(a5)
    9414:	fff7c793          	not	a5,a5
    9418:	0ff7f713          	zext.b	a4,a5
    941c:	000287b7          	lui	a5,0x28
    9420:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    9424:	00f777b3          	and	a5,a4,a5
    9428:	0ff7f713          	zext.b	a4,a5
    942c:	000287b7          	lui	a5,0x28
    9430:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    9434:	fe442783          	lw	a5,-28(s0)
    9438:	0387c783          	lbu	a5,56(a5)
    943c:	0087e793          	or	a5,a5,8
    9440:	0ff7f713          	zext.b	a4,a5
    9444:	fe442783          	lw	a5,-28(s0)
    9448:	02e78c23          	sb	a4,56(a5)
    944c:	fe842783          	lw	a5,-24(s0)
    9450:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9454:	fd042783          	lw	a5,-48(s0)
    9458:	0087f793          	and	a5,a5,8
    945c:	3007a073          	csrs	mstatus,a5
}
    9460:	00000013          	nop
    OS_EXIT_CRITICAL();
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    9464:	fef44703          	lbu	a4,-17(s0)
    9468:	00100793          	li	a5,1
    946c:	00f71463          	bne	a4,a5,9474 <OSTaskSuspend+0x1ec>
        OS_Sched();                                             /* Find new highest priority task      */
    9470:	b2cf90ef          	jal	279c <OS_Sched>
    }
    return (OS_ERR_NONE);
    9474:	00000793          	li	a5,0
}
    9478:	00078513          	mv	a0,a5
    947c:	03c12083          	lw	ra,60(sp)
    9480:	03812403          	lw	s0,56(sp)
    9484:	04010113          	add	sp,sp,64
    9488:	00008067          	ret

0000948c <OSTaskQuery>:
*/

#if OS_TASK_QUERY_EN > 0u
INT8U  OSTaskQuery (INT8U    prio,
                    OS_TCB  *p_task_data)
{
    948c:	fc010113          	add	sp,sp,-64
    9490:	02112e23          	sw	ra,60(sp)
    9494:	02812c23          	sw	s0,56(sp)
    9498:	04010413          	add	s0,sp,64
    949c:	00050793          	mv	a5,a0
    94a0:	fcb42423          	sw	a1,-56(s0)
    94a4:	fcf407a3          	sb	a5,-49(s0)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    94a8:	fe042623          	sw	zero,-20(s0)
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    94ac:	fcf44703          	lbu	a4,-49(s0)
    94b0:	01400793          	li	a5,20
    94b4:	00e7fc63          	bgeu	a5,a4,94cc <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    94b8:	fcf44703          	lbu	a4,-49(s0)
    94bc:	0ff00793          	li	a5,255
    94c0:	00f70663          	beq	a4,a5,94cc <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    94c4:	02a00793          	li	a5,42
    94c8:	0e00006f          	j	95a8 <OSTaskQuery+0x11c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    94cc:	fc842783          	lw	a5,-56(s0)
    94d0:	00079663          	bnez	a5,94dc <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    94d4:	00900793          	li	a5,9
    94d8:	0d00006f          	j	95a8 <OSTaskQuery+0x11c>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    94dc:	00800793          	li	a5,8
    94e0:	3007b7f3          	csrrc	a5,mstatus,a5
    94e4:	fef42223          	sw	a5,-28(s0)
    return context;
    94e8:	fe442783          	lw	a5,-28(s0)
    }
#endif
    OS_ENTER_CRITICAL();
    94ec:	fef42623          	sw	a5,-20(s0)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    94f0:	fcf44703          	lbu	a4,-49(s0)
    94f4:	0ff00793          	li	a5,255
    94f8:	00f71a63          	bne	a4,a5,950c <OSTaskQuery+0x80>
        prio = OSTCBCur->OSTCBPrio;
    94fc:	000287b7          	lui	a5,0x28
    9500:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    9504:	03a7c783          	lbu	a5,58(a5)
    9508:	fcf407a3          	sb	a5,-49(s0)
    }
    ptcb = OSTCBPrioTbl[prio];
    950c:	fcf44783          	lbu	a5,-49(s0)
    9510:	0002d737          	lui	a4,0x2d
    9514:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    9518:	00279793          	sll	a5,a5,0x2
    951c:	00f707b3          	add	a5,a4,a5
    9520:	0007a783          	lw	a5,0(a5)
    9524:	fef42423          	sw	a5,-24(s0)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    9528:	fe842783          	lw	a5,-24(s0)
    952c:	02079263          	bnez	a5,9550 <OSTaskQuery+0xc4>
    9530:	fec42783          	lw	a5,-20(s0)
    9534:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9538:	fe042783          	lw	a5,-32(s0)
    953c:	0087f793          	and	a5,a5,8
    9540:	3007a073          	csrs	mstatus,a5
}
    9544:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    9548:	02900793          	li	a5,41
    954c:	05c0006f          	j	95a8 <OSTaskQuery+0x11c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    9550:	fe842703          	lw	a4,-24(s0)
    9554:	00100793          	li	a5,1
    9558:	02f71263          	bne	a4,a5,957c <OSTaskQuery+0xf0>
    955c:	fec42783          	lw	a5,-20(s0)
    9560:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9564:	fdc42783          	lw	a5,-36(s0)
    9568:	0087f793          	and	a5,a5,8
    956c:	3007a073          	csrs	mstatus,a5
}
    9570:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    9574:	04300793          	li	a5,67
    9578:	0300006f          	j	95a8 <OSTaskQuery+0x11c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    957c:	0d800613          	li	a2,216
    9580:	fe842583          	lw	a1,-24(s0)
    9584:	fc842503          	lw	a0,-56(s0)
    9588:	9acf90ef          	jal	2734 <OS_MemCopy>
    958c:	fec42783          	lw	a5,-20(s0)
    9590:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9594:	fd842783          	lw	a5,-40(s0)
    9598:	0087f793          	and	a5,a5,8
    959c:	3007a073          	csrs	mstatus,a5
}
    95a0:	00000013          	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    95a4:	00000793          	li	a5,0
}
    95a8:	00078513          	mv	a0,a5
    95ac:	03c12083          	lw	ra,60(sp)
    95b0:	03812403          	lw	s0,56(sp)
    95b4:	04010113          	add	sp,sp,64
    95b8:	00008067          	ret

000095bc <OSTaskRegGet>:

#if OS_TASK_REG_TBL_SIZE > 0u
INT32U  OSTaskRegGet (INT8U   prio,
                      INT8U   id,
                      INT8U  *perr)
{
    95bc:	fc010113          	add	sp,sp,-64
    95c0:	02812e23          	sw	s0,60(sp)
    95c4:	04010413          	add	s0,sp,64
    95c8:	00050793          	mv	a5,a0
    95cc:	00058713          	mv	a4,a1
    95d0:	fcc42423          	sw	a2,-56(s0)
    95d4:	fcf407a3          	sb	a5,-49(s0)
    95d8:	00070793          	mv	a5,a4
    95dc:	fcf40723          	sb	a5,-50(s0)
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    95e0:	fe042423          	sw	zero,-24(s0)
        return (0u);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {
    95e4:	fcf44703          	lbu	a4,-49(s0)
    95e8:	01300793          	li	a5,19
    95ec:	02e7f263          	bgeu	a5,a4,9610 <OSTaskRegGet+0x54>
        if (prio != OS_PRIO_SELF) {
    95f0:	fcf44703          	lbu	a4,-49(s0)
    95f4:	0ff00793          	li	a5,255
    95f8:	00f70c63          	beq	a4,a5,9610 <OSTaskRegGet+0x54>
            *perr = OS_ERR_PRIO_INVALID;
    95fc:	fc842783          	lw	a5,-56(s0)
    9600:	02a00713          	li	a4,42
    9604:	00e78023          	sb	a4,0(a5)
            return (0u);
    9608:	00000793          	li	a5,0
    960c:	0b00006f          	j	96bc <OSTaskRegGet+0x100>
        }
    }
    if (id >= OS_TASK_REG_TBL_SIZE) {
    9610:	fce44703          	lbu	a4,-50(s0)
    9614:	01f00793          	li	a5,31
    9618:	00e7fc63          	bgeu	a5,a4,9630 <OSTaskRegGet+0x74>
        *perr = OS_ERR_ID_INVALID;
    961c:	fc842783          	lw	a5,-56(s0)
    9620:	00800713          	li	a4,8
    9624:	00e78023          	sb	a4,0(a5)
        return (0u);
    9628:	00000793          	li	a5,0
    962c:	0900006f          	j	96bc <OSTaskRegGet+0x100>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9630:	00800793          	li	a5,8
    9634:	3007b7f3          	csrrc	a5,mstatus,a5
    9638:	fef42023          	sw	a5,-32(s0)
    return context;
    963c:	fe042783          	lw	a5,-32(s0)
    }
#endif
    OS_ENTER_CRITICAL();
    9640:	fef42423          	sw	a5,-24(s0)
    if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
    9644:	fcf44703          	lbu	a4,-49(s0)
    9648:	0ff00793          	li	a5,255
    964c:	00f71a63          	bne	a4,a5,9660 <OSTaskRegGet+0xa4>
        ptcb = OSTCBCur;
    9650:	000287b7          	lui	a5,0x28
    9654:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    9658:	fef42623          	sw	a5,-20(s0)
    965c:	0200006f          	j	967c <OSTaskRegGet+0xc0>
    } else {
        ptcb = OSTCBPrioTbl[prio];
    9660:	fcf44783          	lbu	a5,-49(s0)
    9664:	0002d737          	lui	a4,0x2d
    9668:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    966c:	00279793          	sll	a5,a5,0x2
    9670:	00f707b3          	add	a5,a4,a5
    9674:	0007a783          	lw	a5,0(a5)
    9678:	fef42623          	sw	a5,-20(s0)
    }
    value = ptcb->OSTCBRegTbl[id];
    967c:	fce44783          	lbu	a5,-50(s0)
    9680:	fec42703          	lw	a4,-20(s0)
    9684:	01478793          	add	a5,a5,20
    9688:	00279793          	sll	a5,a5,0x2
    968c:	00f707b3          	add	a5,a4,a5
    9690:	0087a783          	lw	a5,8(a5)
    9694:	fef42223          	sw	a5,-28(s0)
    9698:	fe842783          	lw	a5,-24(s0)
    969c:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    96a0:	fdc42783          	lw	a5,-36(s0)
    96a4:	0087f793          	and	a5,a5,8
    96a8:	3007a073          	csrs	mstatus,a5
}
    96ac:	00000013          	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    96b0:	fc842783          	lw	a5,-56(s0)
    96b4:	00078023          	sb	zero,0(a5)
    return (value);
    96b8:	fe442783          	lw	a5,-28(s0)
}
    96bc:	00078513          	mv	a0,a5
    96c0:	03c12403          	lw	s0,60(sp)
    96c4:	04010113          	add	sp,sp,64
    96c8:	00008067          	ret

000096cc <OSTaskRegGetID>:
************************************************************************************************************************
*/

#if OS_TASK_REG_TBL_SIZE > 0u
INT8U  OSTaskRegGetID (INT8U  *perr)
{
    96cc:	fc010113          	add	sp,sp,-64
    96d0:	02812e23          	sw	s0,60(sp)
    96d4:	04010413          	add	s0,sp,64
    96d8:	fca42623          	sw	a0,-52(s0)
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    96dc:	fe042623          	sw	zero,-20(s0)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    96e0:	00800793          	li	a5,8
    96e4:	3007b7f3          	csrrc	a5,mstatus,a5
    96e8:	fef42223          	sw	a5,-28(s0)
    return context;
    96ec:	fe442783          	lw	a5,-28(s0)
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((INT8U)OS_TASK_REG_TBL_SIZE);
    }
#endif

    OS_ENTER_CRITICAL();
    96f0:	fef42623          	sw	a5,-20(s0)
    if (OSTaskRegNextAvailID >= OS_TASK_REG_TBL_SIZE) {         /* See if we exceeded the number of IDs available     */
    96f4:	000287b7          	lui	a5,0x28
    96f8:	8387c703          	lbu	a4,-1992(a5) # 27838 <OSTaskRegNextAvailID>
    96fc:	01f00793          	li	a5,31
    9700:	02e7f863          	bgeu	a5,a4,9730 <OSTaskRegGetID+0x64>
       *perr = OS_ERR_NO_MORE_ID_AVAIL;                         /* Yes, cannot allocate more task register IDs        */
    9704:	fcc42783          	lw	a5,-52(s0)
    9708:	f9600713          	li	a4,-106
    970c:	00e78023          	sb	a4,0(a5)
    9710:	fec42783          	lw	a5,-20(s0)
    9714:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9718:	fe042783          	lw	a5,-32(s0)
    971c:	0087f793          	and	a5,a5,8
    9720:	3007a073          	csrs	mstatus,a5
}
    9724:	00000013          	nop
        OS_EXIT_CRITICAL();
        return ((INT8U)OS_TASK_REG_TBL_SIZE);
    9728:	02000793          	li	a5,32
    972c:	04c0006f          	j	9778 <OSTaskRegGetID+0xac>
    }

    id   = OSTaskRegNextAvailID;                                /* Assign the next available ID                       */
    9730:	000287b7          	lui	a5,0x28
    9734:	8387c783          	lbu	a5,-1992(a5) # 27838 <OSTaskRegNextAvailID>
    9738:	fef405a3          	sb	a5,-21(s0)
    OSTaskRegNextAvailID++;                                     /* Increment available ID for next request            */
    973c:	000287b7          	lui	a5,0x28
    9740:	8387c783          	lbu	a5,-1992(a5) # 27838 <OSTaskRegNextAvailID>
    9744:	00178793          	add	a5,a5,1
    9748:	0ff7f713          	zext.b	a4,a5
    974c:	000287b7          	lui	a5,0x28
    9750:	82e78c23          	sb	a4,-1992(a5) # 27838 <OSTaskRegNextAvailID>
    9754:	fec42783          	lw	a5,-20(s0)
    9758:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    975c:	fdc42783          	lw	a5,-36(s0)
    9760:	0087f793          	and	a5,a5,8
    9764:	3007a073          	csrs	mstatus,a5
}
    9768:	00000013          	nop
    OS_EXIT_CRITICAL();
   *perr = OS_ERR_NONE;
    976c:	fcc42783          	lw	a5,-52(s0)
    9770:	00078023          	sb	zero,0(a5)
    return (id);
    9774:	feb44783          	lbu	a5,-21(s0)
}
    9778:	00078513          	mv	a0,a5
    977c:	03c12403          	lw	s0,60(sp)
    9780:	04010113          	add	sp,sp,64
    9784:	00008067          	ret

00009788 <OSTaskRegSet>:
#if OS_TASK_REG_TBL_SIZE > 0u
void  OSTaskRegSet (INT8U    prio,
                    INT8U    id,
                    INT32U   value,
                    INT8U   *perr)
{
    9788:	fd010113          	add	sp,sp,-48
    978c:	02812623          	sw	s0,44(sp)
    9790:	03010413          	add	s0,sp,48
    9794:	00050793          	mv	a5,a0
    9798:	00058713          	mv	a4,a1
    979c:	fcc42c23          	sw	a2,-40(s0)
    97a0:	fcd42a23          	sw	a3,-44(s0)
    97a4:	fcf40fa3          	sb	a5,-33(s0)
    97a8:	00070793          	mv	a5,a4
    97ac:	fcf40f23          	sb	a5,-34(s0)
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    97b0:	fe042423          	sw	zero,-24(s0)
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {
    97b4:	fdf44703          	lbu	a4,-33(s0)
    97b8:	01300793          	li	a5,19
    97bc:	02e7f063          	bgeu	a5,a4,97dc <OSTaskRegSet+0x54>
        if (prio != OS_PRIO_SELF) {
    97c0:	fdf44703          	lbu	a4,-33(s0)
    97c4:	0ff00793          	li	a5,255
    97c8:	00f70a63          	beq	a4,a5,97dc <OSTaskRegSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;
    97cc:	fd442783          	lw	a5,-44(s0)
    97d0:	02a00713          	li	a4,42
    97d4:	00e78023          	sb	a4,0(a5)
            return;
    97d8:	0a80006f          	j	9880 <OSTaskRegSet+0xf8>
        }
    }
    if (id >= OS_TASK_REG_TBL_SIZE) {
    97dc:	fde44703          	lbu	a4,-34(s0)
    97e0:	01f00793          	li	a5,31
    97e4:	00e7fa63          	bgeu	a5,a4,97f8 <OSTaskRegSet+0x70>
        *perr = OS_ERR_ID_INVALID;
    97e8:	fd442783          	lw	a5,-44(s0)
    97ec:	00800713          	li	a4,8
    97f0:	00e78023          	sb	a4,0(a5)
        return;
    97f4:	08c0006f          	j	9880 <OSTaskRegSet+0xf8>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    97f8:	00800793          	li	a5,8
    97fc:	3007b7f3          	csrrc	a5,mstatus,a5
    9800:	fef42223          	sw	a5,-28(s0)
    return context;
    9804:	fe442783          	lw	a5,-28(s0)
    }
#endif
    OS_ENTER_CRITICAL();
    9808:	fef42423          	sw	a5,-24(s0)
    if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
    980c:	fdf44703          	lbu	a4,-33(s0)
    9810:	0ff00793          	li	a5,255
    9814:	00f71a63          	bne	a4,a5,9828 <OSTaskRegSet+0xa0>
        ptcb = OSTCBCur;
    9818:	000287b7          	lui	a5,0x28
    981c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    9820:	fef42623          	sw	a5,-20(s0)
    9824:	0200006f          	j	9844 <OSTaskRegSet+0xbc>
    } else {
        ptcb = OSTCBPrioTbl[prio];
    9828:	fdf44783          	lbu	a5,-33(s0)
    982c:	0002d737          	lui	a4,0x2d
    9830:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    9834:	00279793          	sll	a5,a5,0x2
    9838:	00f707b3          	add	a5,a4,a5
    983c:	0007a783          	lw	a5,0(a5)
    9840:	fef42623          	sw	a5,-20(s0)
    }
    ptcb->OSTCBRegTbl[id] = value;
    9844:	fde44783          	lbu	a5,-34(s0)
    9848:	fec42703          	lw	a4,-20(s0)
    984c:	01478793          	add	a5,a5,20
    9850:	00279793          	sll	a5,a5,0x2
    9854:	00f707b3          	add	a5,a4,a5
    9858:	fd842703          	lw	a4,-40(s0)
    985c:	00e7a423          	sw	a4,8(a5)
    9860:	fe842783          	lw	a5,-24(s0)
    9864:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9868:	fe042783          	lw	a5,-32(s0)
    986c:	0087f793          	and	a5,a5,8
    9870:	3007a073          	csrs	mstatus,a5
}
    9874:	00000013          	nop
    OS_EXIT_CRITICAL();
    *perr                 = OS_ERR_NONE;
    9878:	fd442783          	lw	a5,-44(s0)
    987c:	00078023          	sb	zero,0(a5)
}
    9880:	02c12403          	lw	s0,44(sp)
    9884:	03010113          	add	sp,sp,48
    9888:	00008067          	ret

0000988c <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
    988c:	ff010113          	add	sp,sp,-16
    9890:	00112623          	sw	ra,12(sp)
    9894:	00812423          	sw	s0,8(sp)
    9898:	01010413          	add	s0,sp,16
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
    989c:	000287b7          	lui	a5,0x28
    98a0:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    98a4:	00078513          	mv	a0,a5
    98a8:	41c020ef          	jal	bcc4 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
    98ac:	0ff00513          	li	a0,255
    98b0:	e49fe0ef          	jal	86f8 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
    98b4:	00000013          	nop
    98b8:	00c12083          	lw	ra,12(sp)
    98bc:	00812403          	lw	s0,8(sp)
    98c0:	01010113          	add	sp,sp,16
    98c4:	00008067          	ret

000098c8 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
    98c8:	fe010113          	add	sp,sp,-32
    98cc:	00812e23          	sw	s0,28(sp)
    98d0:	02010413          	add	s0,sp,32
    98d4:	fea42623          	sw	a0,-20(s0)
    98d8:	feb42423          	sw	a1,-24(s0)
    98dc:	00060793          	mv	a5,a2
    98e0:	fef41323          	sh	a5,-26(s0)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
    98e4:	fe645783          	lhu	a5,-26(s0)
    98e8:	0017f793          	and	a5,a5,1
    98ec:	02078c63          	beqz	a5,9924 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
    98f0:	fe645783          	lhu	a5,-26(s0)
    98f4:	0027f793          	and	a5,a5,2
    98f8:	02078663          	beqz	a5,9924 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
    98fc:	0200006f          	j	991c <OS_TaskStkClr+0x54>
                size--;
    9900:	fe842783          	lw	a5,-24(s0)
    9904:	fff78793          	add	a5,a5,-1
    9908:	fef42423          	sw	a5,-24(s0)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    990c:	fec42783          	lw	a5,-20(s0)
    9910:	00478713          	add	a4,a5,4
    9914:	fee42623          	sw	a4,-20(s0)
    9918:	0007a023          	sw	zero,0(a5)
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
    991c:	fe842783          	lw	a5,-24(s0)
    9920:	fe0790e3          	bnez	a5,9900 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    9924:	00000013          	nop
    9928:	01c12403          	lw	s0,28(sp)
    992c:	02010113          	add	sp,sp,32
    9930:	00008067          	ret

00009934 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
    9934:	fd010113          	add	sp,sp,-48
    9938:	02112623          	sw	ra,44(sp)
    993c:	02812423          	sw	s0,40(sp)
    9940:	03010413          	add	s0,sp,48
    9944:	fca42e23          	sw	a0,-36(s0)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    9948:	fe042623          	sw	zero,-20(s0)
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
    994c:	000287b7          	lui	a5,0x28
    9950:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    9954:	0e079a63          	bnez	a5,9a48 <OSTimeDly+0x114>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
    9958:	000287b7          	lui	a5,0x28
    995c:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    9960:	0e079863          	bnez	a5,9a50 <OSTimeDly+0x11c>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
    9964:	fdc42783          	lw	a5,-36(s0)
    9968:	0e078663          	beqz	a5,9a54 <OSTimeDly+0x120>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    996c:	00800793          	li	a5,8
    9970:	3007b7f3          	csrrc	a5,mstatus,a5
    9974:	fef42223          	sw	a5,-28(s0)
    return context;
    9978:	fe442783          	lw	a5,-28(s0)
        OS_ENTER_CRITICAL();
    997c:	fef42623          	sw	a5,-20(s0)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    9980:	000287b7          	lui	a5,0x28
    9984:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    9988:	03c7c783          	lbu	a5,60(a5)
    998c:	fef405a3          	sb	a5,-21(s0)
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
    9990:	feb44703          	lbu	a4,-21(s0)
    9994:	000287b7          	lui	a5,0x28
    9998:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    999c:	00f707b3          	add	a5,a4,a5
    99a0:	0007c703          	lbu	a4,0(a5)
    99a4:	000287b7          	lui	a5,0x28
    99a8:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    99ac:	03d7c783          	lbu	a5,61(a5)
    99b0:	fff7c793          	not	a5,a5
    99b4:	0ff7f793          	zext.b	a5,a5
    99b8:	feb44683          	lbu	a3,-21(s0)
    99bc:	00f777b3          	and	a5,a4,a5
    99c0:	0ff7f713          	zext.b	a4,a5
    99c4:	000287b7          	lui	a5,0x28
    99c8:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    99cc:	00f687b3          	add	a5,a3,a5
    99d0:	00e78023          	sb	a4,0(a5)
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
    99d4:	feb44703          	lbu	a4,-21(s0)
    99d8:	000287b7          	lui	a5,0x28
    99dc:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    99e0:	00f707b3          	add	a5,a4,a5
    99e4:	0007c783          	lbu	a5,0(a5)
    99e8:	02079863          	bnez	a5,9a18 <OSTimeDly+0xe4>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
    99ec:	000287b7          	lui	a5,0x28
    99f0:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    99f4:	03e7c783          	lbu	a5,62(a5)
    99f8:	fff7c793          	not	a5,a5
    99fc:	0ff7f713          	zext.b	a4,a5
    9a00:	000287b7          	lui	a5,0x28
    9a04:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    9a08:	00f777b3          	and	a5,a4,a5
    9a0c:	0ff7f713          	zext.b	a4,a5
    9a10:	000287b7          	lui	a5,0x28
    9a14:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    9a18:	000287b7          	lui	a5,0x28
    9a1c:	81c7a783          	lw	a5,-2020(a5) # 2781c <OSTCBCur>
    9a20:	fdc42703          	lw	a4,-36(s0)
    9a24:	02e7aa23          	sw	a4,52(a5)
    9a28:	fec42783          	lw	a5,-20(s0)
    9a2c:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9a30:	fe042783          	lw	a5,-32(s0)
    9a34:	0087f793          	and	a5,a5,8
    9a38:	3007a073          	csrs	mstatus,a5
}
    9a3c:	00000013          	nop
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    9a40:	d5df80ef          	jal	279c <OS_Sched>
    9a44:	0100006f          	j	9a54 <OSTimeDly+0x120>
        return;
    9a48:	00000013          	nop
    9a4c:	0080006f          	j	9a54 <OSTimeDly+0x120>
        return;
    9a50:	00000013          	nop
    }
}
    9a54:	02c12083          	lw	ra,44(sp)
    9a58:	02812403          	lw	s0,40(sp)
    9a5c:	03010113          	add	sp,sp,48
    9a60:	00008067          	ret

00009a64 <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
    9a64:	fd010113          	add	sp,sp,-48
    9a68:	02112623          	sw	ra,44(sp)
    9a6c:	02812423          	sw	s0,40(sp)
    9a70:	02912223          	sw	s1,36(sp)
    9a74:	03010413          	add	s0,sp,48
    9a78:	00050793          	mv	a5,a0
    9a7c:	00068713          	mv	a4,a3
    9a80:	fcf40fa3          	sb	a5,-33(s0)
    9a84:	00058793          	mv	a5,a1
    9a88:	fcf40f23          	sb	a5,-34(s0)
    9a8c:	00060793          	mv	a5,a2
    9a90:	fcf40ea3          	sb	a5,-35(s0)
    9a94:	00070793          	mv	a5,a4
    9a98:	fcf41d23          	sh	a5,-38(s0)
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
    9a9c:	000287b7          	lui	a5,0x28
    9aa0:	8097c783          	lbu	a5,-2039(a5) # 27809 <OSIntNesting>
    9aa4:	00078663          	beqz	a5,9ab0 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
    9aa8:	05500793          	li	a5,85
    9aac:	1180006f          	j	9bc4 <OSTimeDlyHMSM+0x160>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
    9ab0:	000287b7          	lui	a5,0x28
    9ab4:	80a7c783          	lbu	a5,-2038(a5) # 2780a <OSLockNesting>
    9ab8:	00078663          	beqz	a5,9ac4 <OSTimeDlyHMSM+0x60>
        return (OS_ERR_SCHED_LOCKED);
    9abc:	03200793          	li	a5,50
    9ac0:	1040006f          	j	9bc4 <OSTimeDlyHMSM+0x160>
    }
#if OS_ARG_CHK_EN > 0u
    if (hours == 0u) {
    9ac4:	fdf44783          	lbu	a5,-33(s0)
    9ac8:	02079263          	bnez	a5,9aec <OSTimeDlyHMSM+0x88>
        if (minutes == 0u) {
    9acc:	fde44783          	lbu	a5,-34(s0)
    9ad0:	00079e63          	bnez	a5,9aec <OSTimeDlyHMSM+0x88>
            if (seconds == 0u) {
    9ad4:	fdd44783          	lbu	a5,-35(s0)
    9ad8:	00079a63          	bnez	a5,9aec <OSTimeDlyHMSM+0x88>
                if (ms == 0u) {
    9adc:	fda45783          	lhu	a5,-38(s0)
    9ae0:	00079663          	bnez	a5,9aec <OSTimeDlyHMSM+0x88>
                    return (OS_ERR_TIME_ZERO_DLY);
    9ae4:	05400793          	li	a5,84
    9ae8:	0dc0006f          	j	9bc4 <OSTimeDlyHMSM+0x160>
                }
            }
        }
    }
    if (minutes > 59u) {
    9aec:	fde44703          	lbu	a4,-34(s0)
    9af0:	03b00793          	li	a5,59
    9af4:	00e7f663          	bgeu	a5,a4,9b00 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    9af8:	05100793          	li	a5,81
    9afc:	0c80006f          	j	9bc4 <OSTimeDlyHMSM+0x160>
    }
    if (seconds > 59u) {
    9b00:	fdd44703          	lbu	a4,-35(s0)
    9b04:	03b00793          	li	a5,59
    9b08:	00e7f663          	bgeu	a5,a4,9b14 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_SECONDS);
    9b0c:	05200793          	li	a5,82
    9b10:	0b40006f          	j	9bc4 <OSTimeDlyHMSM+0x160>
    }
    if (ms > 999u) {
    9b14:	fda45703          	lhu	a4,-38(s0)
    9b18:	3e700793          	li	a5,999
    9b1c:	00e7f663          	bgeu	a5,a4,9b28 <OSTimeDlyHMSM+0xc4>
        return (OS_ERR_TIME_INVALID_MS);
    9b20:	05300793          	li	a5,83
    9b24:	0a00006f          	j	9bc4 <OSTimeDlyHMSM+0x160>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
    9b28:	fdf44703          	lbu	a4,-33(s0)
    9b2c:	00070793          	mv	a5,a4
    9b30:	00379793          	sll	a5,a5,0x3
    9b34:	40e787b3          	sub	a5,a5,a4
    9b38:	00579793          	sll	a5,a5,0x5
    9b3c:	00e787b3          	add	a5,a5,a4
    9b40:	00479793          	sll	a5,a5,0x4
    9b44:	00078693          	mv	a3,a5
    9b48:	fde44703          	lbu	a4,-34(s0)
    9b4c:	00070793          	mv	a5,a4
    9b50:	00479793          	sll	a5,a5,0x4
    9b54:	40e787b3          	sub	a5,a5,a4
    9b58:	00279793          	sll	a5,a5,0x2
    9b5c:	00f68733          	add	a4,a3,a5
    9b60:	fdd44783          	lbu	a5,-35(s0)
    9b64:	00f70733          	add	a4,a4,a5
    9b68:	00070793          	mv	a5,a4
    9b6c:	00579793          	sll	a5,a5,0x5
    9b70:	40e787b3          	sub	a5,a5,a4
    9b74:	00279793          	sll	a5,a5,0x2
    9b78:	00e787b3          	add	a5,a5,a4
    9b7c:	00379793          	sll	a5,a5,0x3
    9b80:	00078493          	mv	s1,a5
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
    9b84:	fda45703          	lhu	a4,-38(s0)
    9b88:	00070793          	mv	a5,a4
    9b8c:	00579793          	sll	a5,a5,0x5
    9b90:	40e787b3          	sub	a5,a5,a4
    9b94:	00279793          	sll	a5,a5,0x2
    9b98:	00e787b3          	add	a5,a5,a4
    9b9c:	00379793          	sll	a5,a5,0x3
    9ba0:	3e800593          	li	a1,1000
    9ba4:	00078513          	mv	a0,a5
    9ba8:	7b9170ef          	jal	21b60 <__hidden___udivsi3>
    9bac:	00050793          	mv	a5,a0
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
    9bb0:	00f487b3          	add	a5,s1,a5
    9bb4:	fef42623          	sw	a5,-20(s0)
    OSTimeDly(ticks);
    9bb8:	fec42503          	lw	a0,-20(s0)
    9bbc:	d79ff0ef          	jal	9934 <OSTimeDly>
    return (OS_ERR_NONE);
    9bc0:	00000793          	li	a5,0
}
    9bc4:	00078513          	mv	a0,a5
    9bc8:	02c12083          	lw	ra,44(sp)
    9bcc:	02812403          	lw	s0,40(sp)
    9bd0:	02412483          	lw	s1,36(sp)
    9bd4:	03010113          	add	sp,sp,48
    9bd8:	00008067          	ret

00009bdc <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0u
INT8U  OSTimeDlyResume (INT8U prio)
{
    9bdc:	fc010113          	add	sp,sp,-64
    9be0:	02112e23          	sw	ra,60(sp)
    9be4:	02812c23          	sw	s0,56(sp)
    9be8:	04010413          	add	s0,sp,64
    9bec:	00050793          	mv	a5,a0
    9bf0:	fcf407a3          	sb	a5,-49(s0)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                                   /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
    9bf4:	fe042623          	sw	zero,-20(s0)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    9bf8:	fcf44703          	lbu	a4,-49(s0)
    9bfc:	01300793          	li	a5,19
    9c00:	00e7f663          	bgeu	a5,a4,9c0c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    9c04:	02a00793          	li	a5,42
    9c08:	1ac0006f          	j	9db4 <OSTimeDlyResume+0x1d8>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9c0c:	00800793          	li	a5,8
    9c10:	3007b7f3          	csrrc	a5,mstatus,a5
    9c14:	fef42223          	sw	a5,-28(s0)
    return context;
    9c18:	fe442783          	lw	a5,-28(s0)
    }
    OS_ENTER_CRITICAL();
    9c1c:	fef42623          	sw	a5,-20(s0)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    9c20:	fcf44783          	lbu	a5,-49(s0)
    9c24:	0002d737          	lui	a4,0x2d
    9c28:	fb870713          	add	a4,a4,-72 # 2cfb8 <OSTCBPrioTbl>
    9c2c:	00279793          	sll	a5,a5,0x2
    9c30:	00f707b3          	add	a5,a4,a5
    9c34:	0007a783          	lw	a5,0(a5)
    9c38:	fef42423          	sw	a5,-24(s0)
    if (ptcb == (OS_TCB *)0) {
    9c3c:	fe842783          	lw	a5,-24(s0)
    9c40:	02079263          	bnez	a5,9c64 <OSTimeDlyResume+0x88>
    9c44:	fec42783          	lw	a5,-20(s0)
    9c48:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9c4c:	fe042783          	lw	a5,-32(s0)
    9c50:	0087f793          	and	a5,a5,8
    9c54:	3007a073          	csrs	mstatus,a5
}
    9c58:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    9c5c:	04300793          	li	a5,67
    9c60:	1540006f          	j	9db4 <OSTimeDlyResume+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    9c64:	fe842703          	lw	a4,-24(s0)
    9c68:	00100793          	li	a5,1
    9c6c:	02f71263          	bne	a4,a5,9c90 <OSTimeDlyResume+0xb4>
    9c70:	fec42783          	lw	a5,-20(s0)
    9c74:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9c78:	fdc42783          	lw	a5,-36(s0)
    9c7c:	0087f793          	and	a5,a5,8
    9c80:	3007a073          	csrs	mstatus,a5
}
    9c84:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    9c88:	04300793          	li	a5,67
    9c8c:	1280006f          	j	9db4 <OSTimeDlyResume+0x1d8>
    }
    if (ptcb->OSTCBDly == 0u) {                                /* See if task is delayed               */
    9c90:	fe842783          	lw	a5,-24(s0)
    9c94:	0347a783          	lw	a5,52(a5)
    9c98:	02079263          	bnez	a5,9cbc <OSTimeDlyResume+0xe0>
    9c9c:	fec42783          	lw	a5,-20(s0)
    9ca0:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9ca4:	fd842783          	lw	a5,-40(s0)
    9ca8:	0087f793          	and	a5,a5,8
    9cac:	3007a073          	csrs	mstatus,a5
}
    9cb0:	00000013          	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    9cb4:	05000793          	li	a5,80
    9cb8:	0fc0006f          	j	9db4 <OSTimeDlyResume+0x1d8>
    }

    ptcb->OSTCBDly = 0u;                                       /* Clear the time delay                 */
    9cbc:	fe842783          	lw	a5,-24(s0)
    9cc0:	0207aa23          	sw	zero,52(a5)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    9cc4:	fe842783          	lw	a5,-24(s0)
    9cc8:	0387c783          	lbu	a5,56(a5)
    9ccc:	0377f793          	and	a5,a5,55
    9cd0:	02078663          	beqz	a5,9cfc <OSTimeDlyResume+0x120>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    9cd4:	fe842783          	lw	a5,-24(s0)
    9cd8:	0387c783          	lbu	a5,56(a5)
    9cdc:	fc87f793          	and	a5,a5,-56
    9ce0:	0ff7f713          	zext.b	a4,a5
    9ce4:	fe842783          	lw	a5,-24(s0)
    9ce8:	02e78c23          	sb	a4,56(a5)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    9cec:	fe842783          	lw	a5,-24(s0)
    9cf0:	00100713          	li	a4,1
    9cf4:	02e78ca3          	sb	a4,57(a5)
    9cf8:	00c0006f          	j	9d04 <OSTimeDlyResume+0x128>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    9cfc:	fe842783          	lw	a5,-24(s0)
    9d00:	02078ca3          	sb	zero,57(a5)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    9d04:	fe842783          	lw	a5,-24(s0)
    9d08:	0387c783          	lbu	a5,56(a5)
    9d0c:	0087f793          	and	a5,a5,8
    9d10:	08079463          	bnez	a5,9d98 <OSTimeDlyResume+0x1bc>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    9d14:	fe842783          	lw	a5,-24(s0)
    9d18:	03e7c703          	lbu	a4,62(a5)
    9d1c:	000287b7          	lui	a5,0x28
    9d20:	80d7c783          	lbu	a5,-2035(a5) # 2780d <OSRdyGrp>
    9d24:	00f767b3          	or	a5,a4,a5
    9d28:	0ff7f713          	zext.b	a4,a5
    9d2c:	000287b7          	lui	a5,0x28
    9d30:	80e786a3          	sb	a4,-2035(a5) # 2780d <OSRdyGrp>
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    9d34:	fe842783          	lw	a5,-24(s0)
    9d38:	03c7c783          	lbu	a5,60(a5)
    9d3c:	00078713          	mv	a4,a5
    9d40:	000287b7          	lui	a5,0x28
    9d44:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    9d48:	00f707b3          	add	a5,a4,a5
    9d4c:	0007c703          	lbu	a4,0(a5)
    9d50:	fe842783          	lw	a5,-24(s0)
    9d54:	03d7c783          	lbu	a5,61(a5)
    9d58:	fe842683          	lw	a3,-24(s0)
    9d5c:	03c6c683          	lbu	a3,60(a3)
    9d60:	00f767b3          	or	a5,a4,a5
    9d64:	0ff7f713          	zext.b	a4,a5
    9d68:	000287b7          	lui	a5,0x28
    9d6c:	81078793          	add	a5,a5,-2032 # 27810 <OSRdyTbl>
    9d70:	00f687b3          	add	a5,a3,a5
    9d74:	00e78023          	sb	a4,0(a5)
    9d78:	fec42783          	lw	a5,-20(s0)
    9d7c:	fcf42a23          	sw	a5,-44(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9d80:	fd442783          	lw	a5,-44(s0)
    9d84:	0087f793          	and	a5,a5,8
    9d88:	3007a073          	csrs	mstatus,a5
}
    9d8c:	00000013          	nop
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    9d90:	a0df80ef          	jal	279c <OS_Sched>
    9d94:	01c0006f          	j	9db0 <OSTimeDlyResume+0x1d4>
    9d98:	fec42783          	lw	a5,-20(s0)
    9d9c:	fcf42823          	sw	a5,-48(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9da0:	fd042783          	lw	a5,-48(s0)
    9da4:	0087f793          	and	a5,a5,8
    9da8:	3007a073          	csrs	mstatus,a5
}
    9dac:	00000013          	nop
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    9db0:	00000793          	li	a5,0
}
    9db4:	00078513          	mv	a0,a5
    9db8:	03c12083          	lw	ra,60(sp)
    9dbc:	03812403          	lw	s0,56(sp)
    9dc0:	04010113          	add	sp,sp,64
    9dc4:	00008067          	ret

00009dc8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
INT32U  OSTimeGet (void)
{
    9dc8:	fe010113          	add	sp,sp,-32
    9dcc:	00812e23          	sw	s0,28(sp)
    9dd0:	02010413          	add	s0,sp,32
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    9dd4:	fe042623          	sw	zero,-20(s0)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9dd8:	00800793          	li	a5,8
    9ddc:	3007b7f3          	csrrc	a5,mstatus,a5
    9de0:	fef42023          	sw	a5,-32(s0)
    return context;
    9de4:	fe042783          	lw	a5,-32(s0)
#endif



    OS_ENTER_CRITICAL();
    9de8:	fef42623          	sw	a5,-20(s0)
    ticks = OSTime;
    9dec:	000287b7          	lui	a5,0x28
    9df0:	83c7a783          	lw	a5,-1988(a5) # 2783c <OSTime>
    9df4:	fef42423          	sw	a5,-24(s0)
    9df8:	fec42783          	lw	a5,-20(s0)
    9dfc:	fef42223          	sw	a5,-28(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9e00:	fe442783          	lw	a5,-28(s0)
    9e04:	0087f793          	and	a5,a5,8
    9e08:	3007a073          	csrs	mstatus,a5
}
    9e0c:	00000013          	nop
    OS_EXIT_CRITICAL();
    return (ticks);
    9e10:	fe842783          	lw	a5,-24(s0)
}
    9e14:	00078513          	mv	a0,a5
    9e18:	01c12403          	lw	s0,28(sp)
    9e1c:	02010113          	add	sp,sp,32
    9e20:	00008067          	ret

00009e24 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
void  OSTimeSet (INT32U ticks)
{
    9e24:	fd010113          	add	sp,sp,-48
    9e28:	02812623          	sw	s0,44(sp)
    9e2c:	03010413          	add	s0,sp,48
    9e30:	fca42e23          	sw	a0,-36(s0)
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
    9e34:	fe042623          	sw	zero,-20(s0)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9e38:	00800793          	li	a5,8
    9e3c:	3007b7f3          	csrrc	a5,mstatus,a5
    9e40:	fef42223          	sw	a5,-28(s0)
    return context;
    9e44:	fe442783          	lw	a5,-28(s0)
#endif



    OS_ENTER_CRITICAL();
    9e48:	fef42623          	sw	a5,-20(s0)
    OSTime = ticks;
    9e4c:	000287b7          	lui	a5,0x28
    9e50:	fdc42703          	lw	a4,-36(s0)
    9e54:	82e7ae23          	sw	a4,-1988(a5) # 2783c <OSTime>
    9e58:	fec42783          	lw	a5,-20(s0)
    9e5c:	fef42423          	sw	a5,-24(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9e60:	fe842783          	lw	a5,-24(s0)
    9e64:	0087f793          	and	a5,a5,8
    9e68:	3007a073          	csrs	mstatus,a5
}
    9e6c:	00000013          	nop
    OS_EXIT_CRITICAL();
}
    9e70:	00000013          	nop
    9e74:	02c12403          	lw	s0,44(sp)
    9e78:	03010113          	add	sp,sp,48
    9e7c:	00008067          	ret

00009e80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9e80:	fe010113          	add	sp,sp,-32
    9e84:	00112e23          	sw	ra,28(sp)
    9e88:	00812c23          	sw	s0,24(sp)
    9e8c:	02010413          	add	s0,sp,32
    9e90:	fea42623          	sw	a0,-20(s0)
    INTEL_NIOSV_M_IRQ_INIT ( CPU, cpu);
    9e94:	0d5010ef          	jal	b768 <intel_niosv_m_irq_init>
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    9e98:	00800793          	li	a5,8
    9e9c:	3007a073          	csrs	mstatus,a5
}
    9ea0:	00000013          	nop
    alt_irq_cpu_enable_interrupts();
}
    9ea4:	00000013          	nop
    9ea8:	01c12083          	lw	ra,28(sp)
    9eac:	01812403          	lw	s0,24(sp)
    9eb0:	02010113          	add	sp,sp,32
    9eb4:	00008067          	ret

00009eb8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9eb8:	fe010113          	add	sp,sp,-32
    9ebc:	00112e23          	sw	ra,28(sp)
    9ec0:	00812c23          	sw	s0,24(sp)
    9ec4:	02010413          	add	s0,sp,32
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    9ec8:	00100613          	li	a2,1
    9ecc:	00000593          	li	a1,0
    9ed0:	000247b7          	lui	a5,0x24
    9ed4:	01078513          	add	a0,a5,16 # 24010 <jtag_uart+0x28>
    9ed8:	1f0000ef          	jal	a0c8 <altera_avalon_jtag_uart_init>
    9edc:	000247b7          	lui	a5,0x24
    9ee0:	fe878513          	add	a0,a5,-24 # 23fe8 <jtag_uart>
    9ee4:	0fc010ef          	jal	afe0 <alt_dev_reg>
    9ee8:	3e800793          	li	a5,1000
    9eec:	fef42423          	sw	a5,-24(s0)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    9ef0:	000287b7          	lui	a5,0x28
    9ef4:	8487a783          	lw	a5,-1976(a5) # 27848 <_alt_tick_rate>
    9ef8:	00079a63          	bnez	a5,9f0c <alt_sys_init+0x54>
  {
    _alt_tick_rate = nticks;
    9efc:	000287b7          	lui	a5,0x28
    9f00:	fe842703          	lw	a4,-24(s0)
    9f04:	84e7a423          	sw	a4,-1976(a5) # 27848 <_alt_tick_rate>
    return 0;
    9f08:	0080006f          	j	9f10 <alt_sys_init+0x58>
  }
  else
  {
    return -1;
    9f0c:	00000013          	nop
    9f10:	0000c7b7          	lui	a5,0xc
    9f14:	99478793          	add	a5,a5,-1644 # b994 <alt_niosv_timer_sc_isr>
    9f18:	fef42623          	sw	a5,-20(s0)
alt_u64 alt_niosv_mtimecmp_get();
void alt_niosv_mtimecmp_interrupt_init();
extern alt_niosv_timer_isr_t alt_niosv_timer_interrupt_handler;

static ALT_INLINE void ALT_ALWAYS_INLINE alt_niosv_register_mtimecmp_interrupt_handle(alt_niosv_timer_isr_t handle) {
    alt_niosv_timer_interrupt_handler = handle;
    9f1c:	000277b7          	lui	a5,0x27
    9f20:	fec42703          	lw	a4,-20(s0)
    9f24:	7ce7ac23          	sw	a4,2008(a5) # 277d8 <alt_niosv_timer_interrupt_handler>
}
    9f28:	00000013          	nop
    INTEL_NIOSV_M_INIT ( CPU, cpu);
    9f2c:	315010ef          	jal	ba40 <alt_niosv_mtimecmp_interrupt_init>
    9f30:	00000613          	li	a2,0
    9f34:	00000593          	li	a1,0
    9f38:	00000513          	li	a0,0
    9f3c:	259010ef          	jal	b994 <alt_niosv_timer_sc_isr>
}
    9f40:	00000013          	nop
    9f44:	01c12083          	lw	ra,28(sp)
    9f48:	01812403          	lw	s0,24(sp)
    9f4c:	02010113          	add	sp,sp,32
    9f50:	00008067          	ret

00009f54 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9f54:	fd010113          	add	sp,sp,-48
    9f58:	02112623          	sw	ra,44(sp)
    9f5c:	02812423          	sw	s0,40(sp)
    9f60:	03010413          	add	s0,sp,48
    9f64:	fca42e23          	sw	a0,-36(s0)
    9f68:	fcb42c23          	sw	a1,-40(s0)
    9f6c:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9f70:	fdc42783          	lw	a5,-36(s0)
    9f74:	0007a783          	lw	a5,0(a5)
    9f78:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9f7c:	fec42783          	lw	a5,-20(s0)
    9f80:	02878713          	add	a4,a5,40
    9f84:	fdc42783          	lw	a5,-36(s0)
    9f88:	0087a783          	lw	a5,8(a5)
    9f8c:	00078693          	mv	a3,a5
    9f90:	fd442603          	lw	a2,-44(s0)
    9f94:	fd842583          	lw	a1,-40(s0)
    9f98:	00070513          	mv	a0,a4
    9f9c:	7e0000ef          	jal	a77c <altera_avalon_jtag_uart_read>
    9fa0:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    9fa4:	00078513          	mv	a0,a5
    9fa8:	02c12083          	lw	ra,44(sp)
    9fac:	02812403          	lw	s0,40(sp)
    9fb0:	03010113          	add	sp,sp,48
    9fb4:	00008067          	ret

00009fb8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9fb8:	fd010113          	add	sp,sp,-48
    9fbc:	02112623          	sw	ra,44(sp)
    9fc0:	02812423          	sw	s0,40(sp)
    9fc4:	03010413          	add	s0,sp,48
    9fc8:	fca42e23          	sw	a0,-36(s0)
    9fcc:	fcb42c23          	sw	a1,-40(s0)
    9fd0:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9fd4:	fdc42783          	lw	a5,-36(s0)
    9fd8:	0007a783          	lw	a5,0(a5)
    9fdc:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9fe0:	fec42783          	lw	a5,-20(s0)
    9fe4:	02878713          	add	a4,a5,40
    9fe8:	fdc42783          	lw	a5,-36(s0)
    9fec:	0087a783          	lw	a5,8(a5)
    9ff0:	00078693          	mv	a3,a5
    9ff4:	fd442603          	lw	a2,-44(s0)
    9ff8:	fd842583          	lw	a1,-40(s0)
    9ffc:	00070513          	mv	a0,a4
    a000:	245000ef          	jal	aa44 <altera_avalon_jtag_uart_write>
    a004:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    a008:	00078513          	mv	a0,a5
    a00c:	02c12083          	lw	ra,44(sp)
    a010:	02812403          	lw	s0,40(sp)
    a014:	03010113          	add	sp,sp,48
    a018:	00008067          	ret

0000a01c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    a01c:	fd010113          	add	sp,sp,-48
    a020:	02112623          	sw	ra,44(sp)
    a024:	02812423          	sw	s0,40(sp)
    a028:	03010413          	add	s0,sp,48
    a02c:	fca42e23          	sw	a0,-36(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a030:	fdc42783          	lw	a5,-36(s0)
    a034:	0007a783          	lw	a5,0(a5)
    a038:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    a03c:	fec42783          	lw	a5,-20(s0)
    a040:	02878713          	add	a4,a5,40
    a044:	fdc42783          	lw	a5,-36(s0)
    a048:	0087a783          	lw	a5,8(a5)
    a04c:	00078593          	mv	a1,a5
    a050:	00070513          	mv	a0,a4
    a054:	5bc000ef          	jal	a610 <altera_avalon_jtag_uart_close>
    a058:	00050793          	mv	a5,a0
}
    a05c:	00078513          	mv	a0,a5
    a060:	02c12083          	lw	ra,44(sp)
    a064:	02812403          	lw	s0,40(sp)
    a068:	03010113          	add	sp,sp,48
    a06c:	00008067          	ret

0000a070 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    a070:	fd010113          	add	sp,sp,-48
    a074:	02112623          	sw	ra,44(sp)
    a078:	02812423          	sw	s0,40(sp)
    a07c:	03010413          	add	s0,sp,48
    a080:	fca42e23          	sw	a0,-36(s0)
    a084:	fcb42c23          	sw	a1,-40(s0)
    a088:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    a08c:	fdc42783          	lw	a5,-36(s0)
    a090:	0007a783          	lw	a5,0(a5)
    a094:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    a098:	fec42783          	lw	a5,-20(s0)
    a09c:	02878793          	add	a5,a5,40
    a0a0:	fd442603          	lw	a2,-44(s0)
    a0a4:	fd842583          	lw	a1,-40(s0)
    a0a8:	00078513          	mv	a0,a5
    a0ac:	5d0000ef          	jal	a67c <altera_avalon_jtag_uart_ioctl>
    a0b0:	00050793          	mv	a5,a0
}
    a0b4:	00078513          	mv	a0,a5
    a0b8:	02c12083          	lw	ra,44(sp)
    a0bc:	02812403          	lw	s0,40(sp)
    a0c0:	03010113          	add	sp,sp,48
    a0c4:	00008067          	ret

0000a0c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    a0c8:	fc010113          	add	sp,sp,-64
    a0cc:	02112e23          	sw	ra,60(sp)
    a0d0:	02812c23          	sw	s0,56(sp)
    a0d4:	04010413          	add	s0,sp,64
    a0d8:	fca42623          	sw	a0,-52(s0)
    a0dc:	fcb42423          	sw	a1,-56(s0)
    a0e0:	fcc42223          	sw	a2,-60(s0)
  ALT_FLAG_CREATE(&sp->events, 0);
    a0e4:	fcc42783          	lw	a5,-52(s0)
    a0e8:	03078793          	add	a5,a5,48
    a0ec:	fcf42c23          	sw	a5,-40(s0)
    a0f0:	fc041b23          	sh	zero,-42(s0)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    a0f4:	fd540713          	add	a4,s0,-43
    a0f8:	fd645783          	lhu	a5,-42(s0)
    a0fc:	00070593          	mv	a1,a4
    a100:	00078513          	mv	a0,a5
    a104:	c3cf90ef          	jal	3540 <OSFlagCreate>
    a108:	00050713          	mv	a4,a0
    a10c:	fd842783          	lw	a5,-40(s0)
    a110:	00e7a023          	sw	a4,0(a5)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    a114:	fcc42783          	lw	a5,-52(s0)
    a118:	02878793          	add	a5,a5,40
    a11c:	fef42023          	sw	a5,-32(s0)
    a120:	00100793          	li	a5,1
    a124:	fcf41f23          	sh	a5,-34(s0)
  *sem = OSSemCreate (value);
    a128:	fde45783          	lhu	a5,-34(s0)
    a12c:	00078513          	mv	a0,a5
    a130:	bbcfd0ef          	jal	74ec <OSSemCreate>
    a134:	00050713          	mv	a4,a0
    a138:	fe042783          	lw	a5,-32(s0)
    a13c:	00e7a023          	sw	a4,0(a5)
  return *sem ? 0 : -1;
    a140:	00000013          	nop
  ALT_SEM_CREATE(&sp->write_lock, 1);
    a144:	fcc42783          	lw	a5,-52(s0)
    a148:	02c78793          	add	a5,a5,44
    a14c:	fef42423          	sw	a5,-24(s0)
    a150:	00100793          	li	a5,1
    a154:	fef41323          	sh	a5,-26(s0)
  *sem = OSSemCreate (value);
    a158:	fe645783          	lhu	a5,-26(s0)
    a15c:	00078513          	mv	a0,a5
    a160:	b8cfd0ef          	jal	74ec <OSSemCreate>
    a164:	00050713          	mv	a4,a0
    a168:	fe842783          	lw	a5,-24(s0)
    a16c:	00e7a023          	sw	a4,0(a5)
  return *sem ? 0 : -1;
    a170:	00000013          	nop

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a174:	fcc42783          	lw	a5,-52(s0)
    a178:	00100713          	li	a4,1
    a17c:	02e7a023          	sw	a4,32(a5)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    a180:	fcc42783          	lw	a5,-52(s0)
    a184:	0207a783          	lw	a5,32(a5)
    a188:	fef42623          	sw	a5,-20(s0)
    a18c:	fcc42783          	lw	a5,-52(s0)
    a190:	0007a783          	lw	a5,0(a5)
    a194:	00478793          	add	a5,a5,4
    a198:	00078713          	mv	a4,a5
    a19c:	fec42783          	lw	a5,-20(s0)
    a1a0:	00f72023          	sw	a5,0(a4)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    a1a4:	fc842503          	lw	a0,-56(s0)
    a1a8:	fc442583          	lw	a1,-60(s0)
    a1ac:	00000713          	li	a4,0
    a1b0:	fcc42683          	lw	a3,-52(s0)
    a1b4:	0000a7b7          	lui	a5,0xa
    a1b8:	21878613          	add	a2,a5,536 # a218 <altera_avalon_jtag_uart_irq>
    a1bc:	024010ef          	jal	b1e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    a1c0:	fcc42783          	lw	a5,-52(s0)
    a1c4:	0207a223          	sw	zero,36(a5)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    a1c8:	fcc42783          	lw	a5,-52(s0)
    a1cc:	00878713          	add	a4,a5,8
  return _alt_tick_rate;
    a1d0:	000287b7          	lui	a5,0x28
    a1d4:	8487a583          	lw	a1,-1976(a5) # 27848 <_alt_tick_rate>
    a1d8:	fcc42683          	lw	a3,-52(s0)
    a1dc:	0000a7b7          	lui	a5,0xa
    a1e0:	4f478613          	add	a2,a5,1268 # a4f4 <altera_avalon_jtag_uart_timeout>
    a1e4:	00070513          	mv	a0,a4
    a1e8:	449000ef          	jal	ae30 <alt_alarm_start>
    a1ec:	00050793          	mv	a5,a0
    a1f0:	0007da63          	bgez	a5,a204 <altera_avalon_jtag_uart_init+0x13c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    a1f4:	fcc42783          	lw	a5,-52(s0)
    a1f8:	80000737          	lui	a4,0x80000
    a1fc:	fff70713          	add	a4,a4,-1 # 7fffffff <__alt_data_end+0x7ffb6c1f>
    a200:	00e7a223          	sw	a4,4(a5)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    a204:	00000013          	nop
    a208:	03c12083          	lw	ra,60(sp)
    a20c:	03812403          	lw	s0,56(sp)
    a210:	04010113          	add	sp,sp,64
    a214:	00008067          	ret

0000a218 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    a218:	f9010113          	add	sp,sp,-112
    a21c:	06112623          	sw	ra,108(sp)
    a220:	06812423          	sw	s0,104(sp)
    a224:	07010413          	add	s0,sp,112
    a228:	f8a42e23          	sw	a0,-100(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    a22c:	f9c42783          	lw	a5,-100(s0)
    a230:	fef42023          	sw	a5,-32(s0)
  unsigned int base = sp->base;
    a234:	fe042783          	lw	a5,-32(s0)
    a238:	0007a783          	lw	a5,0(a5)
    a23c:	fcf42e23          	sw	a5,-36(s0)
  unsigned int postflag=0;
    a240:	fe042623          	sw	zero,-20(s0)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a244:	fdc42783          	lw	a5,-36(s0)
    a248:	00478793          	add	a5,a5,4
    a24c:	0007a783          	lw	a5,0(a5)
    a250:	fcf42c23          	sw	a5,-40(s0)
    a254:	fd842783          	lw	a5,-40(s0)
    a258:	fcf42a23          	sw	a5,-44(s0)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    a25c:	fd442783          	lw	a5,-44(s0)
    a260:	3007f793          	and	a5,a5,768
    a264:	26078c63          	beqz	a5,a4dc <altera_avalon_jtag_uart_irq+0x2c4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    a268:	fd442783          	lw	a5,-44(s0)
    a26c:	1007f793          	and	a5,a5,256
    a270:	12078a63          	beqz	a5,a3a4 <altera_avalon_jtag_uart_irq+0x18c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    a274:	000107b7          	lui	a5,0x10
    a278:	fef42423          	sw	a5,-24(s0)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a27c:	fe042783          	lw	a5,-32(s0)
    a280:	0347a783          	lw	a5,52(a5) # 10034 <__sfvwrite_r+0xd0>
    a284:	00178793          	add	a5,a5,1
    a288:	7ff7f793          	and	a5,a5,2047
    a28c:	fcf42823          	sw	a5,-48(s0)
        if (next == sp->rx_out)
    a290:	fe042783          	lw	a5,-32(s0)
    a294:	0387a783          	lw	a5,56(a5)
    a298:	fd042703          	lw	a4,-48(s0)
    a29c:	0af70663          	beq	a4,a5,a348 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    a2a0:	fdc42783          	lw	a5,-36(s0)
    a2a4:	0007a783          	lw	a5,0(a5)
    a2a8:	fcf42623          	sw	a5,-52(s0)
    a2ac:	fcc42783          	lw	a5,-52(s0)
    a2b0:	fef42423          	sw	a5,-24(s0)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    a2b4:	fe842703          	lw	a4,-24(s0)
    a2b8:	000087b7          	lui	a5,0x8
    a2bc:	00f777b3          	and	a5,a4,a5
    a2c0:	08078863          	beqz	a5,a350 <altera_avalon_jtag_uart_irq+0x138>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a2c4:	fe042783          	lw	a5,-32(s0)
    a2c8:	0347a783          	lw	a5,52(a5) # 8034 <OSTaskChangePrio+0x1b4>
    a2cc:	fe842703          	lw	a4,-24(s0)
    a2d0:	0ff77713          	zext.b	a4,a4
    a2d4:	fe042683          	lw	a3,-32(s0)
    a2d8:	00f687b3          	add	a5,a3,a5
    a2dc:	04e78223          	sb	a4,68(a5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a2e0:	fe042783          	lw	a5,-32(s0)
    a2e4:	0347a783          	lw	a5,52(a5)
    a2e8:	00178793          	add	a5,a5,1
    a2ec:	7ff7f713          	and	a4,a5,2047
    a2f0:	fe042783          	lw	a5,-32(s0)
    a2f4:	02e7aa23          	sw	a4,52(a5)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    a2f8:	fe042783          	lw	a5,-32(s0)
    a2fc:	0307a783          	lw	a5,48(a5)
    a300:	faf42a23          	sw	a5,-76(s0)
    a304:	00100793          	li	a5,1
    a308:	faf41923          	sh	a5,-78(s0)
    a30c:	00100793          	li	a5,1
    a310:	faf408a3          	sb	a5,-79(s0)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    a314:	000287b7          	lui	a5,0x28
    a318:	8137c783          	lbu	a5,-2029(a5) # 27813 <OSRunning>
    a31c:	02078263          	beqz	a5,a340 <altera_avalon_jtag_uart_irq+0x128>
  {
    OSFlagPost (group, flags, opt, &err);
    a320:	fa840693          	add	a3,s0,-88
    a324:	fb144703          	lbu	a4,-79(s0)
    a328:	fb245783          	lhu	a5,-78(s0)
    a32c:	00070613          	mv	a2,a4
    a330:	00078593          	mv	a1,a5
    a334:	fb442503          	lw	a0,-76(s0)
    a338:	de9f90ef          	jal	4120 <OSFlagPost>
    return err;
    a33c:	0080006f          	j	a344 <altera_avalon_jtag_uart_irq+0x12c>
  }
  return OS_ERR_PEND_ISR;
    a340:	00000013          	nop
      {
    a344:	f39ff06f          	j	a27c <altera_avalon_jtag_uart_irq+0x64>
          break;
    a348:	00000013          	nop
    a34c:	0080006f          	j	a354 <altera_avalon_jtag_uart_irq+0x13c>
          break;
    a350:	00000013          	nop
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    a354:	fe842703          	lw	a4,-24(s0)
    a358:	000107b7          	lui	a5,0x10
    a35c:	04f76463          	bltu	a4,a5,a3a4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a360:	fe042783          	lw	a5,-32(s0)
    a364:	0207a783          	lw	a5,32(a5) # 10020 <__sfvwrite_r+0xbc>
    a368:	ffe7f713          	and	a4,a5,-2
    a36c:	fe042783          	lw	a5,-32(s0)
    a370:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    a374:	fe042783          	lw	a5,-32(s0)
    a378:	0207a783          	lw	a5,32(a5)
    a37c:	fcf42423          	sw	a5,-56(s0)
    a380:	fdc42783          	lw	a5,-36(s0)
    a384:	00478793          	add	a5,a5,4
    a388:	00078713          	mv	a4,a5
    a38c:	fc842783          	lw	a5,-56(s0)
    a390:	00f72023          	sw	a5,0(a4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a394:	fdc42783          	lw	a5,-36(s0)
    a398:	00478793          	add	a5,a5,4
    a39c:	0007a783          	lw	a5,0(a5)
    a3a0:	fcf42223          	sw	a5,-60(s0)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    a3a4:	fd442783          	lw	a5,-44(s0)
    a3a8:	2007f793          	and	a5,a5,512
    a3ac:	e8078ce3          	beqz	a5,a244 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    a3b0:	fd442783          	lw	a5,-44(s0)
    a3b4:	0107d793          	srl	a5,a5,0x10
    a3b8:	fef42223          	sw	a5,-28(s0)

      while (space > 0 && sp->tx_out != sp->tx_in)
    a3bc:	05c0006f          	j	a418 <altera_avalon_jtag_uart_irq+0x200>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    a3c0:	fe042783          	lw	a5,-32(s0)
    a3c4:	0407a783          	lw	a5,64(a5)
    a3c8:	fe042703          	lw	a4,-32(s0)
    a3cc:	00f707b3          	add	a5,a4,a5
    a3d0:	00001737          	lui	a4,0x1
    a3d4:	00f707b3          	add	a5,a4,a5
    a3d8:	8447c783          	lbu	a5,-1980(a5)
    a3dc:	fcf42023          	sw	a5,-64(s0)
    a3e0:	fdc42783          	lw	a5,-36(s0)
    a3e4:	fc042703          	lw	a4,-64(s0)
    a3e8:	00e7a023          	sw	a4,0(a5)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a3ec:	fe042783          	lw	a5,-32(s0)
    a3f0:	0407a783          	lw	a5,64(a5)
    a3f4:	00178793          	add	a5,a5,1
    a3f8:	7ff7f713          	and	a4,a5,2047
    a3fc:	fe042783          	lw	a5,-32(s0)
    a400:	04e7a023          	sw	a4,64(a5)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
    a404:	00100793          	li	a5,1
    a408:	fef42623          	sw	a5,-20(s0)

        space--;
    a40c:	fe442783          	lw	a5,-28(s0)
    a410:	fff78793          	add	a5,a5,-1
    a414:	fef42223          	sw	a5,-28(s0)
      while (space > 0 && sp->tx_out != sp->tx_in)
    a418:	fe442783          	lw	a5,-28(s0)
    a41c:	00078c63          	beqz	a5,a434 <altera_avalon_jtag_uart_irq+0x21c>
    a420:	fe042783          	lw	a5,-32(s0)
    a424:	0407a703          	lw	a4,64(a5)
    a428:	fe042783          	lw	a5,-32(s0)
    a42c:	03c7a783          	lw	a5,60(a5)
    a430:	f8f718e3          	bne	a4,a5,a3c0 <altera_avalon_jtag_uart_irq+0x1a8>
      }
      
      if (postflag)
    a434:	fec42783          	lw	a5,-20(s0)
    a438:	04078863          	beqz	a5,a488 <altera_avalon_jtag_uart_irq+0x270>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    a43c:	fe042783          	lw	a5,-32(s0)
    a440:	0307a783          	lw	a5,48(a5)
    a444:	faf42623          	sw	a5,-84(s0)
    a448:	00200793          	li	a5,2
    a44c:	faf41523          	sh	a5,-86(s0)
    a450:	00100793          	li	a5,1
    a454:	faf404a3          	sb	a5,-87(s0)
  if (OSRunning)
    a458:	000287b7          	lui	a5,0x28
    a45c:	8137c783          	lbu	a5,-2029(a5) # 27813 <OSRunning>
    a460:	02078263          	beqz	a5,a484 <altera_avalon_jtag_uart_irq+0x26c>
    OSFlagPost (group, flags, opt, &err);
    a464:	fa740693          	add	a3,s0,-89
    a468:	fa944703          	lbu	a4,-87(s0)
    a46c:	faa45783          	lhu	a5,-86(s0)
    a470:	00070613          	mv	a2,a4
    a474:	00078593          	mv	a1,a5
    a478:	fac42503          	lw	a0,-84(s0)
    a47c:	ca5f90ef          	jal	4120 <OSFlagPost>
    return err;
    a480:	0080006f          	j	a488 <altera_avalon_jtag_uart_irq+0x270>
  return OS_ERR_PEND_ISR;
    a484:	00000013          	nop
      }

      if (space > 0)
    a488:	fe442783          	lw	a5,-28(s0)
    a48c:	da078ce3          	beqz	a5,a244 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    a490:	fe042783          	lw	a5,-32(s0)
    a494:	0207a783          	lw	a5,32(a5)
    a498:	ffd7f713          	and	a4,a5,-3
    a49c:	fe042783          	lw	a5,-32(s0)
    a4a0:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a4a4:	fe042783          	lw	a5,-32(s0)
    a4a8:	0207a783          	lw	a5,32(a5)
    a4ac:	faf42e23          	sw	a5,-68(s0)
    a4b0:	fe042783          	lw	a5,-32(s0)
    a4b4:	0007a783          	lw	a5,0(a5)
    a4b8:	00478793          	add	a5,a5,4
    a4bc:	00078713          	mv	a4,a5
    a4c0:	fbc42783          	lw	a5,-68(s0)
    a4c4:	00f72023          	sw	a5,0(a4) # 1000 <OSEventPendMulti+0xec>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a4c8:	fdc42783          	lw	a5,-36(s0)
    a4cc:	00478793          	add	a5,a5,4
    a4d0:	0007a783          	lw	a5,0(a5)
    a4d4:	faf42c23          	sw	a5,-72(s0)
  {
    a4d8:	d6dff06f          	j	a244 <altera_avalon_jtag_uart_irq+0x2c>
      break;
    a4dc:	00000013          	nop
      }
    }
  }
}
    a4e0:	00000013          	nop
    a4e4:	06c12083          	lw	ra,108(sp)
    a4e8:	06812403          	lw	s0,104(sp)
    a4ec:	07010113          	add	sp,sp,112
    a4f0:	00008067          	ret

0000a4f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    a4f4:	fc010113          	add	sp,sp,-64
    a4f8:	02112e23          	sw	ra,60(sp)
    a4fc:	02812c23          	sw	s0,56(sp)
    a500:	04010413          	add	s0,sp,64
    a504:	fca42623          	sw	a0,-52(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    a508:	fcc42783          	lw	a5,-52(s0)
    a50c:	fef42623          	sw	a5,-20(s0)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    a510:	fec42783          	lw	a5,-20(s0)
    a514:	0007a783          	lw	a5,0(a5)
    a518:	00478793          	add	a5,a5,4
    a51c:	0007a783          	lw	a5,0(a5)
    a520:	fef42423          	sw	a5,-24(s0)
    a524:	fe842783          	lw	a5,-24(s0)
    a528:	fef42223          	sw	a5,-28(s0)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    a52c:	fe442783          	lw	a5,-28(s0)
    a530:	4007f793          	and	a5,a5,1024
    a534:	02078c63          	beqz	a5,a56c <altera_avalon_jtag_uart_timeout+0x78>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    a538:	fec42783          	lw	a5,-20(s0)
    a53c:	0207a783          	lw	a5,32(a5)
    a540:	4007e793          	or	a5,a5,1024
    a544:	fef42023          	sw	a5,-32(s0)
    a548:	fec42783          	lw	a5,-20(s0)
    a54c:	0007a783          	lw	a5,0(a5)
    a550:	00478793          	add	a5,a5,4
    a554:	00078713          	mv	a4,a5
    a558:	fe042783          	lw	a5,-32(s0)
    a55c:	00f72023          	sw	a5,0(a4)
    sp->host_inactive = 0;
    a560:	fec42783          	lw	a5,-20(s0)
    a564:	0207a223          	sw	zero,36(a5)
    a568:	08c0006f          	j	a5f4 <altera_avalon_jtag_uart_timeout+0x100>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    a56c:	fec42783          	lw	a5,-20(s0)
    a570:	0247a703          	lw	a4,36(a5)
    a574:	800007b7          	lui	a5,0x80000
    a578:	ffc78793          	add	a5,a5,-4 # 7ffffffc <__alt_data_end+0x7ffb6c1c>
    a57c:	06e7ec63          	bltu	a5,a4,a5f4 <altera_avalon_jtag_uart_timeout+0x100>
    sp->host_inactive++;
    a580:	fec42783          	lw	a5,-20(s0)
    a584:	0247a783          	lw	a5,36(a5)
    a588:	00178713          	add	a4,a5,1
    a58c:	fec42783          	lw	a5,-20(s0)
    a590:	02e7a223          	sw	a4,36(a5)
    
    if (sp->host_inactive >= sp->timeout) {
    a594:	fec42783          	lw	a5,-20(s0)
    a598:	0247a703          	lw	a4,36(a5)
    a59c:	fec42783          	lw	a5,-20(s0)
    a5a0:	0047a783          	lw	a5,4(a5)
    a5a4:	04f76863          	bltu	a4,a5,a5f4 <altera_avalon_jtag_uart_timeout+0x100>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    a5a8:	fec42783          	lw	a5,-20(s0)
    a5ac:	0307a783          	lw	a5,48(a5)
    a5b0:	fcf42e23          	sw	a5,-36(s0)
    a5b4:	00400793          	li	a5,4
    a5b8:	fcf41d23          	sh	a5,-38(s0)
    a5bc:	00100793          	li	a5,1
    a5c0:	fcf40ca3          	sb	a5,-39(s0)
  if (OSRunning)
    a5c4:	000287b7          	lui	a5,0x28
    a5c8:	8137c783          	lbu	a5,-2029(a5) # 27813 <OSRunning>
    a5cc:	02078263          	beqz	a5,a5f0 <altera_avalon_jtag_uart_timeout+0xfc>
    OSFlagPost (group, flags, opt, &err);
    a5d0:	fd840693          	add	a3,s0,-40
    a5d4:	fd944703          	lbu	a4,-39(s0)
    a5d8:	fda45783          	lhu	a5,-38(s0)
    a5dc:	00070613          	mv	a2,a4
    a5e0:	00078593          	mv	a1,a5
    a5e4:	fdc42503          	lw	a0,-36(s0)
    a5e8:	b39f90ef          	jal	4120 <OSFlagPost>
    return err;
    a5ec:	0080006f          	j	a5f4 <altera_avalon_jtag_uart_timeout+0x100>
  return OS_ERR_PEND_ISR;
    a5f0:	00000013          	nop
    a5f4:	000287b7          	lui	a5,0x28
    a5f8:	8487a783          	lw	a5,-1976(a5) # 27848 <_alt_tick_rate>
    }
  }

  return alt_ticks_per_second();
}
    a5fc:	00078513          	mv	a0,a5
    a600:	03c12083          	lw	ra,60(sp)
    a604:	03812403          	lw	s0,56(sp)
    a608:	04010113          	add	sp,sp,64
    a60c:	00008067          	ret

0000a610 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    a610:	fe010113          	add	sp,sp,-32
    a614:	00812e23          	sw	s0,28(sp)
    a618:	02010413          	add	s0,sp,32
    a61c:	fea42623          	sw	a0,-20(s0)
    a620:	feb42423          	sw	a1,-24(s0)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    a624:	01c0006f          	j	a640 <altera_avalon_jtag_uart_close+0x30>
    if (flags & O_NONBLOCK) {
    a628:	fe842703          	lw	a4,-24(s0)
    a62c:	000047b7          	lui	a5,0x4
    a630:	00f777b3          	and	a5,a4,a5
    a634:	00078663          	beqz	a5,a640 <altera_avalon_jtag_uart_close+0x30>
      return -EWOULDBLOCK; 
    a638:	ff500793          	li	a5,-11
    a63c:	0300006f          	j	a66c <altera_avalon_jtag_uart_close+0x5c>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    a640:	fec42783          	lw	a5,-20(s0)
    a644:	0407a703          	lw	a4,64(a5) # 4040 <OSFlagPend+0x590>
    a648:	fec42783          	lw	a5,-20(s0)
    a64c:	03c7a783          	lw	a5,60(a5)
    a650:	00f70c63          	beq	a4,a5,a668 <altera_avalon_jtag_uart_close+0x58>
    a654:	fec42783          	lw	a5,-20(s0)
    a658:	0247a703          	lw	a4,36(a5)
    a65c:	fec42783          	lw	a5,-20(s0)
    a660:	0047a783          	lw	a5,4(a5)
    a664:	fcf762e3          	bltu	a4,a5,a628 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    a668:	00000793          	li	a5,0
}
    a66c:	00078513          	mv	a0,a5
    a670:	01c12403          	lw	s0,28(sp)
    a674:	02010113          	add	sp,sp,32
    a678:	00008067          	ret

0000a67c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    a67c:	fd010113          	add	sp,sp,-48
    a680:	02812623          	sw	s0,44(sp)
    a684:	03010413          	add	s0,sp,48
    a688:	fca42e23          	sw	a0,-36(s0)
    a68c:	fcb42c23          	sw	a1,-40(s0)
    a690:	fcc42a23          	sw	a2,-44(s0)
  int rc = -ENOTTY;
    a694:	fe700793          	li	a5,-25
    a698:	fef42623          	sw	a5,-20(s0)

  switch (req)
    a69c:	fd842703          	lw	a4,-40(s0)
    a6a0:	000077b7          	lui	a5,0x7
    a6a4:	a0178793          	add	a5,a5,-1535 # 6a01 <OSQPend+0xe5>
    a6a8:	00f70c63          	beq	a4,a5,a6c0 <altera_avalon_jtag_uart_ioctl+0x44>
    a6ac:	fd842703          	lw	a4,-40(s0)
    a6b0:	000077b7          	lui	a5,0x7
    a6b4:	a0278793          	add	a5,a5,-1534 # 6a02 <OSQPend+0xe6>
    a6b8:	06f70263          	beq	a4,a5,a71c <altera_avalon_jtag_uart_ioctl+0xa0>
      rc = 0;
    }
    break;

  default:
    break;
    a6bc:	0ac0006f          	j	a768 <altera_avalon_jtag_uart_ioctl+0xec>
    if (sp->timeout != INT_MAX)
    a6c0:	fdc42783          	lw	a5,-36(s0)
    a6c4:	0047a703          	lw	a4,4(a5)
    a6c8:	800007b7          	lui	a5,0x80000
    a6cc:	fff78793          	add	a5,a5,-1 # 7fffffff <__alt_data_end+0x7ffb6c1f>
    a6d0:	08f70663          	beq	a4,a5,a75c <altera_avalon_jtag_uart_ioctl+0xe0>
      int timeout = *((int *)arg);
    a6d4:	fd442783          	lw	a5,-44(s0)
    a6d8:	0007a783          	lw	a5,0(a5)
    a6dc:	fef42423          	sw	a5,-24(s0)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    a6e0:	fe842703          	lw	a4,-24(s0)
    a6e4:	00100793          	li	a5,1
    a6e8:	00e7de63          	bge	a5,a4,a704 <altera_avalon_jtag_uart_ioctl+0x88>
    a6ec:	fe842703          	lw	a4,-24(s0)
    a6f0:	800007b7          	lui	a5,0x80000
    a6f4:	fff78793          	add	a5,a5,-1 # 7fffffff <__alt_data_end+0x7ffb6c1f>
    a6f8:	00f70663          	beq	a4,a5,a704 <altera_avalon_jtag_uart_ioctl+0x88>
    a6fc:	fe842783          	lw	a5,-24(s0)
    a700:	00c0006f          	j	a70c <altera_avalon_jtag_uart_ioctl+0x90>
    a704:	800007b7          	lui	a5,0x80000
    a708:	ffe78793          	add	a5,a5,-2 # 7ffffffe <__alt_data_end+0x7ffb6c1e>
    a70c:	fdc42703          	lw	a4,-36(s0)
    a710:	00f72223          	sw	a5,4(a4)
      rc = 0;
    a714:	fe042623          	sw	zero,-20(s0)
    break;
    a718:	0440006f          	j	a75c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    a71c:	fdc42783          	lw	a5,-36(s0)
    a720:	0047a703          	lw	a4,4(a5)
    a724:	800007b7          	lui	a5,0x80000
    a728:	fff78793          	add	a5,a5,-1 # 7fffffff <__alt_data_end+0x7ffb6c1f>
    a72c:	02f70c63          	beq	a4,a5,a764 <altera_avalon_jtag_uart_ioctl+0xe8>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    a730:	fdc42783          	lw	a5,-36(s0)
    a734:	0247a703          	lw	a4,36(a5)
    a738:	fdc42783          	lw	a5,-36(s0)
    a73c:	0047a783          	lw	a5,4(a5)
    a740:	00f737b3          	sltu	a5,a4,a5
    a744:	0ff7f793          	zext.b	a5,a5
    a748:	00078713          	mv	a4,a5
    a74c:	fd442783          	lw	a5,-44(s0)
    a750:	00e7a023          	sw	a4,0(a5)
      rc = 0;
    a754:	fe042623          	sw	zero,-20(s0)
    break;
    a758:	00c0006f          	j	a764 <altera_avalon_jtag_uart_ioctl+0xe8>
    break;
    a75c:	00000013          	nop
    a760:	0080006f          	j	a768 <altera_avalon_jtag_uart_ioctl+0xec>
    break;
    a764:	00000013          	nop
  }

  return rc;
    a768:	fec42783          	lw	a5,-20(s0)
}
    a76c:	00078513          	mv	a0,a5
    a770:	02c12403          	lw	s0,44(sp)
    a774:	03010113          	add	sp,sp,48
    a778:	00008067          	ret

0000a77c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    a77c:	fa010113          	add	sp,sp,-96
    a780:	04112e23          	sw	ra,92(sp)
    a784:	04812c23          	sw	s0,88(sp)
    a788:	06010413          	add	s0,sp,96
    a78c:	faa42623          	sw	a0,-84(s0)
    a790:	fab42423          	sw	a1,-88(s0)
    a794:	fac42223          	sw	a2,-92(s0)
    a798:	fad42023          	sw	a3,-96(s0)
  char * ptr = buffer;
    a79c:	fa842783          	lw	a5,-88(s0)
    a7a0:	fef42623          	sw	a5,-20(s0)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    a7a4:	fac42783          	lw	a5,-84(s0)
    a7a8:	0287a783          	lw	a5,40(a5)
    a7ac:	fcf42a23          	sw	a5,-44(s0)
    a7b0:	fc041923          	sh	zero,-46(s0)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    a7b4:	fd245783          	lhu	a5,-46(s0)
    a7b8:	fbb40713          	add	a4,s0,-69
    a7bc:	00070613          	mv	a2,a4
    a7c0:	00078593          	mv	a1,a5
    a7c4:	fd442503          	lw	a0,-44(s0)
    a7c8:	844fd0ef          	jal	780c <OSSemPend>

  while (space > 0)
    a7cc:	18c0006f          	j	a958 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    a7d0:	fac42783          	lw	a5,-84(s0)
    a7d4:	0347a783          	lw	a5,52(a5)
    a7d8:	fef42223          	sw	a5,-28(s0)
      out = sp->rx_out;
    a7dc:	fac42783          	lw	a5,-84(s0)
    a7e0:	0387a783          	lw	a5,56(a5)
    a7e4:	fef42023          	sw	a5,-32(s0)

      if (in >= out)
    a7e8:	fe442703          	lw	a4,-28(s0)
    a7ec:	fe042783          	lw	a5,-32(s0)
    a7f0:	00f76c63          	bltu	a4,a5,a808 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    a7f4:	fe442703          	lw	a4,-28(s0)
    a7f8:	fe042783          	lw	a5,-32(s0)
    a7fc:	40f707b3          	sub	a5,a4,a5
    a800:	fef42423          	sw	a5,-24(s0)
    a804:	0180006f          	j	a81c <altera_avalon_jtag_uart_read+0xa0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    a808:	000017b7          	lui	a5,0x1
    a80c:	80078713          	add	a4,a5,-2048 # 800 <_start+0x44>
    a810:	fe042783          	lw	a5,-32(s0)
    a814:	40f707b3          	sub	a5,a4,a5
    a818:	fef42423          	sw	a5,-24(s0)

      if (n == 0)
    a81c:	fe842783          	lw	a5,-24(s0)
    a820:	06078e63          	beqz	a5,a89c <altera_avalon_jtag_uart_read+0x120>
        break; /* No more data available */

      if (n > space)
    a824:	fa442783          	lw	a5,-92(s0)
    a828:	fe842703          	lw	a4,-24(s0)
    a82c:	00e7f663          	bgeu	a5,a4,a838 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
    a830:	fa442783          	lw	a5,-92(s0)
    a834:	fef42423          	sw	a5,-24(s0)

      memcpy(ptr, sp->rx_buf + out, n);
    a838:	fac42783          	lw	a5,-84(s0)
    a83c:	04478713          	add	a4,a5,68
    a840:	fe042783          	lw	a5,-32(s0)
    a844:	00f707b3          	add	a5,a4,a5
    a848:	fe842603          	lw	a2,-24(s0)
    a84c:	00078593          	mv	a1,a5
    a850:	fec42503          	lw	a0,-20(s0)
    a854:	4f8010ef          	jal	bd4c <memcpy>
      ptr   += n;
    a858:	fec42703          	lw	a4,-20(s0)
    a85c:	fe842783          	lw	a5,-24(s0)
    a860:	00f707b3          	add	a5,a4,a5
    a864:	fef42623          	sw	a5,-20(s0)
      space -= n;
    a868:	fa442703          	lw	a4,-92(s0)
    a86c:	fe842783          	lw	a5,-24(s0)
    a870:	40f707b3          	sub	a5,a4,a5
    a874:	faf42223          	sw	a5,-92(s0)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a878:	fe042703          	lw	a4,-32(s0)
    a87c:	fe842783          	lw	a5,-24(s0)
    a880:	00f707b3          	add	a5,a4,a5
    a884:	7ff7f713          	and	a4,a5,2047
    a888:	fac42783          	lw	a5,-84(s0)
    a88c:	02e7ac23          	sw	a4,56(a5)
    }
    while (space > 0);
    a890:	fa442783          	lw	a5,-92(s0)
    a894:	f2f04ee3          	bgtz	a5,a7d0 <altera_avalon_jtag_uart_read+0x54>
    a898:	0080006f          	j	a8a0 <altera_avalon_jtag_uart_read+0x124>
        break; /* No more data available */
    a89c:	00000013          	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    a8a0:	fec42703          	lw	a4,-20(s0)
    a8a4:	fa842783          	lw	a5,-88(s0)
    a8a8:	0af71e63          	bne	a4,a5,a964 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    a8ac:	fa042703          	lw	a4,-96(s0)
    a8b0:	000047b7          	lui	a5,0x4
    a8b4:	00f777b3          	and	a5,a4,a5
    a8b8:	0a079a63          	bnez	a5,a96c <altera_avalon_jtag_uart_read+0x1f0>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    a8bc:	000287b7          	lui	a5,0x28
    a8c0:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
    a8c4:	00100793          	li	a5,1
    a8c8:	04f71863          	bne	a4,a5,a918 <altera_avalon_jtag_uart_read+0x19c>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    a8cc:	fac42783          	lw	a5,-84(s0)
    a8d0:	0307a783          	lw	a5,48(a5)
    a8d4:	fcf42623          	sw	a5,-52(s0)
    a8d8:	00500793          	li	a5,5
    a8dc:	fcf41523          	sh	a5,-54(s0)
    a8e0:	f8300793          	li	a5,-125
    a8e4:	fcf404a3          	sb	a5,-55(s0)
    a8e8:	fc041323          	sh	zero,-58(s0)
  if (OSRunning)
    a8ec:	000287b7          	lui	a5,0x28
    a8f0:	8137c783          	lbu	a5,-2029(a5) # 27813 <OSRunning>
    a8f4:	04078863          	beqz	a5,a944 <altera_avalon_jtag_uart_read+0x1c8>
    OSFlagPend (group, flags, wait_type, timeout, &err);
    a8f8:	fc645683          	lhu	a3,-58(s0)
    a8fc:	fba40713          	add	a4,s0,-70
    a900:	fc944603          	lbu	a2,-55(s0)
    a904:	fca45783          	lhu	a5,-54(s0)
    a908:	00078593          	mv	a1,a5
    a90c:	fcc42503          	lw	a0,-52(s0)
    a910:	9a0f90ef          	jal	3ab0 <OSFlagPend>
    return err;
    a914:	0340006f          	j	a948 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    a918:	00000013          	nop
    a91c:	fac42783          	lw	a5,-84(s0)
    a920:	0347a783          	lw	a5,52(a5)
    a924:	fe442703          	lw	a4,-28(s0)
    a928:	02f71063          	bne	a4,a5,a948 <altera_avalon_jtag_uart_read+0x1cc>
    a92c:	fac42783          	lw	a5,-84(s0)
    a930:	0247a703          	lw	a4,36(a5)
    a934:	fac42783          	lw	a5,-84(s0)
    a938:	0047a783          	lw	a5,4(a5)
    a93c:	fef760e3          	bltu	a4,a5,a91c <altera_avalon_jtag_uart_read+0x1a0>
    a940:	0080006f          	j	a948 <altera_avalon_jtag_uart_read+0x1cc>
  return OS_ERR_PEND_ISR;
    a944:	00000013          	nop
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    a948:	fac42783          	lw	a5,-84(s0)
    a94c:	0347a783          	lw	a5,52(a5)
    a950:	fe442703          	lw	a4,-28(s0)
    a954:	02f70063          	beq	a4,a5,a974 <altera_avalon_jtag_uart_read+0x1f8>
  while (space > 0)
    a958:	fa442783          	lw	a5,-92(s0)
    a95c:	e6f04ae3          	bgtz	a5,a7d0 <altera_avalon_jtag_uart_read+0x54>
    a960:	0180006f          	j	a978 <altera_avalon_jtag_uart_read+0x1fc>
      break;
    a964:	00000013          	nop
    a968:	0100006f          	j	a978 <altera_avalon_jtag_uart_read+0x1fc>
      break;
    a96c:	00000013          	nop
    a970:	0080006f          	j	a978 <altera_avalon_jtag_uart_read+0x1fc>
      break;
    a974:	00000013          	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    a978:	fac42783          	lw	a5,-84(s0)
    a97c:	0287a783          	lw	a5,40(a5)
    a980:	00078513          	mv	a0,a5
    a984:	a00fd0ef          	jal	7b84 <OSSemPost>

  if (ptr != buffer)
    a988:	fec42703          	lw	a4,-20(s0)
    a98c:	fa842783          	lw	a5,-88(s0)
    a990:	06f70463          	beq	a4,a5,a9f8 <altera_avalon_jtag_uart_read+0x27c>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    a994:	00800793          	li	a5,8
    a998:	3007b7f3          	csrrc	a5,mstatus,a5
    a99c:	faf42e23          	sw	a5,-68(s0)
    return context;
    a9a0:	fbc42783          	lw	a5,-68(s0)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    a9a4:	fcf42e23          	sw	a5,-36(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a9a8:	fac42783          	lw	a5,-84(s0)
    a9ac:	0207a783          	lw	a5,32(a5)
    a9b0:	0017e713          	or	a4,a5,1
    a9b4:	fac42783          	lw	a5,-84(s0)
    a9b8:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a9bc:	fac42783          	lw	a5,-84(s0)
    a9c0:	0207a783          	lw	a5,32(a5)
    a9c4:	fcf42c23          	sw	a5,-40(s0)
    a9c8:	fac42783          	lw	a5,-84(s0)
    a9cc:	0007a783          	lw	a5,0(a5)
    a9d0:	00478793          	add	a5,a5,4
    a9d4:	00078713          	mv	a4,a5
    a9d8:	fd842783          	lw	a5,-40(s0)
    a9dc:	00f72023          	sw	a5,0(a4)
    a9e0:	fdc42783          	lw	a5,-36(s0)
    a9e4:	fcf42023          	sw	a5,-64(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    a9e8:	fc042783          	lw	a5,-64(s0)
    a9ec:	0087f793          	and	a5,a5,8
    a9f0:	3007a073          	csrs	mstatus,a5
}
    a9f4:	00000013          	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    a9f8:	fec42703          	lw	a4,-20(s0)
    a9fc:	fa842783          	lw	a5,-88(s0)
    aa00:	00f70a63          	beq	a4,a5,aa14 <altera_avalon_jtag_uart_read+0x298>
    return ptr - buffer;
    aa04:	fec42703          	lw	a4,-20(s0)
    aa08:	fa842783          	lw	a5,-88(s0)
    aa0c:	40f707b3          	sub	a5,a4,a5
    aa10:	0200006f          	j	aa30 <altera_avalon_jtag_uart_read+0x2b4>
  else if (flags & O_NONBLOCK)
    aa14:	fa042703          	lw	a4,-96(s0)
    aa18:	000047b7          	lui	a5,0x4
    aa1c:	00f777b3          	and	a5,a4,a5
    aa20:	00078663          	beqz	a5,aa2c <altera_avalon_jtag_uart_read+0x2b0>
    return -EWOULDBLOCK;
    aa24:	ff500793          	li	a5,-11
    aa28:	0080006f          	j	aa30 <altera_avalon_jtag_uart_read+0x2b4>
  else
    return -EIO;
    aa2c:	ffb00793          	li	a5,-5
}
    aa30:	00078513          	mv	a0,a5
    aa34:	05c12083          	lw	ra,92(sp)
    aa38:	05812403          	lw	s0,88(sp)
    aa3c:	06010113          	add	sp,sp,96
    aa40:	00008067          	ret

0000aa44 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    aa44:	fa010113          	add	sp,sp,-96
    aa48:	04112e23          	sw	ra,92(sp)
    aa4c:	04812c23          	sw	s0,88(sp)
    aa50:	06010413          	add	s0,sp,96
    aa54:	faa42623          	sw	a0,-84(s0)
    aa58:	fab42423          	sw	a1,-88(s0)
    aa5c:	fac42223          	sw	a2,-92(s0)
    aa60:	fad42023          	sw	a3,-96(s0)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    aa64:	fe042623          	sw	zero,-20(s0)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    aa68:	fa842783          	lw	a5,-88(s0)
    aa6c:	fef42223          	sw	a5,-28(s0)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    aa70:	fac42783          	lw	a5,-84(s0)
    aa74:	02c7a783          	lw	a5,44(a5) # 402c <OSFlagPend+0x57c>
    aa78:	fcf42a23          	sw	a5,-44(s0)
    aa7c:	fc041923          	sh	zero,-46(s0)
    aa80:	fd245783          	lhu	a5,-46(s0)
    aa84:	fbc40713          	add	a4,s0,-68
    aa88:	00070613          	mv	a2,a4
    aa8c:	00078593          	mv	a1,a5
    aa90:	fd442503          	lw	a0,-44(s0)
    aa94:	d79fc0ef          	jal	780c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    aa98:	0ec0006f          	j	ab84 <altera_avalon_jtag_uart_write+0x140>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    aa9c:	fac42783          	lw	a5,-84(s0)
    aaa0:	03c7a783          	lw	a5,60(a5)
    aaa4:	fef42023          	sw	a5,-32(s0)
      out = sp->tx_out;
    aaa8:	fac42783          	lw	a5,-84(s0)
    aaac:	0407a783          	lw	a5,64(a5)
    aab0:	fef42623          	sw	a5,-20(s0)

      if (in < out)
    aab4:	fe042703          	lw	a4,-32(s0)
    aab8:	fec42783          	lw	a5,-20(s0)
    aabc:	00f77e63          	bgeu	a4,a5,aad8 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    aac0:	fec42703          	lw	a4,-20(s0)
    aac4:	fe042783          	lw	a5,-32(s0)
    aac8:	40f707b3          	sub	a5,a4,a5
    aacc:	fff78793          	add	a5,a5,-1
    aad0:	fef42423          	sw	a5,-24(s0)
    aad4:	0340006f          	j	ab08 <altera_avalon_jtag_uart_write+0xc4>
      else if (out > 0)
    aad8:	fec42783          	lw	a5,-20(s0)
    aadc:	00078e63          	beqz	a5,aaf8 <altera_avalon_jtag_uart_write+0xb4>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    aae0:	000017b7          	lui	a5,0x1
    aae4:	80078713          	add	a4,a5,-2048 # 800 <_start+0x44>
    aae8:	fe042783          	lw	a5,-32(s0)
    aaec:	40f707b3          	sub	a5,a4,a5
    aaf0:	fef42423          	sw	a5,-24(s0)
    aaf4:	0140006f          	j	ab08 <altera_avalon_jtag_uart_write+0xc4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    aaf8:	7ff00713          	li	a4,2047
    aafc:	fe042783          	lw	a5,-32(s0)
    ab00:	40f707b3          	sub	a5,a4,a5
    ab04:	fef42423          	sw	a5,-24(s0)

      if (n == 0)
    ab08:	fe842783          	lw	a5,-24(s0)
    ab0c:	08078263          	beqz	a5,ab90 <altera_avalon_jtag_uart_write+0x14c>
        break;

      if (n > count)
    ab10:	fa442783          	lw	a5,-92(s0)
    ab14:	fe842703          	lw	a4,-24(s0)
    ab18:	00e7f663          	bgeu	a5,a4,ab24 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
    ab1c:	fa442783          	lw	a5,-92(s0)
    ab20:	fef42423          	sw	a5,-24(s0)

      memcpy(sp->tx_buf + in, ptr, n);
    ab24:	fac42703          	lw	a4,-84(s0)
    ab28:	000017b7          	lui	a5,0x1
    ab2c:	84478793          	add	a5,a5,-1980 # 844 <alt_load_section+0x34>
    ab30:	00f70733          	add	a4,a4,a5
    ab34:	fe042783          	lw	a5,-32(s0)
    ab38:	00f707b3          	add	a5,a4,a5
    ab3c:	fe842603          	lw	a2,-24(s0)
    ab40:	fa842583          	lw	a1,-88(s0)
    ab44:	00078513          	mv	a0,a5
    ab48:	204010ef          	jal	bd4c <memcpy>
      ptr   += n;
    ab4c:	fa842703          	lw	a4,-88(s0)
    ab50:	fe842783          	lw	a5,-24(s0)
    ab54:	00f707b3          	add	a5,a4,a5
    ab58:	faf42423          	sw	a5,-88(s0)
      count -= n;
    ab5c:	fa442703          	lw	a4,-92(s0)
    ab60:	fe842783          	lw	a5,-24(s0)
    ab64:	40f707b3          	sub	a5,a4,a5
    ab68:	faf42223          	sw	a5,-92(s0)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ab6c:	fe042703          	lw	a4,-32(s0)
    ab70:	fe842783          	lw	a5,-24(s0)
    ab74:	00f707b3          	add	a5,a4,a5
    ab78:	7ff7f713          	and	a4,a5,2047
    ab7c:	fac42783          	lw	a5,-84(s0)
    ab80:	02e7ae23          	sw	a4,60(a5)
    while (count > 0)
    ab84:	fa442783          	lw	a5,-92(s0)
    ab88:	f0f04ae3          	bgtz	a5,aa9c <altera_avalon_jtag_uart_write+0x58>
    ab8c:	0080006f          	j	ab94 <altera_avalon_jtag_uart_write+0x150>
        break;
    ab90:	00000013          	nop
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    ab94:	00800793          	li	a5,8
    ab98:	3007b7f3          	csrrc	a5,mstatus,a5
    ab9c:	fcf42423          	sw	a5,-56(s0)
    return context;
    aba0:	fc842783          	lw	a5,-56(s0)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    aba4:	fcf42e23          	sw	a5,-36(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    aba8:	fac42783          	lw	a5,-84(s0)
    abac:	0207a783          	lw	a5,32(a5)
    abb0:	0027e713          	or	a4,a5,2
    abb4:	fac42783          	lw	a5,-84(s0)
    abb8:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    abbc:	fac42783          	lw	a5,-84(s0)
    abc0:	0207a783          	lw	a5,32(a5)
    abc4:	fcf42c23          	sw	a5,-40(s0)
    abc8:	fac42783          	lw	a5,-84(s0)
    abcc:	0007a783          	lw	a5,0(a5)
    abd0:	00478793          	add	a5,a5,4
    abd4:	00078713          	mv	a4,a5
    abd8:	fd842783          	lw	a5,-40(s0)
    abdc:	00f72023          	sw	a5,0(a4)
    abe0:	fdc42783          	lw	a5,-36(s0)
    abe4:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    abe8:	fcc42783          	lw	a5,-52(s0)
    abec:	0087f793          	and	a5,a5,8
    abf0:	3007a073          	csrs	mstatus,a5
}
    abf4:	00000013          	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    abf8:	fa442783          	lw	a5,-92(s0)
    abfc:	0af05663          	blez	a5,aca8 <altera_avalon_jtag_uart_write+0x264>
    {
      if (flags & O_NONBLOCK)
    ac00:	fa042703          	lw	a4,-96(s0)
    ac04:	000047b7          	lui	a5,0x4
    ac08:	00f777b3          	and	a5,a4,a5
    ac0c:	0a079463          	bnez	a5,acb4 <altera_avalon_jtag_uart_write+0x270>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    ac10:	000287b7          	lui	a5,0x28
    ac14:	8137c703          	lbu	a4,-2029(a5) # 27813 <OSRunning>
    ac18:	00100793          	li	a5,1
    ac1c:	04f71863          	bne	a4,a5,ac6c <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    ac20:	fac42783          	lw	a5,-84(s0)
    ac24:	0307a783          	lw	a5,48(a5)
    ac28:	fcf42223          	sw	a5,-60(s0)
    ac2c:	00600793          	li	a5,6
    ac30:	fcf41123          	sh	a5,-62(s0)
    ac34:	f8300793          	li	a5,-125
    ac38:	fcf400a3          	sb	a5,-63(s0)
    ac3c:	fa041f23          	sh	zero,-66(s0)
  if (OSRunning)
    ac40:	000287b7          	lui	a5,0x28
    ac44:	8137c783          	lbu	a5,-2029(a5) # 27813 <OSRunning>
    ac48:	04078863          	beqz	a5,ac98 <altera_avalon_jtag_uart_write+0x254>
    OSFlagPend (group, flags, wait_type, timeout, &err);
    ac4c:	fbe45683          	lhu	a3,-66(s0)
    ac50:	fbd40713          	add	a4,s0,-67
    ac54:	fc144603          	lbu	a2,-63(s0)
    ac58:	fc245783          	lhu	a5,-62(s0)
    ac5c:	00078593          	mv	a1,a5
    ac60:	fc442503          	lw	a0,-60(s0)
    ac64:	e4df80ef          	jal	3ab0 <OSFlagPend>
    return err;
    ac68:	0340006f          	j	ac9c <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ac6c:	00000013          	nop
    ac70:	fac42783          	lw	a5,-84(s0)
    ac74:	0407a783          	lw	a5,64(a5)
    ac78:	fec42703          	lw	a4,-20(s0)
    ac7c:	02f71063          	bne	a4,a5,ac9c <altera_avalon_jtag_uart_write+0x258>
    ac80:	fac42783          	lw	a5,-84(s0)
    ac84:	0247a703          	lw	a4,36(a5)
    ac88:	fac42783          	lw	a5,-84(s0)
    ac8c:	0047a783          	lw	a5,4(a5)
    ac90:	fef760e3          	bltu	a4,a5,ac70 <altera_avalon_jtag_uart_write+0x22c>
    ac94:	0080006f          	j	ac9c <altera_avalon_jtag_uart_write+0x258>
  return OS_ERR_PEND_ISR;
    ac98:	00000013          	nop
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    ac9c:	fac42783          	lw	a5,-84(s0)
    aca0:	0247a783          	lw	a5,36(a5)
    aca4:	00079c63          	bnez	a5,acbc <altera_avalon_jtag_uart_write+0x278>
         break;
    }
  }
  while (count > 0);
    aca8:	fa442783          	lw	a5,-92(s0)
    acac:	ecf04ce3          	bgtz	a5,ab84 <altera_avalon_jtag_uart_write+0x140>
    acb0:	0100006f          	j	acc0 <altera_avalon_jtag_uart_write+0x27c>
        break;
    acb4:	00000013          	nop
    acb8:	0080006f          	j	acc0 <altera_avalon_jtag_uart_write+0x27c>
         break;
    acbc:	00000013          	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    acc0:	fac42783          	lw	a5,-84(s0)
    acc4:	02c7a783          	lw	a5,44(a5)
    acc8:	00078513          	mv	a0,a5
    accc:	eb9fc0ef          	jal	7b84 <OSSemPost>

  if (ptr != start)
    acd0:	fa842703          	lw	a4,-88(s0)
    acd4:	fe442783          	lw	a5,-28(s0)
    acd8:	00f70a63          	beq	a4,a5,acec <altera_avalon_jtag_uart_write+0x2a8>
    return ptr - start;
    acdc:	fa842703          	lw	a4,-88(s0)
    ace0:	fe442783          	lw	a5,-28(s0)
    ace4:	40f707b3          	sub	a5,a4,a5
    ace8:	0200006f          	j	ad08 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
    acec:	fa042703          	lw	a4,-96(s0)
    acf0:	000047b7          	lui	a5,0x4
    acf4:	00f777b3          	and	a5,a4,a5
    acf8:	00078663          	beqz	a5,ad04 <altera_avalon_jtag_uart_write+0x2c0>
    return -EWOULDBLOCK;
    acfc:	ff500793          	li	a5,-11
    ad00:	0080006f          	j	ad08 <altera_avalon_jtag_uart_write+0x2c4>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    ad04:	ffb00793          	li	a5,-5
}
    ad08:	00078513          	mv	a0,a5
    ad0c:	05c12083          	lw	ra,92(sp)
    ad10:	05812403          	lw	s0,88(sp)
    ad14:	06010113          	add	sp,sp,96
    ad18:	00008067          	ret

0000ad1c <OSCtxSw>:
OSCtxSw:	
      /* 
       * Save the callee-saved registers to the stack, +1 for the impure ptr. 
       */
#if ABBOTTSLAKE_NUM_GPR == 32
      addi sp, sp, -(13 + 1) * 4
    ad1c:	fc810113          	add	sp,sp,-56
      sw s2,   3 * 4(sp)
    ad20:	01212623          	sw	s2,12(sp)
      sw s3,   4 * 4(sp)
    ad24:	01312823          	sw	s3,16(sp)
      sw s4,   5 * 4(sp)
    ad28:	01412a23          	sw	s4,20(sp)
      sw s5,   6 * 4(sp)
    ad2c:	01512c23          	sw	s5,24(sp)
      sw s6,   7 * 4(sp)
    ad30:	01612e23          	sw	s6,28(sp)
      sw s7,   8 * 4(sp)
    ad34:	03712023          	sw	s7,32(sp)
      sw s8,   9 * 4(sp)
    ad38:	03812223          	sw	s8,36(sp)
      sw s9,  10 * 4(sp)
    ad3c:	03912423          	sw	s9,40(sp)
      sw s10, 11 * 4(sp)
    ad40:	03a12623          	sw	s10,44(sp)
      sw s11, 12 * 4(sp)
    ad44:	03b12823          	sw	s11,48(sp)
#else // 16 (RV32E)
      addi sp, sp, -(3 + 1) * 4
#endif // ABBOTTSLAKE_NUM_GPR 
      sw ra,   0 * 4(sp)
    ad48:	00112023          	sw	ra,0(sp)
      sw s0,   1 * 4(sp)
    ad4c:	00812223          	sw	s0,4(sp)
      sw s1,   2 * 4(sp)
    ad50:	00912423          	sw	s1,8(sp)
      /*
       * store the current value of _impure_ptr so it can be restored
       * later. _impure_ptr is assigned on a per task basis, and is used
       * by Newlib to achieve reentrancy.	
       */
      la s1, _impure_ptr
    ad54:	82818493          	add	s1,gp,-2008 # 25bc4 <_impure_ptr>
      lw s1, 0(s1)
    ad58:	0004a483          	lw	s1,0(s1)

#if ABBOTTSLAKE_NUM_GPR == 32
      sw s1, 13 * 4(sp)
    ad5c:	02912a23          	sw	s1,52(sp)

      /*
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */
      la s1, OSTCBCur
    ad60:	0001d497          	auipc	s1,0x1d
    ad64:	abc48493          	add	s1,s1,-1348 # 2781c <OSTCBCur>
      lw s1, 0(s1)  /* s1 = *OSTCBCur */
    ad68:	0004a483          	lw	s1,0(s1)
      sw sp, 0(s1)  /* sp = *s1 = OSTCBStkPtr which is the first element in the OS_TCB structure. */
    ad6c:	0024a023          	sw	sp,0(s1)

      /*
       * Call the user definable OSTaskSWHook()
       */
      call OSTaskSwHook
    ad70:	6ad000ef          	jal	bc1c <OSTaskSwHook>
0:

9:
    # OSPrioCur = OSPrioHighRdy;
    la s0, OSPrioHighRdy
    ad74:	0001d417          	auipc	s0,0x1d
    ad78:	a9840413          	add	s0,s0,-1384 # 2780c <OSPrioHighRdy>
    lb s1, 0(s0)
    ad7c:	00040483          	lb	s1,0(s0)
    la s0, OSPrioCur
    ad80:	0001d417          	auipc	s0,0x1d
    ad84:	a8b40413          	add	s0,s0,-1397 # 2780b <OSPrioCur>
    sb s1, 0(s0)
    ad88:	00940023          	sb	s1,0(s0)

    # OSTCBCur = OSTCBHighRdy;
    la s0, OSTCBHighRdy
    ad8c:	0001d417          	auipc	s0,0x1d
    ad90:	a9840413          	add	s0,s0,-1384 # 27824 <OSTCBHighRdy>
    lw s1, 0(s0)
    ad94:	00042483          	lw	s1,0(s0)
    la s0, OSTCBCur
    ad98:	0001d417          	auipc	s0,0x1d
    ad9c:	a8440413          	add	s0,s0,-1404 # 2781c <OSTCBCur>
    sw s1, 0(s0)
    ada0:	00942023          	sw	s1,0(s0)

    # sp = OSTCBHighRdy->OSTCBStkPtr;
    lw sp, 0(s1)
    ada4:	0004a103          	lw	sp,0(s1)
      /*
       * restore the value of _impure_ptr. _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */
#if ABBOTTSLAKE_NUM_GPR == 32
      lw s0, 13 * 4(sp) /* load the new impure pointer */
    ada8:	03412403          	lw	s0,52(sp)
#else // 16 (RV32E)
      lw s0, 3 * 4(sp) /* load the new impure pointer */
#endif //ABBOTTSLAKE_NUM_GPR
      la s1, _impure_ptr
    adac:	82818493          	add	s1,gp,-2008 # 25bc4 <_impure_ptr>
      sw s0, 0(s1)
    adb0:	0084a023          	sw	s0,0(s1)
#endif /* OS_THREAD_SAFE_NEWLIB */

      /*
       * Restore the saved registers for the new task.
       */
      lw ra,   0 * 4(sp)
    adb4:	00012083          	lw	ra,0(sp)
      lw s0,   1 * 4(sp)
    adb8:	00412403          	lw	s0,4(sp)
      lw s1,   2 * 4(sp)
    adbc:	00812483          	lw	s1,8(sp)
#if ABBOTTSLAKE_NUM_GPR == 32
      lw s2,   3 * 4(sp)
    adc0:	00c12903          	lw	s2,12(sp)
      lw s3,   4 * 4(sp)
    adc4:	01012983          	lw	s3,16(sp)
      lw s4,   5 * 4(sp)
    adc8:	01412a03          	lw	s4,20(sp)
      lw s5,   6 * 4(sp)
    adcc:	01812a83          	lw	s5,24(sp)
      lw s6,   7 * 4(sp)
    add0:	01c12b03          	lw	s6,28(sp)
      lw s7,   8 * 4(sp)
    add4:	02012b83          	lw	s7,32(sp)
      lw s8,   9 * 4(sp)
    add8:	02412c03          	lw	s8,36(sp)
      lw s9,  10 * 4(sp)
    addc:	02812c83          	lw	s9,40(sp)
      lw s10, 11 * 4(sp)
    ade0:	02c12d03          	lw	s10,44(sp)
      lw s11, 12 * 4(sp)
    ade4:	03012d83          	lw	s11,48(sp)
      /* 
       * Restore the callee-saved registers from the stack, +1 for the impure ptr. 
       */
      addi sp, sp, (13 + 1) * 4
    ade8:	03810113          	add	sp,sp,56
#endif

      /*
       * resume execution of the new task.
       */
      ret
    adec:	00008067          	ret

0000adf0 <OSStartHighRdy>:
OSStartHighRdy:
      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
       li t0, 0x8
    adf0:	00800293          	li	t0,8
       csrc mstatus, t0
    adf4:	3002b073          	csrc	mstatus,t0

      /*
       * Call the user definable OSTaskSWHook()
       */
      call OSTaskSwHook
    adf8:	625000ef          	jal	bc1c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */
       la t1, OSRunning
    adfc:	0001d317          	auipc	t1,0x1d
    ae00:	a1730313          	add	t1,t1,-1513 # 27813 <OSRunning>
       li t0, 1      /* set t0 to the value 'TRUE' */
    ae04:	00100293          	li	t0,1
       sb t0, 0(t1)  /* save this to OSRunning */
    ae08:	00530023          	sb	t0,0(t1)

      /*
       * start execution of the new task.
       */
      j 9b
    ae0c:	f69ff06f          	j	ad74 <OSCtxSw+0x58>

0000ae10 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right... TODO: Is this valid for Abbott's Lake??
       */
      li sp, 0
    ae10:	00000113          	li	sp,0

      /* Enable interrupts */
      li t0, 0x8
    ae14:	00800293          	li	t0,8
      csrs mstatus, t0
    ae18:	3002a073          	csrs	mstatus,t0

      lw a0, 0(sp)
    ae1c:	00012503          	lw	a0,0(sp)
      lw t1, 4(sp)
    ae20:	00412303          	lw	t1,4(sp)

      addi sp, sp, 8
    ae24:	00810113          	add	sp,sp,8

      jalr t1
    ae28:	000300e7          	jalr	t1

      nop
    ae2c:	00000013          	nop

0000ae30 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    ae30:	fc010113          	add	sp,sp,-64
    ae34:	02812e23          	sw	s0,60(sp)
    ae38:	04010413          	add	s0,sp,64
    ae3c:	fca42623          	sw	a0,-52(s0)
    ae40:	fcb42423          	sw	a1,-56(s0)
    ae44:	fcc42223          	sw	a2,-60(s0)
    ae48:	fcd42023          	sw	a3,-64(s0)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
    ae4c:	00000713          	li	a4,0
    ae50:	00000793          	li	a5,0
    ae54:	fee42423          	sw	a4,-24(s0)
    ae58:	fef42623          	sw	a5,-20(s0)
    ae5c:	000287b7          	lui	a5,0x28
    ae60:	8487a783          	lw	a5,-1976(a5) # 27848 <_alt_tick_rate>
  
  if (alt_ticks_per_second ())
    ae64:	12078063          	beqz	a5,af84 <alt_alarm_start+0x154>
  {
    if (alarm)
    ae68:	fcc42783          	lw	a5,-52(s0)
    ae6c:	10078863          	beqz	a5,af7c <alt_alarm_start+0x14c>
    {
      alarm->callback = callback;
    ae70:	fcc42783          	lw	a5,-52(s0)
    ae74:	fc442703          	lw	a4,-60(s0)
    ae78:	00e7a823          	sw	a4,16(a5)
      alarm->context  = context;
    ae7c:	fcc42783          	lw	a5,-52(s0)
    ae80:	fc042703          	lw	a4,-64(s0)
    ae84:	00e7aa23          	sw	a4,20(a5)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    ae88:	00800793          	li	a5,8
    ae8c:	3007b7f3          	csrrc	a5,mstatus,a5
    ae90:	fcf42a23          	sw	a5,-44(s0)
    return context;
    ae94:	fd442783          	lw	a5,-44(s0)
 
      irq_context = alt_irq_disable_all ();
    ae98:	fef42223          	sw	a5,-28(s0)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ae9c:	000287b7          	lui	a5,0x28
    aea0:	8507a703          	lw	a4,-1968(a5) # 27850 <_alt_nticks>
    aea4:	8547a783          	lw	a5,-1964(a5)
      
      current_nticks = alt_nticks();
    aea8:	fee42423          	sw	a4,-24(s0)
    aeac:	fef42623          	sw	a5,-20(s0)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
    aeb0:	fc842783          	lw	a5,-56(s0)
    aeb4:	00078813          	mv	a6,a5
    aeb8:	00000893          	li	a7,0
    aebc:	fe842603          	lw	a2,-24(s0)
    aec0:	fec42683          	lw	a3,-20(s0)
    aec4:	00c80733          	add	a4,a6,a2
    aec8:	00070593          	mv	a1,a4
    aecc:	0105b5b3          	sltu	a1,a1,a6
    aed0:	00d887b3          	add	a5,a7,a3
    aed4:	00f586b3          	add	a3,a1,a5
    aed8:	00068793          	mv	a5,a3
    aedc:	00070613          	mv	a2,a4
    aee0:	00078693          	mv	a3,a5
    aee4:	00100513          	li	a0,1
    aee8:	00000593          	li	a1,0
    aeec:	00a60733          	add	a4,a2,a0
    aef0:	00070813          	mv	a6,a4
    aef4:	00c83833          	sltu	a6,a6,a2
    aef8:	00b687b3          	add	a5,a3,a1
    aefc:	00f806b3          	add	a3,a6,a5
    af00:	00068793          	mv	a5,a3
    af04:	fcc42683          	lw	a3,-52(s0)
    af08:	00e6a423          	sw	a4,8(a3)
    af0c:	00f6a623          	sw	a5,12(a3)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    af10:	fcc42783          	lw	a5,-52(s0)
    af14:	82018713          	add	a4,gp,-2016 # 25bbc <alt_alarm_list>
    af18:	fce42e23          	sw	a4,-36(s0)
    af1c:	fcf42c23          	sw	a5,-40(s0)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    af20:	fd842783          	lw	a5,-40(s0)
    af24:	fdc42703          	lw	a4,-36(s0)
    af28:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    af2c:	fdc42783          	lw	a5,-36(s0)
    af30:	0007a703          	lw	a4,0(a5)
    af34:	fd842783          	lw	a5,-40(s0)
    af38:	00e7a023          	sw	a4,0(a5)

  list->next->previous = entry;
    af3c:	fdc42783          	lw	a5,-36(s0)
    af40:	0007a783          	lw	a5,0(a5)
    af44:	fd842703          	lw	a4,-40(s0)
    af48:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    af4c:	fdc42783          	lw	a5,-36(s0)
    af50:	fd842703          	lw	a4,-40(s0)
    af54:	00e7a023          	sw	a4,0(a5)
}
    af58:	00000013          	nop
    af5c:	fe442783          	lw	a5,-28(s0)
    af60:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    af64:	fe042783          	lw	a5,-32(s0)
    af68:	0087f793          	and	a5,a5,8
    af6c:	3007a073          	csrs	mstatus,a5
}
    af70:	00000013          	nop
      alt_irq_enable_all (irq_context);

      return 0;
    af74:	00000793          	li	a5,0
    af78:	0100006f          	j	af88 <alt_alarm_start+0x158>
    }
    else
    {
      return -EINVAL;
    af7c:	fea00793          	li	a5,-22
    af80:	0080006f          	j	af88 <alt_alarm_start+0x158>
    }
  }
  else
  {
    return -ENOTSUP;
    af84:	f7a00793          	li	a5,-134
  }
}
    af88:	00078513          	mv	a0,a5
    af8c:	03c12403          	lw	s0,60(sp)
    af90:	04010113          	add	sp,sp,64
    af94:	00008067          	ret

0000af98 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    af98:	ff010113          	add	sp,sp,-16
    af9c:	00812623          	sw	s0,12(sp)
    afa0:	01010413          	add	s0,sp,16
  /* Abbott's Lake does not implement dcache  */
}
    afa4:	00000013          	nop
    afa8:	00c12403          	lw	s0,12(sp)
    afac:	01010113          	add	sp,sp,16
    afb0:	00008067          	ret

0000afb4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    afb4:	fe010113          	add	sp,sp,-32
    afb8:	00812e23          	sw	s0,28(sp)
    afbc:	02010413          	add	s0,sp,32
    afc0:	fea42623          	sw	a0,-20(s0)
    afc4:	feb42423          	sw	a1,-24(s0)
    afc8:	fec42223          	sw	a2,-28(s0)
  return len;
    afcc:	fe442783          	lw	a5,-28(s0)
}
    afd0:	00078513          	mv	a0,a5
    afd4:	01c12403          	lw	s0,28(sp)
    afd8:	02010113          	add	sp,sp,32
    afdc:	00008067          	ret

0000afe0 <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
    afe0:	fe010113          	add	sp,sp,-32
    afe4:	00112e23          	sw	ra,28(sp)
    afe8:	00812c23          	sw	s0,24(sp)
    afec:	02010413          	add	s0,sp,32
    aff0:	fea42623          	sw	a0,-20(s0)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    aff4:	81018593          	add	a1,gp,-2032 # 25bac <alt_dev_list>
    aff8:	fec42503          	lw	a0,-20(s0)
    affc:	060000ef          	jal	b05c <alt_dev_llist_insert>
    b000:	00050793          	mv	a5,a0
}
    b004:	00078513          	mv	a0,a5
    b008:	01c12083          	lw	ra,28(sp)
    b00c:	01812403          	lw	s0,24(sp)
    b010:	02010113          	add	sp,sp,32
    b014:	00008067          	ret

0000b018 <alt_get_errno>:
    b018:	ff010113          	add	sp,sp,-16
    b01c:	00112623          	sw	ra,12(sp)
    b020:	00812423          	sw	s0,8(sp)
    b024:	01010413          	add	s0,sp,16
    b028:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
    b02c:	00078a63          	beqz	a5,b040 <alt_get_errno+0x28>
    b030:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
    b034:	000780e7          	jalr	a5
    b038:	00050793          	mv	a5,a0
    b03c:	00c0006f          	j	b048 <alt_get_errno+0x30>
    b040:	000287b7          	lui	a5,0x28
    b044:	86078793          	add	a5,a5,-1952 # 27860 <errno>
    b048:	00078513          	mv	a0,a5
    b04c:	00c12083          	lw	ra,12(sp)
    b050:	00812403          	lw	s0,8(sp)
    b054:	01010113          	add	sp,sp,16
    b058:	00008067          	ret

0000b05c <alt_dev_llist_insert>:
{
    b05c:	fd010113          	add	sp,sp,-48
    b060:	02112623          	sw	ra,44(sp)
    b064:	02812423          	sw	s0,40(sp)
    b068:	03010413          	add	s0,sp,48
    b06c:	fca42e23          	sw	a0,-36(s0)
    b070:	fcb42c23          	sw	a1,-40(s0)
  if (!dev || !dev->name)
    b074:	fdc42783          	lw	a5,-36(s0)
    b078:	00078863          	beqz	a5,b088 <alt_dev_llist_insert+0x2c>
    b07c:	fdc42783          	lw	a5,-36(s0)
    b080:	0087a783          	lw	a5,8(a5)
    b084:	00079e63          	bnez	a5,b0a0 <alt_dev_llist_insert+0x44>
    ALT_ERRNO = EINVAL;
    b088:	f91ff0ef          	jal	b018 <alt_get_errno>
    b08c:	00050713          	mv	a4,a0
    b090:	01600793          	li	a5,22
    b094:	00f72023          	sw	a5,0(a4)
    return -EINVAL;
    b098:	fea00793          	li	a5,-22
    b09c:	0540006f          	j	b0f0 <alt_dev_llist_insert+0x94>
  alt_llist_insert(list, &dev->llist);
    b0a0:	fdc42783          	lw	a5,-36(s0)
    b0a4:	fd842703          	lw	a4,-40(s0)
    b0a8:	fee42623          	sw	a4,-20(s0)
    b0ac:	fef42423          	sw	a5,-24(s0)
  entry->previous = list;
    b0b0:	fe842783          	lw	a5,-24(s0)
    b0b4:	fec42703          	lw	a4,-20(s0)
    b0b8:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    b0bc:	fec42783          	lw	a5,-20(s0)
    b0c0:	0007a703          	lw	a4,0(a5)
    b0c4:	fe842783          	lw	a5,-24(s0)
    b0c8:	00e7a023          	sw	a4,0(a5)
  list->next->previous = entry;
    b0cc:	fec42783          	lw	a5,-20(s0)
    b0d0:	0007a783          	lw	a5,0(a5)
    b0d4:	fe842703          	lw	a4,-24(s0)
    b0d8:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    b0dc:	fec42783          	lw	a5,-20(s0)
    b0e0:	fe842703          	lw	a4,-24(s0)
    b0e4:	00e7a023          	sw	a4,0(a5)
}
    b0e8:	00000013          	nop
  return 0;  
    b0ec:	00000793          	li	a5,0
}
    b0f0:	00078513          	mv	a0,a5
    b0f4:	02c12083          	lw	ra,44(sp)
    b0f8:	02812403          	lw	s0,40(sp)
    b0fc:	03010113          	add	sp,sp,48
    b100:	00008067          	ret

0000b104 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b104:	fe010113          	add	sp,sp,-32
    b108:	00112e23          	sw	ra,28(sp)
    b10c:	00812c23          	sw	s0,24(sp)
    b110:	02010413          	add	s0,sp,32
  constructor* ctor;

  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    b114:	000237b7          	lui	a5,0x23
    b118:	bcc78793          	add	a5,a5,-1076 # 22bcc <fstat+0xc>
    b11c:	fef42623          	sw	a5,-20(s0)
    b120:	01c0006f          	j	b13c <_do_ctors+0x38>
        (*ctor) (); 
    b124:	fec42783          	lw	a5,-20(s0)
    b128:	0007a783          	lw	a5,0(a5)
    b12c:	000780e7          	jalr	a5
  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    b130:	fec42783          	lw	a5,-20(s0)
    b134:	ffc78793          	add	a5,a5,-4
    b138:	fef42623          	sw	a5,-20(s0)
    b13c:	fec42703          	lw	a4,-20(s0)
    b140:	000237b7          	lui	a5,0x23
    b144:	bd078793          	add	a5,a5,-1072 # 22bd0 <__fini_array_end>
    b148:	fcf77ee3          	bgeu	a4,a5,b124 <_do_ctors+0x20>
}
    b14c:	00000013          	nop
    b150:	00000013          	nop
    b154:	01c12083          	lw	ra,28(sp)
    b158:	01812403          	lw	s0,24(sp)
    b15c:	02010113          	add	sp,sp,32
    b160:	00008067          	ret

0000b164 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b164:	fe010113          	add	sp,sp,-32
    b168:	00112e23          	sw	ra,28(sp)
    b16c:	00812c23          	sw	s0,24(sp)
    b170:	02010413          	add	s0,sp,32
  destructor* dtor;

  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    b174:	000237b7          	lui	a5,0x23
    b178:	bcc78793          	add	a5,a5,-1076 # 22bcc <fstat+0xc>
    b17c:	fef42623          	sw	a5,-20(s0)
    b180:	01c0006f          	j	b19c <_do_dtors+0x38>
        (*dtor) (); 
    b184:	fec42783          	lw	a5,-20(s0)
    b188:	0007a783          	lw	a5,0(a5)
    b18c:	000780e7          	jalr	a5
  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    b190:	fec42783          	lw	a5,-20(s0)
    b194:	ffc78793          	add	a5,a5,-4
    b198:	fef42623          	sw	a5,-20(s0)
    b19c:	fec42703          	lw	a4,-20(s0)
    b1a0:	000237b7          	lui	a5,0x23
    b1a4:	bd078793          	add	a5,a5,-1072 # 22bd0 <__fini_array_end>
    b1a8:	fcf77ee3          	bgeu	a4,a5,b184 <_do_dtors+0x20>
}
    b1ac:	00000013          	nop
    b1b0:	00000013          	nop
    b1b4:	01c12083          	lw	ra,28(sp)
    b1b8:	01812403          	lw	s0,24(sp)
    b1bc:	02010113          	add	sp,sp,32
    b1c0:	00008067          	ret

0000b1c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b1c4:	ff010113          	add	sp,sp,-16
    b1c8:	00812623          	sw	s0,12(sp)
    b1cc:	01010413          	add	s0,sp,16
  /* No cache present in Abbott's Lake */
}
    b1d0:	00000013          	nop
    b1d4:	00c12403          	lw	s0,12(sp)
    b1d8:	01010113          	add	sp,sp,16
    b1dc:	00008067          	ret

0000b1e0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int 
alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b1e0:	fd010113          	add	sp,sp,-48
    b1e4:	02112623          	sw	ra,44(sp)
    b1e8:	02812423          	sw	s0,40(sp)
    b1ec:	03010413          	add	s0,sp,48
    b1f0:	fea42623          	sw	a0,-20(s0)
    b1f4:	feb42423          	sw	a1,-24(s0)
    b1f8:	fec42223          	sw	a2,-28(s0)
    b1fc:	fed42023          	sw	a3,-32(s0)
    b200:	fce42e23          	sw	a4,-36(s0)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    b204:	fdc42703          	lw	a4,-36(s0)
    b208:	fe042683          	lw	a3,-32(s0)
    b20c:	fe442603          	lw	a2,-28(s0)
    b210:	fe842583          	lw	a1,-24(s0)
    b214:	fec42503          	lw	a0,-20(s0)
    b218:	01c000ef          	jal	b234 <alt_iic_isr_register>
    b21c:	00050793          	mv	a5,a0
}  
    b220:	00078513          	mv	a0,a5
    b224:	02c12083          	lw	ra,44(sp)
    b228:	02812403          	lw	s0,40(sp)
    b22c:	03010113          	add	sp,sp,48
    b230:	00008067          	ret

0000b234 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b234:	fa010113          	add	sp,sp,-96
    b238:	04812e23          	sw	s0,92(sp)
    b23c:	06010413          	add	s0,sp,96
    b240:	faa42e23          	sw	a0,-68(s0)
    b244:	fab42c23          	sw	a1,-72(s0)
    b248:	fac42a23          	sw	a2,-76(s0)
    b24c:	fad42823          	sw	a3,-80(s0)
    b250:	fae42623          	sw	a4,-84(s0)
  int rc = -EINVAL;  
    b254:	fea00793          	li	a5,-22
    b258:	fef42623          	sw	a5,-20(s0)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    b25c:	fb842783          	lw	a5,-72(s0)
    b260:	fef42423          	sw	a5,-24(s0)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b264:	fe842703          	lw	a4,-24(s0)
    b268:	00f00793          	li	a5,15
    b26c:	12e7c863          	blt	a5,a4,b39c <alt_iic_isr_register+0x168>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    b270:	00800793          	li	a5,8
    b274:	3007b7f3          	csrrc	a5,mstatus,a5
    b278:	fef42023          	sw	a5,-32(s0)
    return context;
    b27c:	fe042783          	lw	a5,-32(s0)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    b280:	fef42223          	sw	a5,-28(s0)

    alt_irq[id].handler = isr;
    b284:	0002c7b7          	lui	a5,0x2c
    b288:	94078713          	add	a4,a5,-1728 # 2b940 <alt_irq>
    b28c:	fe842783          	lw	a5,-24(s0)
    b290:	00379793          	sll	a5,a5,0x3
    b294:	00f707b3          	add	a5,a4,a5
    b298:	fb442703          	lw	a4,-76(s0)
    b29c:	00e7a023          	sw	a4,0(a5)
    alt_irq[id].context = isr_context;
    b2a0:	0002c7b7          	lui	a5,0x2c
    b2a4:	94078713          	add	a4,a5,-1728 # 2b940 <alt_irq>
    b2a8:	fe842783          	lw	a5,-24(s0)
    b2ac:	00379793          	sll	a5,a5,0x3
    b2b0:	00f707b3          	add	a5,a4,a5
    b2b4:	fb042703          	lw	a4,-80(s0)
    b2b8:	00e7a223          	sw	a4,4(a5)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    b2bc:	fb442783          	lw	a5,-76(s0)
    b2c0:	06078263          	beqz	a5,b324 <alt_iic_isr_register+0xf0>
    b2c4:	fe842783          	lw	a5,-24(s0)
    b2c8:	fbc42703          	lw	a4,-68(s0)
    b2cc:	fce42e23          	sw	a4,-36(s0)
    b2d0:	fcf42c23          	sw	a5,-40(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    b2d4:	fd842703          	lw	a4,-40(s0)
    b2d8:	00f00793          	li	a5,15
    b2dc:	00e7e863          	bltu	a5,a4,b2ec <alt_iic_isr_register+0xb8>
    b2e0:	fd842783          	lw	a5,-40(s0)
    b2e4:	01078793          	add	a5,a5,16
    b2e8:	0080006f          	j	b2f0 <alt_iic_isr_register+0xbc>
    b2ec:	fff00793          	li	a5,-1
    b2f0:	fcf42a23          	sw	a5,-44(s0)
    if (rc < 0)
    b2f4:	fd442783          	lw	a5,-44(s0)
    b2f8:	0007d663          	bgez	a5,b304 <alt_iic_isr_register+0xd0>
        return rc;
    b2fc:	fd442783          	lw	a5,-44(s0)
    b300:	0800006f          	j	b380 <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    b304:	fd442783          	lw	a5,-44(s0)
    b308:	fcf42c23          	sw	a5,-40(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MIE_CSR, 0x1 << irq);
    b30c:	fd842783          	lw	a5,-40(s0)
    b310:	00100713          	li	a4,1
    b314:	00f717b3          	sll	a5,a4,a5
    b318:	3047a073          	csrs	mie,a5
    return 0;
    b31c:	00000793          	li	a5,0
    b320:	0600006f          	j	b380 <alt_iic_isr_register+0x14c>
    b324:	fe842783          	lw	a5,-24(s0)
    b328:	fbc42703          	lw	a4,-68(s0)
    b32c:	fce42823          	sw	a4,-48(s0)
    b330:	fcf42623          	sw	a5,-52(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    b334:	fcc42703          	lw	a4,-52(s0)
    b338:	00f00793          	li	a5,15
    b33c:	00e7e863          	bltu	a5,a4,b34c <alt_iic_isr_register+0x118>
    b340:	fcc42783          	lw	a5,-52(s0)
    b344:	01078793          	add	a5,a5,16
    b348:	0080006f          	j	b350 <alt_iic_isr_register+0x11c>
    b34c:	fff00793          	li	a5,-1
    b350:	fcf42423          	sw	a5,-56(s0)
    if (rc < 0)
    b354:	fc842783          	lw	a5,-56(s0)
    b358:	0007d663          	bgez	a5,b364 <alt_iic_isr_register+0x130>
        return rc;
    b35c:	fc842783          	lw	a5,-56(s0)
    b360:	0200006f          	j	b380 <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    b364:	fc842783          	lw	a5,-56(s0)
    b368:	fcf42623          	sw	a5,-52(s0)
    ABBOTTS_LAKE_CLR_CSR(ABBOTTS_LAKE_MIE_CSR, 0x1 << irq);
    b36c:	fcc42783          	lw	a5,-52(s0)
    b370:	00100713          	li	a4,1
    b374:	00f717b3          	sll	a5,a4,a5
    b378:	3047b073          	csrc	mie,a5
    return 0;
    b37c:	00000793          	li	a5,0
    b380:	fef42623          	sw	a5,-20(s0)
    b384:	fe442783          	lw	a5,-28(s0)
    b388:	fcf42223          	sw	a5,-60(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    b38c:	fc442783          	lw	a5,-60(s0)
    b390:	0087f793          	and	a5,a5,8
    b394:	3007a073          	csrs	mstatus,a5
}
    b398:	00000013          	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    b39c:	fec42783          	lw	a5,-20(s0)
}
    b3a0:	00078513          	mv	a0,a5
    b3a4:	05c12403          	lw	s0,92(sp)
    b3a8:	06010113          	add	sp,sp,96
    b3ac:	00008067          	ret

0000b3b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    b3b0:	fd010113          	add	sp,sp,-48
    b3b4:	02112623          	sw	ra,44(sp)
    b3b8:	02812423          	sw	s0,40(sp)
    b3bc:	03010413          	add	s0,sp,48
    b3c0:	fca42e23          	sw	a0,-36(s0)
    b3c4:	fcb42c23          	sw	a1,-40(s0)
    b3c8:	fcc42a23          	sw	a2,-44(s0)
    b3cc:	fcd42823          	sw	a3,-48(s0)
  int old;

  old = open (name, flags, mode);
    b3d0:	fd042603          	lw	a2,-48(s0)
    b3d4:	fd442583          	lw	a1,-44(s0)
    b3d8:	fd842503          	lw	a0,-40(s0)
    b3dc:	7f9000ef          	jal	c3d4 <open>
    b3e0:	fea42623          	sw	a0,-20(s0)

  if (old >= 0)
    b3e4:	fec42783          	lw	a5,-20(s0)
    b3e8:	0807c863          	bltz	a5,b478 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    b3ec:	000257b7          	lui	a5,0x25
    b3f0:	08078693          	add	a3,a5,128 # 25080 <alt_fd_list>
    b3f4:	fec42703          	lw	a4,-20(s0)
    b3f8:	00070793          	mv	a5,a4
    b3fc:	00179793          	sll	a5,a5,0x1
    b400:	00e787b3          	add	a5,a5,a4
    b404:	00279793          	sll	a5,a5,0x2
    b408:	00f687b3          	add	a5,a3,a5
    b40c:	0007a703          	lw	a4,0(a5)
    b410:	fdc42783          	lw	a5,-36(s0)
    b414:	00e7a023          	sw	a4,0(a5)
    fd->priv     = alt_fd_list[old].priv;
    b418:	000257b7          	lui	a5,0x25
    b41c:	08078693          	add	a3,a5,128 # 25080 <alt_fd_list>
    b420:	fec42703          	lw	a4,-20(s0)
    b424:	00070793          	mv	a5,a4
    b428:	00179793          	sll	a5,a5,0x1
    b42c:	00e787b3          	add	a5,a5,a4
    b430:	00279793          	sll	a5,a5,0x2
    b434:	00f687b3          	add	a5,a3,a5
    b438:	0047a703          	lw	a4,4(a5)
    b43c:	fdc42783          	lw	a5,-36(s0)
    b440:	00e7a223          	sw	a4,4(a5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    b444:	000257b7          	lui	a5,0x25
    b448:	08078693          	add	a3,a5,128 # 25080 <alt_fd_list>
    b44c:	fec42703          	lw	a4,-20(s0)
    b450:	00070793          	mv	a5,a4
    b454:	00179793          	sll	a5,a5,0x1
    b458:	00e787b3          	add	a5,a5,a4
    b45c:	00279793          	sll	a5,a5,0x2
    b460:	00f687b3          	add	a5,a3,a5
    b464:	0087a703          	lw	a4,8(a5)
    b468:	fdc42783          	lw	a5,-36(s0)
    b46c:	00e7a423          	sw	a4,8(a5)

    alt_release_fd (old);
    b470:	fec42503          	lw	a0,-20(s0)
    b474:	090000ef          	jal	b504 <alt_release_fd>
  }
} 
    b478:	00000013          	nop
    b47c:	02c12083          	lw	ra,44(sp)
    b480:	02812403          	lw	s0,40(sp)
    b484:	03010113          	add	sp,sp,48
    b488:	00008067          	ret

0000b48c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    b48c:	fe010113          	add	sp,sp,-32
    b490:	00112e23          	sw	ra,28(sp)
    b494:	00812c23          	sw	s0,24(sp)
    b498:	02010413          	add	s0,sp,32
    b49c:	fea42623          	sw	a0,-20(s0)
    b4a0:	feb42423          	sw	a1,-24(s0)
    b4a4:	fec42223          	sw	a2,-28(s0)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    b4a8:	1ff00693          	li	a3,511
    b4ac:	00100613          	li	a2,1
    b4b0:	fec42583          	lw	a1,-20(s0)
    b4b4:	000257b7          	lui	a5,0x25
    b4b8:	08c78513          	add	a0,a5,140 # 2508c <alt_fd_list+0xc>
    b4bc:	ef5ff0ef          	jal	b3b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    b4c0:	1ff00693          	li	a3,511
    b4c4:	00000613          	li	a2,0
    b4c8:	fe842583          	lw	a1,-24(s0)
    b4cc:	000257b7          	lui	a5,0x25
    b4d0:	08078513          	add	a0,a5,128 # 25080 <alt_fd_list>
    b4d4:	eddff0ef          	jal	b3b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    b4d8:	1ff00693          	li	a3,511
    b4dc:	00100613          	li	a2,1
    b4e0:	fe442583          	lw	a1,-28(s0)
    b4e4:	000257b7          	lui	a5,0x25
    b4e8:	09878513          	add	a0,a5,152 # 25098 <alt_fd_list+0x18>
    b4ec:	ec5ff0ef          	jal	b3b0 <alt_open_fd>
}  
    b4f0:	00000013          	nop
    b4f4:	01c12083          	lw	ra,28(sp)
    b4f8:	01812403          	lw	s0,24(sp)
    b4fc:	02010113          	add	sp,sp,32
    b500:	00008067          	ret

0000b504 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b504:	fe010113          	add	sp,sp,-32
    b508:	00812e23          	sw	s0,28(sp)
    b50c:	02010413          	add	s0,sp,32
    b510:	fea42623          	sw	a0,-20(s0)
  if (fd > 2)
    b514:	fec42703          	lw	a4,-20(s0)
    b518:	00200793          	li	a5,2
    b51c:	04e7d663          	bge	a5,a4,b568 <alt_release_fd+0x64>
  {
    alt_fd_list[fd].fd_flags = 0;
    b520:	000257b7          	lui	a5,0x25
    b524:	08078693          	add	a3,a5,128 # 25080 <alt_fd_list>
    b528:	fec42703          	lw	a4,-20(s0)
    b52c:	00070793          	mv	a5,a4
    b530:	00179793          	sll	a5,a5,0x1
    b534:	00e787b3          	add	a5,a5,a4
    b538:	00279793          	sll	a5,a5,0x2
    b53c:	00f687b3          	add	a5,a3,a5
    b540:	0007a423          	sw	zero,8(a5)
    alt_fd_list[fd].dev      = 0;
    b544:	000257b7          	lui	a5,0x25
    b548:	08078693          	add	a3,a5,128 # 25080 <alt_fd_list>
    b54c:	fec42703          	lw	a4,-20(s0)
    b550:	00070793          	mv	a5,a4
    b554:	00179793          	sll	a5,a5,0x1
    b558:	00e787b3          	add	a5,a5,a4
    b55c:	00279793          	sll	a5,a5,0x2
    b560:	00f687b3          	add	a5,a3,a5
    b564:	0007a023          	sw	zero,0(a5)
  }
}
    b568:	00000013          	nop
    b56c:	01c12403          	lw	s0,28(sp)
    b570:	02010113          	add	sp,sp,32
    b574:	00008067          	ret

0000b578 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    b578:	fd010113          	add	sp,sp,-48
    b57c:	02812623          	sw	s0,44(sp)
    b580:	03010413          	add	s0,sp,48
    b584:	fca42e23          	sw	a0,-36(s0)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    b588:	00800793          	li	a5,8
    b58c:	3007b7f3          	csrrc	a5,mstatus,a5
    b590:	fef42023          	sw	a5,-32(s0)
    return context;
    b594:	fe042783          	lw	a5,-32(s0)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    b598:	fef42623          	sw	a5,-20(s0)
  alt_llist_remove (&alarm->llist);
    b59c:	fdc42783          	lw	a5,-36(s0)
    b5a0:	fef42223          	sw	a5,-28(s0)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    b5a4:	fe442783          	lw	a5,-28(s0)
    b5a8:	0007a783          	lw	a5,0(a5)
    b5ac:	fe442703          	lw	a4,-28(s0)
    b5b0:	00472703          	lw	a4,4(a4)
    b5b4:	00e7a223          	sw	a4,4(a5)
  entry->previous->next = entry->next;
    b5b8:	fe442783          	lw	a5,-28(s0)
    b5bc:	0047a783          	lw	a5,4(a5)
    b5c0:	fe442703          	lw	a4,-28(s0)
    b5c4:	00072703          	lw	a4,0(a4)
    b5c8:	00e7a023          	sw	a4,0(a5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    b5cc:	fe442783          	lw	a5,-28(s0)
    b5d0:	fe442703          	lw	a4,-28(s0)
    b5d4:	00e7a223          	sw	a4,4(a5)
  entry->next     = entry;
    b5d8:	fe442783          	lw	a5,-28(s0)
    b5dc:	fe442703          	lw	a4,-28(s0)
    b5e0:	00e7a023          	sw	a4,0(a5)
} 
    b5e4:	00000013          	nop
    b5e8:	fec42783          	lw	a5,-20(s0)
    b5ec:	fef42423          	sw	a5,-24(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    b5f0:	fe842783          	lw	a5,-24(s0)
    b5f4:	0087f793          	and	a5,a5,8
    b5f8:	3007a073          	csrs	mstatus,a5
}
    b5fc:	00000013          	nop
  alt_irq_enable_all (irq_context);
}
    b600:	00000013          	nop
    b604:	02c12403          	lw	s0,44(sp)
    b608:	03010113          	add	sp,sp,48
    b60c:	00008067          	ret

0000b610 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    b610:	fe010113          	add	sp,sp,-32
    b614:	00112e23          	sw	ra,28(sp)
    b618:	00812c23          	sw	s0,24(sp)
    b61c:	01212a23          	sw	s2,20(sp)
    b620:	01312823          	sw	s3,16(sp)
    b624:	02010413          	add	s0,sp,32
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    b628:	82018793          	add	a5,gp,-2016 # 25bbc <alt_alarm_list>
    b62c:	0007a783          	lw	a5,0(a5)
    b630:	fef42623          	sw	a5,-20(s0)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    b634:	000287b7          	lui	a5,0x28
    b638:	8507a703          	lw	a4,-1968(a5) # 27850 <_alt_nticks>
    b63c:	8547a783          	lw	a5,-1964(a5)
    b640:	00100513          	li	a0,1
    b644:	00000593          	li	a1,0
    b648:	00a70633          	add	a2,a4,a0
    b64c:	00060813          	mv	a6,a2
    b650:	00e83833          	sltu	a6,a6,a4
    b654:	00b786b3          	add	a3,a5,a1
    b658:	00d807b3          	add	a5,a6,a3
    b65c:	00078693          	mv	a3,a5
    b660:	00060713          	mv	a4,a2
    b664:	00068793          	mv	a5,a3
    b668:	000286b7          	lui	a3,0x28
    b66c:	84e6a823          	sw	a4,-1968(a3) # 27850 <_alt_nticks>
    b670:	84f6aa23          	sw	a5,-1964(a3)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b674:	0c80006f          	j	b73c <alt_tick+0x12c>
  {
    next = (alt_alarm*) alarm->llist.next;
    b678:	fec42783          	lw	a5,-20(s0)
    b67c:	0007a783          	lw	a5,0(a5)
    b680:	fef42423          	sw	a5,-24(s0)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    b684:	fec42783          	lw	a5,-20(s0)
    b688:	0087a603          	lw	a2,8(a5)
    b68c:	00c7a683          	lw	a3,12(a5)
    b690:	000287b7          	lui	a5,0x28
    b694:	8507a703          	lw	a4,-1968(a5) # 27850 <_alt_nticks>
    b698:	8547a783          	lw	a5,-1964(a5)
    b69c:	00068513          	mv	a0,a3
    b6a0:	00078593          	mv	a1,a5
    b6a4:	08a5e863          	bltu	a1,a0,b734 <alt_tick+0x124>
    b6a8:	00068513          	mv	a0,a3
    b6ac:	00078593          	mv	a1,a5
    b6b0:	00b51863          	bne	a0,a1,b6c0 <alt_tick+0xb0>
    b6b4:	00060693          	mv	a3,a2
    b6b8:	00070793          	mv	a5,a4
    b6bc:	06d7ec63          	bltu	a5,a3,b734 <alt_tick+0x124>
    {
      next_callback = alarm->callback (alarm->context);
    b6c0:	fec42783          	lw	a5,-20(s0)
    b6c4:	0107a783          	lw	a5,16(a5)
    b6c8:	fec42703          	lw	a4,-20(s0)
    b6cc:	01472703          	lw	a4,20(a4)
    b6d0:	00070513          	mv	a0,a4
    b6d4:	000780e7          	jalr	a5
    b6d8:	fea42223          	sw	a0,-28(s0)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    b6dc:	fe442783          	lw	a5,-28(s0)
    b6e0:	00079863          	bnez	a5,b6f0 <alt_tick+0xe0>
      {
        alt_alarm_stop (alarm);
    b6e4:	fec42503          	lw	a0,-20(s0)
    b6e8:	e91ff0ef          	jal	b578 <alt_alarm_stop>
    b6ec:	0480006f          	j	b734 <alt_tick+0x124>
      }
      else
      {
        alarm->time += next_callback;
    b6f0:	fec42783          	lw	a5,-20(s0)
    b6f4:	0087a703          	lw	a4,8(a5)
    b6f8:	00c7a783          	lw	a5,12(a5)
    b6fc:	fe442683          	lw	a3,-28(s0)
    b700:	00068913          	mv	s2,a3
    b704:	00000993          	li	s3,0
    b708:	01270633          	add	a2,a4,s2
    b70c:	00060593          	mv	a1,a2
    b710:	00e5b5b3          	sltu	a1,a1,a4
    b714:	013786b3          	add	a3,a5,s3
    b718:	00d587b3          	add	a5,a1,a3
    b71c:	00078693          	mv	a3,a5
    b720:	00060713          	mv	a4,a2
    b724:	00068793          	mv	a5,a3
    b728:	fec42683          	lw	a3,-20(s0)
    b72c:	00e6a423          	sw	a4,8(a3)
    b730:	00f6a623          	sw	a5,12(a3)
      }
    }
    alarm = next;
    b734:	fe842783          	lw	a5,-24(s0)
    b738:	fef42623          	sw	a5,-20(s0)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    b73c:	fec42703          	lw	a4,-20(s0)
    b740:	82018793          	add	a5,gp,-2016 # 25bbc <alt_alarm_list>
    b744:	f2f71ae3          	bne	a4,a5,b678 <alt_tick+0x68>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    b748:	aa0f60ef          	jal	19e8 <OSTimeTick>
}
    b74c:	00000013          	nop
    b750:	01c12083          	lw	ra,28(sp)
    b754:	01812403          	lw	s0,24(sp)
    b758:	01412903          	lw	s2,20(sp)
    b75c:	01012983          	lw	s3,16(sp)
    b760:	02010113          	add	sp,sp,32
    b764:	00008067          	ret

0000b768 <intel_niosv_m_irq_init>:
 * To initialize the internal interrupt controller, just clear the mie
 * register so that all possible IRQs are disabled.
 */
void 
intel_niosv_m_irq_init(void) 
{
    b768:	ff010113          	add	sp,sp,-16
    b76c:	00812623          	sw	s0,12(sp)
    b770:	01010413          	add	s0,sp,16
    ABBOTTS_LAKE_CLR_CSR(ABBOTTS_LAKE_MIE_CSR, ABBOTTS_LAKE_MIE_MASK);
    b774:	fff00793          	li	a5,-1
    b778:	3047b073          	csrc	mie,a5
}
    b77c:	00000013          	nop
    b780:	00c12403          	lw	s0,12(sp)
    b784:	01010113          	add	sp,sp,16
    b788:	00008067          	ret

0000b78c <alt_timestamp_start>:
#define INTEL_NIOSV_M_TIMER_DEVICE_TYPE 2

#if (ALT_TIMESTAMP_CLK_TIMER_DEVICE_TYPE == INTEL_NIOSV_M_TIMER_DEVICE_TYPE)
alt_u64 alt_niosv_timestamp_offset = 0;

int alt_timestamp_start() {
    b78c:	ff010113          	add	sp,sp,-16
    b790:	00112623          	sw	ra,12(sp)
    b794:	00812423          	sw	s0,8(sp)
    b798:	01010413          	add	s0,sp,16
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval);

extern alt_u64 alt_niosv_timestamp_offset;

static ALT_INLINE int ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_start() {
    alt_niosv_timestamp_offset = alt_niosv_mtime_get();
    b79c:	0ac000ef          	jal	b848 <alt_niosv_mtime_get>
    b7a0:	00050713          	mv	a4,a0
    b7a4:	00058793          	mv	a5,a1
    b7a8:	000286b7          	lui	a3,0x28
    b7ac:	84e6ac23          	sw	a4,-1960(a3) # 27858 <alt_niosv_timestamp_offset>
    b7b0:	84f6ae23          	sw	a5,-1956(a3)
    return 0;
    b7b4:	00000793          	li	a5,0
    return alt_niosv_timer_timestamp_start();
}
    b7b8:	00078513          	mv	a0,a5
    b7bc:	00c12083          	lw	ra,12(sp)
    b7c0:	00812403          	lw	s0,8(sp)
    b7c4:	01010113          	add	sp,sp,16
    b7c8:	00008067          	ret

0000b7cc <alt_timestamp>:

alt_timestamp_type alt_timestamp() {
    b7cc:	ff010113          	add	sp,sp,-16
    b7d0:	00112623          	sw	ra,12(sp)
    b7d4:	00812423          	sw	s0,8(sp)
    b7d8:	01010413          	add	s0,sp,16
}

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp() {
    return alt_niosv_mtime_get() - alt_niosv_timestamp_offset;
    b7dc:	06c000ef          	jal	b848 <alt_niosv_mtime_get>
    b7e0:	00050613          	mv	a2,a0
    b7e4:	00058693          	mv	a3,a1
    b7e8:	000287b7          	lui	a5,0x28
    b7ec:	8587a503          	lw	a0,-1960(a5) # 27858 <alt_niosv_timestamp_offset>
    b7f0:	85c7a583          	lw	a1,-1956(a5)
    b7f4:	40a60733          	sub	a4,a2,a0
    b7f8:	00070813          	mv	a6,a4
    b7fc:	01063833          	sltu	a6,a2,a6
    b800:	40b687b3          	sub	a5,a3,a1
    b804:	410786b3          	sub	a3,a5,a6
    b808:	00068793          	mv	a5,a3
    return alt_niosv_timer_timestamp();
}
    b80c:	00070513          	mv	a0,a4
    b810:	00078593          	mv	a1,a5
    b814:	00c12083          	lw	ra,12(sp)
    b818:	00812403          	lw	s0,8(sp)
    b81c:	01010113          	add	sp,sp,16
    b820:	00008067          	ret

0000b824 <alt_timestamp_freq>:

alt_u32 alt_timestamp_freq() {
    b824:	ff010113          	add	sp,sp,-16
    b828:	00812623          	sw	s0,12(sp)
    b82c:	01010413          	add	s0,sp,16
}

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_freq() {
    return ALT_CPU_CPU_FREQ;
    b830:	02faf7b7          	lui	a5,0x2faf
    b834:	08078793          	add	a5,a5,128 # 2faf080 <__alt_data_end+0x2f65ca0>
    return alt_niosv_timer_timestamp_freq();
}
    b838:	00078513          	mv	a0,a5
    b83c:	00c12403          	lw	s0,12(sp)
    b840:	01010113          	add	sp,sp,16
    b844:	00008067          	ret

0000b848 <alt_niosv_mtime_get>:
#endif

alt_u64 alt_niosv_mtime_get() {
    b848:	fe010113          	add	sp,sp,-32
    b84c:	00812e23          	sw	s0,28(sp)
    b850:	02010413          	add	s0,sp,32
    alt_u32 lowbits;
    alt_u32 highbits;

    // Guard against rollover while acquiring each word
    do {
        highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(ABBOTTS_LAKE_MTIME_ADDR + 4));
    b854:	00090337          	lui	t1,0x90
    b858:	00c30313          	add	t1,t1,12 # 9000c <__alt_data_end+0x46c2c>
    b85c:	00032303          	lw	t1,0(t1)
    b860:	fe642623          	sw	t1,-20(s0)
        lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)ABBOTTS_LAKE_MTIME_ADDR);
    b864:	00090337          	lui	t1,0x90
    b868:	00830313          	add	t1,t1,8 # 90008 <__alt_data_end+0x46c28>
    b86c:	00032303          	lw	t1,0(t1)
    b870:	fe642423          	sw	t1,-24(s0)
    } while (ALT_VOLATILE_ACCESS((alt_u32 *)(ABBOTTS_LAKE_MTIME_ADDR + 4)) != highbits);
    b874:	00090337          	lui	t1,0x90
    b878:	00c30313          	add	t1,t1,12 # 9000c <__alt_data_end+0x46c2c>
    b87c:	00032303          	lw	t1,0(t1)
    b880:	fec42e03          	lw	t3,-20(s0)
    b884:	fc6e18e3          	bne	t3,t1,b854 <alt_niosv_mtime_get+0xc>

    return (((alt_u64)highbits) << 32) | lowbits;
    b888:	fec42303          	lw	t1,-20(s0)
    b88c:	00030813          	mv	a6,t1
    b890:	00000893          	li	a7,0
    b894:	00081793          	sll	a5,a6,0x0
    b898:	00000713          	li	a4,0
    b89c:	fe842803          	lw	a6,-24(s0)
    b8a0:	00080613          	mv	a2,a6
    b8a4:	00000693          	li	a3,0
    b8a8:	00c76533          	or	a0,a4,a2
    b8ac:	00d7e5b3          	or	a1,a5,a3
    b8b0:	00050713          	mv	a4,a0
    b8b4:	00058793          	mv	a5,a1
}
    b8b8:	00070513          	mv	a0,a4
    b8bc:	00078593          	mv	a1,a5
    b8c0:	01c12403          	lw	s0,28(sp)
    b8c4:	02010113          	add	sp,sp,32
    b8c8:	00008067          	ret

0000b8cc <alt_niosv_mtimecmp_set>:

void alt_niosv_mtimecmp_set(alt_u64 time) {
    b8cc:	fe010113          	add	sp,sp,-32
    b8d0:	00812e23          	sw	s0,28(sp)
    b8d4:	02010413          	add	s0,sp,32
    b8d8:	fea42423          	sw	a0,-24(s0)
    b8dc:	feb42623          	sw	a1,-20(s0)
    // Make sure to set the high word to a max value first to prevent triggering inadvertently
    ALT_VOLATILE_ACCESS((alt_u32 *)(ABBOTTS_LAKE_MTIMECMP_ADDR + 4)) = 0xFFFFFFFF;
    b8e0:	000906b7          	lui	a3,0x90
    b8e4:	00468693          	add	a3,a3,4 # 90004 <__alt_data_end+0x46c24>
    b8e8:	fff00613          	li	a2,-1
    b8ec:	00c6a023          	sw	a2,0(a3)
    ALT_VOLATILE_ACCESS((alt_u32 *)ABBOTTS_LAKE_MTIMECMP_ADDR) = (alt_u32)time;
    b8f0:	000906b7          	lui	a3,0x90
    b8f4:	fe842603          	lw	a2,-24(s0)
    b8f8:	00c6a023          	sw	a2,0(a3) # 90000 <__alt_data_end+0x46c20>
    ALT_VOLATILE_ACCESS((alt_u32 *)(ABBOTTS_LAKE_MTIMECMP_ADDR + 4)) = (alt_u32)(time >> 32);
    b8fc:	fec42683          	lw	a3,-20(s0)
    b900:	0006d713          	srl	a4,a3,0x0
    b904:	00000793          	li	a5,0
    b908:	000906b7          	lui	a3,0x90
    b90c:	00468693          	add	a3,a3,4 # 90004 <__alt_data_end+0x46c24>
    b910:	00070793          	mv	a5,a4
    b914:	00f6a023          	sw	a5,0(a3)
}
    b918:	00000013          	nop
    b91c:	01c12403          	lw	s0,28(sp)
    b920:	02010113          	add	sp,sp,32
    b924:	00008067          	ret

0000b928 <alt_niosv_mtimecmp_get>:

alt_u64 alt_niosv_mtimecmp_get() {
    b928:	fe010113          	add	sp,sp,-32
    b92c:	00812e23          	sw	s0,28(sp)
    b930:	02010413          	add	s0,sp,32
    alt_u32 lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)ABBOTTS_LAKE_MTIMECMP_ADDR);
    b934:	00090337          	lui	t1,0x90
    b938:	00032303          	lw	t1,0(t1) # 90000 <__alt_data_end+0x46c20>
    b93c:	fe642623          	sw	t1,-20(s0)
    alt_u32 highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(ABBOTTS_LAKE_MTIMECMP_ADDR + 4));
    b940:	00090337          	lui	t1,0x90
    b944:	00430313          	add	t1,t1,4 # 90004 <__alt_data_end+0x46c24>
    b948:	00032303          	lw	t1,0(t1)
    b94c:	fe642423          	sw	t1,-24(s0)
    return (((alt_u64)highbits) << 32) | lowbits;
    b950:	fe842303          	lw	t1,-24(s0)
    b954:	00030813          	mv	a6,t1
    b958:	00000893          	li	a7,0
    b95c:	00081793          	sll	a5,a6,0x0
    b960:	00000713          	li	a4,0
    b964:	fec42803          	lw	a6,-20(s0)
    b968:	00080613          	mv	a2,a6
    b96c:	00000693          	li	a3,0
    b970:	00c76533          	or	a0,a4,a2
    b974:	00d7e5b3          	or	a1,a5,a3
    b978:	00050713          	mv	a4,a0
    b97c:	00058793          	mv	a5,a1
}
    b980:	00070513          	mv	a0,a4
    b984:	00078593          	mv	a1,a5
    b988:	01c12403          	lw	s0,28(sp)
    b98c:	02010113          	add	sp,sp,32
    b990:	00008067          	ret

0000b994 <alt_niosv_timer_sc_isr>:

void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {
    b994:	fc010113          	add	sp,sp,-64
    b998:	02112e23          	sw	ra,60(sp)
    b99c:	02812c23          	sw	s0,56(sp)
    b9a0:	04010413          	add	s0,sp,64
    b9a4:	fca42623          	sw	a0,-52(s0)
    b9a8:	fcb42423          	sw	a1,-56(s0)
    b9ac:	fcc42223          	sw	a2,-60(s0)
    // Schedule the next interrupt.  This is done first since who knows how long
    // the following code takes, and the contract is ticks per second, irrespective
    // of how long a given clock tick may take.
    alt_u64 curr_time = alt_niosv_mtime_get();
    b9b0:	e99ff0ef          	jal	b848 <alt_niosv_mtime_get>
    b9b4:	fea42423          	sw	a0,-24(s0)
    b9b8:	feb42623          	sw	a1,-20(s0)
    alt_niosv_mtimecmp_set(curr_time + MTIMECMP_DELTA_AMT);
    b9bc:	fe842703          	lw	a4,-24(s0)
    b9c0:	fec42783          	lw	a5,-20(s0)
    b9c4:	0000c537          	lui	a0,0xc
    b9c8:	35050513          	add	a0,a0,848 # c350 <strlen+0x14>
    b9cc:	00000593          	li	a1,0
    b9d0:	00a70633          	add	a2,a4,a0
    b9d4:	00060813          	mv	a6,a2
    b9d8:	00e83833          	sltu	a6,a6,a4
    b9dc:	00b786b3          	add	a3,a5,a1
    b9e0:	00d807b3          	add	a5,a6,a3
    b9e4:	00078693          	mv	a3,a5
    b9e8:	00060713          	mv	a4,a2
    b9ec:	00068793          	mv	a5,a3
    b9f0:	00070513          	mv	a0,a4
    b9f4:	00078593          	mv	a1,a5
    b9f8:	ed5ff0ef          	jal	b8cc <alt_niosv_mtimecmp_set>
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    b9fc:	00800793          	li	a5,8
    ba00:	3007b7f3          	csrrc	a5,mstatus,a5
    ba04:	fcf42e23          	sw	a5,-36(s0)
    return context;
    ba08:	fdc42783          	lw	a5,-36(s0)

    /* 
    * Notify the system of a clock tick. disable interrupts 
    * during this time to safely support ISR preemption
    */
    alt_irq_context cpu_sr = alt_irq_disable_all();
    ba0c:	fef42223          	sw	a5,-28(s0)
    alt_tick();
    ba10:	c01ff0ef          	jal	b610 <alt_tick>
    ba14:	fe442783          	lw	a5,-28(s0)
    ba18:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
    ba1c:	fe042783          	lw	a5,-32(s0)
    ba20:	0087f793          	and	a5,a5,8
    ba24:	3007a073          	csrs	mstatus,a5
}
    ba28:	00000013          	nop
    alt_irq_enable_all(cpu_sr);
}
    ba2c:	00000013          	nop
    ba30:	03c12083          	lw	ra,60(sp)
    ba34:	03812403          	lw	s0,56(sp)
    ba38:	04010113          	add	sp,sp,64
    ba3c:	00008067          	ret

0000ba40 <alt_niosv_mtimecmp_interrupt_init>:

void alt_niosv_mtimecmp_interrupt_init() {
    ba40:	ff010113          	add	sp,sp,-16
    ba44:	00112623          	sw	ra,12(sp)
    ba48:	00812423          	sw	s0,8(sp)
    ba4c:	01010413          	add	s0,sp,16
    alt_niosv_mtimecmp_set(MTIMECMP_MAX_VALUE);
    ba50:	fff00513          	li	a0,-1
    ba54:	fff00593          	li	a1,-1
    ba58:	e75ff0ef          	jal	b8cc <alt_niosv_mtimecmp_set>
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MIE_CSR, (0x1 << ABBOTTS_LAKE_TIMER_IRQ));
    ba5c:	08000793          	li	a5,128
    ba60:	3047a073          	csrs	mie,a5
}
    ba64:	00000013          	nop
    alt_niosv_enable_timer_interrupt();
}
    ba68:	00000013          	nop
    ba6c:	00c12083          	lw	ra,12(sp)
    ba70:	00812403          	lw	s0,8(sp)
    ba74:	01010113          	add	sp,sp,16
    ba78:	00008067          	ret

0000ba7c <OSTaskStkInit>:
*/
OS_STK  *OSTaskStkInit (void   (*task)(void *p_arg),
                        void    *p_arg,
                        OS_STK  *p_tos,
                        INT16U  opt)
{
    ba7c:	fd010113          	add	sp,sp,-48
    ba80:	02112623          	sw	ra,44(sp)
    ba84:	02812423          	sw	s0,40(sp)
    ba88:	03010413          	add	s0,sp,48
    ba8c:	fca42e23          	sw	a0,-36(s0)
    ba90:	fcb42c23          	sw	a1,-40(s0)
    ba94:	fcc42a23          	sw	a2,-44(s0)
    ba98:	00068793          	mv	a5,a3
    ba9c:	fcf41923          	sh	a5,-46(s0)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)(((OS_STK)(p_tos) & ~0xF) - sizeof(struct _reent));
    baa0:	fd442783          	lw	a5,-44(s0)
    baa4:	ff07f793          	and	a5,a5,-16
    baa8:	bd878793          	add	a5,a5,-1064
    baac:	fef42623          	sw	a5,-20(s0)

   _REENT_INIT_PTR (local_impure_ptr);
    bab0:	42800613          	li	a2,1064
    bab4:	00000593          	li	a1,0
    bab8:	fec42503          	lw	a0,-20(s0)
    babc:	434000ef          	jal	bef0 <memset>
    bac0:	fec42783          	lw	a5,-20(s0)
    bac4:	2ec78713          	add	a4,a5,748
    bac8:	fec42783          	lw	a5,-20(s0)
    bacc:	00e7a223          	sw	a4,4(a5)
    bad0:	fec42783          	lw	a5,-20(s0)
    bad4:	35478713          	add	a4,a5,852
    bad8:	fec42783          	lw	a5,-20(s0)
    badc:	00e7a423          	sw	a4,8(a5)
    bae0:	fec42783          	lw	a5,-20(s0)
    bae4:	3bc78713          	add	a4,a5,956
    bae8:	fec42783          	lw	a5,-20(s0)
    baec:	00e7a623          	sw	a4,12(a5)
    baf0:	fec42683          	lw	a3,-20(s0)
    baf4:	00100713          	li	a4,1
    baf8:	00000793          	li	a5,0
    bafc:	0ae6a423          	sw	a4,168(a3)
    bb00:	0af6a623          	sw	a5,172(a3)
    bb04:	fec42783          	lw	a5,-20(s0)
    bb08:	00003737          	lui	a4,0x3
    bb0c:	30e70713          	add	a4,a4,782 # 330e <OSFlagAccept+0x102>
    bb10:	0ae79823          	sh	a4,176(a5)
    bb14:	fec42783          	lw	a5,-20(s0)
    bb18:	ffffb737          	lui	a4,0xffffb
    bb1c:	bcd70713          	add	a4,a4,-1075 # ffffabcd <__alt_data_end+0xfffb17ed>
    bb20:	0ae79923          	sh	a4,178(a5)
    bb24:	fec42783          	lw	a5,-20(s0)
    bb28:	00001737          	lui	a4,0x1
    bb2c:	23470713          	add	a4,a4,564 # 1234 <OSEventPendMulti+0x320>
    bb30:	0ae79a23          	sh	a4,180(a5)
    bb34:	fec42783          	lw	a5,-20(s0)
    bb38:	ffffe737          	lui	a4,0xffffe
    bb3c:	66d70713          	add	a4,a4,1645 # ffffe66d <__alt_data_end+0xfffb528d>
    bb40:	0ae79b23          	sh	a4,182(a5)
    bb44:	fec42783          	lw	a5,-20(s0)
    bb48:	ffffe737          	lui	a4,0xffffe
    bb4c:	eec70713          	add	a4,a4,-276 # ffffdeec <__alt_data_end+0xfffb4b0c>
    bb50:	0ae79c23          	sh	a4,184(a5)
    bb54:	fec42783          	lw	a5,-20(s0)
    bb58:	00500713          	li	a4,5
    bb5c:	0ae79d23          	sh	a4,186(a5)
    bb60:	fec42783          	lw	a5,-20(s0)
    bb64:	00b00713          	li	a4,11
    bb68:	0ae79e23          	sh	a4,188(a5)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (OS_STK*) local_impure_ptr;
    bb6c:	fec42783          	lw	a5,-20(s0)
    bb70:	fef42423          	sw	a5,-24(s0)
#else
   frame_pointer =   (OS_STK*) ((OS_STK)(p_tos) & ~0xF);
#endif /* OS_THREAD_SAFE_NEWLIB */

#if ABBOTTSLAKE_NUM_GPR == 32
   p_stk = frame_pointer - (2 + 1 + 13); /* 2 for task + arg, 1 for impure pointer, 13 for the saved regs */
    bb74:	fe842783          	lw	a5,-24(s0)
    bb78:	fc078793          	add	a5,a5,-64
    bb7c:	fef42223          	sw	a5,-28(s0)
   /* Now fill the stack frame. */
   p_stk[15] = (OS_STK)task;           /* task address (ra) */
    bb80:	fe442783          	lw	a5,-28(s0)
    bb84:	03c78793          	add	a5,a5,60
    bb88:	fdc42703          	lw	a4,-36(s0)
    bb8c:	00e7a023          	sw	a4,0(a5)
   p_stk[14] = (OS_STK)p_arg;          /* first register argument (a0) */
    bb90:	fe442783          	lw	a5,-28(s0)
    bb94:	03878793          	add	a5,a5,56
    bb98:	fd842703          	lw	a4,-40(s0)
    bb9c:	00e7a023          	sw	a4,0(a5)

#if OS_THREAD_SAFE_NEWLIB
   p_stk[13] = (OS_STK)local_impure_ptr; /* value of _impure_ptr for this thread */
    bba0:	fe442783          	lw	a5,-28(s0)
    bba4:	03478793          	add	a5,a5,52
    bba8:	fec42703          	lw	a4,-20(s0)
    bbac:	00e7a023          	sw	a4,0(a5)
   p_stk[3] = (OS_STK)local_impure_ptr; /* value of _impure_ptr for this thread */
#endif /* OS_THREAD_SAFE_NEWLIB */

#endif /* ABBOTTSLAKE_NUM_GPR */

   p_stk[0]  = ((OS_STK)&OSStartTsk) + 4; /* return address (ra) */  
    bbb0:	0000b7b7          	lui	a5,0xb
    bbb4:	e1078793          	add	a5,a5,-496 # ae10 <OSStartTsk>
    bbb8:	00478713          	add	a4,a5,4
    bbbc:	fe442783          	lw	a5,-28(s0)
    bbc0:	00e7a023          	sw	a4,0(a5)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return p_stk;
    bbc4:	fe442783          	lw	a5,-28(s0)
}
    bbc8:	00078513          	mv	a0,a5
    bbcc:	02c12083          	lw	ra,44(sp)
    bbd0:	02812403          	lw	s0,40(sp)
    bbd4:	03010113          	add	sp,sp,48
    bbd8:	00008067          	ret

0000bbdc <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    bbdc:	fe010113          	add	sp,sp,-32
    bbe0:	00812e23          	sw	s0,28(sp)
    bbe4:	02010413          	add	s0,sp,32
    bbe8:	fea42623          	sw	a0,-20(s0)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    bbec:	00000013          	nop
    bbf0:	01c12403          	lw	s0,28(sp)
    bbf4:	02010113          	add	sp,sp,32
    bbf8:	00008067          	ret

0000bbfc <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    bbfc:	fe010113          	add	sp,sp,-32
    bc00:	00812e23          	sw	s0,28(sp)
    bc04:	02010413          	add	s0,sp,32
    bc08:	fea42623          	sw	a0,-20(s0)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    bc0c:	00000013          	nop
    bc10:	01c12403          	lw	s0,28(sp)
    bc14:	02010113          	add	sp,sp,32
    bc18:	00008067          	ret

0000bc1c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    bc1c:	ff010113          	add	sp,sp,-16
    bc20:	00812623          	sw	s0,12(sp)
    bc24:	01010413          	add	s0,sp,16
}
    bc28:	00000013          	nop
    bc2c:	00c12403          	lw	s0,12(sp)
    bc30:	01010113          	add	sp,sp,16
    bc34:	00008067          	ret

0000bc38 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    bc38:	ff010113          	add	sp,sp,-16
    bc3c:	00812623          	sw	s0,12(sp)
    bc40:	01010413          	add	s0,sp,16
}
    bc44:	00000013          	nop
    bc48:	00c12403          	lw	s0,12(sp)
    bc4c:	01010113          	add	sp,sp,16
    bc50:	00008067          	ret

0000bc54 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/

void OSTimeTickHook (void)
{
    bc54:	ff010113          	add	sp,sp,-16
    bc58:	00812623          	sw	s0,12(sp)
    bc5c:	01010413          	add	s0,sp,16
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
        OSTmrCtr = 0;
        OSTmrSignal();
    }
#endif
}
    bc60:	00000013          	nop
    bc64:	00c12403          	lw	s0,12(sp)
    bc68:	01010113          	add	sp,sp,16
    bc6c:	00008067          	ret

0000bc70 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    bc70:	ff010113          	add	sp,sp,-16
    bc74:	00812623          	sw	s0,12(sp)
    bc78:	01010413          	add	s0,sp,16
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    bc7c:	00000013          	nop
    bc80:	00c12403          	lw	s0,12(sp)
    bc84:	01010113          	add	sp,sp,16
    bc88:	00008067          	ret

0000bc8c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    bc8c:	ff010113          	add	sp,sp,-16
    bc90:	00812623          	sw	s0,12(sp)
    bc94:	01010413          	add	s0,sp,16
}
    bc98:	00000013          	nop
    bc9c:	00c12403          	lw	s0,12(sp)
    bca0:	01010113          	add	sp,sp,16
    bca4:	00008067          	ret

0000bca8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    bca8:	ff010113          	add	sp,sp,-16
    bcac:	00812623          	sw	s0,12(sp)
    bcb0:	01010413          	add	s0,sp,16
}
    bcb4:	00000013          	nop
    bcb8:	00c12403          	lw	s0,12(sp)
    bcbc:	01010113          	add	sp,sp,16
    bcc0:	00008067          	ret

0000bcc4 <OSTaskReturnHook>:

void  OSTaskReturnHook(OS_TCB  *ptcb)
{
    bcc4:	fe010113          	add	sp,sp,-32
    bcc8:	00812e23          	sw	s0,28(sp)
    bccc:	02010413          	add	s0,sp,32
    bcd0:	fea42623          	sw	a0,-20(s0)
}
    bcd4:	00000013          	nop
    bcd8:	01c12403          	lw	s0,28(sp)
    bcdc:	02010113          	add	sp,sp,32
    bce0:	00008067          	ret

0000bce4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    bce4:	fe010113          	add	sp,sp,-32
    bce8:	00812e23          	sw	s0,28(sp)
    bcec:	02010413          	add	s0,sp,32
    bcf0:	fea42623          	sw	a0,-20(s0)
}
    bcf4:	00000013          	nop
    bcf8:	01c12403          	lw	s0,28(sp)
    bcfc:	02010113          	add	sp,sp,32
    bd00:	00008067          	ret

0000bd04 <atexit>:
    bd04:	00050593          	mv	a1,a0
    bd08:	00000693          	li	a3,0
    bd0c:	00000613          	li	a2,0
    bd10:	00000513          	li	a0,0
    bd14:	2580306f          	j	ef6c <__register_exitproc>

0000bd18 <exit>:
    bd18:	ff010113          	add	sp,sp,-16
    bd1c:	00000593          	li	a1,0
    bd20:	00812423          	sw	s0,8(sp)
    bd24:	00112623          	sw	ra,12(sp)
    bd28:	00050413          	mv	s0,a0
    bd2c:	328030ef          	jal	f054 <__call_exitprocs>
    bd30:	00018517          	auipc	a0,0x18
    bd34:	29852503          	lw	a0,664(a0) # 23fc8 <_global_impure_ptr>
    bd38:	03c52783          	lw	a5,60(a0)
    bd3c:	00078463          	beqz	a5,bd44 <exit+0x2c>
    bd40:	000780e7          	jalr	a5
    bd44:	00040513          	mv	a0,s0
    bd48:	070160ef          	jal	21db8 <_exit>

0000bd4c <memcpy>:
    bd4c:	00a5c7b3          	xor	a5,a1,a0
    bd50:	0037f793          	and	a5,a5,3
    bd54:	00c508b3          	add	a7,a0,a2
    bd58:	06079463          	bnez	a5,bdc0 <memcpy+0x74>
    bd5c:	00300793          	li	a5,3
    bd60:	06c7f063          	bgeu	a5,a2,bdc0 <memcpy+0x74>
    bd64:	00357793          	and	a5,a0,3
    bd68:	00050713          	mv	a4,a0
    bd6c:	06079a63          	bnez	a5,bde0 <memcpy+0x94>
    bd70:	ffc8f613          	and	a2,a7,-4
    bd74:	40e606b3          	sub	a3,a2,a4
    bd78:	02000793          	li	a5,32
    bd7c:	08d7ce63          	blt	a5,a3,be18 <memcpy+0xcc>
    bd80:	00058693          	mv	a3,a1
    bd84:	00070793          	mv	a5,a4
    bd88:	02c77863          	bgeu	a4,a2,bdb8 <memcpy+0x6c>
    bd8c:	0006a803          	lw	a6,0(a3)
    bd90:	00478793          	add	a5,a5,4
    bd94:	00468693          	add	a3,a3,4
    bd98:	ff07ae23          	sw	a6,-4(a5)
    bd9c:	fec7e8e3          	bltu	a5,a2,bd8c <memcpy+0x40>
    bda0:	fff60793          	add	a5,a2,-1
    bda4:	40e787b3          	sub	a5,a5,a4
    bda8:	ffc7f793          	and	a5,a5,-4
    bdac:	00478793          	add	a5,a5,4
    bdb0:	00f70733          	add	a4,a4,a5
    bdb4:	00f585b3          	add	a1,a1,a5
    bdb8:	01176863          	bltu	a4,a7,bdc8 <memcpy+0x7c>
    bdbc:	00008067          	ret
    bdc0:	00050713          	mv	a4,a0
    bdc4:	05157863          	bgeu	a0,a7,be14 <memcpy+0xc8>
    bdc8:	0005c783          	lbu	a5,0(a1)
    bdcc:	00170713          	add	a4,a4,1
    bdd0:	00158593          	add	a1,a1,1
    bdd4:	fef70fa3          	sb	a5,-1(a4)
    bdd8:	fee898e3          	bne	a7,a4,bdc8 <memcpy+0x7c>
    bddc:	00008067          	ret
    bde0:	0005c683          	lbu	a3,0(a1)
    bde4:	00170713          	add	a4,a4,1
    bde8:	00377793          	and	a5,a4,3
    bdec:	fed70fa3          	sb	a3,-1(a4)
    bdf0:	00158593          	add	a1,a1,1
    bdf4:	f6078ee3          	beqz	a5,bd70 <memcpy+0x24>
    bdf8:	0005c683          	lbu	a3,0(a1)
    bdfc:	00170713          	add	a4,a4,1
    be00:	00377793          	and	a5,a4,3
    be04:	fed70fa3          	sb	a3,-1(a4)
    be08:	00158593          	add	a1,a1,1
    be0c:	fc079ae3          	bnez	a5,bde0 <memcpy+0x94>
    be10:	f61ff06f          	j	bd70 <memcpy+0x24>
    be14:	00008067          	ret
    be18:	ff010113          	add	sp,sp,-16
    be1c:	00812623          	sw	s0,12(sp)
    be20:	02000413          	li	s0,32
    be24:	0005a383          	lw	t2,0(a1)
    be28:	0045a283          	lw	t0,4(a1)
    be2c:	0085af83          	lw	t6,8(a1)
    be30:	00c5af03          	lw	t5,12(a1)
    be34:	0105ae83          	lw	t4,16(a1)
    be38:	0145ae03          	lw	t3,20(a1)
    be3c:	0185a303          	lw	t1,24(a1)
    be40:	01c5a803          	lw	a6,28(a1)
    be44:	0205a683          	lw	a3,32(a1)
    be48:	02470713          	add	a4,a4,36
    be4c:	40e607b3          	sub	a5,a2,a4
    be50:	fc772e23          	sw	t2,-36(a4)
    be54:	fe572023          	sw	t0,-32(a4)
    be58:	fff72223          	sw	t6,-28(a4)
    be5c:	ffe72423          	sw	t5,-24(a4)
    be60:	ffd72623          	sw	t4,-20(a4)
    be64:	ffc72823          	sw	t3,-16(a4)
    be68:	fe672a23          	sw	t1,-12(a4)
    be6c:	ff072c23          	sw	a6,-8(a4)
    be70:	fed72e23          	sw	a3,-4(a4)
    be74:	02458593          	add	a1,a1,36
    be78:	faf446e3          	blt	s0,a5,be24 <memcpy+0xd8>
    be7c:	00058693          	mv	a3,a1
    be80:	00070793          	mv	a5,a4
    be84:	02c77863          	bgeu	a4,a2,beb4 <memcpy+0x168>
    be88:	0006a803          	lw	a6,0(a3)
    be8c:	00478793          	add	a5,a5,4
    be90:	00468693          	add	a3,a3,4
    be94:	ff07ae23          	sw	a6,-4(a5)
    be98:	fec7e8e3          	bltu	a5,a2,be88 <memcpy+0x13c>
    be9c:	fff60793          	add	a5,a2,-1
    bea0:	40e787b3          	sub	a5,a5,a4
    bea4:	ffc7f793          	and	a5,a5,-4
    bea8:	00478793          	add	a5,a5,4
    beac:	00f70733          	add	a4,a4,a5
    beb0:	00f585b3          	add	a1,a1,a5
    beb4:	01176863          	bltu	a4,a7,bec4 <memcpy+0x178>
    beb8:	00c12403          	lw	s0,12(sp)
    bebc:	01010113          	add	sp,sp,16
    bec0:	00008067          	ret
    bec4:	0005c783          	lbu	a5,0(a1)
    bec8:	00170713          	add	a4,a4,1
    becc:	00158593          	add	a1,a1,1
    bed0:	fef70fa3          	sb	a5,-1(a4)
    bed4:	fee882e3          	beq	a7,a4,beb8 <memcpy+0x16c>
    bed8:	0005c783          	lbu	a5,0(a1)
    bedc:	00170713          	add	a4,a4,1
    bee0:	00158593          	add	a1,a1,1
    bee4:	fef70fa3          	sb	a5,-1(a4)
    bee8:	fce89ee3          	bne	a7,a4,bec4 <memcpy+0x178>
    beec:	fcdff06f          	j	beb8 <memcpy+0x16c>

0000bef0 <memset>:
    bef0:	00f00313          	li	t1,15
    bef4:	00050713          	mv	a4,a0
    bef8:	02c37e63          	bgeu	t1,a2,bf34 <memset+0x44>
    befc:	00f77793          	and	a5,a4,15
    bf00:	0a079063          	bnez	a5,bfa0 <memset+0xb0>
    bf04:	08059263          	bnez	a1,bf88 <memset+0x98>
    bf08:	ff067693          	and	a3,a2,-16
    bf0c:	00f67613          	and	a2,a2,15
    bf10:	00e686b3          	add	a3,a3,a4
    bf14:	00b72023          	sw	a1,0(a4)
    bf18:	00b72223          	sw	a1,4(a4)
    bf1c:	00b72423          	sw	a1,8(a4)
    bf20:	00b72623          	sw	a1,12(a4)
    bf24:	01070713          	add	a4,a4,16
    bf28:	fed766e3          	bltu	a4,a3,bf14 <memset+0x24>
    bf2c:	00061463          	bnez	a2,bf34 <memset+0x44>
    bf30:	00008067          	ret
    bf34:	40c306b3          	sub	a3,t1,a2
    bf38:	00269693          	sll	a3,a3,0x2
    bf3c:	00000297          	auipc	t0,0x0
    bf40:	005686b3          	add	a3,a3,t0
    bf44:	00c68067          	jr	12(a3)
    bf48:	00b70723          	sb	a1,14(a4)
    bf4c:	00b706a3          	sb	a1,13(a4)
    bf50:	00b70623          	sb	a1,12(a4)
    bf54:	00b705a3          	sb	a1,11(a4)
    bf58:	00b70523          	sb	a1,10(a4)
    bf5c:	00b704a3          	sb	a1,9(a4)
    bf60:	00b70423          	sb	a1,8(a4)
    bf64:	00b703a3          	sb	a1,7(a4)
    bf68:	00b70323          	sb	a1,6(a4)
    bf6c:	00b702a3          	sb	a1,5(a4)
    bf70:	00b70223          	sb	a1,4(a4)
    bf74:	00b701a3          	sb	a1,3(a4)
    bf78:	00b70123          	sb	a1,2(a4)
    bf7c:	00b700a3          	sb	a1,1(a4)
    bf80:	00b70023          	sb	a1,0(a4)
    bf84:	00008067          	ret
    bf88:	0ff5f593          	zext.b	a1,a1
    bf8c:	00859693          	sll	a3,a1,0x8
    bf90:	00d5e5b3          	or	a1,a1,a3
    bf94:	01059693          	sll	a3,a1,0x10
    bf98:	00d5e5b3          	or	a1,a1,a3
    bf9c:	f6dff06f          	j	bf08 <memset+0x18>
    bfa0:	00279693          	sll	a3,a5,0x2
    bfa4:	00000297          	auipc	t0,0x0
    bfa8:	005686b3          	add	a3,a3,t0
    bfac:	00008293          	mv	t0,ra
    bfb0:	fa0680e7          	jalr	-96(a3)
    bfb4:	00028093          	mv	ra,t0
    bfb8:	ff078793          	add	a5,a5,-16
    bfbc:	40f70733          	sub	a4,a4,a5
    bfc0:	00f60633          	add	a2,a2,a5
    bfc4:	f6c378e3          	bgeu	t1,a2,bf34 <memset+0x44>
    bfc8:	f3dff06f          	j	bf04 <memset+0x14>

0000bfcc <_printf_r>:
    bfcc:	fc010113          	add	sp,sp,-64
    bfd0:	02c12423          	sw	a2,40(sp)
    bfd4:	02d12623          	sw	a3,44(sp)
    bfd8:	02e12823          	sw	a4,48(sp)
    bfdc:	02f12a23          	sw	a5,52(sp)
    bfe0:	03012c23          	sw	a6,56(sp)
    bfe4:	03112e23          	sw	a7,60(sp)
    bfe8:	00058613          	mv	a2,a1
    bfec:	00852583          	lw	a1,8(a0)
    bff0:	02810693          	add	a3,sp,40
    bff4:	00112e23          	sw	ra,28(sp)
    bff8:	00d12623          	sw	a3,12(sp)
    bffc:	420000ef          	jal	c41c <_vfprintf_r>
    c000:	01c12083          	lw	ra,28(sp)
    c004:	04010113          	add	sp,sp,64
    c008:	00008067          	ret

0000c00c <printf>:
    c00c:	fc010113          	add	sp,sp,-64
    c010:	02c12423          	sw	a2,40(sp)
    c014:	02d12623          	sw	a3,44(sp)
    c018:	8281a303          	lw	t1,-2008(gp) # 25bc4 <_impure_ptr>
    c01c:	02b12223          	sw	a1,36(sp)
    c020:	02e12823          	sw	a4,48(sp)
    c024:	02f12a23          	sw	a5,52(sp)
    c028:	03012c23          	sw	a6,56(sp)
    c02c:	03112e23          	sw	a7,60(sp)
    c030:	00832583          	lw	a1,8(t1)
    c034:	02410693          	add	a3,sp,36
    c038:	00050613          	mv	a2,a0
    c03c:	00030513          	mv	a0,t1
    c040:	00112e23          	sw	ra,28(sp)
    c044:	00d12623          	sw	a3,12(sp)
    c048:	3d4000ef          	jal	c41c <_vfprintf_r>
    c04c:	01c12083          	lw	ra,28(sp)
    c050:	04010113          	add	sp,sp,64
    c054:	00008067          	ret

0000c058 <_puts_r>:
    c058:	fd010113          	add	sp,sp,-48
    c05c:	02812423          	sw	s0,40(sp)
    c060:	00050413          	mv	s0,a0
    c064:	00058513          	mv	a0,a1
    c068:	02912223          	sw	s1,36(sp)
    c06c:	02112623          	sw	ra,44(sp)
    c070:	00058493          	mv	s1,a1
    c074:	2c8000ef          	jal	c33c <strlen>
    c078:	00150713          	add	a4,a0,1
    c07c:	00017697          	auipc	a3,0x17
    c080:	04068693          	add	a3,a3,64 # 230bc <OSUnMapTbl+0x158>
    c084:	00e12623          	sw	a4,12(sp)
    c088:	03842783          	lw	a5,56(s0)
    c08c:	01010713          	add	a4,sp,16
    c090:	00d12c23          	sw	a3,24(sp)
    c094:	00e12223          	sw	a4,4(sp)
    c098:	00100693          	li	a3,1
    c09c:	00200713          	li	a4,2
    c0a0:	00912823          	sw	s1,16(sp)
    c0a4:	00a12a23          	sw	a0,20(sp)
    c0a8:	00d12e23          	sw	a3,28(sp)
    c0ac:	00e12423          	sw	a4,8(sp)
    c0b0:	00842483          	lw	s1,8(s0)
    c0b4:	08078a63          	beqz	a5,c148 <_puts_r+0xf0>
    c0b8:	0644a703          	lw	a4,100(s1)
    c0bc:	00c49783          	lh	a5,12(s1)
    c0c0:	00177713          	and	a4,a4,1
    c0c4:	00071663          	bnez	a4,c0d0 <_puts_r+0x78>
    c0c8:	2007f713          	and	a4,a5,512
    c0cc:	0a070463          	beqz	a4,c174 <_puts_r+0x11c>
    c0d0:	01279713          	sll	a4,a5,0x12
    c0d4:	02074263          	bltz	a4,c0f8 <_puts_r+0xa0>
    c0d8:	0644a703          	lw	a4,100(s1)
    c0dc:	ffffe6b7          	lui	a3,0xffffe
    c0e0:	fff68693          	add	a3,a3,-1 # ffffdfff <__alt_data_end+0xfffb4c1f>
    c0e4:	00002637          	lui	a2,0x2
    c0e8:	00c7e7b3          	or	a5,a5,a2
    c0ec:	00d77733          	and	a4,a4,a3
    c0f0:	00f49623          	sh	a5,12(s1)
    c0f4:	06e4a223          	sw	a4,100(s1)
    c0f8:	00040513          	mv	a0,s0
    c0fc:	00410613          	add	a2,sp,4
    c100:	00048593          	mv	a1,s1
    c104:	661030ef          	jal	ff64 <__sfvwrite_r>
    c108:	0644a783          	lw	a5,100(s1)
    c10c:	00153413          	seqz	s0,a0
    c110:	40800433          	neg	s0,s0
    c114:	00b47413          	and	s0,s0,11
    c118:	0017f793          	and	a5,a5,1
    c11c:	fff40413          	add	s0,s0,-1
    c120:	00079863          	bnez	a5,c130 <_puts_r+0xd8>
    c124:	00c4d783          	lhu	a5,12(s1)
    c128:	2007f793          	and	a5,a5,512
    c12c:	02078463          	beqz	a5,c154 <_puts_r+0xfc>
    c130:	02c12083          	lw	ra,44(sp)
    c134:	00040513          	mv	a0,s0
    c138:	02812403          	lw	s0,40(sp)
    c13c:	02412483          	lw	s1,36(sp)
    c140:	03010113          	add	sp,sp,48
    c144:	00008067          	ret
    c148:	00040513          	mv	a0,s0
    c14c:	5d8030ef          	jal	f724 <__sinit>
    c150:	f69ff06f          	j	c0b8 <_puts_r+0x60>
    c154:	0584a503          	lw	a0,88(s1)
    c158:	238070ef          	jal	13390 <__retarget_lock_release_recursive>
    c15c:	02c12083          	lw	ra,44(sp)
    c160:	00040513          	mv	a0,s0
    c164:	02812403          	lw	s0,40(sp)
    c168:	02412483          	lw	s1,36(sp)
    c16c:	03010113          	add	sp,sp,48
    c170:	00008067          	ret
    c174:	0584a503          	lw	a0,88(s1)
    c178:	200070ef          	jal	13378 <__retarget_lock_acquire_recursive>
    c17c:	00c49783          	lh	a5,12(s1)
    c180:	f51ff06f          	j	c0d0 <_puts_r+0x78>

0000c184 <puts>:
    c184:	00050593          	mv	a1,a0
    c188:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
    c18c:	ecdff06f          	j	c058 <_puts_r>

0000c190 <cleanup_glue>:
    c190:	fe010113          	add	sp,sp,-32
    c194:	01212823          	sw	s2,16(sp)
    c198:	0005a903          	lw	s2,0(a1)
    c19c:	00812c23          	sw	s0,24(sp)
    c1a0:	00912a23          	sw	s1,20(sp)
    c1a4:	00112e23          	sw	ra,28(sp)
    c1a8:	00058413          	mv	s0,a1
    c1ac:	00050493          	mv	s1,a0
    c1b0:	04090a63          	beqz	s2,c204 <cleanup_glue+0x74>
    c1b4:	01312623          	sw	s3,12(sp)
    c1b8:	00092983          	lw	s3,0(s2)
    c1bc:	02098c63          	beqz	s3,c1f4 <cleanup_glue+0x64>
    c1c0:	01412423          	sw	s4,8(sp)
    c1c4:	0009aa03          	lw	s4,0(s3)
    c1c8:	000a0e63          	beqz	s4,c1e4 <cleanup_glue+0x54>
    c1cc:	000a2583          	lw	a1,0(s4)
    c1d0:	00058463          	beqz	a1,c1d8 <cleanup_glue+0x48>
    c1d4:	fbdff0ef          	jal	c190 <cleanup_glue>
    c1d8:	000a0593          	mv	a1,s4
    c1dc:	00048513          	mv	a0,s1
    c1e0:	27d030ef          	jal	fc5c <_free_r>
    c1e4:	00098593          	mv	a1,s3
    c1e8:	00048513          	mv	a0,s1
    c1ec:	271030ef          	jal	fc5c <_free_r>
    c1f0:	00812a03          	lw	s4,8(sp)
    c1f4:	00090593          	mv	a1,s2
    c1f8:	00048513          	mv	a0,s1
    c1fc:	261030ef          	jal	fc5c <_free_r>
    c200:	00c12983          	lw	s3,12(sp)
    c204:	00040593          	mv	a1,s0
    c208:	01812403          	lw	s0,24(sp)
    c20c:	01c12083          	lw	ra,28(sp)
    c210:	01012903          	lw	s2,16(sp)
    c214:	00048513          	mv	a0,s1
    c218:	01412483          	lw	s1,20(sp)
    c21c:	02010113          	add	sp,sp,32
    c220:	23d0306f          	j	fc5c <_free_r>

0000c224 <_reclaim_reent>:
    c224:	8281a783          	lw	a5,-2008(gp) # 25bc4 <_impure_ptr>
    c228:	10a78863          	beq	a5,a0,c338 <_reclaim_reent+0x114>
    c22c:	04c52583          	lw	a1,76(a0)
    c230:	fe010113          	add	sp,sp,-32
    c234:	00912a23          	sw	s1,20(sp)
    c238:	00112e23          	sw	ra,28(sp)
    c23c:	00812c23          	sw	s0,24(sp)
    c240:	01212823          	sw	s2,16(sp)
    c244:	00050493          	mv	s1,a0
    c248:	04058463          	beqz	a1,c290 <_reclaim_reent+0x6c>
    c24c:	01312623          	sw	s3,12(sp)
    c250:	00000913          	li	s2,0
    c254:	08000993          	li	s3,128
    c258:	012587b3          	add	a5,a1,s2
    c25c:	0007a403          	lw	s0,0(a5)
    c260:	00040e63          	beqz	s0,c27c <_reclaim_reent+0x58>
    c264:	00040593          	mv	a1,s0
    c268:	00042403          	lw	s0,0(s0)
    c26c:	00048513          	mv	a0,s1
    c270:	1ed030ef          	jal	fc5c <_free_r>
    c274:	fe0418e3          	bnez	s0,c264 <_reclaim_reent+0x40>
    c278:	04c4a583          	lw	a1,76(s1)
    c27c:	00490913          	add	s2,s2,4
    c280:	fd391ce3          	bne	s2,s3,c258 <_reclaim_reent+0x34>
    c284:	00048513          	mv	a0,s1
    c288:	1d5030ef          	jal	fc5c <_free_r>
    c28c:	00c12983          	lw	s3,12(sp)
    c290:	0404a583          	lw	a1,64(s1)
    c294:	00058663          	beqz	a1,c2a0 <_reclaim_reent+0x7c>
    c298:	00048513          	mv	a0,s1
    c29c:	1c1030ef          	jal	fc5c <_free_r>
    c2a0:	1484a403          	lw	s0,328(s1)
    c2a4:	02040063          	beqz	s0,c2c4 <_reclaim_reent+0xa0>
    c2a8:	14c48913          	add	s2,s1,332
    c2ac:	01240c63          	beq	s0,s2,c2c4 <_reclaim_reent+0xa0>
    c2b0:	00040593          	mv	a1,s0
    c2b4:	00042403          	lw	s0,0(s0)
    c2b8:	00048513          	mv	a0,s1
    c2bc:	1a1030ef          	jal	fc5c <_free_r>
    c2c0:	fe8918e3          	bne	s2,s0,c2b0 <_reclaim_reent+0x8c>
    c2c4:	0544a583          	lw	a1,84(s1)
    c2c8:	00058663          	beqz	a1,c2d4 <_reclaim_reent+0xb0>
    c2cc:	00048513          	mv	a0,s1
    c2d0:	18d030ef          	jal	fc5c <_free_r>
    c2d4:	0384a783          	lw	a5,56(s1)
    c2d8:	04078463          	beqz	a5,c320 <_reclaim_reent+0xfc>
    c2dc:	03c4a783          	lw	a5,60(s1)
    c2e0:	00048513          	mv	a0,s1
    c2e4:	000780e7          	jalr	a5
    c2e8:	2e04a403          	lw	s0,736(s1)
    c2ec:	02040a63          	beqz	s0,c320 <_reclaim_reent+0xfc>
    c2f0:	00042583          	lw	a1,0(s0)
    c2f4:	00058663          	beqz	a1,c300 <_reclaim_reent+0xdc>
    c2f8:	00048513          	mv	a0,s1
    c2fc:	e95ff0ef          	jal	c190 <cleanup_glue>
    c300:	00040593          	mv	a1,s0
    c304:	01812403          	lw	s0,24(sp)
    c308:	01c12083          	lw	ra,28(sp)
    c30c:	01012903          	lw	s2,16(sp)
    c310:	00048513          	mv	a0,s1
    c314:	01412483          	lw	s1,20(sp)
    c318:	02010113          	add	sp,sp,32
    c31c:	1410306f          	j	fc5c <_free_r>
    c320:	01c12083          	lw	ra,28(sp)
    c324:	01812403          	lw	s0,24(sp)
    c328:	01412483          	lw	s1,20(sp)
    c32c:	01012903          	lw	s2,16(sp)
    c330:	02010113          	add	sp,sp,32
    c334:	00008067          	ret
    c338:	00008067          	ret

0000c33c <strlen>:
    c33c:	00357793          	and	a5,a0,3
    c340:	00050713          	mv	a4,a0
    c344:	04079c63          	bnez	a5,c39c <strlen+0x60>
    c348:	7f7f86b7          	lui	a3,0x7f7f8
    c34c:	f7f68693          	add	a3,a3,-129 # 7f7f7f7f <__alt_data_end+0x7f7aeb9f>
    c350:	fff00593          	li	a1,-1
    c354:	00072603          	lw	a2,0(a4)
    c358:	00470713          	add	a4,a4,4
    c35c:	00d677b3          	and	a5,a2,a3
    c360:	00d787b3          	add	a5,a5,a3
    c364:	00c7e7b3          	or	a5,a5,a2
    c368:	00d7e7b3          	or	a5,a5,a3
    c36c:	feb784e3          	beq	a5,a1,c354 <strlen+0x18>
    c370:	ffc74683          	lbu	a3,-4(a4)
    c374:	40a707b3          	sub	a5,a4,a0
    c378:	04068463          	beqz	a3,c3c0 <strlen+0x84>
    c37c:	ffd74683          	lbu	a3,-3(a4)
    c380:	02068c63          	beqz	a3,c3b8 <strlen+0x7c>
    c384:	ffe74503          	lbu	a0,-2(a4)
    c388:	00a03533          	snez	a0,a0
    c38c:	00f50533          	add	a0,a0,a5
    c390:	ffe50513          	add	a0,a0,-2
    c394:	00008067          	ret
    c398:	fa0688e3          	beqz	a3,c348 <strlen+0xc>
    c39c:	00074783          	lbu	a5,0(a4)
    c3a0:	00170713          	add	a4,a4,1
    c3a4:	00377693          	and	a3,a4,3
    c3a8:	fe0798e3          	bnez	a5,c398 <strlen+0x5c>
    c3ac:	40a70733          	sub	a4,a4,a0
    c3b0:	fff70513          	add	a0,a4,-1
    c3b4:	00008067          	ret
    c3b8:	ffd78513          	add	a0,a5,-3
    c3bc:	00008067          	ret
    c3c0:	ffc78513          	add	a0,a5,-4
    c3c4:	00008067          	ret

0000c3c8 <close>:
    c3c8:	00050593          	mv	a1,a0
    c3cc:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
    c3d0:	5f10206f          	j	f1c0 <_close_r>

0000c3d4 <open>:
    c3d4:	fc010113          	add	sp,sp,-64
    c3d8:	02c12423          	sw	a2,40(sp)
    c3dc:	02d12623          	sw	a3,44(sp)
    c3e0:	02f12a23          	sw	a5,52(sp)
    c3e4:	00060693          	mv	a3,a2
    c3e8:	02810793          	add	a5,sp,40
    c3ec:	00058613          	mv	a2,a1
    c3f0:	00050593          	mv	a1,a0
    c3f4:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
    c3f8:	00112e23          	sw	ra,28(sp)
    c3fc:	02e12823          	sw	a4,48(sp)
    c400:	03012c23          	sw	a6,56(sp)
    c404:	03112e23          	sw	a7,60(sp)
    c408:	00f12623          	sw	a5,12(sp)
    c40c:	6a5080ef          	jal	152b0 <_open_r>
    c410:	01c12083          	lw	ra,28(sp)
    c414:	04010113          	add	sp,sp,64
    c418:	00008067          	ret

0000c41c <_vfprintf_r>:
    c41c:	e3010113          	add	sp,sp,-464
    c420:	1c112623          	sw	ra,460(sp)
    c424:	1c812423          	sw	s0,456(sp)
    c428:	1c912223          	sw	s1,452(sp)
    c42c:	1d212023          	sw	s2,448(sp)
    c430:	00058493          	mv	s1,a1
    c434:	00060913          	mv	s2,a2
    c438:	00d12623          	sw	a3,12(sp)
    c43c:	00050413          	mv	s0,a0
    c440:	02a12023          	sw	a0,32(sp)
    c444:	709060ef          	jal	1334c <_localeconv_r>
    c448:	00052703          	lw	a4,0(a0)
    c44c:	00070513          	mv	a0,a4
    c450:	02e12423          	sw	a4,40(sp)
    c454:	ee9ff0ef          	jal	c33c <strlen>
    c458:	02a12223          	sw	a0,36(sp)
    c45c:	0c012823          	sw	zero,208(sp)
    c460:	0c012a23          	sw	zero,212(sp)
    c464:	0c012c23          	sw	zero,216(sp)
    c468:	0c012e23          	sw	zero,220(sp)
    c46c:	00040663          	beqz	s0,c478 <_vfprintf_r+0x5c>
    c470:	03842703          	lw	a4,56(s0)
    c474:	6c070e63          	beqz	a4,cb50 <_vfprintf_r+0x734>
    c478:	0644a683          	lw	a3,100(s1)
    c47c:	00c49703          	lh	a4,12(s1)
    c480:	0016f693          	and	a3,a3,1
    c484:	00069863          	bnez	a3,c494 <_vfprintf_r+0x78>
    c488:	20077693          	and	a3,a4,512
    c48c:	00069463          	bnez	a3,c494 <_vfprintf_r+0x78>
    c490:	2ec0106f          	j	d77c <_vfprintf_r+0x1360>
    c494:	01271693          	sll	a3,a4,0x12
    c498:	0206c663          	bltz	a3,c4c4 <_vfprintf_r+0xa8>
    c49c:	0644a683          	lw	a3,100(s1)
    c4a0:	000025b7          	lui	a1,0x2
    c4a4:	ffffe637          	lui	a2,0xffffe
    c4a8:	00b76733          	or	a4,a4,a1
    c4ac:	fff60613          	add	a2,a2,-1 # ffffdfff <__alt_data_end+0xfffb4c1f>
    c4b0:	01071713          	sll	a4,a4,0x10
    c4b4:	41075713          	sra	a4,a4,0x10
    c4b8:	00c6f6b3          	and	a3,a3,a2
    c4bc:	00e49623          	sh	a4,12(s1)
    c4c0:	06d4a223          	sw	a3,100(s1)
    c4c4:	00877693          	and	a3,a4,8
    c4c8:	30068863          	beqz	a3,c7d8 <_vfprintf_r+0x3bc>
    c4cc:	0104a683          	lw	a3,16(s1)
    c4d0:	30068463          	beqz	a3,c7d8 <_vfprintf_r+0x3bc>
    c4d4:	01a77693          	and	a3,a4,26
    c4d8:	00a00613          	li	a2,10
    c4dc:	32c68063          	beq	a3,a2,c7fc <_vfprintf_r+0x3e0>
    c4e0:	1b312e23          	sw	s3,444(sp)
    c4e4:	1b612823          	sw	s6,432(sp)
    c4e8:	1b912223          	sw	s9,420(sp)
    c4ec:	1b412c23          	sw	s4,440(sp)
    c4f0:	1b512a23          	sw	s5,436(sp)
    c4f4:	1b712623          	sw	s7,428(sp)
    c4f8:	1b812423          	sw	s8,424(sp)
    c4fc:	1ba12023          	sw	s10,416(sp)
    c500:	19b12e23          	sw	s11,412(sp)
    c504:	00090c93          	mv	s9,s2
    c508:	000cc703          	lbu	a4,0(s9)
    c50c:	0ec10793          	add	a5,sp,236
    c510:	0cf12223          	sw	a5,196(sp)
    c514:	0c012623          	sw	zero,204(sp)
    c518:	0c012423          	sw	zero,200(sp)
    c51c:	00012a23          	sw	zero,20(sp)
    c520:	02012623          	sw	zero,44(sp)
    c524:	02012a23          	sw	zero,52(sp)
    c528:	02012c23          	sw	zero,56(sp)
    c52c:	02012e23          	sw	zero,60(sp)
    c530:	04012023          	sw	zero,64(sp)
    c534:	00012223          	sw	zero,4(sp)
    c538:	02012b03          	lw	s6,32(sp)
    c53c:	01000413          	li	s0,16
    c540:	00078993          	mv	s3,a5
    c544:	22070463          	beqz	a4,c76c <_vfprintf_r+0x350>
    c548:	000c8a13          	mv	s4,s9
    c54c:	02500693          	li	a3,37
    c550:	34d70263          	beq	a4,a3,c894 <_vfprintf_r+0x478>
    c554:	001a4703          	lbu	a4,1(s4)
    c558:	001a0a13          	add	s4,s4,1
    c55c:	fe071ae3          	bnez	a4,c550 <_vfprintf_r+0x134>
    c560:	419a0933          	sub	s2,s4,s9
    c564:	219a0463          	beq	s4,s9,c76c <_vfprintf_r+0x350>
    c568:	0cc12683          	lw	a3,204(sp)
    c56c:	0c812703          	lw	a4,200(sp)
    c570:	0199a023          	sw	s9,0(s3)
    c574:	012686b3          	add	a3,a3,s2
    c578:	00170713          	add	a4,a4,1
    c57c:	0129a223          	sw	s2,4(s3)
    c580:	0cd12623          	sw	a3,204(sp)
    c584:	0ce12423          	sw	a4,200(sp)
    c588:	00700693          	li	a3,7
    c58c:	00898993          	add	s3,s3,8
    c590:	30e6ca63          	blt	a3,a4,c8a4 <_vfprintf_r+0x488>
    c594:	00412783          	lw	a5,4(sp)
    c598:	000a4703          	lbu	a4,0(s4)
    c59c:	012787b3          	add	a5,a5,s2
    c5a0:	00f12223          	sw	a5,4(sp)
    c5a4:	1c070463          	beqz	a4,c76c <_vfprintf_r+0x350>
    c5a8:	001a4883          	lbu	a7,1(s4)
    c5ac:	0a0103a3          	sb	zero,167(sp)
    c5b0:	001a0a13          	add	s4,s4,1
    c5b4:	fff00a93          	li	s5,-1
    c5b8:	00000c13          	li	s8,0
    c5bc:	00000d13          	li	s10,0
    c5c0:	05a00913          	li	s2,90
    c5c4:	001a0a13          	add	s4,s4,1
    c5c8:	fe088793          	add	a5,a7,-32
    c5cc:	04f96a63          	bltu	s2,a5,c620 <_vfprintf_r+0x204>
    c5d0:	00017717          	auipc	a4,0x17
    c5d4:	c2870713          	add	a4,a4,-984 # 231f8 <OSUnMapTbl+0x294>
    c5d8:	00279793          	sll	a5,a5,0x2
    c5dc:	00e787b3          	add	a5,a5,a4
    c5e0:	0007a783          	lw	a5,0(a5)
    c5e4:	00e787b3          	add	a5,a5,a4
    c5e8:	00078067          	jr	a5
    c5ec:	00000c13          	li	s8,0
    c5f0:	fd088793          	add	a5,a7,-48
    c5f4:	00900693          	li	a3,9
    c5f8:	000a4883          	lbu	a7,0(s4)
    c5fc:	002c1713          	sll	a4,s8,0x2
    c600:	01870c33          	add	s8,a4,s8
    c604:	001c1c13          	sll	s8,s8,0x1
    c608:	01878c33          	add	s8,a5,s8
    c60c:	fd088793          	add	a5,a7,-48
    c610:	001a0a13          	add	s4,s4,1
    c614:	fef6f2e3          	bgeu	a3,a5,c5f8 <_vfprintf_r+0x1dc>
    c618:	fe088793          	add	a5,a7,-32
    c61c:	faf97ae3          	bgeu	s2,a5,c5d0 <_vfprintf_r+0x1b4>
    c620:	14088663          	beqz	a7,c76c <_vfprintf_r+0x350>
    c624:	13110623          	sb	a7,300(sp)
    c628:	0a0103a3          	sb	zero,167(sp)
    c62c:	00100b93          	li	s7,1
    c630:	00100913          	li	s2,1
    c634:	12c10c93          	add	s9,sp,300
    c638:	00012423          	sw	zero,8(sp)
    c63c:	00000a93          	li	s5,0
    c640:	00012e23          	sw	zero,28(sp)
    c644:	00012c23          	sw	zero,24(sp)
    c648:	00012823          	sw	zero,16(sp)
    c64c:	002d7293          	and	t0,s10,2
    c650:	00028463          	beqz	t0,c658 <_vfprintf_r+0x23c>
    c654:	002b8b93          	add	s7,s7,2
    c658:	084d7d93          	and	s11,s10,132
    c65c:	0cc12603          	lw	a2,204(sp)
    c660:	000d9663          	bnez	s11,c66c <_vfprintf_r+0x250>
    c664:	417c0733          	sub	a4,s8,s7
    c668:	44e048e3          	bgtz	a4,d2b8 <_vfprintf_r+0xe9c>
    c66c:	0a714703          	lbu	a4,167(sp)
    c670:	02070a63          	beqz	a4,c6a4 <_vfprintf_r+0x288>
    c674:	0c812703          	lw	a4,200(sp)
    c678:	0a710593          	add	a1,sp,167
    c67c:	00b9a023          	sw	a1,0(s3)
    c680:	00160613          	add	a2,a2,1
    c684:	00100593          	li	a1,1
    c688:	00170713          	add	a4,a4,1
    c68c:	00b9a223          	sw	a1,4(s3)
    c690:	0cc12623          	sw	a2,204(sp)
    c694:	0ce12423          	sw	a4,200(sp)
    c698:	00700593          	li	a1,7
    c69c:	00898993          	add	s3,s3,8
    c6a0:	34e5c063          	blt	a1,a4,c9e0 <_vfprintf_r+0x5c4>
    c6a4:	02028a63          	beqz	t0,c6d8 <_vfprintf_r+0x2bc>
    c6a8:	0c812703          	lw	a4,200(sp)
    c6ac:	00200593          	li	a1,2
    c6b0:	00260613          	add	a2,a2,2
    c6b4:	00170713          	add	a4,a4,1
    c6b8:	0a810793          	add	a5,sp,168
    c6bc:	00b9a223          	sw	a1,4(s3)
    c6c0:	00f9a023          	sw	a5,0(s3)
    c6c4:	0cc12623          	sw	a2,204(sp)
    c6c8:	0ce12423          	sw	a4,200(sp)
    c6cc:	00700593          	li	a1,7
    c6d0:	00898993          	add	s3,s3,8
    c6d4:	4ee5c0e3          	blt	a1,a4,d3b4 <_vfprintf_r+0xf98>
    c6d8:	08000713          	li	a4,128
    c6dc:	1ced88e3          	beq	s11,a4,d0ac <_vfprintf_r+0xc90>
    c6e0:	412a8ab3          	sub	s5,s5,s2
    c6e4:	2b504ae3          	bgtz	s5,d198 <_vfprintf_r+0xd7c>
    c6e8:	100d7713          	and	a4,s10,256
    c6ec:	7a071c63          	bnez	a4,cea4 <_vfprintf_r+0xa88>
    c6f0:	0c812783          	lw	a5,200(sp)
    c6f4:	01260633          	add	a2,a2,s2
    c6f8:	0199a023          	sw	s9,0(s3)
    c6fc:	00178793          	add	a5,a5,1
    c700:	0129a223          	sw	s2,4(s3)
    c704:	0cc12623          	sw	a2,204(sp)
    c708:	0cf12423          	sw	a5,200(sp)
    c70c:	00700713          	li	a4,7
    c710:	40f74463          	blt	a4,a5,cb18 <_vfprintf_r+0x6fc>
    c714:	00898993          	add	s3,s3,8
    c718:	004d7e13          	and	t3,s10,4
    c71c:	000e0663          	beqz	t3,c728 <_vfprintf_r+0x30c>
    c720:	417c0933          	sub	s2,s8,s7
    c724:	4b204ce3          	bgtz	s2,d3dc <_vfprintf_r+0xfc0>
    c728:	000c0313          	mv	t1,s8
    c72c:	017c5463          	bge	s8,s7,c734 <_vfprintf_r+0x318>
    c730:	000b8313          	mv	t1,s7
    c734:	00412783          	lw	a5,4(sp)
    c738:	006787b3          	add	a5,a5,t1
    c73c:	00f12223          	sw	a5,4(sp)
    c740:	32061ee3          	bnez	a2,d27c <_vfprintf_r+0xe60>
    c744:	00812783          	lw	a5,8(sp)
    c748:	0c012423          	sw	zero,200(sp)
    c74c:	00078863          	beqz	a5,c75c <_vfprintf_r+0x340>
    c750:	00812583          	lw	a1,8(sp)
    c754:	000b0513          	mv	a0,s6
    c758:	504030ef          	jal	fc5c <_free_r>
    c75c:	0ec10993          	add	s3,sp,236
    c760:	000a0c93          	mv	s9,s4
    c764:	000cc703          	lbu	a4,0(s9)
    c768:	de0710e3          	bnez	a4,c548 <_vfprintf_r+0x12c>
    c76c:	0cc12783          	lw	a5,204(sp)
    c770:	00078463          	beqz	a5,c778 <_vfprintf_r+0x35c>
    c774:	1190106f          	j	e08c <_vfprintf_r+0x1c70>
    c778:	0c012423          	sw	zero,200(sp)
    c77c:	0644a703          	lw	a4,100(s1)
    c780:	00c49783          	lh	a5,12(s1)
    c784:	00177713          	and	a4,a4,1
    c788:	3a070863          	beqz	a4,cb38 <_vfprintf_r+0x71c>
    c78c:	0407f793          	and	a5,a5,64
    c790:	1bc12983          	lw	s3,444(sp)
    c794:	1b812a03          	lw	s4,440(sp)
    c798:	1b412a83          	lw	s5,436(sp)
    c79c:	1b012b03          	lw	s6,432(sp)
    c7a0:	1ac12b83          	lw	s7,428(sp)
    c7a4:	1a812c03          	lw	s8,424(sp)
    c7a8:	1a412c83          	lw	s9,420(sp)
    c7ac:	1a012d03          	lw	s10,416(sp)
    c7b0:	19c12d83          	lw	s11,412(sp)
    c7b4:	00078463          	beqz	a5,c7bc <_vfprintf_r+0x3a0>
    c7b8:	2580206f          	j	ea10 <_vfprintf_r+0x25f4>
    c7bc:	1cc12083          	lw	ra,460(sp)
    c7c0:	1c812403          	lw	s0,456(sp)
    c7c4:	00412503          	lw	a0,4(sp)
    c7c8:	1c412483          	lw	s1,452(sp)
    c7cc:	1c012903          	lw	s2,448(sp)
    c7d0:	1d010113          	add	sp,sp,464
    c7d4:	00008067          	ret
    c7d8:	02012503          	lw	a0,32(sp)
    c7dc:	00048593          	mv	a1,s1
    c7e0:	644020ef          	jal	ee24 <__swsetup_r>
    c7e4:	00050463          	beqz	a0,c7ec <_vfprintf_r+0x3d0>
    c7e8:	2080206f          	j	e9f0 <_vfprintf_r+0x25d4>
    c7ec:	00c49703          	lh	a4,12(s1)
    c7f0:	00a00613          	li	a2,10
    c7f4:	01a77693          	and	a3,a4,26
    c7f8:	cec694e3          	bne	a3,a2,c4e0 <_vfprintf_r+0xc4>
    c7fc:	00e49683          	lh	a3,14(s1)
    c800:	ce06c0e3          	bltz	a3,c4e0 <_vfprintf_r+0xc4>
    c804:	0644a683          	lw	a3,100(s1)
    c808:	0016f693          	and	a3,a3,1
    c80c:	00069863          	bnez	a3,c81c <_vfprintf_r+0x400>
    c810:	20077713          	and	a4,a4,512
    c814:	00071463          	bnez	a4,c81c <_vfprintf_r+0x400>
    c818:	0bd0106f          	j	e0d4 <_vfprintf_r+0x1cb8>
    c81c:	00c12683          	lw	a3,12(sp)
    c820:	02012503          	lw	a0,32(sp)
    c824:	00090613          	mv	a2,s2
    c828:	00048593          	mv	a1,s1
    c82c:	500020ef          	jal	ed2c <__sbprintf>
    c830:	1cc12083          	lw	ra,460(sp)
    c834:	1c812403          	lw	s0,456(sp)
    c838:	00a12223          	sw	a0,4(sp)
    c83c:	00412503          	lw	a0,4(sp)
    c840:	1c412483          	lw	s1,452(sp)
    c844:	1c012903          	lw	s2,448(sp)
    c848:	1d010113          	add	sp,sp,464
    c84c:	00008067          	ret
    c850:	000b0513          	mv	a0,s6
    c854:	2f9060ef          	jal	1334c <_localeconv_r>
    c858:	00452783          	lw	a5,4(a0)
    c85c:	00078513          	mv	a0,a5
    c860:	04f12023          	sw	a5,64(sp)
    c864:	ad9ff0ef          	jal	c33c <strlen>
    c868:	00050793          	mv	a5,a0
    c86c:	000b0513          	mv	a0,s6
    c870:	00078b93          	mv	s7,a5
    c874:	02f12e23          	sw	a5,60(sp)
    c878:	2d5060ef          	jal	1334c <_localeconv_r>
    c87c:	00852703          	lw	a4,8(a0)
    c880:	02e12c23          	sw	a4,56(sp)
    c884:	000b8463          	beqz	s7,c88c <_vfprintf_r+0x470>
    c888:	01c0106f          	j	d8a4 <_vfprintf_r+0x1488>
    c88c:	000a4883          	lbu	a7,0(s4)
    c890:	d35ff06f          	j	c5c4 <_vfprintf_r+0x1a8>
    c894:	419a0933          	sub	s2,s4,s9
    c898:	cd9a18e3          	bne	s4,s9,c568 <_vfprintf_r+0x14c>
    c89c:	000a4703          	lbu	a4,0(s4)
    c8a0:	d05ff06f          	j	c5a4 <_vfprintf_r+0x188>
    c8a4:	0c410613          	add	a2,sp,196
    c8a8:	00048593          	mv	a1,s1
    c8ac:	000b0513          	mv	a0,s6
    c8b0:	7990b0ef          	jal	18848 <__sprint_r>
    c8b4:	ec0514e3          	bnez	a0,c77c <_vfprintf_r+0x360>
    c8b8:	0ec10993          	add	s3,sp,236
    c8bc:	cd9ff06f          	j	c594 <_vfprintf_r+0x178>
    c8c0:	008d7713          	and	a4,s10,8
    c8c4:	00070463          	beqz	a4,c8cc <_vfprintf_r+0x4b0>
    c8c8:	7b90006f          	j	d880 <_vfprintf_r+0x1464>
    c8cc:	00c12783          	lw	a5,12(sp)
    c8d0:	09010513          	add	a0,sp,144
    c8d4:	01112423          	sw	a7,8(sp)
    c8d8:	00778b93          	add	s7,a5,7
    c8dc:	ff8bfb93          	and	s7,s7,-8
    c8e0:	000ba583          	lw	a1,0(s7)
    c8e4:	004ba603          	lw	a2,4(s7)
    c8e8:	008b8793          	add	a5,s7,8
    c8ec:	00f12623          	sw	a5,12(sp)
    c8f0:	421140ef          	jal	21510 <__extenddftf2>
    c8f4:	09012583          	lw	a1,144(sp)
    c8f8:	09412603          	lw	a2,148(sp)
    c8fc:	09812683          	lw	a3,152(sp)
    c900:	09c12703          	lw	a4,156(sp)
    c904:	00812883          	lw	a7,8(sp)
    c908:	0d010513          	add	a0,sp,208
    c90c:	01112423          	sw	a7,8(sp)
    c910:	0ce12e23          	sw	a4,220(sp)
    c914:	0cb12823          	sw	a1,208(sp)
    c918:	0cc12a23          	sw	a2,212(sp)
    c91c:	0cd12c23          	sw	a3,216(sp)
    c920:	1ad060ef          	jal	132cc <_ldcheck>
    c924:	0aa12623          	sw	a0,172(sp)
    c928:	00200713          	li	a4,2
    c92c:	00812883          	lw	a7,8(sp)
    c930:	00e51463          	bne	a0,a4,c938 <_vfprintf_r+0x51c>
    c934:	2980106f          	j	dbcc <_vfprintf_r+0x17b0>
    c938:	00100713          	li	a4,1
    c93c:	00e51463          	bne	a0,a4,c944 <_vfprintf_r+0x528>
    c940:	4600106f          	j	dda0 <_vfprintf_r+0x1984>
    c944:	06100713          	li	a4,97
    c948:	00e89463          	bne	a7,a4,c950 <_vfprintf_r+0x534>
    c94c:	0b00106f          	j	d9fc <_vfprintf_r+0x15e0>
    c950:	04100713          	li	a4,65
    c954:	05800793          	li	a5,88
    c958:	00e89463          	bne	a7,a4,c960 <_vfprintf_r+0x544>
    c95c:	0a40106f          	j	da00 <_vfprintf_r+0x15e4>
    c960:	fff00713          	li	a4,-1
    c964:	00ea9463          	bne	s5,a4,c96c <_vfprintf_r+0x550>
    c968:	21c0206f          	j	eb84 <_vfprintf_r+0x2768>
    c96c:	fdf8f713          	and	a4,a7,-33
    c970:	04700693          	li	a3,71
    c974:	00012423          	sw	zero,8(sp)
    c978:	00d71663          	bne	a4,a3,c984 <_vfprintf_r+0x568>
    c97c:	000a9463          	bnez	s5,c984 <_vfprintf_r+0x568>
    c980:	00100a93          	li	s5,1
    c984:	0dc12b83          	lw	s7,220(sp)
    c988:	100d6793          	or	a5,s10,256
    c98c:	04f12223          	sw	a5,68(sp)
    c990:	02012823          	sw	zero,48(sp)
    c994:	0d012f83          	lw	t6,208(sp)
    c998:	0d412f03          	lw	t5,212(sp)
    c99c:	0d812e83          	lw	t4,216(sp)
    c9a0:	000bda63          	bgez	s7,c9b4 <_vfprintf_r+0x598>
    c9a4:	80000737          	lui	a4,0x80000
    c9a8:	02d00793          	li	a5,45
    c9ac:	01774bb3          	xor	s7,a4,s7
    c9b0:	02f12823          	sw	a5,48(sp)
    c9b4:	fbf88713          	add	a4,a7,-65
    c9b8:	02500693          	li	a3,37
    c9bc:	00e6f463          	bgeu	a3,a4,c9c4 <_vfprintf_r+0x5a8>
    c9c0:	4900106f          	j	de50 <_vfprintf_r+0x1a34>
    c9c4:	00017697          	auipc	a3,0x17
    c9c8:	9a068693          	add	a3,a3,-1632 # 23364 <OSUnMapTbl+0x400>
    c9cc:	00271713          	sll	a4,a4,0x2
    c9d0:	00d70733          	add	a4,a4,a3
    c9d4:	00072703          	lw	a4,0(a4) # 80000000 <__alt_data_end+0x7ffb6c20>
    c9d8:	00d70733          	add	a4,a4,a3
    c9dc:	00070067          	jr	a4
    c9e0:	0c410613          	add	a2,sp,196
    c9e4:	00048593          	mv	a1,s1
    c9e8:	000b0513          	mv	a0,s6
    c9ec:	05112223          	sw	a7,68(sp)
    c9f0:	02512823          	sw	t0,48(sp)
    c9f4:	6550b0ef          	jal	18848 <__sprint_r>
    c9f8:	08051ce3          	bnez	a0,d290 <_vfprintf_r+0xe74>
    c9fc:	0cc12603          	lw	a2,204(sp)
    ca00:	04412883          	lw	a7,68(sp)
    ca04:	03012283          	lw	t0,48(sp)
    ca08:	0ec10993          	add	s3,sp,236
    ca0c:	c99ff06f          	j	c6a4 <_vfprintf_r+0x288>
    ca10:	0c812903          	lw	s2,200(sp)
    ca14:	01412783          	lw	a5,20(sp)
    ca18:	00100713          	li	a4,1
    ca1c:	0199a023          	sw	s9,0(s3)
    ca20:	00160d93          	add	s11,a2,1
    ca24:	00190913          	add	s2,s2,1
    ca28:	00898a93          	add	s5,s3,8
    ca2c:	3af75ee3          	bge	a4,a5,d5e8 <_vfprintf_r+0x11cc>
    ca30:	00100713          	li	a4,1
    ca34:	00e9a223          	sw	a4,4(s3)
    ca38:	0db12623          	sw	s11,204(sp)
    ca3c:	0d212423          	sw	s2,200(sp)
    ca40:	00700713          	li	a4,7
    ca44:	01275463          	bge	a4,s2,ca4c <_vfprintf_r+0x630>
    ca48:	0340106f          	j	da7c <_vfprintf_r+0x1660>
    ca4c:	02412783          	lw	a5,36(sp)
    ca50:	02812703          	lw	a4,40(sp)
    ca54:	00190913          	add	s2,s2,1
    ca58:	00fd8db3          	add	s11,s11,a5
    ca5c:	00eaa023          	sw	a4,0(s5)
    ca60:	00faa223          	sw	a5,4(s5)
    ca64:	0db12623          	sw	s11,204(sp)
    ca68:	0d212423          	sw	s2,200(sp)
    ca6c:	00700713          	li	a4,7
    ca70:	008a8a93          	add	s5,s5,8
    ca74:	01275463          	bge	a4,s2,ca7c <_vfprintf_r+0x660>
    ca78:	0280106f          	j	daa0 <_vfprintf_r+0x1684>
    ca7c:	0d012703          	lw	a4,208(sp)
    ca80:	01412783          	lw	a5,20(sp)
    ca84:	08010593          	add	a1,sp,128
    ca88:	08e12823          	sw	a4,144(sp)
    ca8c:	0d412703          	lw	a4,212(sp)
    ca90:	09010513          	add	a0,sp,144
    ca94:	08012023          	sw	zero,128(sp)
    ca98:	08e12a23          	sw	a4,148(sp)
    ca9c:	0d812703          	lw	a4,216(sp)
    caa0:	08012223          	sw	zero,132(sp)
    caa4:	08012423          	sw	zero,136(sp)
    caa8:	08e12c23          	sw	a4,152(sp)
    caac:	0dc12703          	lw	a4,220(sp)
    cab0:	08012623          	sw	zero,140(sp)
    cab4:	fff78993          	add	s3,a5,-1
    cab8:	08e12e23          	sw	a4,156(sp)
    cabc:	76c110ef          	jal	1e228 <__eqtf2>
    cac0:	360504e3          	beqz	a0,d628 <_vfprintf_r+0x120c>
    cac4:	001c8793          	add	a5,s9,1
    cac8:	00190913          	add	s2,s2,1
    cacc:	013d8db3          	add	s11,s11,s3
    cad0:	00faa023          	sw	a5,0(s5)
    cad4:	013aa223          	sw	s3,4(s5)
    cad8:	0db12623          	sw	s11,204(sp)
    cadc:	0d212423          	sw	s2,200(sp)
    cae0:	00700793          	li	a5,7
    cae4:	008a8a93          	add	s5,s5,8
    cae8:	3127cee3          	blt	a5,s2,d604 <_vfprintf_r+0x11e8>
    caec:	03412683          	lw	a3,52(sp)
    caf0:	0b410713          	add	a4,sp,180
    caf4:	00190793          	add	a5,s2,1
    caf8:	01b68633          	add	a2,a3,s11
    cafc:	00eaa023          	sw	a4,0(s5)
    cb00:	00daa223          	sw	a3,4(s5)
    cb04:	0cc12623          	sw	a2,204(sp)
    cb08:	0cf12423          	sw	a5,200(sp)
    cb0c:	00700713          	li	a4,7
    cb10:	008a8993          	add	s3,s5,8
    cb14:	c0f752e3          	bge	a4,a5,c718 <_vfprintf_r+0x2fc>
    cb18:	0c410613          	add	a2,sp,196
    cb1c:	00048593          	mv	a1,s1
    cb20:	000b0513          	mv	a0,s6
    cb24:	5250b0ef          	jal	18848 <__sprint_r>
    cb28:	76051463          	bnez	a0,d290 <_vfprintf_r+0xe74>
    cb2c:	0cc12603          	lw	a2,204(sp)
    cb30:	0ec10993          	add	s3,sp,236
    cb34:	be5ff06f          	j	c718 <_vfprintf_r+0x2fc>
    cb38:	2007f713          	and	a4,a5,512
    cb3c:	c40718e3          	bnez	a4,c78c <_vfprintf_r+0x370>
    cb40:	0584a503          	lw	a0,88(s1)
    cb44:	04d060ef          	jal	13390 <__retarget_lock_release_recursive>
    cb48:	00c49783          	lh	a5,12(s1)
    cb4c:	c41ff06f          	j	c78c <_vfprintf_r+0x370>
    cb50:	02012503          	lw	a0,32(sp)
    cb54:	3d1020ef          	jal	f724 <__sinit>
    cb58:	921ff06f          	j	c478 <_vfprintf_r+0x5c>
    cb5c:	000a4883          	lbu	a7,0(s4)
    cb60:	020d6d13          	or	s10,s10,32
    cb64:	a61ff06f          	j	c5c4 <_vfprintf_r+0x1a8>
    cb68:	010d6d13          	or	s10,s10,16
    cb6c:	020d7793          	and	a5,s10,32
    cb70:	32078ce3          	beqz	a5,d6a8 <_vfprintf_r+0x128c>
    cb74:	00c12783          	lw	a5,12(sp)
    cb78:	00778b93          	add	s7,a5,7
    cb7c:	ff8bfb93          	and	s7,s7,-8
    cb80:	004ba783          	lw	a5,4(s7)
    cb84:	000bad83          	lw	s11,0(s7)
    cb88:	008b8713          	add	a4,s7,8
    cb8c:	00e12623          	sw	a4,12(sp)
    cb90:	00078913          	mv	s2,a5
    cb94:	3407c4e3          	bltz	a5,d6dc <_vfprintf_r+0x12c0>
    cb98:	000d0613          	mv	a2,s10
    cb9c:	0c0ac463          	bltz	s5,cc64 <_vfprintf_r+0x848>
    cba0:	012de7b3          	or	a5,s11,s2
    cba4:	f7fd7613          	and	a2,s10,-129
    cba8:	0a079e63          	bnez	a5,cc64 <_vfprintf_r+0x848>
    cbac:	0c0a9263          	bnez	s5,cc70 <_vfprintf_r+0x854>
    cbb0:	00000913          	li	s2,0
    cbb4:	00060d13          	mv	s10,a2
    cbb8:	19010c93          	add	s9,sp,400
    cbbc:	0c80006f          	j	cc84 <_vfprintf_r+0x868>
    cbc0:	00c12703          	lw	a4,12(sp)
    cbc4:	0a0103a3          	sb	zero,167(sp)
    cbc8:	00100b93          	li	s7,1
    cbcc:	00072783          	lw	a5,0(a4)
    cbd0:	00470713          	add	a4,a4,4
    cbd4:	00e12623          	sw	a4,12(sp)
    cbd8:	12f10623          	sb	a5,300(sp)
    cbdc:	00100913          	li	s2,1
    cbe0:	12c10c93          	add	s9,sp,300
    cbe4:	a55ff06f          	j	c638 <_vfprintf_r+0x21c>
    cbe8:	00c12783          	lw	a5,12(sp)
    cbec:	0a0103a3          	sb	zero,167(sp)
    cbf0:	0007ac83          	lw	s9,0(a5)
    cbf4:	00478d93          	add	s11,a5,4
    cbf8:	580c88e3          	beqz	s9,d988 <_vfprintf_r+0x156c>
    cbfc:	000ad463          	bgez	s5,cc04 <_vfprintf_r+0x7e8>
    cc00:	0e00106f          	j	dce0 <_vfprintf_r+0x18c4>
    cc04:	000a8613          	mv	a2,s5
    cc08:	00000593          	li	a1,0
    cc0c:	000c8513          	mv	a0,s9
    cc10:	01112623          	sw	a7,12(sp)
    cc14:	1d8070ef          	jal	13dec <memchr>
    cc18:	00a12423          	sw	a0,8(sp)
    cc1c:	00c12883          	lw	a7,12(sp)
    cc20:	00051463          	bnez	a0,cc28 <_vfprintf_r+0x80c>
    cc24:	4d10106f          	j	e8f4 <_vfprintf_r+0x24d8>
    cc28:	00812783          	lw	a5,8(sp)
    cc2c:	0a714703          	lbu	a4,167(sp)
    cc30:	01b12623          	sw	s11,12(sp)
    cc34:	41978933          	sub	s2,a5,s9
    cc38:	fff94693          	not	a3,s2
    cc3c:	41f6d693          	sra	a3,a3,0x1f
    cc40:	00012423          	sw	zero,8(sp)
    cc44:	00012e23          	sw	zero,28(sp)
    cc48:	00012c23          	sw	zero,24(sp)
    cc4c:	00012823          	sw	zero,16(sp)
    cc50:	00d97bb3          	and	s7,s2,a3
    cc54:	00000a93          	li	s5,0
    cc58:	9e070ae3          	beqz	a4,c64c <_vfprintf_r+0x230>
    cc5c:	001b8b93          	add	s7,s7,1
    cc60:	9edff06f          	j	c64c <_vfprintf_r+0x230>
    cc64:	660918e3          	bnez	s2,dad4 <_vfprintf_r+0x16b8>
    cc68:	00900793          	li	a5,9
    cc6c:	67b7e4e3          	bltu	a5,s11,dad4 <_vfprintf_r+0x16b8>
    cc70:	030d8d93          	add	s11,s11,48
    cc74:	19b107a3          	sb	s11,399(sp)
    cc78:	00060d13          	mv	s10,a2
    cc7c:	00100913          	li	s2,1
    cc80:	18f10c93          	add	s9,sp,399
    cc84:	0a714703          	lbu	a4,167(sp)
    cc88:	00090b93          	mv	s7,s2
    cc8c:	01595463          	bge	s2,s5,cc94 <_vfprintf_r+0x878>
    cc90:	000a8b93          	mv	s7,s5
    cc94:	00012423          	sw	zero,8(sp)
    cc98:	00012e23          	sw	zero,28(sp)
    cc9c:	00012c23          	sw	zero,24(sp)
    cca0:	00012823          	sw	zero,16(sp)
    cca4:	fa071ce3          	bnez	a4,cc5c <_vfprintf_r+0x840>
    cca8:	9a5ff06f          	j	c64c <_vfprintf_r+0x230>
    ccac:	010d6d13          	or	s10,s10,16
    ccb0:	020d7793          	and	a5,s10,32
    ccb4:	240784e3          	beqz	a5,d6fc <_vfprintf_r+0x12e0>
    ccb8:	00c12783          	lw	a5,12(sp)
    ccbc:	00778b93          	add	s7,a5,7
    ccc0:	ff8bfb93          	and	s7,s7,-8
    ccc4:	000bad83          	lw	s11,0(s7)
    ccc8:	004ba903          	lw	s2,4(s7)
    cccc:	008b8793          	add	a5,s7,8
    ccd0:	00f12623          	sw	a5,12(sp)
    ccd4:	bffd7613          	and	a2,s10,-1025
    ccd8:	00000793          	li	a5,0
    ccdc:	00000693          	li	a3,0
    cce0:	0ad103a3          	sb	a3,167(sp)
    cce4:	300ac063          	bltz	s5,cfe4 <_vfprintf_r+0xbc8>
    cce8:	012de6b3          	or	a3,s11,s2
    ccec:	f7f67d13          	and	s10,a2,-129
    ccf0:	2e069863          	bnez	a3,cfe0 <_vfprintf_r+0xbc4>
    ccf4:	340a9e63          	bnez	s5,d050 <_vfprintf_r+0xc34>
    ccf8:	260794e3          	bnez	a5,d760 <_vfprintf_r+0x1344>
    ccfc:	00167913          	and	s2,a2,1
    cd00:	19010c93          	add	s9,sp,400
    cd04:	f80900e3          	beqz	s2,cc84 <_vfprintf_r+0x868>
    cd08:	03000793          	li	a5,48
    cd0c:	18f107a3          	sb	a5,399(sp)
    cd10:	18f10c93          	add	s9,sp,399
    cd14:	f71ff06f          	j	cc84 <_vfprintf_r+0x868>
    cd18:	00c12783          	lw	a5,12(sp)
    cd1c:	0007ac03          	lw	s8,0(a5)
    cd20:	00478793          	add	a5,a5,4
    cd24:	260c54e3          	bgez	s8,d78c <_vfprintf_r+0x1370>
    cd28:	41800c33          	neg	s8,s8
    cd2c:	00f12623          	sw	a5,12(sp)
    cd30:	000a4883          	lbu	a7,0(s4)
    cd34:	004d6d13          	or	s10,s10,4
    cd38:	88dff06f          	j	c5c4 <_vfprintf_r+0x1a8>
    cd3c:	020d7793          	and	a5,s10,32
    cd40:	30078ae3          	beqz	a5,d854 <_vfprintf_r+0x1438>
    cd44:	00c12783          	lw	a5,12(sp)
    cd48:	00412683          	lw	a3,4(sp)
    cd4c:	0007a783          	lw	a5,0(a5)
    cd50:	41f6d713          	sra	a4,a3,0x1f
    cd54:	00d7a023          	sw	a3,0(a5)
    cd58:	00e7a223          	sw	a4,4(a5)
    cd5c:	00c12783          	lw	a5,12(sp)
    cd60:	000a0c93          	mv	s9,s4
    cd64:	00478793          	add	a5,a5,4
    cd68:	00f12623          	sw	a5,12(sp)
    cd6c:	9f9ff06f          	j	c764 <_vfprintf_r+0x348>
    cd70:	000a4883          	lbu	a7,0(s4)
    cd74:	080d6d13          	or	s10,s10,128
    cd78:	84dff06f          	j	c5c4 <_vfprintf_r+0x1a8>
    cd7c:	000a4883          	lbu	a7,0(s4)
    cd80:	02a00793          	li	a5,42
    cd84:	001a0693          	add	a3,s4,1
    cd88:	00f89463          	bne	a7,a5,cd90 <_vfprintf_r+0x974>
    cd8c:	7410106f          	j	eccc <_vfprintf_r+0x28b0>
    cd90:	fd088793          	add	a5,a7,-48
    cd94:	00900713          	li	a4,9
    cd98:	00000a93          	li	s5,0
    cd9c:	00900613          	li	a2,9
    cda0:	02f76463          	bltu	a4,a5,cdc8 <_vfprintf_r+0x9ac>
    cda4:	0006c883          	lbu	a7,0(a3)
    cda8:	002a9713          	sll	a4,s5,0x2
    cdac:	01570ab3          	add	s5,a4,s5
    cdb0:	001a9a93          	sll	s5,s5,0x1
    cdb4:	00fa8ab3          	add	s5,s5,a5
    cdb8:	fd088793          	add	a5,a7,-48
    cdbc:	00168693          	add	a3,a3,1
    cdc0:	fef672e3          	bgeu	a2,a5,cda4 <_vfprintf_r+0x988>
    cdc4:	300ac2e3          	bltz	s5,d8c8 <_vfprintf_r+0x14ac>
    cdc8:	00068a13          	mv	s4,a3
    cdcc:	ffcff06f          	j	c5c8 <_vfprintf_r+0x1ac>
    cdd0:	010d6613          	or	a2,s10,16
    cdd4:	02067793          	and	a5,a2,32
    cdd8:	14078ae3          	beqz	a5,d72c <_vfprintf_r+0x1310>
    cddc:	00c12783          	lw	a5,12(sp)
    cde0:	00778b93          	add	s7,a5,7
    cde4:	ff8bfb93          	and	s7,s7,-8
    cde8:	008b8793          	add	a5,s7,8
    cdec:	00f12623          	sw	a5,12(sp)
    cdf0:	000bad83          	lw	s11,0(s7)
    cdf4:	004ba903          	lw	s2,4(s7)
    cdf8:	00100793          	li	a5,1
    cdfc:	ee1ff06f          	j	ccdc <_vfprintf_r+0x8c0>
    ce00:	00c12703          	lw	a4,12(sp)
    ce04:	000087b7          	lui	a5,0x8
    ce08:	83078793          	add	a5,a5,-2000 # 7830 <OSSemPend+0x24>
    ce0c:	0af11423          	sh	a5,168(sp)
    ce10:	00470793          	add	a5,a4,4
    ce14:	00f12623          	sw	a5,12(sp)
    ce18:	00016797          	auipc	a5,0x16
    ce1c:	2b878793          	add	a5,a5,696 # 230d0 <OSUnMapTbl+0x16c>
    ce20:	02f12623          	sw	a5,44(sp)
    ce24:	00072d83          	lw	s11,0(a4)
    ce28:	00000913          	li	s2,0
    ce2c:	002d6613          	or	a2,s10,2
    ce30:	00200793          	li	a5,2
    ce34:	07800893          	li	a7,120
    ce38:	ea5ff06f          	j	ccdc <_vfprintf_r+0x8c0>
    ce3c:	000a4883          	lbu	a7,0(s4)
    ce40:	008d6d13          	or	s10,s10,8
    ce44:	f80ff06f          	j	c5c4 <_vfprintf_r+0x1a8>
    ce48:	000a4883          	lbu	a7,0(s4)
    ce4c:	06c00793          	li	a5,108
    ce50:	2ef88ce3          	beq	a7,a5,d948 <_vfprintf_r+0x152c>
    ce54:	010d6d13          	or	s10,s10,16
    ce58:	f6cff06f          	j	c5c4 <_vfprintf_r+0x1a8>
    ce5c:	000a4883          	lbu	a7,0(s4)
    ce60:	06800793          	li	a5,104
    ce64:	2cf88ae3          	beq	a7,a5,d938 <_vfprintf_r+0x151c>
    ce68:	040d6d13          	or	s10,s10,64
    ce6c:	f58ff06f          	j	c5c4 <_vfprintf_r+0x1a8>
    ce70:	000a4883          	lbu	a7,0(s4)
    ce74:	001d6d13          	or	s10,s10,1
    ce78:	f4cff06f          	j	c5c4 <_vfprintf_r+0x1a8>
    ce7c:	0a714783          	lbu	a5,167(sp)
    ce80:	000a4883          	lbu	a7,0(s4)
    ce84:	f4079063          	bnez	a5,c5c4 <_vfprintf_r+0x1a8>
    ce88:	02000793          	li	a5,32
    ce8c:	0af103a3          	sb	a5,167(sp)
    ce90:	f34ff06f          	j	c5c4 <_vfprintf_r+0x1a8>
    ce94:	02b00793          	li	a5,43
    ce98:	000a4883          	lbu	a7,0(s4)
    ce9c:	0af103a3          	sb	a5,167(sp)
    cea0:	f24ff06f          	j	c5c4 <_vfprintf_r+0x1a8>
    cea4:	06500713          	li	a4,101
    cea8:	b71754e3          	bge	a4,a7,ca10 <_vfprintf_r+0x5f4>
    ceac:	0d012703          	lw	a4,208(sp)
    ceb0:	08010593          	add	a1,sp,128
    ceb4:	09010513          	add	a0,sp,144
    ceb8:	08e12823          	sw	a4,144(sp)
    cebc:	0d412703          	lw	a4,212(sp)
    cec0:	02c12823          	sw	a2,48(sp)
    cec4:	08012023          	sw	zero,128(sp)
    cec8:	08e12a23          	sw	a4,148(sp)
    cecc:	0d812703          	lw	a4,216(sp)
    ced0:	08012223          	sw	zero,132(sp)
    ced4:	08012423          	sw	zero,136(sp)
    ced8:	08e12c23          	sw	a4,152(sp)
    cedc:	0dc12703          	lw	a4,220(sp)
    cee0:	08012623          	sw	zero,140(sp)
    cee4:	08e12e23          	sw	a4,156(sp)
    cee8:	340110ef          	jal	1e228 <__eqtf2>
    ceec:	03012603          	lw	a2,48(sp)
    cef0:	5a051063          	bnez	a0,d490 <_vfprintf_r+0x1074>
    cef4:	0c812783          	lw	a5,200(sp)
    cef8:	00016717          	auipc	a4,0x16
    cefc:	20870713          	add	a4,a4,520 # 23100 <OSUnMapTbl+0x19c>
    cf00:	00e9a023          	sw	a4,0(s3)
    cf04:	00160613          	add	a2,a2,1
    cf08:	00100713          	li	a4,1
    cf0c:	00178793          	add	a5,a5,1
    cf10:	00e9a223          	sw	a4,4(s3)
    cf14:	0cc12623          	sw	a2,204(sp)
    cf18:	0cf12423          	sw	a5,200(sp)
    cf1c:	00700713          	li	a4,7
    cf20:	00898993          	add	s3,s3,8
    cf24:	46f74ae3          	blt	a4,a5,db98 <_vfprintf_r+0x177c>
    cf28:	0ac12783          	lw	a5,172(sp)
    cf2c:	01412703          	lw	a4,20(sp)
    cf30:	02e7dee3          	bge	a5,a4,d76c <_vfprintf_r+0x1350>
    cf34:	02812783          	lw	a5,40(sp)
    cf38:	02412703          	lw	a4,36(sp)
    cf3c:	00898993          	add	s3,s3,8
    cf40:	fef9ac23          	sw	a5,-8(s3)
    cf44:	0c812783          	lw	a5,200(sp)
    cf48:	00e60633          	add	a2,a2,a4
    cf4c:	fee9ae23          	sw	a4,-4(s3)
    cf50:	00178793          	add	a5,a5,1
    cf54:	0cc12623          	sw	a2,204(sp)
    cf58:	0cf12423          	sw	a5,200(sp)
    cf5c:	00700713          	li	a4,7
    cf60:	20f744e3          	blt	a4,a5,d968 <_vfprintf_r+0x154c>
    cf64:	01412783          	lw	a5,20(sp)
    cf68:	fff78913          	add	s2,a5,-1
    cf6c:	fb205663          	blez	s2,c718 <_vfprintf_r+0x2fc>
    cf70:	00016e97          	auipc	t4,0x16
    cf74:	49ce8e93          	add	t4,t4,1180 # 2340c <zeroes.0>
    cf78:	01000713          	li	a4,16
    cf7c:	0c812783          	lw	a5,200(sp)
    cf80:	01000a93          	li	s5,16
    cf84:	00700d93          	li	s11,7
    cf88:	000e8c93          	mv	s9,t4
    cf8c:	01274863          	blt	a4,s2,cf9c <_vfprintf_r+0xb80>
    cf90:	42d0006f          	j	dbbc <_vfprintf_r+0x17a0>
    cf94:	ff090913          	add	s2,s2,-16
    cf98:	432ad0e3          	bge	s5,s2,dbb8 <_vfprintf_r+0x179c>
    cf9c:	01060613          	add	a2,a2,16
    cfa0:	00178793          	add	a5,a5,1
    cfa4:	0199a023          	sw	s9,0(s3)
    cfa8:	0159a223          	sw	s5,4(s3)
    cfac:	0cc12623          	sw	a2,204(sp)
    cfb0:	0cf12423          	sw	a5,200(sp)
    cfb4:	00898993          	add	s3,s3,8
    cfb8:	fcfddee3          	bge	s11,a5,cf94 <_vfprintf_r+0xb78>
    cfbc:	0c410613          	add	a2,sp,196
    cfc0:	00048593          	mv	a1,s1
    cfc4:	000b0513          	mv	a0,s6
    cfc8:	0810b0ef          	jal	18848 <__sprint_r>
    cfcc:	2c051263          	bnez	a0,d290 <_vfprintf_r+0xe74>
    cfd0:	0cc12603          	lw	a2,204(sp)
    cfd4:	0c812783          	lw	a5,200(sp)
    cfd8:	0ec10993          	add	s3,sp,236
    cfdc:	fb9ff06f          	j	cf94 <_vfprintf_r+0xb78>
    cfe0:	000d0613          	mv	a2,s10
    cfe4:	00100693          	li	a3,1
    cfe8:	c6d78ee3          	beq	a5,a3,cc64 <_vfprintf_r+0x848>
    cfec:	00200693          	li	a3,2
    cff0:	06d78c63          	beq	a5,a3,d068 <_vfprintf_r+0xc4c>
    cff4:	19010c93          	add	s9,sp,400
    cff8:	01d91793          	sll	a5,s2,0x1d
    cffc:	007df693          	and	a3,s11,7
    d000:	003ddd93          	srl	s11,s11,0x3
    d004:	03068693          	add	a3,a3,48
    d008:	01b7edb3          	or	s11,a5,s11
    d00c:	00395913          	srl	s2,s2,0x3
    d010:	fedc8fa3          	sb	a3,-1(s9)
    d014:	012de7b3          	or	a5,s11,s2
    d018:	000c8513          	mv	a0,s9
    d01c:	fffc8c93          	add	s9,s9,-1
    d020:	fc079ce3          	bnez	a5,cff8 <_vfprintf_r+0xbdc>
    d024:	00167713          	and	a4,a2,1
    d028:	06070a63          	beqz	a4,d09c <_vfprintf_r+0xc80>
    d02c:	03000713          	li	a4,48
    d030:	06e68663          	beq	a3,a4,d09c <_vfprintf_r+0xc80>
    d034:	ffe50513          	add	a0,a0,-2
    d038:	19010793          	add	a5,sp,400
    d03c:	feec8fa3          	sb	a4,-1(s9)
    d040:	40a78933          	sub	s2,a5,a0
    d044:	00060d13          	mv	s10,a2
    d048:	00050c93          	mv	s9,a0
    d04c:	c39ff06f          	j	cc84 <_vfprintf_r+0x868>
    d050:	00100693          	li	a3,1
    d054:	00d79463          	bne	a5,a3,d05c <_vfprintf_r+0xc40>
    d058:	1910106f          	j	e9e8 <_vfprintf_r+0x25cc>
    d05c:	00200693          	li	a3,2
    d060:	000d0613          	mv	a2,s10
    d064:	f8d798e3          	bne	a5,a3,cff4 <_vfprintf_r+0xbd8>
    d068:	02c12683          	lw	a3,44(sp)
    d06c:	19010c93          	add	s9,sp,400
    d070:	00fdf793          	and	a5,s11,15
    d074:	00f687b3          	add	a5,a3,a5
    d078:	0007c703          	lbu	a4,0(a5)
    d07c:	004ddd93          	srl	s11,s11,0x4
    d080:	01c91793          	sll	a5,s2,0x1c
    d084:	01b7edb3          	or	s11,a5,s11
    d088:	00495913          	srl	s2,s2,0x4
    d08c:	feec8fa3          	sb	a4,-1(s9)
    d090:	012de7b3          	or	a5,s11,s2
    d094:	fffc8c93          	add	s9,s9,-1
    d098:	fc079ce3          	bnez	a5,d070 <_vfprintf_r+0xc54>
    d09c:	19010793          	add	a5,sp,400
    d0a0:	41978933          	sub	s2,a5,s9
    d0a4:	00060d13          	mv	s10,a2
    d0a8:	bddff06f          	j	cc84 <_vfprintf_r+0x868>
    d0ac:	417c0db3          	sub	s11,s8,s7
    d0b0:	e3b05863          	blez	s11,c6e0 <_vfprintf_r+0x2c4>
    d0b4:	01000513          	li	a0,16
    d0b8:	0c812583          	lw	a1,200(sp)
    d0bc:	00016e97          	auipc	t4,0x16
    d0c0:	350e8e93          	add	t4,t4,848 # 2340c <zeroes.0>
    d0c4:	09b55463          	bge	a0,s11,d14c <_vfprintf_r+0xd30>
    d0c8:	00098793          	mv	a5,s3
    d0cc:	01000f13          	li	t5,16
    d0d0:	00090993          	mv	s3,s2
    d0d4:	00700f93          	li	t6,7
    d0d8:	03112823          	sw	a7,48(sp)
    d0dc:	000e8913          	mv	s2,t4
    d0e0:	00c0006f          	j	d0ec <_vfprintf_r+0xcd0>
    d0e4:	ff0d8d93          	add	s11,s11,-16
    d0e8:	05bf5a63          	bge	t5,s11,d13c <_vfprintf_r+0xd20>
    d0ec:	01060613          	add	a2,a2,16
    d0f0:	00158593          	add	a1,a1,1 # 2001 <OS_EventTaskWaitMulti+0xd1>
    d0f4:	0127a023          	sw	s2,0(a5)
    d0f8:	01e7a223          	sw	t5,4(a5)
    d0fc:	0cc12623          	sw	a2,204(sp)
    d100:	0cb12423          	sw	a1,200(sp)
    d104:	00878793          	add	a5,a5,8
    d108:	fcbfdee3          	bge	t6,a1,d0e4 <_vfprintf_r+0xcc8>
    d10c:	0c410613          	add	a2,sp,196
    d110:	00048593          	mv	a1,s1
    d114:	000b0513          	mv	a0,s6
    d118:	7300b0ef          	jal	18848 <__sprint_r>
    d11c:	16051a63          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d120:	01000f13          	li	t5,16
    d124:	ff0d8d93          	add	s11,s11,-16
    d128:	0cc12603          	lw	a2,204(sp)
    d12c:	0c812583          	lw	a1,200(sp)
    d130:	0ec10793          	add	a5,sp,236
    d134:	00700f93          	li	t6,7
    d138:	fbbf4ae3          	blt	t5,s11,d0ec <_vfprintf_r+0xcd0>
    d13c:	03012883          	lw	a7,48(sp)
    d140:	00090e93          	mv	t4,s2
    d144:	00098913          	mv	s2,s3
    d148:	00078993          	mv	s3,a5
    d14c:	01b60633          	add	a2,a2,s11
    d150:	00158593          	add	a1,a1,1
    d154:	01d9a023          	sw	t4,0(s3)
    d158:	01b9a223          	sw	s11,4(s3)
    d15c:	0cc12623          	sw	a2,204(sp)
    d160:	0cb12423          	sw	a1,200(sp)
    d164:	00700713          	li	a4,7
    d168:	00898993          	add	s3,s3,8
    d16c:	d6b75a63          	bge	a4,a1,c6e0 <_vfprintf_r+0x2c4>
    d170:	0c410613          	add	a2,sp,196
    d174:	00048593          	mv	a1,s1
    d178:	000b0513          	mv	a0,s6
    d17c:	03112823          	sw	a7,48(sp)
    d180:	6c80b0ef          	jal	18848 <__sprint_r>
    d184:	10051663          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d188:	0cc12603          	lw	a2,204(sp)
    d18c:	03012883          	lw	a7,48(sp)
    d190:	0ec10993          	add	s3,sp,236
    d194:	d4cff06f          	j	c6e0 <_vfprintf_r+0x2c4>
    d198:	0c812583          	lw	a1,200(sp)
    d19c:	00016e97          	auipc	t4,0x16
    d1a0:	270e8e93          	add	t4,t4,624 # 2340c <zeroes.0>
    d1a4:	09545663          	bge	s0,s5,d230 <_vfprintf_r+0xe14>
    d1a8:	00098793          	mv	a5,s3
    d1ac:	00700d93          	li	s11,7
    d1b0:	00090993          	mv	s3,s2
    d1b4:	03112823          	sw	a7,48(sp)
    d1b8:	000a8913          	mv	s2,s5
    d1bc:	000e8a93          	mv	s5,t4
    d1c0:	00c0006f          	j	d1cc <_vfprintf_r+0xdb0>
    d1c4:	ff090913          	add	s2,s2,-16
    d1c8:	05245a63          	bge	s0,s2,d21c <_vfprintf_r+0xe00>
    d1cc:	01060613          	add	a2,a2,16
    d1d0:	00158593          	add	a1,a1,1
    d1d4:	00016717          	auipc	a4,0x16
    d1d8:	23870713          	add	a4,a4,568 # 2340c <zeroes.0>
    d1dc:	00e7a023          	sw	a4,0(a5)
    d1e0:	0087a223          	sw	s0,4(a5)
    d1e4:	0cc12623          	sw	a2,204(sp)
    d1e8:	0cb12423          	sw	a1,200(sp)
    d1ec:	00878793          	add	a5,a5,8
    d1f0:	fcbddae3          	bge	s11,a1,d1c4 <_vfprintf_r+0xda8>
    d1f4:	0c410613          	add	a2,sp,196
    d1f8:	00048593          	mv	a1,s1
    d1fc:	000b0513          	mv	a0,s6
    d200:	6480b0ef          	jal	18848 <__sprint_r>
    d204:	08051663          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d208:	ff090913          	add	s2,s2,-16
    d20c:	0cc12603          	lw	a2,204(sp)
    d210:	0c812583          	lw	a1,200(sp)
    d214:	0ec10793          	add	a5,sp,236
    d218:	fb244ae3          	blt	s0,s2,d1cc <_vfprintf_r+0xdb0>
    d21c:	03012883          	lw	a7,48(sp)
    d220:	000a8e93          	mv	t4,s5
    d224:	00090a93          	mv	s5,s2
    d228:	00098913          	mv	s2,s3
    d22c:	00078993          	mv	s3,a5
    d230:	01560633          	add	a2,a2,s5
    d234:	00158593          	add	a1,a1,1
    d238:	01d9a023          	sw	t4,0(s3)
    d23c:	0159a223          	sw	s5,4(s3)
    d240:	0cc12623          	sw	a2,204(sp)
    d244:	0cb12423          	sw	a1,200(sp)
    d248:	00700713          	li	a4,7
    d24c:	00898993          	add	s3,s3,8
    d250:	c8b75c63          	bge	a4,a1,c6e8 <_vfprintf_r+0x2cc>
    d254:	0c410613          	add	a2,sp,196
    d258:	00048593          	mv	a1,s1
    d25c:	000b0513          	mv	a0,s6
    d260:	03112823          	sw	a7,48(sp)
    d264:	5e40b0ef          	jal	18848 <__sprint_r>
    d268:	02051463          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d26c:	0cc12603          	lw	a2,204(sp)
    d270:	03012883          	lw	a7,48(sp)
    d274:	0ec10993          	add	s3,sp,236
    d278:	c70ff06f          	j	c6e8 <_vfprintf_r+0x2cc>
    d27c:	0c410613          	add	a2,sp,196
    d280:	00048593          	mv	a1,s1
    d284:	000b0513          	mv	a0,s6
    d288:	5c00b0ef          	jal	18848 <__sprint_r>
    d28c:	ca050c63          	beqz	a0,c744 <_vfprintf_r+0x328>
    d290:	00812383          	lw	t2,8(sp)
    d294:	ce038463          	beqz	t2,c77c <_vfprintf_r+0x360>
    d298:	02012503          	lw	a0,32(sp)
    d29c:	00038593          	mv	a1,t2
    d2a0:	1bd020ef          	jal	fc5c <_free_r>
    d2a4:	0644a703          	lw	a4,100(s1)
    d2a8:	00c49783          	lh	a5,12(s1)
    d2ac:	00177713          	and	a4,a4,1
    d2b0:	cc071e63          	bnez	a4,c78c <_vfprintf_r+0x370>
    d2b4:	885ff06f          	j	cb38 <_vfprintf_r+0x71c>
    d2b8:	01000513          	li	a0,16
    d2bc:	0c812583          	lw	a1,200(sp)
    d2c0:	00016f17          	auipc	t5,0x16
    d2c4:	13cf0f13          	add	t5,t5,316 # 233fc <blanks.1>
    d2c8:	08e55c63          	bge	a0,a4,d360 <_vfprintf_r+0xf44>
    d2cc:	05212423          	sw	s2,72(sp)
    d2d0:	00098793          	mv	a5,s3
    d2d4:	01000e93          	li	t4,16
    d2d8:	00700393          	li	t2,7
    d2dc:	02512823          	sw	t0,48(sp)
    d2e0:	05112223          	sw	a7,68(sp)
    d2e4:	00070913          	mv	s2,a4
    d2e8:	000f0993          	mv	s3,t5
    d2ec:	00c0006f          	j	d2f8 <_vfprintf_r+0xedc>
    d2f0:	ff090913          	add	s2,s2,-16
    d2f4:	052eda63          	bge	t4,s2,d348 <_vfprintf_r+0xf2c>
    d2f8:	01060613          	add	a2,a2,16
    d2fc:	00158593          	add	a1,a1,1
    d300:	0137a023          	sw	s3,0(a5)
    d304:	01d7a223          	sw	t4,4(a5)
    d308:	0cc12623          	sw	a2,204(sp)
    d30c:	0cb12423          	sw	a1,200(sp)
    d310:	00878793          	add	a5,a5,8
    d314:	fcb3dee3          	bge	t2,a1,d2f0 <_vfprintf_r+0xed4>
    d318:	0c410613          	add	a2,sp,196
    d31c:	00048593          	mv	a1,s1
    d320:	000b0513          	mv	a0,s6
    d324:	5240b0ef          	jal	18848 <__sprint_r>
    d328:	f60514e3          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d32c:	01000e93          	li	t4,16
    d330:	ff090913          	add	s2,s2,-16
    d334:	0cc12603          	lw	a2,204(sp)
    d338:	0c812583          	lw	a1,200(sp)
    d33c:	0ec10793          	add	a5,sp,236
    d340:	00700393          	li	t2,7
    d344:	fb2ecae3          	blt	t4,s2,d2f8 <_vfprintf_r+0xedc>
    d348:	00090713          	mv	a4,s2
    d34c:	03012283          	lw	t0,48(sp)
    d350:	04412883          	lw	a7,68(sp)
    d354:	04812903          	lw	s2,72(sp)
    d358:	00098f13          	mv	t5,s3
    d35c:	00078993          	mv	s3,a5
    d360:	00e60633          	add	a2,a2,a4
    d364:	00158593          	add	a1,a1,1
    d368:	00e9a223          	sw	a4,4(s3)
    d36c:	01e9a023          	sw	t5,0(s3)
    d370:	0cc12623          	sw	a2,204(sp)
    d374:	0cb12423          	sw	a1,200(sp)
    d378:	00700713          	li	a4,7
    d37c:	00898993          	add	s3,s3,8
    d380:	aeb75663          	bge	a4,a1,c66c <_vfprintf_r+0x250>
    d384:	0c410613          	add	a2,sp,196
    d388:	00048593          	mv	a1,s1
    d38c:	000b0513          	mv	a0,s6
    d390:	05112223          	sw	a7,68(sp)
    d394:	02512823          	sw	t0,48(sp)
    d398:	4b00b0ef          	jal	18848 <__sprint_r>
    d39c:	ee051ae3          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d3a0:	0cc12603          	lw	a2,204(sp)
    d3a4:	04412883          	lw	a7,68(sp)
    d3a8:	03012283          	lw	t0,48(sp)
    d3ac:	0ec10993          	add	s3,sp,236
    d3b0:	abcff06f          	j	c66c <_vfprintf_r+0x250>
    d3b4:	0c410613          	add	a2,sp,196
    d3b8:	00048593          	mv	a1,s1
    d3bc:	000b0513          	mv	a0,s6
    d3c0:	03112823          	sw	a7,48(sp)
    d3c4:	4840b0ef          	jal	18848 <__sprint_r>
    d3c8:	ec0514e3          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d3cc:	0cc12603          	lw	a2,204(sp)
    d3d0:	03012883          	lw	a7,48(sp)
    d3d4:	0ec10993          	add	s3,sp,236
    d3d8:	b00ff06f          	j	c6d8 <_vfprintf_r+0x2bc>
    d3dc:	00016f17          	auipc	t5,0x16
    d3e0:	020f0f13          	add	t5,t5,32 # 233fc <blanks.1>
    d3e4:	01000713          	li	a4,16
    d3e8:	0c812783          	lw	a5,200(sp)
    d3ec:	01000a93          	li	s5,16
    d3f0:	00700d93          	li	s11,7
    d3f4:	000f0c93          	mv	s9,t5
    d3f8:	01274863          	blt	a4,s2,d408 <_vfprintf_r+0xfec>
    d3fc:	0580006f          	j	d454 <_vfprintf_r+0x1038>
    d400:	ff090913          	add	s2,s2,-16
    d404:	052ad663          	bge	s5,s2,d450 <_vfprintf_r+0x1034>
    d408:	01060613          	add	a2,a2,16
    d40c:	00178793          	add	a5,a5,1
    d410:	0199a023          	sw	s9,0(s3)
    d414:	0159a223          	sw	s5,4(s3)
    d418:	0cc12623          	sw	a2,204(sp)
    d41c:	0cf12423          	sw	a5,200(sp)
    d420:	00898993          	add	s3,s3,8
    d424:	fcfddee3          	bge	s11,a5,d400 <_vfprintf_r+0xfe4>
    d428:	0c410613          	add	a2,sp,196
    d42c:	00048593          	mv	a1,s1
    d430:	000b0513          	mv	a0,s6
    d434:	4140b0ef          	jal	18848 <__sprint_r>
    d438:	e4051ce3          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d43c:	ff090913          	add	s2,s2,-16
    d440:	0cc12603          	lw	a2,204(sp)
    d444:	0c812783          	lw	a5,200(sp)
    d448:	0ec10993          	add	s3,sp,236
    d44c:	fb2acee3          	blt	s5,s2,d408 <_vfprintf_r+0xfec>
    d450:	000c8f13          	mv	t5,s9
    d454:	01260633          	add	a2,a2,s2
    d458:	00178793          	add	a5,a5,1
    d45c:	01e9a023          	sw	t5,0(s3)
    d460:	0129a223          	sw	s2,4(s3)
    d464:	0cc12623          	sw	a2,204(sp)
    d468:	0cf12423          	sw	a5,200(sp)
    d46c:	00700713          	li	a4,7
    d470:	aaf75c63          	bge	a4,a5,c728 <_vfprintf_r+0x30c>
    d474:	0c410613          	add	a2,sp,196
    d478:	00048593          	mv	a1,s1
    d47c:	000b0513          	mv	a0,s6
    d480:	3c80b0ef          	jal	18848 <__sprint_r>
    d484:	e00516e3          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d488:	0cc12603          	lw	a2,204(sp)
    d48c:	a9cff06f          	j	c728 <_vfprintf_r+0x30c>
    d490:	0ac12583          	lw	a1,172(sp)
    d494:	30b05263          	blez	a1,d798 <_vfprintf_r+0x137c>
    d498:	01012783          	lw	a5,16(sp)
    d49c:	01412703          	lw	a4,20(sp)
    d4a0:	00078a93          	mv	s5,a5
    d4a4:	00f75463          	bge	a4,a5,d4ac <_vfprintf_r+0x1090>
    d4a8:	00070a93          	mv	s5,a4
    d4ac:	03505863          	blez	s5,d4dc <_vfprintf_r+0x10c0>
    d4b0:	0c812703          	lw	a4,200(sp)
    d4b4:	01560633          	add	a2,a2,s5
    d4b8:	0199a023          	sw	s9,0(s3)
    d4bc:	00170713          	add	a4,a4,1
    d4c0:	0159a223          	sw	s5,4(s3)
    d4c4:	0cc12623          	sw	a2,204(sp)
    d4c8:	0ce12423          	sw	a4,200(sp)
    d4cc:	00700593          	li	a1,7
    d4d0:	00898993          	add	s3,s3,8
    d4d4:	00e5d463          	bge	a1,a4,d4dc <_vfprintf_r+0x10c0>
    d4d8:	3b80106f          	j	e890 <_vfprintf_r+0x2474>
    d4dc:	fffac713          	not	a4,s5
    d4e0:	01012783          	lw	a5,16(sp)
    d4e4:	41f75713          	sra	a4,a4,0x1f
    d4e8:	00eafab3          	and	s5,s5,a4
    d4ec:	41578ab3          	sub	s5,a5,s5
    d4f0:	77504e63          	bgtz	s5,dc6c <_vfprintf_r+0x1850>
    d4f4:	01012783          	lw	a5,16(sp)
    d4f8:	400d7713          	and	a4,s10,1024
    d4fc:	00fc8933          	add	s2,s9,a5
    d500:	00070463          	beqz	a4,d508 <_vfprintf_r+0x10ec>
    d504:	1080106f          	j	e60c <_vfprintf_r+0x21f0>
    d508:	0ac12583          	lw	a1,172(sp)
    d50c:	01412783          	lw	a5,20(sp)
    d510:	48f5cc63          	blt	a1,a5,d9a8 <_vfprintf_r+0x158c>
    d514:	001d7713          	and	a4,s10,1
    d518:	48071863          	bnez	a4,d9a8 <_vfprintf_r+0x158c>
    d51c:	01412703          	lw	a4,20(sp)
    d520:	00ec87b3          	add	a5,s9,a4
    d524:	40b705b3          	sub	a1,a4,a1
    d528:	41278ab3          	sub	s5,a5,s2
    d52c:	0155d463          	bge	a1,s5,d534 <_vfprintf_r+0x1118>
    d530:	00058a93          	mv	s5,a1
    d534:	03505863          	blez	s5,d564 <_vfprintf_r+0x1148>
    d538:	0c812703          	lw	a4,200(sp)
    d53c:	01560633          	add	a2,a2,s5
    d540:	0129a023          	sw	s2,0(s3)
    d544:	00170713          	add	a4,a4,1
    d548:	0159a223          	sw	s5,4(s3)
    d54c:	0cc12623          	sw	a2,204(sp)
    d550:	0ce12423          	sw	a4,200(sp)
    d554:	00700793          	li	a5,7
    d558:	00898993          	add	s3,s3,8
    d55c:	00e7d463          	bge	a5,a4,d564 <_vfprintf_r+0x1148>
    d560:	3d00106f          	j	e930 <_vfprintf_r+0x2514>
    d564:	fffac713          	not	a4,s5
    d568:	41f75713          	sra	a4,a4,0x1f
    d56c:	00eaf7b3          	and	a5,s5,a4
    d570:	40f58933          	sub	s2,a1,a5
    d574:	9b205263          	blez	s2,c718 <_vfprintf_r+0x2fc>
    d578:	00016e97          	auipc	t4,0x16
    d57c:	e94e8e93          	add	t4,t4,-364 # 2340c <zeroes.0>
    d580:	01000713          	li	a4,16
    d584:	0c812783          	lw	a5,200(sp)
    d588:	01000a93          	li	s5,16
    d58c:	00700d93          	li	s11,7
    d590:	000e8c93          	mv	s9,t4
    d594:	01274863          	blt	a4,s2,d5a4 <_vfprintf_r+0x1188>
    d598:	6240006f          	j	dbbc <_vfprintf_r+0x17a0>
    d59c:	ff090913          	add	s2,s2,-16
    d5a0:	612adc63          	bge	s5,s2,dbb8 <_vfprintf_r+0x179c>
    d5a4:	01060613          	add	a2,a2,16
    d5a8:	00178793          	add	a5,a5,1
    d5ac:	0199a023          	sw	s9,0(s3)
    d5b0:	0159a223          	sw	s5,4(s3)
    d5b4:	0cc12623          	sw	a2,204(sp)
    d5b8:	0cf12423          	sw	a5,200(sp)
    d5bc:	00898993          	add	s3,s3,8
    d5c0:	fcfddee3          	bge	s11,a5,d59c <_vfprintf_r+0x1180>
    d5c4:	0c410613          	add	a2,sp,196
    d5c8:	00048593          	mv	a1,s1
    d5cc:	000b0513          	mv	a0,s6
    d5d0:	2780b0ef          	jal	18848 <__sprint_r>
    d5d4:	ca051ee3          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d5d8:	0cc12603          	lw	a2,204(sp)
    d5dc:	0c812783          	lw	a5,200(sp)
    d5e0:	0ec10993          	add	s3,sp,236
    d5e4:	fb9ff06f          	j	d59c <_vfprintf_r+0x1180>
    d5e8:	001d7613          	and	a2,s10,1
    d5ec:	c4061263          	bnez	a2,ca30 <_vfprintf_r+0x614>
    d5f0:	00e9a223          	sw	a4,4(s3)
    d5f4:	0db12623          	sw	s11,204(sp)
    d5f8:	0d212423          	sw	s2,200(sp)
    d5fc:	00700793          	li	a5,7
    d600:	cf27d663          	bge	a5,s2,caec <_vfprintf_r+0x6d0>
    d604:	0c410613          	add	a2,sp,196
    d608:	00048593          	mv	a1,s1
    d60c:	000b0513          	mv	a0,s6
    d610:	2380b0ef          	jal	18848 <__sprint_r>
    d614:	c6051ee3          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d618:	0cc12d83          	lw	s11,204(sp)
    d61c:	0c812903          	lw	s2,200(sp)
    d620:	0ec10a93          	add	s5,sp,236
    d624:	cc8ff06f          	j	caec <_vfprintf_r+0x6d0>
    d628:	01412703          	lw	a4,20(sp)
    d62c:	00100793          	li	a5,1
    d630:	cae7de63          	bge	a5,a4,caec <_vfprintf_r+0x6d0>
    d634:	01100793          	li	a5,17
    d638:	00016e97          	auipc	t4,0x16
    d63c:	dd4e8e93          	add	t4,t4,-556 # 2340c <zeroes.0>
    d640:	74e7d863          	bge	a5,a4,dd90 <_vfprintf_r+0x1974>
    d644:	01412823          	sw	s4,16(sp)
    d648:	01000793          	li	a5,16
    d64c:	00700c93          	li	s9,7
    d650:	000e8a13          	mv	s4,t4
    d654:	00c0006f          	j	d660 <_vfprintf_r+0x1244>
    d658:	ff098993          	add	s3,s3,-16
    d65c:	7337d663          	bge	a5,s3,dd88 <_vfprintf_r+0x196c>
    d660:	010d8d93          	add	s11,s11,16
    d664:	00190913          	add	s2,s2,1
    d668:	014aa023          	sw	s4,0(s5)
    d66c:	00faa223          	sw	a5,4(s5)
    d670:	0db12623          	sw	s11,204(sp)
    d674:	0d212423          	sw	s2,200(sp)
    d678:	008a8a93          	add	s5,s5,8
    d67c:	fd2cdee3          	bge	s9,s2,d658 <_vfprintf_r+0x123c>
    d680:	0c410613          	add	a2,sp,196
    d684:	00048593          	mv	a1,s1
    d688:	000b0513          	mv	a0,s6
    d68c:	1bc0b0ef          	jal	18848 <__sprint_r>
    d690:	c00510e3          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d694:	0cc12d83          	lw	s11,204(sp)
    d698:	0c812903          	lw	s2,200(sp)
    d69c:	0ec10a93          	add	s5,sp,236
    d6a0:	01000793          	li	a5,16
    d6a4:	fb5ff06f          	j	d658 <_vfprintf_r+0x123c>
    d6a8:	00c12703          	lw	a4,12(sp)
    d6ac:	010d7793          	and	a5,s10,16
    d6b0:	00072d83          	lw	s11,0(a4)
    d6b4:	00470713          	add	a4,a4,4
    d6b8:	00e12623          	sw	a4,12(sp)
    d6bc:	16079e63          	bnez	a5,d838 <_vfprintf_r+0x141c>
    d6c0:	040d7793          	and	a5,s10,64
    d6c4:	16078663          	beqz	a5,d830 <_vfprintf_r+0x1414>
    d6c8:	010d9d93          	sll	s11,s11,0x10
    d6cc:	410ddd93          	sra	s11,s11,0x10
    d6d0:	41fdd913          	sra	s2,s11,0x1f
    d6d4:	00090793          	mv	a5,s2
    d6d8:	cc07d063          	bgez	a5,cb98 <_vfprintf_r+0x77c>
    d6dc:	01b037b3          	snez	a5,s11
    d6e0:	41200733          	neg	a4,s2
    d6e4:	40f70933          	sub	s2,a4,a5
    d6e8:	41b00db3          	neg	s11,s11
    d6ec:	000d0613          	mv	a2,s10
    d6f0:	02d00693          	li	a3,45
    d6f4:	00100793          	li	a5,1
    d6f8:	de8ff06f          	j	cce0 <_vfprintf_r+0x8c4>
    d6fc:	00c12703          	lw	a4,12(sp)
    d700:	010d7793          	and	a5,s10,16
    d704:	00072d83          	lw	s11,0(a4)
    d708:	00470713          	add	a4,a4,4
    d70c:	00e12623          	sw	a4,12(sp)
    d710:	12079e63          	bnez	a5,d84c <_vfprintf_r+0x1430>
    d714:	040d7793          	and	a5,s10,64
    d718:	12078663          	beqz	a5,d844 <_vfprintf_r+0x1428>
    d71c:	010d9d93          	sll	s11,s11,0x10
    d720:	010ddd93          	srl	s11,s11,0x10
    d724:	00000913          	li	s2,0
    d728:	dacff06f          	j	ccd4 <_vfprintf_r+0x8b8>
    d72c:	00c12703          	lw	a4,12(sp)
    d730:	01067793          	and	a5,a2,16
    d734:	00072d83          	lw	s11,0(a4)
    d738:	00470713          	add	a4,a4,4
    d73c:	00e12623          	sw	a4,12(sp)
    d740:	0e079263          	bnez	a5,d824 <_vfprintf_r+0x1408>
    d744:	04067793          	and	a5,a2,64
    d748:	0c078863          	beqz	a5,d818 <_vfprintf_r+0x13fc>
    d74c:	010d9d93          	sll	s11,s11,0x10
    d750:	010ddd93          	srl	s11,s11,0x10
    d754:	00000913          	li	s2,0
    d758:	00100793          	li	a5,1
    d75c:	d80ff06f          	j	ccdc <_vfprintf_r+0x8c0>
    d760:	00000913          	li	s2,0
    d764:	19010c93          	add	s9,sp,400
    d768:	d1cff06f          	j	cc84 <_vfprintf_r+0x868>
    d76c:	001d7793          	and	a5,s10,1
    d770:	00079463          	bnez	a5,d778 <_vfprintf_r+0x135c>
    d774:	fa5fe06f          	j	c718 <_vfprintf_r+0x2fc>
    d778:	fbcff06f          	j	cf34 <_vfprintf_r+0xb18>
    d77c:	0584a503          	lw	a0,88(s1)
    d780:	3f9050ef          	jal	13378 <__retarget_lock_acquire_recursive>
    d784:	00c49703          	lh	a4,12(s1)
    d788:	d0dfe06f          	j	c494 <_vfprintf_r+0x78>
    d78c:	000a4883          	lbu	a7,0(s4)
    d790:	00f12623          	sw	a5,12(sp)
    d794:	e31fe06f          	j	c5c4 <_vfprintf_r+0x1a8>
    d798:	0c812703          	lw	a4,200(sp)
    d79c:	00016517          	auipc	a0,0x16
    d7a0:	96450513          	add	a0,a0,-1692 # 23100 <OSUnMapTbl+0x19c>
    d7a4:	00a9a023          	sw	a0,0(s3)
    d7a8:	00160613          	add	a2,a2,1
    d7ac:	00100513          	li	a0,1
    d7b0:	00170713          	add	a4,a4,1
    d7b4:	00a9a223          	sw	a0,4(s3)
    d7b8:	0cc12623          	sw	a2,204(sp)
    d7bc:	0ce12423          	sw	a4,200(sp)
    d7c0:	00700513          	li	a0,7
    d7c4:	00898993          	add	s3,s3,8
    d7c8:	02e54ce3          	blt	a0,a4,e000 <_vfprintf_r+0x1be4>
    d7cc:	54059e63          	bnez	a1,dd28 <_vfprintf_r+0x190c>
    d7d0:	01412783          	lw	a5,20(sp)
    d7d4:	001d7713          	and	a4,s10,1
    d7d8:	00f76733          	or	a4,a4,a5
    d7dc:	00071463          	bnez	a4,d7e4 <_vfprintf_r+0x13c8>
    d7e0:	f39fe06f          	j	c718 <_vfprintf_r+0x2fc>
    d7e4:	02812703          	lw	a4,40(sp)
    d7e8:	02412783          	lw	a5,36(sp)
    d7ec:	00700593          	li	a1,7
    d7f0:	00e9a023          	sw	a4,0(s3)
    d7f4:	0c812703          	lw	a4,200(sp)
    d7f8:	00c78633          	add	a2,a5,a2
    d7fc:	00f9a223          	sw	a5,4(s3)
    d800:	00170713          	add	a4,a4,1
    d804:	0cc12623          	sw	a2,204(sp)
    d808:	0ce12423          	sw	a4,200(sp)
    d80c:	0ae5c0e3          	blt	a1,a4,e0ac <_vfprintf_r+0x1c90>
    d810:	00898993          	add	s3,s3,8
    d814:	5480006f          	j	dd5c <_vfprintf_r+0x1940>
    d818:	20067793          	and	a5,a2,512
    d81c:	00078463          	beqz	a5,d824 <_vfprintf_r+0x1408>
    d820:	0ffdfd93          	zext.b	s11,s11
    d824:	00000913          	li	s2,0
    d828:	00100793          	li	a5,1
    d82c:	cb0ff06f          	j	ccdc <_vfprintf_r+0x8c0>
    d830:	200d7793          	and	a5,s10,512
    d834:	00079ae3          	bnez	a5,e048 <_vfprintf_r+0x1c2c>
    d838:	41fdd913          	sra	s2,s11,0x1f
    d83c:	00090793          	mv	a5,s2
    d840:	b54ff06f          	j	cb94 <_vfprintf_r+0x778>
    d844:	200d7793          	and	a5,s10,512
    d848:	7e079a63          	bnez	a5,e03c <_vfprintf_r+0x1c20>
    d84c:	00000913          	li	s2,0
    d850:	c84ff06f          	j	ccd4 <_vfprintf_r+0x8b8>
    d854:	010d7793          	and	a5,s10,16
    d858:	40079063          	bnez	a5,dc58 <_vfprintf_r+0x183c>
    d85c:	040d7793          	and	a5,s10,64
    d860:	000794e3          	bnez	a5,e068 <_vfprintf_r+0x1c4c>
    d864:	200d7e13          	and	t3,s10,512
    d868:	3e0e0863          	beqz	t3,dc58 <_vfprintf_r+0x183c>
    d86c:	00c12783          	lw	a5,12(sp)
    d870:	00412703          	lw	a4,4(sp)
    d874:	0007a783          	lw	a5,0(a5)
    d878:	00e78023          	sb	a4,0(a5)
    d87c:	ce0ff06f          	j	cd5c <_vfprintf_r+0x940>
    d880:	00c12783          	lw	a5,12(sp)
    d884:	0007a703          	lw	a4,0(a5)
    d888:	00478793          	add	a5,a5,4
    d88c:	00f12623          	sw	a5,12(sp)
    d890:	00072583          	lw	a1,0(a4)
    d894:	00472603          	lw	a2,4(a4)
    d898:	00872683          	lw	a3,8(a4)
    d89c:	00c72703          	lw	a4,12(a4)
    d8a0:	868ff06f          	j	c908 <_vfprintf_r+0x4ec>
    d8a4:	03812783          	lw	a5,56(sp)
    d8a8:	000a4883          	lbu	a7,0(s4)
    d8ac:	00079463          	bnez	a5,d8b4 <_vfprintf_r+0x1498>
    d8b0:	d15fe06f          	j	c5c4 <_vfprintf_r+0x1a8>
    d8b4:	0007c783          	lbu	a5,0(a5)
    d8b8:	00079463          	bnez	a5,d8c0 <_vfprintf_r+0x14a4>
    d8bc:	d09fe06f          	j	c5c4 <_vfprintf_r+0x1a8>
    d8c0:	400d6d13          	or	s10,s10,1024
    d8c4:	d01fe06f          	j	c5c4 <_vfprintf_r+0x1a8>
    d8c8:	fff00a93          	li	s5,-1
    d8cc:	00068a13          	mv	s4,a3
    d8d0:	cf9fe06f          	j	c5c8 <_vfprintf_r+0x1ac>
    d8d4:	000d0613          	mv	a2,s10
    d8d8:	cfcff06f          	j	cdd4 <_vfprintf_r+0x9b8>
    d8dc:	00016797          	auipc	a5,0x16
    d8e0:	80878793          	add	a5,a5,-2040 # 230e4 <OSUnMapTbl+0x180>
    d8e4:	02f12623          	sw	a5,44(sp)
    d8e8:	020d7793          	and	a5,s10,32
    d8ec:	16078063          	beqz	a5,da4c <_vfprintf_r+0x1630>
    d8f0:	00c12783          	lw	a5,12(sp)
    d8f4:	00778b93          	add	s7,a5,7
    d8f8:	ff8bfb93          	and	s7,s7,-8
    d8fc:	000bad83          	lw	s11,0(s7)
    d900:	004ba903          	lw	s2,4(s7)
    d904:	008b8793          	add	a5,s7,8
    d908:	00f12623          	sw	a5,12(sp)
    d90c:	001d7793          	and	a5,s10,1
    d910:	00078e63          	beqz	a5,d92c <_vfprintf_r+0x1510>
    d914:	012de7b3          	or	a5,s11,s2
    d918:	00078a63          	beqz	a5,d92c <_vfprintf_r+0x1510>
    d91c:	03000793          	li	a5,48
    d920:	0af10423          	sb	a5,168(sp)
    d924:	0b1104a3          	sb	a7,169(sp)
    d928:	002d6d13          	or	s10,s10,2
    d92c:	bffd7613          	and	a2,s10,-1025
    d930:	00200793          	li	a5,2
    d934:	ba8ff06f          	j	ccdc <_vfprintf_r+0x8c0>
    d938:	001a4883          	lbu	a7,1(s4)
    d93c:	200d6d13          	or	s10,s10,512
    d940:	001a0a13          	add	s4,s4,1
    d944:	c81fe06f          	j	c5c4 <_vfprintf_r+0x1a8>
    d948:	001a4883          	lbu	a7,1(s4)
    d94c:	020d6d13          	or	s10,s10,32
    d950:	001a0a13          	add	s4,s4,1
    d954:	c71fe06f          	j	c5c4 <_vfprintf_r+0x1a8>
    d958:	00015797          	auipc	a5,0x15
    d95c:	77878793          	add	a5,a5,1912 # 230d0 <OSUnMapTbl+0x16c>
    d960:	02f12623          	sw	a5,44(sp)
    d964:	f85ff06f          	j	d8e8 <_vfprintf_r+0x14cc>
    d968:	0c410613          	add	a2,sp,196
    d96c:	00048593          	mv	a1,s1
    d970:	000b0513          	mv	a0,s6
    d974:	6d50a0ef          	jal	18848 <__sprint_r>
    d978:	90051ce3          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d97c:	0cc12603          	lw	a2,204(sp)
    d980:	0ec10993          	add	s3,sp,236
    d984:	de0ff06f          	j	cf64 <_vfprintf_r+0xb48>
    d988:	00600793          	li	a5,6
    d98c:	000a8913          	mv	s2,s5
    d990:	6957ea63          	bltu	a5,s5,e024 <_vfprintf_r+0x1c08>
    d994:	00090b93          	mv	s7,s2
    d998:	01b12623          	sw	s11,12(sp)
    d99c:	00015c97          	auipc	s9,0x15
    d9a0:	75cc8c93          	add	s9,s9,1884 # 230f8 <OSUnMapTbl+0x194>
    d9a4:	c95fe06f          	j	c638 <_vfprintf_r+0x21c>
    d9a8:	02812703          	lw	a4,40(sp)
    d9ac:	02412783          	lw	a5,36(sp)
    d9b0:	00700513          	li	a0,7
    d9b4:	00e9a023          	sw	a4,0(s3)
    d9b8:	0c812703          	lw	a4,200(sp)
    d9bc:	00f60633          	add	a2,a2,a5
    d9c0:	00f9a223          	sw	a5,4(s3)
    d9c4:	00170713          	add	a4,a4,1
    d9c8:	0cc12623          	sw	a2,204(sp)
    d9cc:	0ce12423          	sw	a4,200(sp)
    d9d0:	00898993          	add	s3,s3,8
    d9d4:	b4e554e3          	bge	a0,a4,d51c <_vfprintf_r+0x1100>
    d9d8:	0c410613          	add	a2,sp,196
    d9dc:	00048593          	mv	a1,s1
    d9e0:	000b0513          	mv	a0,s6
    d9e4:	6650a0ef          	jal	18848 <__sprint_r>
    d9e8:	8a0514e3          	bnez	a0,d290 <_vfprintf_r+0xe74>
    d9ec:	0ac12583          	lw	a1,172(sp)
    d9f0:	0cc12603          	lw	a2,204(sp)
    d9f4:	0ec10993          	add	s3,sp,236
    d9f8:	b25ff06f          	j	d51c <_vfprintf_r+0x1100>
    d9fc:	07800793          	li	a5,120
    da00:	03000713          	li	a4,48
    da04:	0ae10423          	sb	a4,168(sp)
    da08:	0af104a3          	sb	a5,169(sp)
    da0c:	06300713          	li	a4,99
    da10:	00012423          	sw	zero,8(sp)
    da14:	002d6d13          	or	s10,s10,2
    da18:	12c10c93          	add	s9,sp,300
    da1c:	01574463          	blt	a4,s5,da24 <_vfprintf_r+0x1608>
    da20:	f65fe06f          	j	c984 <_vfprintf_r+0x568>
    da24:	001a8593          	add	a1,s5,1
    da28:	000b0513          	mv	a0,s6
    da2c:	01112423          	sw	a7,8(sp)
    da30:	3e1050ef          	jal	13610 <_malloc_r>
    da34:	00812883          	lw	a7,8(sp)
    da38:	00050c93          	mv	s9,a0
    da3c:	00051463          	bnez	a0,da44 <_vfprintf_r+0x1628>
    da40:	2b00106f          	j	ecf0 <_vfprintf_r+0x28d4>
    da44:	00a12423          	sw	a0,8(sp)
    da48:	f3dfe06f          	j	c984 <_vfprintf_r+0x568>
    da4c:	00c12703          	lw	a4,12(sp)
    da50:	010d7793          	and	a5,s10,16
    da54:	00072d83          	lw	s11,0(a4)
    da58:	00470713          	add	a4,a4,4
    da5c:	00e12623          	sw	a4,12(sp)
    da60:	06079663          	bnez	a5,dacc <_vfprintf_r+0x16b0>
    da64:	040d7793          	and	a5,s10,64
    da68:	04078e63          	beqz	a5,dac4 <_vfprintf_r+0x16a8>
    da6c:	010d9d93          	sll	s11,s11,0x10
    da70:	010ddd93          	srl	s11,s11,0x10
    da74:	00000913          	li	s2,0
    da78:	e95ff06f          	j	d90c <_vfprintf_r+0x14f0>
    da7c:	0c410613          	add	a2,sp,196
    da80:	00048593          	mv	a1,s1
    da84:	000b0513          	mv	a0,s6
    da88:	5c10a0ef          	jal	18848 <__sprint_r>
    da8c:	800512e3          	bnez	a0,d290 <_vfprintf_r+0xe74>
    da90:	0cc12d83          	lw	s11,204(sp)
    da94:	0c812903          	lw	s2,200(sp)
    da98:	0ec10a93          	add	s5,sp,236
    da9c:	fb1fe06f          	j	ca4c <_vfprintf_r+0x630>
    daa0:	0c410613          	add	a2,sp,196
    daa4:	00048593          	mv	a1,s1
    daa8:	000b0513          	mv	a0,s6
    daac:	59d0a0ef          	jal	18848 <__sprint_r>
    dab0:	fe051063          	bnez	a0,d290 <_vfprintf_r+0xe74>
    dab4:	0cc12d83          	lw	s11,204(sp)
    dab8:	0c812903          	lw	s2,200(sp)
    dabc:	0ec10a93          	add	s5,sp,236
    dac0:	fbdfe06f          	j	ca7c <_vfprintf_r+0x660>
    dac4:	200d7793          	and	a5,s10,512
    dac8:	58079a63          	bnez	a5,e05c <_vfprintf_r+0x1c40>
    dacc:	00000913          	li	s2,0
    dad0:	e3dff06f          	j	d90c <_vfprintf_r+0x14f0>
    dad4:	19010b93          	add	s7,sp,400
    dad8:	00000793          	li	a5,0
    dadc:	01412423          	sw	s4,8(sp)
    dae0:	01312a23          	sw	s3,20(sp)
    dae4:	00912c23          	sw	s1,24(sp)
    dae8:	000b8993          	mv	s3,s7
    daec:	03812483          	lw	s1,56(sp)
    daf0:	40067d13          	and	s10,a2,1024
    daf4:	01112823          	sw	a7,16(sp)
    daf8:	00060b93          	mv	s7,a2
    dafc:	00078a13          	mv	s4,a5
    db00:	0280006f          	j	db28 <_vfprintf_r+0x170c>
    db04:	00a00613          	li	a2,10
    db08:	00000693          	li	a3,0
    db0c:	000d8513          	mv	a0,s11
    db10:	00090593          	mv	a1,s2
    db14:	2390e0ef          	jal	1c54c <__udivdi3>
    db18:	5c0908e3          	beqz	s2,e8e8 <_vfprintf_r+0x24cc>
    db1c:	00050d93          	mv	s11,a0
    db20:	00058913          	mv	s2,a1
    db24:	000c8993          	mv	s3,s9
    db28:	00a00613          	li	a2,10
    db2c:	00000693          	li	a3,0
    db30:	000d8513          	mv	a0,s11
    db34:	00090593          	mv	a1,s2
    db38:	0a00f0ef          	jal	1cbd8 <__umoddi3>
    db3c:	03050513          	add	a0,a0,48
    db40:	fea98fa3          	sb	a0,-1(s3)
    db44:	fff98c93          	add	s9,s3,-1
    db48:	001a0a13          	add	s4,s4,1
    db4c:	fa0d0ce3          	beqz	s10,db04 <_vfprintf_r+0x16e8>
    db50:	0004c783          	lbu	a5,0(s1)
    db54:	fafa18e3          	bne	s4,a5,db04 <_vfprintf_r+0x16e8>
    db58:	0ff00793          	li	a5,255
    db5c:	fafa04e3          	beq	s4,a5,db04 <_vfprintf_r+0x16e8>
    db60:	2a091863          	bnez	s2,de10 <_vfprintf_r+0x19f4>
    db64:	00900793          	li	a5,9
    db68:	2bb7e463          	bltu	a5,s11,de10 <_vfprintf_r+0x19f4>
    db6c:	000b8613          	mv	a2,s7
    db70:	19010793          	add	a5,sp,400
    db74:	01412983          	lw	s3,20(sp)
    db78:	02912c23          	sw	s1,56(sp)
    db7c:	01412a23          	sw	s4,20(sp)
    db80:	01012883          	lw	a7,16(sp)
    db84:	00812a03          	lw	s4,8(sp)
    db88:	01812483          	lw	s1,24(sp)
    db8c:	41978933          	sub	s2,a5,s9
    db90:	00060d13          	mv	s10,a2
    db94:	8f0ff06f          	j	cc84 <_vfprintf_r+0x868>
    db98:	0c410613          	add	a2,sp,196
    db9c:	00048593          	mv	a1,s1
    dba0:	000b0513          	mv	a0,s6
    dba4:	4a50a0ef          	jal	18848 <__sprint_r>
    dba8:	ee051463          	bnez	a0,d290 <_vfprintf_r+0xe74>
    dbac:	0cc12603          	lw	a2,204(sp)
    dbb0:	0ec10993          	add	s3,sp,236
    dbb4:	b74ff06f          	j	cf28 <_vfprintf_r+0xb0c>
    dbb8:	000c8e93          	mv	t4,s9
    dbbc:	01260633          	add	a2,a2,s2
    dbc0:	00178793          	add	a5,a5,1
    dbc4:	01d9a023          	sw	t4,0(s3)
    dbc8:	b39fe06f          	j	c700 <_vfprintf_r+0x2e4>
    dbcc:	0d012783          	lw	a5,208(sp)
    dbd0:	08010593          	add	a1,sp,128
    dbd4:	09010513          	add	a0,sp,144
    dbd8:	08f12823          	sw	a5,144(sp)
    dbdc:	0d412783          	lw	a5,212(sp)
    dbe0:	08012023          	sw	zero,128(sp)
    dbe4:	08012223          	sw	zero,132(sp)
    dbe8:	08f12a23          	sw	a5,148(sp)
    dbec:	0d812783          	lw	a5,216(sp)
    dbf0:	08012423          	sw	zero,136(sp)
    dbf4:	08012623          	sw	zero,140(sp)
    dbf8:	08f12c23          	sw	a5,152(sp)
    dbfc:	0dc12783          	lw	a5,220(sp)
    dc00:	08f12e23          	sw	a5,156(sp)
    dc04:	055100ef          	jal	1e458 <__letf2>
    dc08:	00812883          	lw	a7,8(sp)
    dc0c:	42054063          	bltz	a0,e02c <_vfprintf_r+0x1c10>
    dc10:	0a714703          	lbu	a4,167(sp)
    dc14:	04700693          	li	a3,71
    dc18:	00015c97          	auipc	s9,0x15
    dc1c:	4acc8c93          	add	s9,s9,1196 # 230c4 <OSUnMapTbl+0x160>
    dc20:	0116c663          	blt	a3,a7,dc2c <_vfprintf_r+0x1810>
    dc24:	00015c97          	auipc	s9,0x15
    dc28:	49cc8c93          	add	s9,s9,1180 # 230c0 <OSUnMapTbl+0x15c>
    dc2c:	00012423          	sw	zero,8(sp)
    dc30:	00012e23          	sw	zero,28(sp)
    dc34:	00012c23          	sw	zero,24(sp)
    dc38:	00012823          	sw	zero,16(sp)
    dc3c:	f7fd7d13          	and	s10,s10,-129
    dc40:	00300b93          	li	s7,3
    dc44:	00300913          	li	s2,3
    dc48:	00000a93          	li	s5,0
    dc4c:	00070463          	beqz	a4,dc54 <_vfprintf_r+0x1838>
    dc50:	80cff06f          	j	cc5c <_vfprintf_r+0x840>
    dc54:	9f9fe06f          	j	c64c <_vfprintf_r+0x230>
    dc58:	00c12783          	lw	a5,12(sp)
    dc5c:	00412703          	lw	a4,4(sp)
    dc60:	0007a783          	lw	a5,0(a5)
    dc64:	00e7a023          	sw	a4,0(a5)
    dc68:	8f4ff06f          	j	cd5c <_vfprintf_r+0x940>
    dc6c:	00015e97          	auipc	t4,0x15
    dc70:	7a0e8e93          	add	t4,t4,1952 # 2340c <zeroes.0>
    dc74:	01000593          	li	a1,16
    dc78:	0c812703          	lw	a4,200(sp)
    dc7c:	01000813          	li	a6,16
    dc80:	00700913          	li	s2,7
    dc84:	000e8d93          	mv	s11,t4
    dc88:	0155c863          	blt	a1,s5,dc98 <_vfprintf_r+0x187c>
    dc8c:	1400006f          	j	ddcc <_vfprintf_r+0x19b0>
    dc90:	ff0a8a93          	add	s5,s5,-16
    dc94:	13585a63          	bge	a6,s5,ddc8 <_vfprintf_r+0x19ac>
    dc98:	01060613          	add	a2,a2,16
    dc9c:	00170713          	add	a4,a4,1
    dca0:	01b9a023          	sw	s11,0(s3)
    dca4:	0109a223          	sw	a6,4(s3)
    dca8:	0cc12623          	sw	a2,204(sp)
    dcac:	0ce12423          	sw	a4,200(sp)
    dcb0:	00898993          	add	s3,s3,8
    dcb4:	fce95ee3          	bge	s2,a4,dc90 <_vfprintf_r+0x1874>
    dcb8:	0c410613          	add	a2,sp,196
    dcbc:	00048593          	mv	a1,s1
    dcc0:	000b0513          	mv	a0,s6
    dcc4:	3850a0ef          	jal	18848 <__sprint_r>
    dcc8:	dc051463          	bnez	a0,d290 <_vfprintf_r+0xe74>
    dccc:	0cc12603          	lw	a2,204(sp)
    dcd0:	0c812703          	lw	a4,200(sp)
    dcd4:	0ec10993          	add	s3,sp,236
    dcd8:	01000813          	li	a6,16
    dcdc:	fb5ff06f          	j	dc90 <_vfprintf_r+0x1874>
    dce0:	000c8513          	mv	a0,s9
    dce4:	03112823          	sw	a7,48(sp)
    dce8:	e54fe0ef          	jal	c33c <strlen>
    dcec:	0a714703          	lbu	a4,167(sp)
    dcf0:	fff54693          	not	a3,a0
    dcf4:	41f6d693          	sra	a3,a3,0x1f
    dcf8:	01b12623          	sw	s11,12(sp)
    dcfc:	00012423          	sw	zero,8(sp)
    dd00:	00012e23          	sw	zero,28(sp)
    dd04:	00012c23          	sw	zero,24(sp)
    dd08:	00012823          	sw	zero,16(sp)
    dd0c:	03012883          	lw	a7,48(sp)
    dd10:	00050913          	mv	s2,a0
    dd14:	00d57bb3          	and	s7,a0,a3
    dd18:	00000a93          	li	s5,0
    dd1c:	00070463          	beqz	a4,dd24 <_vfprintf_r+0x1908>
    dd20:	f3dfe06f          	j	cc5c <_vfprintf_r+0x840>
    dd24:	929fe06f          	j	c64c <_vfprintf_r+0x230>
    dd28:	02812703          	lw	a4,40(sp)
    dd2c:	02412783          	lw	a5,36(sp)
    dd30:	00700513          	li	a0,7
    dd34:	00e9a023          	sw	a4,0(s3)
    dd38:	0c812703          	lw	a4,200(sp)
    dd3c:	00c78633          	add	a2,a5,a2
    dd40:	00f9a223          	sw	a5,4(s3)
    dd44:	00170713          	add	a4,a4,1
    dd48:	0cc12623          	sw	a2,204(sp)
    dd4c:	0ce12423          	sw	a4,200(sp)
    dd50:	00898993          	add	s3,s3,8
    dd54:	34e54c63          	blt	a0,a4,e0ac <_vfprintf_r+0x1c90>
    dd58:	4005c4e3          	bltz	a1,e960 <_vfprintf_r+0x2544>
    dd5c:	01412783          	lw	a5,20(sp)
    dd60:	00170713          	add	a4,a4,1
    dd64:	0199a023          	sw	s9,0(s3)
    dd68:	00c78633          	add	a2,a5,a2
    dd6c:	00f9a223          	sw	a5,4(s3)
    dd70:	0cc12623          	sw	a2,204(sp)
    dd74:	0ce12423          	sw	a4,200(sp)
    dd78:	00700793          	li	a5,7
    dd7c:	00e7c463          	blt	a5,a4,dd84 <_vfprintf_r+0x1968>
    dd80:	995fe06f          	j	c714 <_vfprintf_r+0x2f8>
    dd84:	d95fe06f          	j	cb18 <_vfprintf_r+0x6fc>
    dd88:	000a0e93          	mv	t4,s4
    dd8c:	01012a03          	lw	s4,16(sp)
    dd90:	013d8db3          	add	s11,s11,s3
    dd94:	00190913          	add	s2,s2,1
    dd98:	01daa023          	sw	t4,0(s5)
    dd9c:	d39fe06f          	j	cad4 <_vfprintf_r+0x6b8>
    dda0:	0dc12783          	lw	a5,220(sp)
    dda4:	2c07cc63          	bltz	a5,e07c <_vfprintf_r+0x1c60>
    dda8:	0a714703          	lbu	a4,167(sp)
    ddac:	04700693          	li	a3,71
    ddb0:	00015c97          	auipc	s9,0x15
    ddb4:	31cc8c93          	add	s9,s9,796 # 230cc <OSUnMapTbl+0x168>
    ddb8:	e716cae3          	blt	a3,a7,dc2c <_vfprintf_r+0x1810>
    ddbc:	00015c97          	auipc	s9,0x15
    ddc0:	30cc8c93          	add	s9,s9,780 # 230c8 <OSUnMapTbl+0x164>
    ddc4:	e69ff06f          	j	dc2c <_vfprintf_r+0x1810>
    ddc8:	000d8e93          	mv	t4,s11
    ddcc:	01560633          	add	a2,a2,s5
    ddd0:	00170713          	add	a4,a4,1
    ddd4:	01d9a023          	sw	t4,0(s3)
    ddd8:	0159a223          	sw	s5,4(s3)
    dddc:	0cc12623          	sw	a2,204(sp)
    dde0:	0ce12423          	sw	a4,200(sp)
    dde4:	00700593          	li	a1,7
    dde8:	00898993          	add	s3,s3,8
    ddec:	f0e5d463          	bge	a1,a4,d4f4 <_vfprintf_r+0x10d8>
    ddf0:	0c410613          	add	a2,sp,196
    ddf4:	00048593          	mv	a1,s1
    ddf8:	000b0513          	mv	a0,s6
    ddfc:	24d0a0ef          	jal	18848 <__sprint_r>
    de00:	c8051863          	bnez	a0,d290 <_vfprintf_r+0xe74>
    de04:	0cc12603          	lw	a2,204(sp)
    de08:	0ec10993          	add	s3,sp,236
    de0c:	ee8ff06f          	j	d4f4 <_vfprintf_r+0x10d8>
    de10:	03c12783          	lw	a5,60(sp)
    de14:	04012583          	lw	a1,64(sp)
    de18:	00000a13          	li	s4,0
    de1c:	40fc8cb3          	sub	s9,s9,a5
    de20:	00078613          	mv	a2,a5
    de24:	000c8513          	mv	a0,s9
    de28:	669070ef          	jal	15c90 <strncpy>
    de2c:	0014c783          	lbu	a5,1(s1)
    de30:	00a00613          	li	a2,10
    de34:	00000693          	li	a3,0
    de38:	00f037b3          	snez	a5,a5
    de3c:	000d8513          	mv	a0,s11
    de40:	00090593          	mv	a1,s2
    de44:	00f484b3          	add	s1,s1,a5
    de48:	7040e0ef          	jal	1c54c <__udivdi3>
    de4c:	cd1ff06f          	j	db1c <_vfprintf_r+0x1700>
    de50:	09010913          	add	s2,sp,144
    de54:	0ac10713          	add	a4,sp,172
    de58:	0bc10813          	add	a6,sp,188
    de5c:	0b010793          	add	a5,sp,176
    de60:	000a8693          	mv	a3,s5
    de64:	00200613          	li	a2,2
    de68:	00090593          	mv	a1,s2
    de6c:	000b0513          	mv	a0,s6
    de70:	01112e23          	sw	a7,28(sp)
    de74:	09f12823          	sw	t6,144(sp)
    de78:	01f12c23          	sw	t6,24(sp)
    de7c:	09e12a23          	sw	t5,148(sp)
    de80:	01e12a23          	sw	t5,20(sp)
    de84:	09d12c23          	sw	t4,152(sp)
    de88:	01d12823          	sw	t4,16(sp)
    de8c:	09712e23          	sw	s7,156(sp)
    de90:	108040ef          	jal	11f98 <_ldtoa_r>
    de94:	001d7713          	and	a4,s10,1
    de98:	01012e83          	lw	t4,16(sp)
    de9c:	01412f03          	lw	t5,20(sp)
    dea0:	01812f83          	lw	t6,24(sp)
    dea4:	01c12883          	lw	a7,28(sp)
    dea8:	00050c93          	mv	s9,a0
    deac:	320716e3          	bnez	a4,e9d8 <_vfprintf_r+0x25bc>
    deb0:	0ac12783          	lw	a5,172(sp)
    deb4:	00f12823          	sw	a5,16(sp)
    deb8:	0bc12783          	lw	a5,188(sp)
    debc:	40a787b3          	sub	a5,a5,a0
    dec0:	00f12a23          	sw	a5,20(sp)
    dec4:	01012783          	lw	a5,16(sp)
    dec8:	ffd00713          	li	a4,-3
    decc:	00e7c463          	blt	a5,a4,ded4 <_vfprintf_r+0x1ab8>
    ded0:	16fad8e3          	bge	s5,a5,e840 <_vfprintf_r+0x2424>
    ded4:	01012783          	lw	a5,16(sp)
    ded8:	ffe88893          	add	a7,a7,-2
    dedc:	fff78a93          	add	s5,a5,-1
    dee0:	0b512623          	sw	s5,172(sp)
    dee4:	0ff8f693          	zext.b	a3,a7
    dee8:	00000613          	li	a2,0
    deec:	0ad10a23          	sb	a3,180(sp)
    def0:	02b00693          	li	a3,43
    def4:	000ada63          	bgez	s5,df08 <_vfprintf_r+0x1aec>
    def8:	01012783          	lw	a5,16(sp)
    defc:	00100713          	li	a4,1
    df00:	02d00693          	li	a3,45
    df04:	40f70ab3          	sub	s5,a4,a5
    df08:	0ad10aa3          	sb	a3,181(sp)
    df0c:	00900693          	li	a3,9
    df10:	4556d2e3          	bge	a3,s5,eb54 <_vfprintf_r+0x2738>
    df14:	0c310913          	add	s2,sp,195
    df18:	00088d93          	mv	s11,a7
    df1c:	00912823          	sw	s1,16(sp)
    df20:	00a00593          	li	a1,10
    df24:	000a8513          	mv	a0,s5
    df28:	4b5130ef          	jal	21bdc <__modsi3>
    df2c:	03050793          	add	a5,a0,48
    df30:	00090b93          	mv	s7,s2
    df34:	fefb8fa3          	sb	a5,-1(s7)
    df38:	000a8513          	mv	a0,s5
    df3c:	00a00593          	li	a1,10
    df40:	419130ef          	jal	21b58 <__divsi3>
    df44:	000a8493          	mv	s1,s5
    df48:	06300793          	li	a5,99
    df4c:	fff90913          	add	s2,s2,-1
    df50:	00050a93          	mv	s5,a0
    df54:	fc97c6e3          	blt	a5,s1,df20 <_vfprintf_r+0x1b04>
    df58:	03050713          	add	a4,a0,48
    df5c:	ffeb8693          	add	a3,s7,-2
    df60:	fee90fa3          	sb	a4,-1(s2)
    df64:	0c310793          	add	a5,sp,195
    df68:	01012483          	lw	s1,16(sp)
    df6c:	000d8893          	mv	a7,s11
    df70:	50f6fee3          	bgeu	a3,a5,ec8c <_vfprintf_r+0x2870>
    df74:	0b610613          	add	a2,sp,182
    df78:	0006c783          	lbu	a5,0(a3)
    df7c:	00168693          	add	a3,a3,1
    df80:	00160613          	add	a2,a2,1
    df84:	fef60fa3          	sb	a5,-1(a2)
    df88:	0c310793          	add	a5,sp,195
    df8c:	fef696e3          	bne	a3,a5,df78 <_vfprintf_r+0x1b5c>
    df90:	19010793          	add	a5,sp,400
    df94:	41778733          	sub	a4,a5,s7
    df98:	f3770793          	add	a5,a4,-201
    df9c:	02f12a23          	sw	a5,52(sp)
    dfa0:	01412783          	lw	a5,20(sp)
    dfa4:	03412683          	lw	a3,52(sp)
    dfa8:	00100713          	li	a4,1
    dfac:	00d78933          	add	s2,a5,a3
    dfb0:	3ef750e3          	bge	a4,a5,eb90 <_vfprintf_r+0x2774>
    dfb4:	02412783          	lw	a5,36(sp)
    dfb8:	00f90933          	add	s2,s2,a5
    dfbc:	fff94693          	not	a3,s2
    dfc0:	bffd7e13          	and	t3,s10,-1025
    dfc4:	41f6d693          	sra	a3,a3,0x1f
    dfc8:	100e6793          	or	a5,t3,256
    dfcc:	04f12223          	sw	a5,68(sp)
    dfd0:	00d97bb3          	and	s7,s2,a3
    dfd4:	00012e23          	sw	zero,28(sp)
    dfd8:	00012c23          	sw	zero,24(sp)
    dfdc:	00012823          	sw	zero,16(sp)
    dfe0:	03012783          	lw	a5,48(sp)
    dfe4:	60078863          	beqz	a5,e5f4 <_vfprintf_r+0x21d8>
    dfe8:	02d00713          	li	a4,45
    dfec:	04412d03          	lw	s10,68(sp)
    dff0:	0ae103a3          	sb	a4,167(sp)
    dff4:	00000a93          	li	s5,0
    dff8:	001b8b93          	add	s7,s7,1
    dffc:	e50fe06f          	j	c64c <_vfprintf_r+0x230>
    e000:	0c410613          	add	a2,sp,196
    e004:	00048593          	mv	a1,s1
    e008:	000b0513          	mv	a0,s6
    e00c:	03d0a0ef          	jal	18848 <__sprint_r>
    e010:	a8051063          	bnez	a0,d290 <_vfprintf_r+0xe74>
    e014:	0ac12583          	lw	a1,172(sp)
    e018:	0cc12603          	lw	a2,204(sp)
    e01c:	0ec10993          	add	s3,sp,236
    e020:	facff06f          	j	d7cc <_vfprintf_r+0x13b0>
    e024:	00600913          	li	s2,6
    e028:	96dff06f          	j	d994 <_vfprintf_r+0x1578>
    e02c:	02d00793          	li	a5,45
    e030:	0af103a3          	sb	a5,167(sp)
    e034:	02d00713          	li	a4,45
    e038:	bddff06f          	j	dc14 <_vfprintf_r+0x17f8>
    e03c:	0ffdfd93          	zext.b	s11,s11
    e040:	00000913          	li	s2,0
    e044:	c91fe06f          	j	ccd4 <_vfprintf_r+0x8b8>
    e048:	018d9d93          	sll	s11,s11,0x18
    e04c:	418ddd93          	sra	s11,s11,0x18
    e050:	41fdd913          	sra	s2,s11,0x1f
    e054:	00090793          	mv	a5,s2
    e058:	b3dfe06f          	j	cb94 <_vfprintf_r+0x778>
    e05c:	0ffdfd93          	zext.b	s11,s11
    e060:	00000913          	li	s2,0
    e064:	8a9ff06f          	j	d90c <_vfprintf_r+0x14f0>
    e068:	00c12783          	lw	a5,12(sp)
    e06c:	00412703          	lw	a4,4(sp)
    e070:	0007a783          	lw	a5,0(a5)
    e074:	00e79023          	sh	a4,0(a5)
    e078:	ce5fe06f          	j	cd5c <_vfprintf_r+0x940>
    e07c:	02d00793          	li	a5,45
    e080:	0af103a3          	sb	a5,167(sp)
    e084:	02d00713          	li	a4,45
    e088:	d25ff06f          	j	ddac <_vfprintf_r+0x1990>
    e08c:	02012503          	lw	a0,32(sp)
    e090:	0c410613          	add	a2,sp,196
    e094:	00048593          	mv	a1,s1
    e098:	7b00a0ef          	jal	18848 <__sprint_r>
    e09c:	00050463          	beqz	a0,e0a4 <_vfprintf_r+0x1c88>
    e0a0:	edcfe06f          	j	c77c <_vfprintf_r+0x360>
    e0a4:	0c012423          	sw	zero,200(sp)
    e0a8:	ed4fe06f          	j	c77c <_vfprintf_r+0x360>
    e0ac:	0c410613          	add	a2,sp,196
    e0b0:	00048593          	mv	a1,s1
    e0b4:	000b0513          	mv	a0,s6
    e0b8:	7900a0ef          	jal	18848 <__sprint_r>
    e0bc:	9c051a63          	bnez	a0,d290 <_vfprintf_r+0xe74>
    e0c0:	0ac12583          	lw	a1,172(sp)
    e0c4:	0cc12603          	lw	a2,204(sp)
    e0c8:	0c812703          	lw	a4,200(sp)
    e0cc:	0ec10993          	add	s3,sp,236
    e0d0:	c89ff06f          	j	dd58 <_vfprintf_r+0x193c>
    e0d4:	0584a503          	lw	a0,88(s1)
    e0d8:	2b8050ef          	jal	13390 <__retarget_lock_release_recursive>
    e0dc:	f40fe06f          	j	c81c <_vfprintf_r+0x400>
    e0e0:	001a8693          	add	a3,s5,1
    e0e4:	00200613          	li	a2,2
    e0e8:	09010913          	add	s2,sp,144
    e0ec:	0ac10713          	add	a4,sp,172
    e0f0:	00090593          	mv	a1,s2
    e0f4:	0bc10813          	add	a6,sp,188
    e0f8:	0b010793          	add	a5,sp,176
    e0fc:	000b0513          	mv	a0,s6
    e100:	05112423          	sw	a7,72(sp)
    e104:	00d12e23          	sw	a3,28(sp)
    e108:	09f12823          	sw	t6,144(sp)
    e10c:	01f12c23          	sw	t6,24(sp)
    e110:	09e12a23          	sw	t5,148(sp)
    e114:	01e12a23          	sw	t5,20(sp)
    e118:	09d12c23          	sw	t4,152(sp)
    e11c:	01d12823          	sw	t4,16(sp)
    e120:	09712e23          	sw	s7,156(sp)
    e124:	675030ef          	jal	11f98 <_ldtoa_r>
    e128:	04812883          	lw	a7,72(sp)
    e12c:	01c12683          	lw	a3,28(sp)
    e130:	04600593          	li	a1,70
    e134:	fdf8f613          	and	a2,a7,-33
    e138:	01012e83          	lw	t4,16(sp)
    e13c:	01412f03          	lw	t5,20(sp)
    e140:	01812f83          	lw	t6,24(sp)
    e144:	00050c93          	mv	s9,a0
    e148:	00d50733          	add	a4,a0,a3
    e14c:	3cb610e3          	bne	a2,a1,ed0c <_vfprintf_r+0x28f0>
    e150:	000cc503          	lbu	a0,0(s9)
    e154:	03000593          	li	a1,48
    e158:	0cb502e3          	beq	a0,a1,ea1c <_vfprintf_r+0x2600>
    e15c:	0ac12683          	lw	a3,172(sp)
    e160:	08010d93          	add	s11,sp,128
    e164:	00d70733          	add	a4,a4,a3
    e168:	000d8593          	mv	a1,s11
    e16c:	00090513          	mv	a0,s2
    e170:	00e12c23          	sw	a4,24(sp)
    e174:	00c12a23          	sw	a2,20(sp)
    e178:	01112823          	sw	a7,16(sp)
    e17c:	09f12823          	sw	t6,144(sp)
    e180:	09e12a23          	sw	t5,148(sp)
    e184:	09d12c23          	sw	t4,152(sp)
    e188:	09712e23          	sw	s7,156(sp)
    e18c:	08012023          	sw	zero,128(sp)
    e190:	08012223          	sw	zero,132(sp)
    e194:	08012423          	sw	zero,136(sp)
    e198:	08012623          	sw	zero,140(sp)
    e19c:	08c100ef          	jal	1e228 <__eqtf2>
    e1a0:	01012883          	lw	a7,16(sp)
    e1a4:	01412603          	lw	a2,20(sp)
    e1a8:	01812703          	lw	a4,24(sp)
    e1ac:	76050a63          	beqz	a0,e920 <_vfprintf_r+0x2504>
    e1b0:	0bc12783          	lw	a5,188(sp)
    e1b4:	00e7fe63          	bgeu	a5,a4,e1d0 <_vfprintf_r+0x1db4>
    e1b8:	03000593          	li	a1,48
    e1bc:	00178693          	add	a3,a5,1
    e1c0:	0ad12e23          	sw	a3,188(sp)
    e1c4:	00b78023          	sb	a1,0(a5)
    e1c8:	0bc12783          	lw	a5,188(sp)
    e1cc:	fee7e8e3          	bltu	a5,a4,e1bc <_vfprintf_r+0x1da0>
    e1d0:	0ac12703          	lw	a4,172(sp)
    e1d4:	00e12823          	sw	a4,16(sp)
    e1d8:	419787b3          	sub	a5,a5,s9
    e1dc:	04700713          	li	a4,71
    e1e0:	00f12a23          	sw	a5,20(sp)
    e1e4:	cee600e3          	beq	a2,a4,dec4 <_vfprintf_r+0x1aa8>
    e1e8:	04600713          	li	a4,70
    e1ec:	0ae608e3          	beq	a2,a4,ea9c <_vfprintf_r+0x2680>
    e1f0:	01012783          	lw	a5,16(sp)
    e1f4:	fff78a93          	add	s5,a5,-1
    e1f8:	ce9ff06f          	j	dee0 <_vfprintf_r+0x1ac4>
    e1fc:	09010913          	add	s2,sp,144
    e200:	00090513          	mv	a0,s2
    e204:	03112a23          	sw	a7,52(sp)
    e208:	09f12823          	sw	t6,144(sp)
    e20c:	09e12a23          	sw	t5,148(sp)
    e210:	09d12c23          	sw	t4,152(sp)
    e214:	09712e23          	sw	s7,156(sp)
    e218:	540130ef          	jal	21758 <__trunctfdf2>
    e21c:	0ac10613          	add	a2,sp,172
    e220:	664070ef          	jal	15884 <frexp>
    e224:	00058613          	mv	a2,a1
    e228:	00050593          	mv	a1,a0
    e22c:	00090513          	mv	a0,s2
    e230:	2e0130ef          	jal	21510 <__extenddftf2>
    e234:	09012503          	lw	a0,144(sp)
    e238:	00015717          	auipc	a4,0x15
    e23c:	1e870713          	add	a4,a4,488 # 23420 <zeroes.0+0x14>
    e240:	00072583          	lw	a1,0(a4)
    e244:	06a12823          	sw	a0,112(sp)
    e248:	09412503          	lw	a0,148(sp)
    e24c:	00472603          	lw	a2,4(a4)
    e250:	00872683          	lw	a3,8(a4)
    e254:	06a12a23          	sw	a0,116(sp)
    e258:	09812503          	lw	a0,152(sp)
    e25c:	00c72703          	lw	a4,12(a4)
    e260:	08010d93          	add	s11,sp,128
    e264:	06a12c23          	sw	a0,120(sp)
    e268:	09c12503          	lw	a0,156(sp)
    e26c:	06b12023          	sw	a1,96(sp)
    e270:	06c12223          	sw	a2,100(sp)
    e274:	06a12e23          	sw	a0,124(sp)
    e278:	06010613          	add	a2,sp,96
    e27c:	07010593          	add	a1,sp,112
    e280:	000d8513          	mv	a0,s11
    e284:	06d12423          	sw	a3,104(sp)
    e288:	06e12623          	sw	a4,108(sp)
    e28c:	32c100ef          	jal	1e5b8 <__multf3>
    e290:	08012f03          	lw	t5,128(sp)
    e294:	08412e83          	lw	t4,132(sp)
    e298:	08812803          	lw	a6,136(sp)
    e29c:	08c12603          	lw	a2,140(sp)
    e2a0:	000d8593          	mv	a1,s11
    e2a4:	00090513          	mv	a0,s2
    e2a8:	09e12823          	sw	t5,144(sp)
    e2ac:	01e12e23          	sw	t5,28(sp)
    e2b0:	09d12a23          	sw	t4,148(sp)
    e2b4:	01d12c23          	sw	t4,24(sp)
    e2b8:	09012c23          	sw	a6,152(sp)
    e2bc:	01012a23          	sw	a6,20(sp)
    e2c0:	08c12e23          	sw	a2,156(sp)
    e2c4:	00c12823          	sw	a2,16(sp)
    e2c8:	08012023          	sw	zero,128(sp)
    e2cc:	08012223          	sw	zero,132(sp)
    e2d0:	08012423          	sw	zero,136(sp)
    e2d4:	08012623          	sw	zero,140(sp)
    e2d8:	7510f0ef          	jal	1e228 <__eqtf2>
    e2dc:	01012603          	lw	a2,16(sp)
    e2e0:	01412803          	lw	a6,20(sp)
    e2e4:	01812e83          	lw	t4,24(sp)
    e2e8:	01c12f03          	lw	t5,28(sp)
    e2ec:	03412883          	lw	a7,52(sp)
    e2f0:	00051663          	bnez	a0,e2fc <_vfprintf_r+0x1ee0>
    e2f4:	00100713          	li	a4,1
    e2f8:	0ae12623          	sw	a4,172(sp)
    e2fc:	00015797          	auipc	a5,0x15
    e300:	de878793          	add	a5,a5,-536 # 230e4 <OSUnMapTbl+0x180>
    e304:	06100713          	li	a4,97
    e308:	00f12823          	sw	a5,16(sp)
    e30c:	00e89863          	bne	a7,a4,e31c <_vfprintf_r+0x1f00>
    e310:	00015797          	auipc	a5,0x15
    e314:	dc078793          	add	a5,a5,-576 # 230d0 <OSUnMapTbl+0x16c>
    e318:	00f12823          	sw	a5,16(sp)
    e31c:	00015717          	auipc	a4,0x15
    e320:	11470713          	add	a4,a4,276 # 23430 <zeroes.0+0x24>
    e324:	00072783          	lw	a5,0(a4)
    e328:	01412e23          	sw	s4,28(sp)
    e32c:	05a12223          	sw	s10,68(sp)
    e330:	00f12a23          	sw	a5,20(sp)
    e334:	00472783          	lw	a5,4(a4)
    e338:	05812423          	sw	s8,72(sp)
    e33c:	05312623          	sw	s3,76(sp)
    e340:	00f12c23          	sw	a5,24(sp)
    e344:	00872783          	lw	a5,8(a4)
    e348:	00c72703          	lw	a4,12(a4)
    e34c:	000c8993          	mv	s3,s9
    e350:	04912a23          	sw	s1,84(sp)
    e354:	05912c23          	sw	s9,88(sp)
    e358:	fffa8a93          	add	s5,s5,-1
    e35c:	03112a23          	sw	a7,52(sp)
    e360:	05612823          	sw	s6,80(sp)
    e364:	00078b93          	mv	s7,a5
    e368:	00070c13          	mv	s8,a4
    e36c:	000f0c93          	mv	s9,t5
    e370:	000e8d13          	mv	s10,t4
    e374:	00080493          	mv	s1,a6
    e378:	00060a13          	mv	s4,a2
    e37c:	03c0006f          	j	e3b8 <_vfprintf_r+0x1f9c>
    e380:	000d8593          	mv	a1,s11
    e384:	00090513          	mv	a0,s2
    e388:	09912823          	sw	s9,144(sp)
    e38c:	09a12a23          	sw	s10,148(sp)
    e390:	08912c23          	sw	s1,152(sp)
    e394:	09412e23          	sw	s4,156(sp)
    e398:	08012023          	sw	zero,128(sp)
    e39c:	08012223          	sw	zero,132(sp)
    e3a0:	08012423          	sw	zero,136(sp)
    e3a4:	08012623          	sw	zero,140(sp)
    e3a8:	fffa8b13          	add	s6,s5,-1
    e3ac:	67d0f0ef          	jal	1e228 <__eqtf2>
    e3b0:	06050ae3          	beqz	a0,ec24 <_vfprintf_r+0x2808>
    e3b4:	000b0a93          	mv	s5,s6
    e3b8:	01412783          	lw	a5,20(sp)
    e3bc:	07010613          	add	a2,sp,112
    e3c0:	000d8593          	mv	a1,s11
    e3c4:	06f12823          	sw	a5,112(sp)
    e3c8:	01812783          	lw	a5,24(sp)
    e3cc:	00090513          	mv	a0,s2
    e3d0:	09912023          	sw	s9,128(sp)
    e3d4:	06f12a23          	sw	a5,116(sp)
    e3d8:	09a12223          	sw	s10,132(sp)
    e3dc:	08912423          	sw	s1,136(sp)
    e3e0:	09412623          	sw	s4,140(sp)
    e3e4:	07712c23          	sw	s7,120(sp)
    e3e8:	07812e23          	sw	s8,124(sp)
    e3ec:	1cc100ef          	jal	1e5b8 <__multf3>
    e3f0:	00090513          	mv	a0,s2
    e3f4:	685120ef          	jal	21278 <__fixtfsi>
    e3f8:	00050593          	mv	a1,a0
    e3fc:	00050b13          	mv	s6,a0
    e400:	00090513          	mv	a0,s2
    e404:	09012d03          	lw	s10,144(sp)
    e408:	09412c83          	lw	s9,148(sp)
    e40c:	09812a03          	lw	s4,152(sp)
    e410:	09c12483          	lw	s1,156(sp)
    e414:	765120ef          	jal	21378 <__floatsitf>
    e418:	09012683          	lw	a3,144(sp)
    e41c:	06010613          	add	a2,sp,96
    e420:	07010593          	add	a1,sp,112
    e424:	06d12023          	sw	a3,96(sp)
    e428:	09412683          	lw	a3,148(sp)
    e42c:	000d8513          	mv	a0,s11
    e430:	07a12823          	sw	s10,112(sp)
    e434:	06d12223          	sw	a3,100(sp)
    e438:	09812683          	lw	a3,152(sp)
    e43c:	07912a23          	sw	s9,116(sp)
    e440:	07412c23          	sw	s4,120(sp)
    e444:	06d12423          	sw	a3,104(sp)
    e448:	09c12683          	lw	a3,156(sp)
    e44c:	06912e23          	sw	s1,124(sp)
    e450:	06d12623          	sw	a3,108(sp)
    e454:	680110ef          	jal	1fad4 <__subtf3>
    e458:	01012783          	lw	a5,16(sp)
    e45c:	00098f93          	mv	t6,s3
    e460:	00198993          	add	s3,s3,1
    e464:	016786b3          	add	a3,a5,s6
    e468:	0006c683          	lbu	a3,0(a3)
    e46c:	08012c83          	lw	s9,128(sp)
    e470:	08412d03          	lw	s10,132(sp)
    e474:	08812483          	lw	s1,136(sp)
    e478:	08c12a03          	lw	s4,140(sp)
    e47c:	fff00793          	li	a5,-1
    e480:	fed98fa3          	sb	a3,-1(s3)
    e484:	eefa9ee3          	bne	s5,a5,e380 <_vfprintf_r+0x1f64>
    e488:	00015597          	auipc	a1,0x15
    e48c:	fb858593          	add	a1,a1,-72 # 23440 <zeroes.0+0x34>
    e490:	03412883          	lw	a7,52(sp)
    e494:	0045a283          	lw	t0,4(a1)
    e498:	0085a383          	lw	t2,8(a1)
    e49c:	00c5a783          	lw	a5,12(a1)
    e4a0:	0005aa83          	lw	s5,0(a1)
    e4a4:	000c8f13          	mv	t5,s9
    e4a8:	000d0e93          	mv	t4,s10
    e4ac:	00048813          	mv	a6,s1
    e4b0:	000a0613          	mv	a2,s4
    e4b4:	000d8593          	mv	a1,s11
    e4b8:	00090513          	mv	a0,s2
    e4bc:	04812c03          	lw	s8,72(sp)
    e4c0:	04412d03          	lw	s10,68(sp)
    e4c4:	05412483          	lw	s1,84(sp)
    e4c8:	01c12a03          	lw	s4,28(sp)
    e4cc:	01112c23          	sw	a7,24(sp)
    e4d0:	01f12a23          	sw	t6,20(sp)
    e4d4:	05612e23          	sw	s6,92(sp)
    e4d8:	05812c83          	lw	s9,88(sp)
    e4dc:	05012b03          	lw	s6,80(sp)
    e4e0:	00098b93          	mv	s7,s3
    e4e4:	09e12823          	sw	t5,144(sp)
    e4e8:	04c12983          	lw	s3,76(sp)
    e4ec:	05e12a23          	sw	t5,84(sp)
    e4f0:	09d12a23          	sw	t4,148(sp)
    e4f4:	05d12823          	sw	t4,80(sp)
    e4f8:	09012c23          	sw	a6,152(sp)
    e4fc:	05012623          	sw	a6,76(sp)
    e500:	08c12e23          	sw	a2,156(sp)
    e504:	04c12423          	sw	a2,72(sp)
    e508:	09512023          	sw	s5,128(sp)
    e50c:	08512223          	sw	t0,132(sp)
    e510:	04512223          	sw	t0,68(sp)
    e514:	08712423          	sw	t2,136(sp)
    e518:	02712a23          	sw	t2,52(sp)
    e51c:	08f12623          	sw	a5,140(sp)
    e520:	00f12e23          	sw	a5,28(sp)
    e524:	5d50f0ef          	jal	1e2f8 <__getf2>
    e528:	01412f83          	lw	t6,20(sp)
    e52c:	01812883          	lw	a7,24(sp)
    e530:	02a04863          	bgtz	a0,e560 <_vfprintf_r+0x2144>
    e534:	000d8593          	mv	a1,s11
    e538:	00090513          	mv	a0,s2
    e53c:	01112a23          	sw	a7,20(sp)
    e540:	01f12c23          	sw	t6,24(sp)
    e544:	4e50f0ef          	jal	1e228 <__eqtf2>
    e548:	01412883          	lw	a7,20(sp)
    e54c:	04051e63          	bnez	a0,e5a8 <_vfprintf_r+0x218c>
    e550:	05c12703          	lw	a4,92(sp)
    e554:	01812f83          	lw	t6,24(sp)
    e558:	00177693          	and	a3,a4,1
    e55c:	04068663          	beqz	a3,e5a8 <_vfprintf_r+0x218c>
    e560:	01012783          	lw	a5,16(sp)
    e564:	0bf12e23          	sw	t6,188(sp)
    e568:	fffbc603          	lbu	a2,-1(s7)
    e56c:	00f7c583          	lbu	a1,15(a5)
    e570:	000b8693          	mv	a3,s7
    e574:	02b61063          	bne	a2,a1,e594 <_vfprintf_r+0x2178>
    e578:	03000513          	li	a0,48
    e57c:	fea68fa3          	sb	a0,-1(a3)
    e580:	0bc12683          	lw	a3,188(sp)
    e584:	fff68793          	add	a5,a3,-1
    e588:	0af12e23          	sw	a5,188(sp)
    e58c:	fff6c603          	lbu	a2,-1(a3)
    e590:	feb606e3          	beq	a2,a1,e57c <_vfprintf_r+0x2160>
    e594:	00160593          	add	a1,a2,1
    e598:	03900513          	li	a0,57
    e59c:	0ff5f593          	zext.b	a1,a1
    e5a0:	04a60463          	beq	a2,a0,e5e8 <_vfprintf_r+0x21cc>
    e5a4:	feb68fa3          	sb	a1,-1(a3)
    e5a8:	0ac12783          	lw	a5,172(sp)
    e5ac:	419b8733          	sub	a4,s7,s9
    e5b0:	06100613          	li	a2,97
    e5b4:	fff78a93          	add	s5,a5,-1
    e5b8:	00f12823          	sw	a5,16(sp)
    e5bc:	00e12a23          	sw	a4,20(sp)
    e5c0:	0b512623          	sw	s5,172(sp)
    e5c4:	07000693          	li	a3,112
    e5c8:	00c88663          	beq	a7,a2,e5d4 <_vfprintf_r+0x21b8>
    e5cc:	05000693          	li	a3,80
    e5d0:	04100893          	li	a7,65
    e5d4:	00100613          	li	a2,1
    e5d8:	915ff06f          	j	deec <_vfprintf_r+0x1ad0>
    e5dc:	000a8693          	mv	a3,s5
    e5e0:	00300613          	li	a2,3
    e5e4:	b05ff06f          	j	e0e8 <_vfprintf_r+0x1ccc>
    e5e8:	01012783          	lw	a5,16(sp)
    e5ec:	00a7c583          	lbu	a1,10(a5)
    e5f0:	fb5ff06f          	j	e5a4 <_vfprintf_r+0x2188>
    e5f4:	0a714703          	lbu	a4,167(sp)
    e5f8:	04412d03          	lw	s10,68(sp)
    e5fc:	00000a93          	li	s5,0
    e600:	00070463          	beqz	a4,e608 <_vfprintf_r+0x21ec>
    e604:	e58fe06f          	j	cc5c <_vfprintf_r+0x840>
    e608:	844fe06f          	j	c64c <_vfprintf_r+0x230>
    e60c:	01412783          	lw	a5,20(sp)
    e610:	01812d83          	lw	s11,24(sp)
    e614:	03412823          	sw	s4,48(sp)
    e618:	00fc87b3          	add	a5,s9,a5
    e61c:	05812423          	sw	s8,72(sp)
    e620:	01712c23          	sw	s7,24(sp)
    e624:	05912623          	sw	s9,76(sp)
    e628:	05a12223          	sw	s10,68(sp)
    e62c:	00090c13          	mv	s8,s2
    e630:	00098593          	mv	a1,s3
    e634:	03c12a03          	lw	s4,60(sp)
    e638:	04012903          	lw	s2,64(sp)
    e63c:	03812b83          	lw	s7,56(sp)
    e640:	01c12c83          	lw	s9,28(sp)
    e644:	00700813          	li	a6,7
    e648:	01000713          	li	a4,16
    e64c:	00015a97          	auipc	s5,0x15
    e650:	dc0a8a93          	add	s5,s5,-576 # 2340c <zeroes.0>
    e654:	00078993          	mv	s3,a5
    e658:	09b05463          	blez	s11,e6e0 <_vfprintf_r+0x22c4>
    e65c:	17905e63          	blez	s9,e7d8 <_vfprintf_r+0x23bc>
    e660:	fffc8c93          	add	s9,s9,-1
    e664:	0c812783          	lw	a5,200(sp)
    e668:	01460633          	add	a2,a2,s4
    e66c:	0125a023          	sw	s2,0(a1)
    e670:	00178793          	add	a5,a5,1
    e674:	0145a223          	sw	s4,4(a1)
    e678:	0cc12623          	sw	a2,204(sp)
    e67c:	0cf12423          	sw	a5,200(sp)
    e680:	00858593          	add	a1,a1,8
    e684:	16f84063          	blt	a6,a5,e7e4 <_vfprintf_r+0x23c8>
    e688:	000bc683          	lbu	a3,0(s7)
    e68c:	41898d33          	sub	s10,s3,s8
    e690:	01a6d463          	bge	a3,s10,e698 <_vfprintf_r+0x227c>
    e694:	00068d13          	mv	s10,a3
    e698:	03a05663          	blez	s10,e6c4 <_vfprintf_r+0x22a8>
    e69c:	0c812683          	lw	a3,200(sp)
    e6a0:	01a60633          	add	a2,a2,s10
    e6a4:	0185a023          	sw	s8,0(a1)
    e6a8:	00168693          	add	a3,a3,1
    e6ac:	01a5a223          	sw	s10,4(a1)
    e6b0:	0cc12623          	sw	a2,204(sp)
    e6b4:	0cd12423          	sw	a3,200(sp)
    e6b8:	14d84c63          	blt	a6,a3,e810 <_vfprintf_r+0x23f4>
    e6bc:	000bc683          	lbu	a3,0(s7)
    e6c0:	00858593          	add	a1,a1,8
    e6c4:	fffd4513          	not	a0,s10
    e6c8:	41f55513          	sra	a0,a0,0x1f
    e6cc:	00ad77b3          	and	a5,s10,a0
    e6d0:	40f68d33          	sub	s10,a3,a5
    e6d4:	05a04463          	bgtz	s10,e71c <_vfprintf_r+0x2300>
    e6d8:	00dc0c33          	add	s8,s8,a3
    e6dc:	f9b040e3          	bgtz	s11,e65c <_vfprintf_r+0x2240>
    e6e0:	f99040e3          	bgtz	s9,e660 <_vfprintf_r+0x2244>
    e6e4:	04c12c83          	lw	s9,76(sp)
    e6e8:	01412783          	lw	a5,20(sp)
    e6ec:	03712c23          	sw	s7,56(sp)
    e6f0:	000c0913          	mv	s2,s8
    e6f4:	00fc8733          	add	a4,s9,a5
    e6f8:	03012a03          	lw	s4,48(sp)
    e6fc:	04412d03          	lw	s10,68(sp)
    e700:	04812c03          	lw	s8,72(sp)
    e704:	01812b83          	lw	s7,24(sp)
    e708:	00058993          	mv	s3,a1
    e70c:	01276463          	bltu	a4,s2,e714 <_vfprintf_r+0x22f8>
    e710:	df9fe06f          	j	d508 <_vfprintf_r+0x10ec>
    e714:	00070913          	mv	s2,a4
    e718:	df1fe06f          	j	d508 <_vfprintf_r+0x10ec>
    e71c:	0c812683          	lw	a3,200(sp)
    e720:	00015f17          	auipc	t5,0x15
    e724:	cecf0f13          	add	t5,t5,-788 # 2340c <zeroes.0>
    e728:	09a75263          	bge	a4,s10,e7ac <_vfprintf_r+0x2390>
    e72c:	01212823          	sw	s2,16(sp)
    e730:	000d0913          	mv	s2,s10
    e734:	00098d13          	mv	s10,s3
    e738:	000a8993          	mv	s3,s5
    e73c:	00c0006f          	j	e748 <_vfprintf_r+0x232c>
    e740:	ff090913          	add	s2,s2,-16
    e744:	05275c63          	bge	a4,s2,e79c <_vfprintf_r+0x2380>
    e748:	01060613          	add	a2,a2,16
    e74c:	00168693          	add	a3,a3,1
    e750:	0155a023          	sw	s5,0(a1)
    e754:	00e5a223          	sw	a4,4(a1)
    e758:	0cc12623          	sw	a2,204(sp)
    e75c:	0cd12423          	sw	a3,200(sp)
    e760:	00858593          	add	a1,a1,8
    e764:	fcd85ee3          	bge	a6,a3,e740 <_vfprintf_r+0x2324>
    e768:	0c410613          	add	a2,sp,196
    e76c:	00048593          	mv	a1,s1
    e770:	000b0513          	mv	a0,s6
    e774:	0d40a0ef          	jal	18848 <__sprint_r>
    e778:	00050463          	beqz	a0,e780 <_vfprintf_r+0x2364>
    e77c:	b15fe06f          	j	d290 <_vfprintf_r+0xe74>
    e780:	01000713          	li	a4,16
    e784:	ff090913          	add	s2,s2,-16
    e788:	0cc12603          	lw	a2,204(sp)
    e78c:	0c812683          	lw	a3,200(sp)
    e790:	0ec10593          	add	a1,sp,236
    e794:	00700813          	li	a6,7
    e798:	fb2748e3          	blt	a4,s2,e748 <_vfprintf_r+0x232c>
    e79c:	00098f13          	mv	t5,s3
    e7a0:	000d0993          	mv	s3,s10
    e7a4:	00090d13          	mv	s10,s2
    e7a8:	01012903          	lw	s2,16(sp)
    e7ac:	01a60633          	add	a2,a2,s10
    e7b0:	00168693          	add	a3,a3,1
    e7b4:	01e5a023          	sw	t5,0(a1)
    e7b8:	01a5a223          	sw	s10,4(a1)
    e7bc:	0cc12623          	sw	a2,204(sp)
    e7c0:	0cd12423          	sw	a3,200(sp)
    e7c4:	0ed84863          	blt	a6,a3,e8b4 <_vfprintf_r+0x2498>
    e7c8:	000bc683          	lbu	a3,0(s7)
    e7cc:	00858593          	add	a1,a1,8
    e7d0:	00dc0c33          	add	s8,s8,a3
    e7d4:	f09ff06f          	j	e6dc <_vfprintf_r+0x22c0>
    e7d8:	fffb8b93          	add	s7,s7,-1
    e7dc:	fffd8d93          	add	s11,s11,-1
    e7e0:	e85ff06f          	j	e664 <_vfprintf_r+0x2248>
    e7e4:	0c410613          	add	a2,sp,196
    e7e8:	00048593          	mv	a1,s1
    e7ec:	000b0513          	mv	a0,s6
    e7f0:	0580a0ef          	jal	18848 <__sprint_r>
    e7f4:	00050463          	beqz	a0,e7fc <_vfprintf_r+0x23e0>
    e7f8:	a99fe06f          	j	d290 <_vfprintf_r+0xe74>
    e7fc:	0cc12603          	lw	a2,204(sp)
    e800:	0ec10593          	add	a1,sp,236
    e804:	01000713          	li	a4,16
    e808:	00700813          	li	a6,7
    e80c:	e7dff06f          	j	e688 <_vfprintf_r+0x226c>
    e810:	0c410613          	add	a2,sp,196
    e814:	00048593          	mv	a1,s1
    e818:	000b0513          	mv	a0,s6
    e81c:	02c0a0ef          	jal	18848 <__sprint_r>
    e820:	00050463          	beqz	a0,e828 <_vfprintf_r+0x240c>
    e824:	a6dfe06f          	j	d290 <_vfprintf_r+0xe74>
    e828:	000bc683          	lbu	a3,0(s7)
    e82c:	0cc12603          	lw	a2,204(sp)
    e830:	0ec10593          	add	a1,sp,236
    e834:	01000713          	li	a4,16
    e838:	00700813          	li	a6,7
    e83c:	e89ff06f          	j	e6c4 <_vfprintf_r+0x22a8>
    e840:	01412783          	lw	a5,20(sp)
    e844:	01012703          	lw	a4,16(sp)
    e848:	28f74463          	blt	a4,a5,ead0 <_vfprintf_r+0x26b4>
    e84c:	01012783          	lw	a5,16(sp)
    e850:	001d7713          	and	a4,s10,1
    e854:	00078913          	mv	s2,a5
    e858:	00070663          	beqz	a4,e864 <_vfprintf_r+0x2448>
    e85c:	02412703          	lw	a4,36(sp)
    e860:	00e78933          	add	s2,a5,a4
    e864:	400d7e13          	and	t3,s10,1024
    e868:	000e0663          	beqz	t3,e874 <_vfprintf_r+0x2458>
    e86c:	01012783          	lw	a5,16(sp)
    e870:	32f04663          	bgtz	a5,eb9c <_vfprintf_r+0x2780>
    e874:	fff94693          	not	a3,s2
    e878:	41f6d693          	sra	a3,a3,0x1f
    e87c:	00d97bb3          	and	s7,s2,a3
    e880:	06700893          	li	a7,103
    e884:	00012e23          	sw	zero,28(sp)
    e888:	00012c23          	sw	zero,24(sp)
    e88c:	f54ff06f          	j	dfe0 <_vfprintf_r+0x1bc4>
    e890:	0c410613          	add	a2,sp,196
    e894:	00048593          	mv	a1,s1
    e898:	000b0513          	mv	a0,s6
    e89c:	7ad090ef          	jal	18848 <__sprint_r>
    e8a0:	00050463          	beqz	a0,e8a8 <_vfprintf_r+0x248c>
    e8a4:	9edfe06f          	j	d290 <_vfprintf_r+0xe74>
    e8a8:	0cc12603          	lw	a2,204(sp)
    e8ac:	0ec10993          	add	s3,sp,236
    e8b0:	c2dfe06f          	j	d4dc <_vfprintf_r+0x10c0>
    e8b4:	0c410613          	add	a2,sp,196
    e8b8:	00048593          	mv	a1,s1
    e8bc:	000b0513          	mv	a0,s6
    e8c0:	789090ef          	jal	18848 <__sprint_r>
    e8c4:	00050463          	beqz	a0,e8cc <_vfprintf_r+0x24b0>
    e8c8:	9c9fe06f          	j	d290 <_vfprintf_r+0xe74>
    e8cc:	000bc683          	lbu	a3,0(s7)
    e8d0:	0cc12603          	lw	a2,204(sp)
    e8d4:	0ec10593          	add	a1,sp,236
    e8d8:	01000713          	li	a4,16
    e8dc:	00700813          	li	a6,7
    e8e0:	00dc0c33          	add	s8,s8,a3
    e8e4:	df9ff06f          	j	e6dc <_vfprintf_r+0x22c0>
    e8e8:	00900793          	li	a5,9
    e8ec:	a3b7e863          	bltu	a5,s11,db1c <_vfprintf_r+0x1700>
    e8f0:	a7cff06f          	j	db6c <_vfprintf_r+0x1750>
    e8f4:	0a714703          	lbu	a4,167(sp)
    e8f8:	01b12623          	sw	s11,12(sp)
    e8fc:	00012e23          	sw	zero,28(sp)
    e900:	00012c23          	sw	zero,24(sp)
    e904:	00012823          	sw	zero,16(sp)
    e908:	000a8b93          	mv	s7,s5
    e90c:	000a8913          	mv	s2,s5
    e910:	00000a93          	li	s5,0
    e914:	00070463          	beqz	a4,e91c <_vfprintf_r+0x2500>
    e918:	b44fe06f          	j	cc5c <_vfprintf_r+0x840>
    e91c:	d31fd06f          	j	c64c <_vfprintf_r+0x230>
    e920:	0ac12783          	lw	a5,172(sp)
    e924:	00f12823          	sw	a5,16(sp)
    e928:	00070793          	mv	a5,a4
    e92c:	8adff06f          	j	e1d8 <_vfprintf_r+0x1dbc>
    e930:	0c410613          	add	a2,sp,196
    e934:	00048593          	mv	a1,s1
    e938:	000b0513          	mv	a0,s6
    e93c:	70d090ef          	jal	18848 <__sprint_r>
    e940:	00050463          	beqz	a0,e948 <_vfprintf_r+0x252c>
    e944:	94dfe06f          	j	d290 <_vfprintf_r+0xe74>
    e948:	0ac12583          	lw	a1,172(sp)
    e94c:	01412783          	lw	a5,20(sp)
    e950:	0cc12603          	lw	a2,204(sp)
    e954:	0ec10993          	add	s3,sp,236
    e958:	40b785b3          	sub	a1,a5,a1
    e95c:	c09fe06f          	j	d564 <_vfprintf_r+0x1148>
    e960:	ff000513          	li	a0,-16
    e964:	40b00933          	neg	s2,a1
    e968:	00015e97          	auipc	t4,0x15
    e96c:	aa4e8e93          	add	t4,t4,-1372 # 2340c <zeroes.0>
    e970:	18a5dc63          	bge	a1,a0,eb08 <_vfprintf_r+0x26ec>
    e974:	01412823          	sw	s4,16(sp)
    e978:	01000a93          	li	s5,16
    e97c:	00700d93          	li	s11,7
    e980:	000e8a13          	mv	s4,t4
    e984:	00c0006f          	j	e990 <_vfprintf_r+0x2574>
    e988:	ff090913          	add	s2,s2,-16
    e98c:	172ada63          	bge	s5,s2,eb00 <_vfprintf_r+0x26e4>
    e990:	01060613          	add	a2,a2,16
    e994:	00170713          	add	a4,a4,1
    e998:	0149a023          	sw	s4,0(s3)
    e99c:	0159a223          	sw	s5,4(s3)
    e9a0:	0cc12623          	sw	a2,204(sp)
    e9a4:	0ce12423          	sw	a4,200(sp)
    e9a8:	00898993          	add	s3,s3,8
    e9ac:	fceddee3          	bge	s11,a4,e988 <_vfprintf_r+0x256c>
    e9b0:	0c410613          	add	a2,sp,196
    e9b4:	00048593          	mv	a1,s1
    e9b8:	000b0513          	mv	a0,s6
    e9bc:	68d090ef          	jal	18848 <__sprint_r>
    e9c0:	00050463          	beqz	a0,e9c8 <_vfprintf_r+0x25ac>
    e9c4:	8cdfe06f          	j	d290 <_vfprintf_r+0xe74>
    e9c8:	0cc12603          	lw	a2,204(sp)
    e9cc:	0c812703          	lw	a4,200(sp)
    e9d0:	0ec10993          	add	s3,sp,236
    e9d4:	fb5ff06f          	j	e988 <_vfprintf_r+0x256c>
    e9d8:	01550733          	add	a4,a0,s5
    e9dc:	04700613          	li	a2,71
    e9e0:	08010d93          	add	s11,sp,128
    e9e4:	f84ff06f          	j	e168 <_vfprintf_r+0x1d4c>
    e9e8:	000d0613          	mv	a2,s10
    e9ec:	a84fe06f          	j	cc70 <_vfprintf_r+0x854>
    e9f0:	0644a783          	lw	a5,100(s1)
    e9f4:	0017f793          	and	a5,a5,1
    e9f8:	00079c63          	bnez	a5,ea10 <_vfprintf_r+0x25f4>
    e9fc:	00c4d783          	lhu	a5,12(s1)
    ea00:	2007f793          	and	a5,a5,512
    ea04:	00079663          	bnez	a5,ea10 <_vfprintf_r+0x25f4>
    ea08:	0584a503          	lw	a0,88(s1)
    ea0c:	185040ef          	jal	13390 <__retarget_lock_release_recursive>
    ea10:	fff00793          	li	a5,-1
    ea14:	00f12223          	sw	a5,4(sp)
    ea18:	da5fd06f          	j	c7bc <_vfprintf_r+0x3a0>
    ea1c:	08010d93          	add	s11,sp,128
    ea20:	000d8593          	mv	a1,s11
    ea24:	00090513          	mv	a0,s2
    ea28:	04e12823          	sw	a4,80(sp)
    ea2c:	04c12623          	sw	a2,76(sp)
    ea30:	05112423          	sw	a7,72(sp)
    ea34:	00d12e23          	sw	a3,28(sp)
    ea38:	09f12823          	sw	t6,144(sp)
    ea3c:	01f12c23          	sw	t6,24(sp)
    ea40:	09e12a23          	sw	t5,148(sp)
    ea44:	01e12a23          	sw	t5,20(sp)
    ea48:	09d12c23          	sw	t4,152(sp)
    ea4c:	01d12823          	sw	t4,16(sp)
    ea50:	09712e23          	sw	s7,156(sp)
    ea54:	08012023          	sw	zero,128(sp)
    ea58:	08012223          	sw	zero,132(sp)
    ea5c:	08012423          	sw	zero,136(sp)
    ea60:	08012623          	sw	zero,140(sp)
    ea64:	7c40f0ef          	jal	1e228 <__eqtf2>
    ea68:	01012e83          	lw	t4,16(sp)
    ea6c:	01412f03          	lw	t5,20(sp)
    ea70:	01812f83          	lw	t6,24(sp)
    ea74:	01c12683          	lw	a3,28(sp)
    ea78:	04812883          	lw	a7,72(sp)
    ea7c:	04c12603          	lw	a2,76(sp)
    ea80:	05012703          	lw	a4,80(sp)
    ea84:	1e051c63          	bnez	a0,ec7c <_vfprintf_r+0x2860>
    ea88:	0ac12783          	lw	a5,172(sp)
    ea8c:	00f70733          	add	a4,a4,a5
    ea90:	00f12823          	sw	a5,16(sp)
    ea94:	419707b3          	sub	a5,a4,s9
    ea98:	00f12a23          	sw	a5,20(sp)
    ea9c:	01012783          	lw	a5,16(sp)
    eaa0:	001d7713          	and	a4,s10,1
    eaa4:	01576733          	or	a4,a4,s5
    eaa8:	1ef05863          	blez	a5,ec98 <_vfprintf_r+0x287c>
    eaac:	1a071e63          	bnez	a4,ec68 <_vfprintf_r+0x284c>
    eab0:	01012903          	lw	s2,16(sp)
    eab4:	06600893          	li	a7,102
    eab8:	400d7e13          	and	t3,s10,1024
    eabc:	0e0e1263          	bnez	t3,eba0 <_vfprintf_r+0x2784>
    eac0:	fff94693          	not	a3,s2
    eac4:	41f6d693          	sra	a3,a3,0x1f
    eac8:	00d97bb3          	and	s7,s2,a3
    eacc:	db9ff06f          	j	e884 <_vfprintf_r+0x2468>
    ead0:	01412783          	lw	a5,20(sp)
    ead4:	02412703          	lw	a4,36(sp)
    ead8:	06700893          	li	a7,103
    eadc:	00e78933          	add	s2,a5,a4
    eae0:	01012783          	lw	a5,16(sp)
    eae4:	fcf04ae3          	bgtz	a5,eab8 <_vfprintf_r+0x269c>
    eae8:	40f90833          	sub	a6,s2,a5
    eaec:	00180913          	add	s2,a6,1
    eaf0:	fff94693          	not	a3,s2
    eaf4:	41f6d693          	sra	a3,a3,0x1f
    eaf8:	00d97bb3          	and	s7,s2,a3
    eafc:	d89ff06f          	j	e884 <_vfprintf_r+0x2468>
    eb00:	000a0e93          	mv	t4,s4
    eb04:	01012a03          	lw	s4,16(sp)
    eb08:	01260633          	add	a2,a2,s2
    eb0c:	00170713          	add	a4,a4,1
    eb10:	01d9a023          	sw	t4,0(s3)
    eb14:	0129a223          	sw	s2,4(s3)
    eb18:	0cc12623          	sw	a2,204(sp)
    eb1c:	0ce12423          	sw	a4,200(sp)
    eb20:	00700593          	li	a1,7
    eb24:	00e5c463          	blt	a1,a4,eb2c <_vfprintf_r+0x2710>
    eb28:	ce9fe06f          	j	d810 <_vfprintf_r+0x13f4>
    eb2c:	0c410613          	add	a2,sp,196
    eb30:	00048593          	mv	a1,s1
    eb34:	000b0513          	mv	a0,s6
    eb38:	511090ef          	jal	18848 <__sprint_r>
    eb3c:	00050463          	beqz	a0,eb44 <_vfprintf_r+0x2728>
    eb40:	f50fe06f          	j	d290 <_vfprintf_r+0xe74>
    eb44:	0cc12603          	lw	a2,204(sp)
    eb48:	0c812703          	lw	a4,200(sp)
    eb4c:	0ec10993          	add	s3,sp,236
    eb50:	a0cff06f          	j	dd5c <_vfprintf_r+0x1940>
    eb54:	0b610693          	add	a3,sp,182
    eb58:	00061863          	bnez	a2,eb68 <_vfprintf_r+0x274c>
    eb5c:	03000693          	li	a3,48
    eb60:	0ad10b23          	sb	a3,182(sp)
    eb64:	0b710693          	add	a3,sp,183
    eb68:	19010793          	add	a5,sp,400
    eb6c:	40f68633          	sub	a2,a3,a5
    eb70:	030a8713          	add	a4,s5,48
    eb74:	0dd60793          	add	a5,a2,221
    eb78:	00e68023          	sb	a4,0(a3)
    eb7c:	02f12a23          	sw	a5,52(sp)
    eb80:	c20ff06f          	j	dfa0 <_vfprintf_r+0x1b84>
    eb84:	00012423          	sw	zero,8(sp)
    eb88:	00600a93          	li	s5,6
    eb8c:	df9fd06f          	j	c984 <_vfprintf_r+0x568>
    eb90:	001d7713          	and	a4,s10,1
    eb94:	c2070463          	beqz	a4,dfbc <_vfprintf_r+0x1ba0>
    eb98:	c1cff06f          	j	dfb4 <_vfprintf_r+0x1b98>
    eb9c:	06700893          	li	a7,103
    eba0:	03812603          	lw	a2,56(sp)
    eba4:	0ff00693          	li	a3,255
    eba8:	00064703          	lbu	a4,0(a2)
    ebac:	14d70a63          	beq	a4,a3,ed00 <_vfprintf_r+0x28e4>
    ebb0:	01012783          	lw	a5,16(sp)
    ebb4:	00000513          	li	a0,0
    ebb8:	00000593          	li	a1,0
    ebbc:	00f75e63          	bge	a4,a5,ebd8 <_vfprintf_r+0x27bc>
    ebc0:	40e787b3          	sub	a5,a5,a4
    ebc4:	00164703          	lbu	a4,1(a2)
    ebc8:	04070863          	beqz	a4,ec18 <_vfprintf_r+0x27fc>
    ebcc:	00158593          	add	a1,a1,1
    ebd0:	00160613          	add	a2,a2,1
    ebd4:	fed714e3          	bne	a4,a3,ebbc <_vfprintf_r+0x27a0>
    ebd8:	02c12c23          	sw	a2,56(sp)
    ebdc:	00b12c23          	sw	a1,24(sp)
    ebe0:	00a12e23          	sw	a0,28(sp)
    ebe4:	00f12823          	sw	a5,16(sp)
    ebe8:	01c12783          	lw	a5,28(sp)
    ebec:	01812703          	lw	a4,24(sp)
    ebf0:	03c12583          	lw	a1,60(sp)
    ebf4:	05112423          	sw	a7,72(sp)
    ebf8:	00e78533          	add	a0,a5,a4
    ebfc:	739120ef          	jal	21b34 <__mulsi3>
    ec00:	01250933          	add	s2,a0,s2
    ec04:	fff94693          	not	a3,s2
    ec08:	41f6d693          	sra	a3,a3,0x1f
    ec0c:	04812883          	lw	a7,72(sp)
    ec10:	00d97bb3          	and	s7,s2,a3
    ec14:	bccff06f          	j	dfe0 <_vfprintf_r+0x1bc4>
    ec18:	00064703          	lbu	a4,0(a2)
    ec1c:	00150513          	add	a0,a0,1
    ec20:	fb5ff06f          	j	ebd4 <_vfprintf_r+0x27b8>
    ec24:	00098b93          	mv	s7,s3
    ec28:	001a8693          	add	a3,s5,1
    ec2c:	01c12a03          	lw	s4,28(sp)
    ec30:	03412883          	lw	a7,52(sp)
    ec34:	04412d03          	lw	s10,68(sp)
    ec38:	04812c03          	lw	s8,72(sp)
    ec3c:	04c12983          	lw	s3,76(sp)
    ec40:	05012b03          	lw	s6,80(sp)
    ec44:	05412483          	lw	s1,84(sp)
    ec48:	05812c83          	lw	s9,88(sp)
    ec4c:	00db86b3          	add	a3,s7,a3
    ec50:	03000613          	li	a2,48
    ec54:	940acae3          	bltz	s5,e5a8 <_vfprintf_r+0x218c>
    ec58:	001b8b93          	add	s7,s7,1
    ec5c:	fecb8fa3          	sb	a2,-1(s7)
    ec60:	fedb9ce3          	bne	s7,a3,ec58 <_vfprintf_r+0x283c>
    ec64:	945ff06f          	j	e5a8 <_vfprintf_r+0x218c>
    ec68:	02412703          	lw	a4,36(sp)
    ec6c:	06600893          	li	a7,102
    ec70:	00ea8833          	add	a6,s5,a4
    ec74:	00f80933          	add	s2,a6,a5
    ec78:	e41ff06f          	j	eab8 <_vfprintf_r+0x269c>
    ec7c:	00100593          	li	a1,1
    ec80:	40d586b3          	sub	a3,a1,a3
    ec84:	0ad12623          	sw	a3,172(sp)
    ec88:	cdcff06f          	j	e164 <_vfprintf_r+0x1d48>
    ec8c:	00200793          	li	a5,2
    ec90:	02f12a23          	sw	a5,52(sp)
    ec94:	b0cff06f          	j	dfa0 <_vfprintf_r+0x1b84>
    ec98:	00071a63          	bnez	a4,ecac <_vfprintf_r+0x2890>
    ec9c:	00100b93          	li	s7,1
    eca0:	06600893          	li	a7,102
    eca4:	00100913          	li	s2,1
    eca8:	bddff06f          	j	e884 <_vfprintf_r+0x2468>
    ecac:	02412783          	lw	a5,36(sp)
    ecb0:	06600893          	li	a7,102
    ecb4:	00178813          	add	a6,a5,1
    ecb8:	01580933          	add	s2,a6,s5
    ecbc:	fff94693          	not	a3,s2
    ecc0:	41f6d693          	sra	a3,a3,0x1f
    ecc4:	00d97bb3          	and	s7,s2,a3
    ecc8:	bbdff06f          	j	e884 <_vfprintf_r+0x2468>
    eccc:	00c12783          	lw	a5,12(sp)
    ecd0:	0007aa83          	lw	s5,0(a5)
    ecd4:	00478793          	add	a5,a5,4
    ecd8:	000ad463          	bgez	s5,ece0 <_vfprintf_r+0x28c4>
    ecdc:	fff00a93          	li	s5,-1
    ece0:	001a4883          	lbu	a7,1(s4)
    ece4:	00f12623          	sw	a5,12(sp)
    ece8:	00068a13          	mv	s4,a3
    ecec:	8d9fd06f          	j	c5c4 <_vfprintf_r+0x1a8>
    ecf0:	00c4d783          	lhu	a5,12(s1)
    ecf4:	0407e793          	or	a5,a5,64
    ecf8:	00f49623          	sh	a5,12(s1)
    ecfc:	a81fd06f          	j	c77c <_vfprintf_r+0x360>
    ed00:	00012e23          	sw	zero,28(sp)
    ed04:	00012c23          	sw	zero,24(sp)
    ed08:	ee1ff06f          	j	ebe8 <_vfprintf_r+0x27cc>
    ed0c:	04500613          	li	a2,69
    ed10:	08010d93          	add	s11,sp,128
    ed14:	c54ff06f          	j	e168 <_vfprintf_r+0x1d4c>

0000ed18 <vfprintf>:
    ed18:	00060693          	mv	a3,a2
    ed1c:	00058613          	mv	a2,a1
    ed20:	00050593          	mv	a1,a0
    ed24:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
    ed28:	ef4fd06f          	j	c41c <_vfprintf_r>

0000ed2c <__sbprintf>:
    ed2c:	b7010113          	add	sp,sp,-1168
    ed30:	00c59783          	lh	a5,12(a1)
    ed34:	00e5d703          	lhu	a4,14(a1)
    ed38:	48812423          	sw	s0,1160(sp)
    ed3c:	00058413          	mv	s0,a1
    ed40:	000105b7          	lui	a1,0x10
    ed44:	ffd58593          	add	a1,a1,-3 # fffd <__sfvwrite_r+0x99>
    ed48:	06442303          	lw	t1,100(s0)
    ed4c:	01c42883          	lw	a7,28(s0)
    ed50:	02442803          	lw	a6,36(s0)
    ed54:	01071713          	sll	a4,a4,0x10
    ed58:	00b7f7b3          	and	a5,a5,a1
    ed5c:	00e7e7b3          	or	a5,a5,a4
    ed60:	40000593          	li	a1,1024
    ed64:	49212023          	sw	s2,1152(sp)
    ed68:	00f12a23          	sw	a5,20(sp)
    ed6c:	00050913          	mv	s2,a0
    ed70:	07010793          	add	a5,sp,112
    ed74:	06010513          	add	a0,sp,96
    ed78:	48112623          	sw	ra,1164(sp)
    ed7c:	48912223          	sw	s1,1156(sp)
    ed80:	47312e23          	sw	s3,1148(sp)
    ed84:	00060493          	mv	s1,a2
    ed88:	00068993          	mv	s3,a3
    ed8c:	06612623          	sw	t1,108(sp)
    ed90:	03112223          	sw	a7,36(sp)
    ed94:	03012623          	sw	a6,44(sp)
    ed98:	00f12423          	sw	a5,8(sp)
    ed9c:	00f12c23          	sw	a5,24(sp)
    eda0:	00b12823          	sw	a1,16(sp)
    eda4:	00b12e23          	sw	a1,28(sp)
    eda8:	02012023          	sw	zero,32(sp)
    edac:	5bc040ef          	jal	13368 <__retarget_lock_init_recursive>
    edb0:	00048613          	mv	a2,s1
    edb4:	00098693          	mv	a3,s3
    edb8:	00810593          	add	a1,sp,8
    edbc:	00090513          	mv	a0,s2
    edc0:	e5cfd0ef          	jal	c41c <_vfprintf_r>
    edc4:	00050493          	mv	s1,a0
    edc8:	04055263          	bgez	a0,ee0c <__sbprintf+0xe0>
    edcc:	01415783          	lhu	a5,20(sp)
    edd0:	0407f793          	and	a5,a5,64
    edd4:	00078863          	beqz	a5,ede4 <__sbprintf+0xb8>
    edd8:	00c45783          	lhu	a5,12(s0)
    eddc:	0407e793          	or	a5,a5,64
    ede0:	00f41623          	sh	a5,12(s0)
    ede4:	06012503          	lw	a0,96(sp)
    ede8:	588040ef          	jal	13370 <__retarget_lock_close_recursive>
    edec:	48c12083          	lw	ra,1164(sp)
    edf0:	48812403          	lw	s0,1160(sp)
    edf4:	48012903          	lw	s2,1152(sp)
    edf8:	47c12983          	lw	s3,1148(sp)
    edfc:	00048513          	mv	a0,s1
    ee00:	48412483          	lw	s1,1156(sp)
    ee04:	49010113          	add	sp,sp,1168
    ee08:	00008067          	ret
    ee0c:	00810593          	add	a1,sp,8
    ee10:	00090513          	mv	a0,s2
    ee14:	650000ef          	jal	f464 <_fflush_r>
    ee18:	fa050ae3          	beqz	a0,edcc <__sbprintf+0xa0>
    ee1c:	fff00493          	li	s1,-1
    ee20:	fadff06f          	j	edcc <__sbprintf+0xa0>

0000ee24 <__swsetup_r>:
    ee24:	ff010113          	add	sp,sp,-16
    ee28:	00812423          	sw	s0,8(sp)
    ee2c:	00912223          	sw	s1,4(sp)
    ee30:	00112623          	sw	ra,12(sp)
    ee34:	8281a783          	lw	a5,-2008(gp) # 25bc4 <_impure_ptr>
    ee38:	00050493          	mv	s1,a0
    ee3c:	00058413          	mv	s0,a1
    ee40:	00078663          	beqz	a5,ee4c <__swsetup_r+0x28>
    ee44:	0387a703          	lw	a4,56(a5)
    ee48:	08070063          	beqz	a4,eec8 <__swsetup_r+0xa4>
    ee4c:	00c41783          	lh	a5,12(s0)
    ee50:	0087f713          	and	a4,a5,8
    ee54:	08070463          	beqz	a4,eedc <__swsetup_r+0xb8>
    ee58:	01042703          	lw	a4,16(s0)
    ee5c:	0a070063          	beqz	a4,eefc <__swsetup_r+0xd8>
    ee60:	0017f693          	and	a3,a5,1
    ee64:	02068863          	beqz	a3,ee94 <__swsetup_r+0x70>
    ee68:	01442683          	lw	a3,20(s0)
    ee6c:	00042423          	sw	zero,8(s0)
    ee70:	00000513          	li	a0,0
    ee74:	40d006b3          	neg	a3,a3
    ee78:	00d42c23          	sw	a3,24(s0)
    ee7c:	02070a63          	beqz	a4,eeb0 <__swsetup_r+0x8c>
    ee80:	00c12083          	lw	ra,12(sp)
    ee84:	00812403          	lw	s0,8(sp)
    ee88:	00412483          	lw	s1,4(sp)
    ee8c:	01010113          	add	sp,sp,16
    ee90:	00008067          	ret
    ee94:	0027f693          	and	a3,a5,2
    ee98:	00000613          	li	a2,0
    ee9c:	00069463          	bnez	a3,eea4 <__swsetup_r+0x80>
    eea0:	01442603          	lw	a2,20(s0)
    eea4:	00c42423          	sw	a2,8(s0)
    eea8:	00000513          	li	a0,0
    eeac:	fc071ae3          	bnez	a4,ee80 <__swsetup_r+0x5c>
    eeb0:	0807f713          	and	a4,a5,128
    eeb4:	fc0706e3          	beqz	a4,ee80 <__swsetup_r+0x5c>
    eeb8:	0407e793          	or	a5,a5,64
    eebc:	00f41623          	sh	a5,12(s0)
    eec0:	fff00513          	li	a0,-1
    eec4:	fbdff06f          	j	ee80 <__swsetup_r+0x5c>
    eec8:	00078513          	mv	a0,a5
    eecc:	059000ef          	jal	f724 <__sinit>
    eed0:	00c41783          	lh	a5,12(s0)
    eed4:	0087f713          	and	a4,a5,8
    eed8:	f80710e3          	bnez	a4,ee58 <__swsetup_r+0x34>
    eedc:	0107f713          	and	a4,a5,16
    eee0:	06070a63          	beqz	a4,ef54 <__swsetup_r+0x130>
    eee4:	0047f713          	and	a4,a5,4
    eee8:	02071c63          	bnez	a4,ef20 <__swsetup_r+0xfc>
    eeec:	01042703          	lw	a4,16(s0)
    eef0:	0087e793          	or	a5,a5,8
    eef4:	00f41623          	sh	a5,12(s0)
    eef8:	f60714e3          	bnez	a4,ee60 <__swsetup_r+0x3c>
    eefc:	2807f693          	and	a3,a5,640
    ef00:	20000613          	li	a2,512
    ef04:	f4c68ee3          	beq	a3,a2,ee60 <__swsetup_r+0x3c>
    ef08:	00040593          	mv	a1,s0
    ef0c:	00048513          	mv	a0,s1
    ef10:	484040ef          	jal	13394 <__smakebuf_r>
    ef14:	00c41783          	lh	a5,12(s0)
    ef18:	01042703          	lw	a4,16(s0)
    ef1c:	f45ff06f          	j	ee60 <__swsetup_r+0x3c>
    ef20:	03042583          	lw	a1,48(s0)
    ef24:	00058e63          	beqz	a1,ef40 <__swsetup_r+0x11c>
    ef28:	04040713          	add	a4,s0,64
    ef2c:	00e58863          	beq	a1,a4,ef3c <__swsetup_r+0x118>
    ef30:	00048513          	mv	a0,s1
    ef34:	529000ef          	jal	fc5c <_free_r>
    ef38:	00c41783          	lh	a5,12(s0)
    ef3c:	02042823          	sw	zero,48(s0)
    ef40:	01042703          	lw	a4,16(s0)
    ef44:	fdb7f793          	and	a5,a5,-37
    ef48:	00042223          	sw	zero,4(s0)
    ef4c:	00e42023          	sw	a4,0(s0)
    ef50:	fa1ff06f          	j	eef0 <__swsetup_r+0xcc>
    ef54:	00900713          	li	a4,9
    ef58:	00e4a023          	sw	a4,0(s1)
    ef5c:	0407e793          	or	a5,a5,64
    ef60:	00f41623          	sh	a5,12(s0)
    ef64:	fff00513          	li	a0,-1
    ef68:	f19ff06f          	j	ee80 <__swsetup_r+0x5c>

0000ef6c <__register_exitproc>:
    ef6c:	fe010113          	add	sp,sp,-32
    ef70:	01212823          	sw	s2,16(sp)
    ef74:	82c18913          	add	s2,gp,-2004 # 25bc8 <__atexit_recursive_mutex>
    ef78:	00812c23          	sw	s0,24(sp)
    ef7c:	00050413          	mv	s0,a0
    ef80:	00092503          	lw	a0,0(s2)
    ef84:	00912a23          	sw	s1,20(sp)
    ef88:	01312623          	sw	s3,12(sp)
    ef8c:	01412423          	sw	s4,8(sp)
    ef90:	00112e23          	sw	ra,28(sp)
    ef94:	00058493          	mv	s1,a1
    ef98:	00060a13          	mv	s4,a2
    ef9c:	00068993          	mv	s3,a3
    efa0:	3d8040ef          	jal	13378 <__retarget_lock_acquire_recursive>
    efa4:	00015717          	auipc	a4,0x15
    efa8:	02472703          	lw	a4,36(a4) # 23fc8 <_global_impure_ptr>
    efac:	14872783          	lw	a5,328(a4)
    efb0:	08078663          	beqz	a5,f03c <__register_exitproc+0xd0>
    efb4:	0047a703          	lw	a4,4(a5)
    efb8:	01f00593          	li	a1,31
    efbc:	00092503          	lw	a0,0(s2)
    efc0:	08e5c463          	blt	a1,a4,f048 <__register_exitproc+0xdc>
    efc4:	00271593          	sll	a1,a4,0x2
    efc8:	02041e63          	bnez	s0,f004 <__register_exitproc+0x98>
    efcc:	00170713          	add	a4,a4,1
    efd0:	00e7a223          	sw	a4,4(a5)
    efd4:	00b787b3          	add	a5,a5,a1
    efd8:	0097a423          	sw	s1,8(a5)
    efdc:	3b4040ef          	jal	13390 <__retarget_lock_release_recursive>
    efe0:	00000513          	li	a0,0
    efe4:	01c12083          	lw	ra,28(sp)
    efe8:	01812403          	lw	s0,24(sp)
    efec:	01412483          	lw	s1,20(sp)
    eff0:	01012903          	lw	s2,16(sp)
    eff4:	00c12983          	lw	s3,12(sp)
    eff8:	00812a03          	lw	s4,8(sp)
    effc:	02010113          	add	sp,sp,32
    f000:	00008067          	ret
    f004:	00b78833          	add	a6,a5,a1
    f008:	09482423          	sw	s4,136(a6)
    f00c:	1887a683          	lw	a3,392(a5)
    f010:	00100613          	li	a2,1
    f014:	00e61633          	sll	a2,a2,a4
    f018:	00c6e6b3          	or	a3,a3,a2
    f01c:	18d7a423          	sw	a3,392(a5)
    f020:	11382423          	sw	s3,264(a6)
    f024:	00200693          	li	a3,2
    f028:	fad412e3          	bne	s0,a3,efcc <__register_exitproc+0x60>
    f02c:	18c7a683          	lw	a3,396(a5)
    f030:	00c6e6b3          	or	a3,a3,a2
    f034:	18d7a623          	sw	a3,396(a5)
    f038:	f95ff06f          	j	efcc <__register_exitproc+0x60>
    f03c:	14c70793          	add	a5,a4,332
    f040:	14f72423          	sw	a5,328(a4)
    f044:	f71ff06f          	j	efb4 <__register_exitproc+0x48>
    f048:	348040ef          	jal	13390 <__retarget_lock_release_recursive>
    f04c:	fff00513          	li	a0,-1
    f050:	f95ff06f          	j	efe4 <__register_exitproc+0x78>

0000f054 <__call_exitprocs>:
    f054:	fd010113          	add	sp,sp,-48
    f058:	01712623          	sw	s7,12(sp)
    f05c:	82c18b93          	add	s7,gp,-2004 # 25bc8 <__atexit_recursive_mutex>
    f060:	01612823          	sw	s6,16(sp)
    f064:	00050b13          	mv	s6,a0
    f068:	000ba503          	lw	a0,0(s7)
    f06c:	03212023          	sw	s2,32(sp)
    f070:	01412c23          	sw	s4,24(sp)
    f074:	01812423          	sw	s8,8(sp)
    f078:	02112623          	sw	ra,44(sp)
    f07c:	00058c13          	mv	s8,a1
    f080:	2f8040ef          	jal	13378 <__retarget_lock_acquire_recursive>
    f084:	00015a17          	auipc	s4,0x15
    f088:	f44a2a03          	lw	s4,-188(s4) # 23fc8 <_global_impure_ptr>
    f08c:	148a2903          	lw	s2,328(s4)
    f090:	08090c63          	beqz	s2,f128 <__call_exitprocs+0xd4>
    f094:	01312e23          	sw	s3,28(sp)
    f098:	01512a23          	sw	s5,20(sp)
    f09c:	02812423          	sw	s0,40(sp)
    f0a0:	02912223          	sw	s1,36(sp)
    f0a4:	01912223          	sw	s9,4(sp)
    f0a8:	fff00993          	li	s3,-1
    f0ac:	00100a93          	li	s5,1
    f0b0:	00492483          	lw	s1,4(s2)
    f0b4:	fff48413          	add	s0,s1,-1
    f0b8:	04044e63          	bltz	s0,f114 <__call_exitprocs+0xc0>
    f0bc:	00249493          	sll	s1,s1,0x2
    f0c0:	009904b3          	add	s1,s2,s1
    f0c4:	080c1463          	bnez	s8,f14c <__call_exitprocs+0xf8>
    f0c8:	00492783          	lw	a5,4(s2)
    f0cc:	0044a683          	lw	a3,4(s1)
    f0d0:	fff78793          	add	a5,a5,-1
    f0d4:	0c878063          	beq	a5,s0,f194 <__call_exitprocs+0x140>
    f0d8:	0004a223          	sw	zero,4(s1)
    f0dc:	02068663          	beqz	a3,f108 <__call_exitprocs+0xb4>
    f0e0:	18892783          	lw	a5,392(s2)
    f0e4:	008a9733          	sll	a4,s5,s0
    f0e8:	00492c83          	lw	s9,4(s2)
    f0ec:	00f777b3          	and	a5,a4,a5
    f0f0:	06079a63          	bnez	a5,f164 <__call_exitprocs+0x110>
    f0f4:	000680e7          	jalr	a3
    f0f8:	00492703          	lw	a4,4(s2)
    f0fc:	148a2783          	lw	a5,328(s4)
    f100:	09971463          	bne	a4,s9,f188 <__call_exitprocs+0x134>
    f104:	09279263          	bne	a5,s2,f188 <__call_exitprocs+0x134>
    f108:	fff40413          	add	s0,s0,-1
    f10c:	ffc48493          	add	s1,s1,-4
    f110:	fb341ae3          	bne	s0,s3,f0c4 <__call_exitprocs+0x70>
    f114:	02812403          	lw	s0,40(sp)
    f118:	02412483          	lw	s1,36(sp)
    f11c:	01c12983          	lw	s3,28(sp)
    f120:	01412a83          	lw	s5,20(sp)
    f124:	00412c83          	lw	s9,4(sp)
    f128:	000ba503          	lw	a0,0(s7)
    f12c:	02c12083          	lw	ra,44(sp)
    f130:	02012903          	lw	s2,32(sp)
    f134:	01812a03          	lw	s4,24(sp)
    f138:	01012b03          	lw	s6,16(sp)
    f13c:	00c12b83          	lw	s7,12(sp)
    f140:	00812c03          	lw	s8,8(sp)
    f144:	03010113          	add	sp,sp,48
    f148:	2480406f          	j	13390 <__retarget_lock_release_recursive>
    f14c:	1044a783          	lw	a5,260(s1)
    f150:	f7878ce3          	beq	a5,s8,f0c8 <__call_exitprocs+0x74>
    f154:	fff40413          	add	s0,s0,-1
    f158:	ffc48493          	add	s1,s1,-4
    f15c:	ff3418e3          	bne	s0,s3,f14c <__call_exitprocs+0xf8>
    f160:	fb5ff06f          	j	f114 <__call_exitprocs+0xc0>
    f164:	18c92783          	lw	a5,396(s2)
    f168:	0844a583          	lw	a1,132(s1)
    f16c:	00f77733          	and	a4,a4,a5
    f170:	02071663          	bnez	a4,f19c <__call_exitprocs+0x148>
    f174:	000b0513          	mv	a0,s6
    f178:	000680e7          	jalr	a3
    f17c:	00492703          	lw	a4,4(s2)
    f180:	148a2783          	lw	a5,328(s4)
    f184:	f99700e3          	beq	a4,s9,f104 <__call_exitprocs+0xb0>
    f188:	f80786e3          	beqz	a5,f114 <__call_exitprocs+0xc0>
    f18c:	00078913          	mv	s2,a5
    f190:	f21ff06f          	j	f0b0 <__call_exitprocs+0x5c>
    f194:	00892223          	sw	s0,4(s2)
    f198:	f45ff06f          	j	f0dc <__call_exitprocs+0x88>
    f19c:	00058513          	mv	a0,a1
    f1a0:	000680e7          	jalr	a3
    f1a4:	f55ff06f          	j	f0f8 <__call_exitprocs+0xa4>

0000f1a8 <register_fini>:
    f1a8:	00000793          	li	a5,0
    f1ac:	00078863          	beqz	a5,f1bc <register_fini+0x14>
    f1b0:	00001517          	auipc	a0,0x1
    f1b4:	91050513          	add	a0,a0,-1776 # fac0 <__libc_fini_array>
    f1b8:	b4dfc06f          	j	bd04 <atexit>
    f1bc:	00008067          	ret

0000f1c0 <_close_r>:
    f1c0:	ff010113          	add	sp,sp,-16
    f1c4:	00812423          	sw	s0,8(sp)
    f1c8:	00050413          	mv	s0,a0
    f1cc:	00058513          	mv	a0,a1
    f1d0:	00018797          	auipc	a5,0x18
    f1d4:	6807a823          	sw	zero,1680(a5) # 27860 <errno>
    f1d8:	00112623          	sw	ra,12(sp)
    f1dc:	2fd120ef          	jal	21cd8 <_close>
    f1e0:	fff00793          	li	a5,-1
    f1e4:	00f50a63          	beq	a0,a5,f1f8 <_close_r+0x38>
    f1e8:	00c12083          	lw	ra,12(sp)
    f1ec:	00812403          	lw	s0,8(sp)
    f1f0:	01010113          	add	sp,sp,16
    f1f4:	00008067          	ret
    f1f8:	00018797          	auipc	a5,0x18
    f1fc:	6687a783          	lw	a5,1640(a5) # 27860 <errno>
    f200:	fe0784e3          	beqz	a5,f1e8 <_close_r+0x28>
    f204:	00c12083          	lw	ra,12(sp)
    f208:	00f42023          	sw	a5,0(s0)
    f20c:	00812403          	lw	s0,8(sp)
    f210:	01010113          	add	sp,sp,16
    f214:	00008067          	ret

0000f218 <__sflush_r>:
    f218:	00c59703          	lh	a4,12(a1)
    f21c:	fe010113          	add	sp,sp,-32
    f220:	00812c23          	sw	s0,24(sp)
    f224:	01312623          	sw	s3,12(sp)
    f228:	00112e23          	sw	ra,28(sp)
    f22c:	00877793          	and	a5,a4,8
    f230:	00058413          	mv	s0,a1
    f234:	00050993          	mv	s3,a0
    f238:	12079063          	bnez	a5,f358 <__sflush_r+0x140>
    f23c:	000017b7          	lui	a5,0x1
    f240:	80078793          	add	a5,a5,-2048 # 800 <_start+0x44>
    f244:	0045a683          	lw	a3,4(a1)
    f248:	00f767b3          	or	a5,a4,a5
    f24c:	00f59623          	sh	a5,12(a1)
    f250:	18d05263          	blez	a3,f3d4 <__sflush_r+0x1bc>
    f254:	02842803          	lw	a6,40(s0)
    f258:	0e080463          	beqz	a6,f340 <__sflush_r+0x128>
    f25c:	00912a23          	sw	s1,20(sp)
    f260:	01371693          	sll	a3,a4,0x13
    f264:	0009a483          	lw	s1,0(s3)
    f268:	0009a023          	sw	zero,0(s3)
    f26c:	01c42583          	lw	a1,28(s0)
    f270:	1606ce63          	bltz	a3,f3ec <__sflush_r+0x1d4>
    f274:	00000613          	li	a2,0
    f278:	00100693          	li	a3,1
    f27c:	00098513          	mv	a0,s3
    f280:	000800e7          	jalr	a6
    f284:	fff00793          	li	a5,-1
    f288:	00050613          	mv	a2,a0
    f28c:	1af50463          	beq	a0,a5,f434 <__sflush_r+0x21c>
    f290:	00c41783          	lh	a5,12(s0)
    f294:	02842803          	lw	a6,40(s0)
    f298:	01c42583          	lw	a1,28(s0)
    f29c:	0047f793          	and	a5,a5,4
    f2a0:	00078e63          	beqz	a5,f2bc <__sflush_r+0xa4>
    f2a4:	00442703          	lw	a4,4(s0)
    f2a8:	03042783          	lw	a5,48(s0)
    f2ac:	40e60633          	sub	a2,a2,a4
    f2b0:	00078663          	beqz	a5,f2bc <__sflush_r+0xa4>
    f2b4:	03c42783          	lw	a5,60(s0)
    f2b8:	40f60633          	sub	a2,a2,a5
    f2bc:	00000693          	li	a3,0
    f2c0:	00098513          	mv	a0,s3
    f2c4:	000800e7          	jalr	a6
    f2c8:	fff00793          	li	a5,-1
    f2cc:	12f51463          	bne	a0,a5,f3f4 <__sflush_r+0x1dc>
    f2d0:	0009a683          	lw	a3,0(s3)
    f2d4:	01d00793          	li	a5,29
    f2d8:	00c41703          	lh	a4,12(s0)
    f2dc:	16d7ea63          	bltu	a5,a3,f450 <__sflush_r+0x238>
    f2e0:	204007b7          	lui	a5,0x20400
    f2e4:	00178793          	add	a5,a5,1 # 20400001 <__alt_data_end+0x203b6c21>
    f2e8:	00d7d7b3          	srl	a5,a5,a3
    f2ec:	0017f793          	and	a5,a5,1
    f2f0:	16078063          	beqz	a5,f450 <__sflush_r+0x238>
    f2f4:	01042603          	lw	a2,16(s0)
    f2f8:	fffff7b7          	lui	a5,0xfffff
    f2fc:	7ff78793          	add	a5,a5,2047 # fffff7ff <__alt_data_end+0xfffb641f>
    f300:	00f777b3          	and	a5,a4,a5
    f304:	00f41623          	sh	a5,12(s0)
    f308:	00042223          	sw	zero,4(s0)
    f30c:	00c42023          	sw	a2,0(s0)
    f310:	01371793          	sll	a5,a4,0x13
    f314:	0007d463          	bgez	a5,f31c <__sflush_r+0x104>
    f318:	10068263          	beqz	a3,f41c <__sflush_r+0x204>
    f31c:	03042583          	lw	a1,48(s0)
    f320:	0099a023          	sw	s1,0(s3)
    f324:	10058463          	beqz	a1,f42c <__sflush_r+0x214>
    f328:	04040793          	add	a5,s0,64
    f32c:	00f58663          	beq	a1,a5,f338 <__sflush_r+0x120>
    f330:	00098513          	mv	a0,s3
    f334:	129000ef          	jal	fc5c <_free_r>
    f338:	01412483          	lw	s1,20(sp)
    f33c:	02042823          	sw	zero,48(s0)
    f340:	00000513          	li	a0,0
    f344:	01c12083          	lw	ra,28(sp)
    f348:	01812403          	lw	s0,24(sp)
    f34c:	00c12983          	lw	s3,12(sp)
    f350:	02010113          	add	sp,sp,32
    f354:	00008067          	ret
    f358:	01212823          	sw	s2,16(sp)
    f35c:	0105a903          	lw	s2,16(a1)
    f360:	08090263          	beqz	s2,f3e4 <__sflush_r+0x1cc>
    f364:	00912a23          	sw	s1,20(sp)
    f368:	0005a483          	lw	s1,0(a1)
    f36c:	00377713          	and	a4,a4,3
    f370:	0125a023          	sw	s2,0(a1)
    f374:	412484b3          	sub	s1,s1,s2
    f378:	00000793          	li	a5,0
    f37c:	00071463          	bnez	a4,f384 <__sflush_r+0x16c>
    f380:	0145a783          	lw	a5,20(a1)
    f384:	00f42423          	sw	a5,8(s0)
    f388:	00904863          	bgtz	s1,f398 <__sflush_r+0x180>
    f38c:	0540006f          	j	f3e0 <__sflush_r+0x1c8>
    f390:	00a90933          	add	s2,s2,a0
    f394:	04905663          	blez	s1,f3e0 <__sflush_r+0x1c8>
    f398:	02442783          	lw	a5,36(s0)
    f39c:	01c42583          	lw	a1,28(s0)
    f3a0:	00048693          	mv	a3,s1
    f3a4:	00090613          	mv	a2,s2
    f3a8:	00098513          	mv	a0,s3
    f3ac:	000780e7          	jalr	a5
    f3b0:	40a484b3          	sub	s1,s1,a0
    f3b4:	fca04ee3          	bgtz	a0,f390 <__sflush_r+0x178>
    f3b8:	00c41703          	lh	a4,12(s0)
    f3bc:	01012903          	lw	s2,16(sp)
    f3c0:	04076713          	or	a4,a4,64
    f3c4:	01412483          	lw	s1,20(sp)
    f3c8:	00e41623          	sh	a4,12(s0)
    f3cc:	fff00513          	li	a0,-1
    f3d0:	f75ff06f          	j	f344 <__sflush_r+0x12c>
    f3d4:	03c5a683          	lw	a3,60(a1)
    f3d8:	e6d04ee3          	bgtz	a3,f254 <__sflush_r+0x3c>
    f3dc:	f65ff06f          	j	f340 <__sflush_r+0x128>
    f3e0:	01412483          	lw	s1,20(sp)
    f3e4:	01012903          	lw	s2,16(sp)
    f3e8:	f59ff06f          	j	f340 <__sflush_r+0x128>
    f3ec:	05042603          	lw	a2,80(s0)
    f3f0:	eadff06f          	j	f29c <__sflush_r+0x84>
    f3f4:	00c41703          	lh	a4,12(s0)
    f3f8:	01042683          	lw	a3,16(s0)
    f3fc:	fffff7b7          	lui	a5,0xfffff
    f400:	7ff78793          	add	a5,a5,2047 # fffff7ff <__alt_data_end+0xfffb641f>
    f404:	00f777b3          	and	a5,a4,a5
    f408:	00f41623          	sh	a5,12(s0)
    f40c:	00042223          	sw	zero,4(s0)
    f410:	00d42023          	sw	a3,0(s0)
    f414:	01371793          	sll	a5,a4,0x13
    f418:	f007d2e3          	bgez	a5,f31c <__sflush_r+0x104>
    f41c:	03042583          	lw	a1,48(s0)
    f420:	04a42823          	sw	a0,80(s0)
    f424:	0099a023          	sw	s1,0(s3)
    f428:	f00590e3          	bnez	a1,f328 <__sflush_r+0x110>
    f42c:	01412483          	lw	s1,20(sp)
    f430:	f11ff06f          	j	f340 <__sflush_r+0x128>
    f434:	0009a783          	lw	a5,0(s3)
    f438:	e4078ce3          	beqz	a5,f290 <__sflush_r+0x78>
    f43c:	01d00713          	li	a4,29
    f440:	00e78c63          	beq	a5,a4,f458 <__sflush_r+0x240>
    f444:	01600713          	li	a4,22
    f448:	00e78863          	beq	a5,a4,f458 <__sflush_r+0x240>
    f44c:	00c41703          	lh	a4,12(s0)
    f450:	04076713          	or	a4,a4,64
    f454:	f71ff06f          	j	f3c4 <__sflush_r+0x1ac>
    f458:	0099a023          	sw	s1,0(s3)
    f45c:	01412483          	lw	s1,20(sp)
    f460:	ee1ff06f          	j	f340 <__sflush_r+0x128>

0000f464 <_fflush_r>:
    f464:	ff010113          	add	sp,sp,-16
    f468:	00812423          	sw	s0,8(sp)
    f46c:	00912223          	sw	s1,4(sp)
    f470:	00112623          	sw	ra,12(sp)
    f474:	01212023          	sw	s2,0(sp)
    f478:	00050493          	mv	s1,a0
    f47c:	00058413          	mv	s0,a1
    f480:	00050663          	beqz	a0,f48c <_fflush_r+0x28>
    f484:	03852783          	lw	a5,56(a0)
    f488:	06078463          	beqz	a5,f4f0 <_fflush_r+0x8c>
    f48c:	00c41783          	lh	a5,12(s0)
    f490:	00000913          	li	s2,0
    f494:	04078063          	beqz	a5,f4d4 <_fflush_r+0x70>
    f498:	06442703          	lw	a4,100(s0)
    f49c:	00177713          	and	a4,a4,1
    f4a0:	00071663          	bnez	a4,f4ac <_fflush_r+0x48>
    f4a4:	2007f793          	and	a5,a5,512
    f4a8:	04078863          	beqz	a5,f4f8 <_fflush_r+0x94>
    f4ac:	00040593          	mv	a1,s0
    f4b0:	00048513          	mv	a0,s1
    f4b4:	d65ff0ef          	jal	f218 <__sflush_r>
    f4b8:	06442783          	lw	a5,100(s0)
    f4bc:	00050913          	mv	s2,a0
    f4c0:	0017f793          	and	a5,a5,1
    f4c4:	00079863          	bnez	a5,f4d4 <_fflush_r+0x70>
    f4c8:	00c45783          	lhu	a5,12(s0)
    f4cc:	2007f793          	and	a5,a5,512
    f4d0:	04078863          	beqz	a5,f520 <_fflush_r+0xbc>
    f4d4:	00c12083          	lw	ra,12(sp)
    f4d8:	00812403          	lw	s0,8(sp)
    f4dc:	00412483          	lw	s1,4(sp)
    f4e0:	00090513          	mv	a0,s2
    f4e4:	00012903          	lw	s2,0(sp)
    f4e8:	01010113          	add	sp,sp,16
    f4ec:	00008067          	ret
    f4f0:	234000ef          	jal	f724 <__sinit>
    f4f4:	f99ff06f          	j	f48c <_fflush_r+0x28>
    f4f8:	05842503          	lw	a0,88(s0)
    f4fc:	67d030ef          	jal	13378 <__retarget_lock_acquire_recursive>
    f500:	00040593          	mv	a1,s0
    f504:	00048513          	mv	a0,s1
    f508:	d11ff0ef          	jal	f218 <__sflush_r>
    f50c:	06442783          	lw	a5,100(s0)
    f510:	00050913          	mv	s2,a0
    f514:	0017f793          	and	a5,a5,1
    f518:	fa079ee3          	bnez	a5,f4d4 <_fflush_r+0x70>
    f51c:	fadff06f          	j	f4c8 <_fflush_r+0x64>
    f520:	05842503          	lw	a0,88(s0)
    f524:	66d030ef          	jal	13390 <__retarget_lock_release_recursive>
    f528:	00c12083          	lw	ra,12(sp)
    f52c:	00812403          	lw	s0,8(sp)
    f530:	00412483          	lw	s1,4(sp)
    f534:	00090513          	mv	a0,s2
    f538:	00012903          	lw	s2,0(sp)
    f53c:	01010113          	add	sp,sp,16
    f540:	00008067          	ret

0000f544 <fflush>:
    f544:	0a050a63          	beqz	a0,f5f8 <fflush+0xb4>
    f548:	ff010113          	add	sp,sp,-16
    f54c:	00812423          	sw	s0,8(sp)
    f550:	01212023          	sw	s2,0(sp)
    f554:	00112623          	sw	ra,12(sp)
    f558:	00912223          	sw	s1,4(sp)
    f55c:	8281a903          	lw	s2,-2008(gp) # 25bc4 <_impure_ptr>
    f560:	00050413          	mv	s0,a0
    f564:	00090663          	beqz	s2,f570 <fflush+0x2c>
    f568:	03892783          	lw	a5,56(s2)
    f56c:	06078463          	beqz	a5,f5d4 <fflush+0x90>
    f570:	00c41783          	lh	a5,12(s0)
    f574:	00000493          	li	s1,0
    f578:	04078063          	beqz	a5,f5b8 <fflush+0x74>
    f57c:	06442703          	lw	a4,100(s0)
    f580:	00177713          	and	a4,a4,1
    f584:	00071663          	bnez	a4,f590 <fflush+0x4c>
    f588:	2007f793          	and	a5,a5,512
    f58c:	04078a63          	beqz	a5,f5e0 <fflush+0x9c>
    f590:	00040593          	mv	a1,s0
    f594:	00090513          	mv	a0,s2
    f598:	c81ff0ef          	jal	f218 <__sflush_r>
    f59c:	06442783          	lw	a5,100(s0)
    f5a0:	00050493          	mv	s1,a0
    f5a4:	0017f793          	and	a5,a5,1
    f5a8:	00079863          	bnez	a5,f5b8 <fflush+0x74>
    f5ac:	00c45783          	lhu	a5,12(s0)
    f5b0:	2007f793          	and	a5,a5,512
    f5b4:	02078c63          	beqz	a5,f5ec <fflush+0xa8>
    f5b8:	00c12083          	lw	ra,12(sp)
    f5bc:	00812403          	lw	s0,8(sp)
    f5c0:	00012903          	lw	s2,0(sp)
    f5c4:	00048513          	mv	a0,s1
    f5c8:	00412483          	lw	s1,4(sp)
    f5cc:	01010113          	add	sp,sp,16
    f5d0:	00008067          	ret
    f5d4:	00090513          	mv	a0,s2
    f5d8:	14c000ef          	jal	f724 <__sinit>
    f5dc:	f95ff06f          	j	f570 <fflush+0x2c>
    f5e0:	05842503          	lw	a0,88(s0)
    f5e4:	595030ef          	jal	13378 <__retarget_lock_acquire_recursive>
    f5e8:	fa9ff06f          	j	f590 <fflush+0x4c>
    f5ec:	05842503          	lw	a0,88(s0)
    f5f0:	5a1030ef          	jal	13390 <__retarget_lock_release_recursive>
    f5f4:	fc5ff06f          	j	f5b8 <fflush+0x74>
    f5f8:	00000597          	auipc	a1,0x0
    f5fc:	e6c58593          	add	a1,a1,-404 # f464 <_fflush_r>
    f600:	00015517          	auipc	a0,0x15
    f604:	9c852503          	lw	a0,-1592(a0) # 23fc8 <_global_impure_ptr>
    f608:	7150006f          	j	1051c <_fwalk_reent>

0000f60c <_cleanup_r>:
    f60c:	0000b597          	auipc	a1,0xb
    f610:	a2058593          	add	a1,a1,-1504 # 1a02c <_fclose_r>
    f614:	7090006f          	j	1051c <_fwalk_reent>

0000f618 <__fp_lock>:
    f618:	06452783          	lw	a5,100(a0)
    f61c:	0017f793          	and	a5,a5,1
    f620:	00079863          	bnez	a5,f630 <__fp_lock+0x18>
    f624:	00c55783          	lhu	a5,12(a0)
    f628:	2007f793          	and	a5,a5,512
    f62c:	00078663          	beqz	a5,f638 <__fp_lock+0x20>
    f630:	00000513          	li	a0,0
    f634:	00008067          	ret
    f638:	05852503          	lw	a0,88(a0)
    f63c:	ff010113          	add	sp,sp,-16
    f640:	00112623          	sw	ra,12(sp)
    f644:	535030ef          	jal	13378 <__retarget_lock_acquire_recursive>
    f648:	00c12083          	lw	ra,12(sp)
    f64c:	00000513          	li	a0,0
    f650:	01010113          	add	sp,sp,16
    f654:	00008067          	ret

0000f658 <__fp_unlock>:
    f658:	06452783          	lw	a5,100(a0)
    f65c:	0017f793          	and	a5,a5,1
    f660:	00079863          	bnez	a5,f670 <__fp_unlock+0x18>
    f664:	00c55783          	lhu	a5,12(a0)
    f668:	2007f793          	and	a5,a5,512
    f66c:	00078663          	beqz	a5,f678 <__fp_unlock+0x20>
    f670:	00000513          	li	a0,0
    f674:	00008067          	ret
    f678:	05852503          	lw	a0,88(a0)
    f67c:	ff010113          	add	sp,sp,-16
    f680:	00112623          	sw	ra,12(sp)
    f684:	50d030ef          	jal	13390 <__retarget_lock_release_recursive>
    f688:	00c12083          	lw	ra,12(sp)
    f68c:	00000513          	li	a0,0
    f690:	01010113          	add	sp,sp,16
    f694:	00008067          	ret

0000f698 <__sfmoreglue>:
    f698:	ff010113          	add	sp,sp,-16
    f69c:	fff58793          	add	a5,a1,-1
    f6a0:	00812423          	sw	s0,8(sp)
    f6a4:	00179413          	sll	s0,a5,0x1
    f6a8:	00f40433          	add	s0,s0,a5
    f6ac:	00241413          	sll	s0,s0,0x2
    f6b0:	00f40433          	add	s0,s0,a5
    f6b4:	00341413          	sll	s0,s0,0x3
    f6b8:	01212023          	sw	s2,0(sp)
    f6bc:	00058913          	mv	s2,a1
    f6c0:	07440593          	add	a1,s0,116
    f6c4:	00912223          	sw	s1,4(sp)
    f6c8:	00112623          	sw	ra,12(sp)
    f6cc:	745030ef          	jal	13610 <_malloc_r>
    f6d0:	00050493          	mv	s1,a0
    f6d4:	02050063          	beqz	a0,f6f4 <__sfmoreglue+0x5c>
    f6d8:	00c50513          	add	a0,a0,12
    f6dc:	0004a023          	sw	zero,0(s1)
    f6e0:	0124a223          	sw	s2,4(s1)
    f6e4:	00a4a423          	sw	a0,8(s1)
    f6e8:	06840613          	add	a2,s0,104
    f6ec:	00000593          	li	a1,0
    f6f0:	801fc0ef          	jal	bef0 <memset>
    f6f4:	00c12083          	lw	ra,12(sp)
    f6f8:	00812403          	lw	s0,8(sp)
    f6fc:	00012903          	lw	s2,0(sp)
    f700:	00048513          	mv	a0,s1
    f704:	00412483          	lw	s1,4(sp)
    f708:	01010113          	add	sp,sp,16
    f70c:	00008067          	ret

0000f710 <_cleanup>:
    f710:	0000b597          	auipc	a1,0xb
    f714:	91c58593          	add	a1,a1,-1764 # 1a02c <_fclose_r>
    f718:	00015517          	auipc	a0,0x15
    f71c:	8b052503          	lw	a0,-1872(a0) # 23fc8 <_global_impure_ptr>
    f720:	5fd0006f          	j	1051c <_fwalk_reent>

0000f724 <__sinit>:
    f724:	fe010113          	add	sp,sp,-32
    f728:	00912a23          	sw	s1,20(sp)
    f72c:	00050493          	mv	s1,a0
    f730:	00018517          	auipc	a0,0x18
    f734:	15450513          	add	a0,a0,340 # 27884 <__lock___sinit_recursive_mutex>
    f738:	00112e23          	sw	ra,28(sp)
    f73c:	43d030ef          	jal	13378 <__retarget_lock_acquire_recursive>
    f740:	0384a783          	lw	a5,56(s1)
    f744:	00018517          	auipc	a0,0x18
    f748:	14050513          	add	a0,a0,320 # 27884 <__lock___sinit_recursive_mutex>
    f74c:	18079063          	bnez	a5,f8cc <__sinit+0x1a8>
    f750:	00812c23          	sw	s0,24(sp)
    f754:	01212823          	sw	s2,16(sp)
    f758:	01312623          	sw	s3,12(sp)
    f75c:	01412423          	sw	s4,8(sp)
    f760:	01512223          	sw	s5,4(sp)
    f764:	0044a403          	lw	s0,4(s1)
    f768:	00000717          	auipc	a4,0x0
    f76c:	ea470713          	add	a4,a4,-348 # f60c <_cleanup_r>
    f770:	02e4ae23          	sw	a4,60(s1)
    f774:	2ec48793          	add	a5,s1,748
    f778:	00300713          	li	a4,3
    f77c:	2ee4a223          	sw	a4,740(s1)
    f780:	2ef4a423          	sw	a5,744(s1)
    f784:	2e04a023          	sw	zero,736(s1)
    f788:	00400793          	li	a5,4
    f78c:	00f42623          	sw	a5,12(s0)
    f790:	00800613          	li	a2,8
    f794:	00000593          	li	a1,0
    f798:	00042023          	sw	zero,0(s0)
    f79c:	00042223          	sw	zero,4(s0)
    f7a0:	00042423          	sw	zero,8(s0)
    f7a4:	06042223          	sw	zero,100(s0)
    f7a8:	00042823          	sw	zero,16(s0)
    f7ac:	00042a23          	sw	zero,20(s0)
    f7b0:	00042c23          	sw	zero,24(s0)
    f7b4:	05c40513          	add	a0,s0,92
    f7b8:	f38fc0ef          	jal	bef0 <memset>
    f7bc:	00006a97          	auipc	s5,0x6
    f7c0:	2b8a8a93          	add	s5,s5,696 # 15a74 <__sread>
    f7c4:	00006a17          	auipc	s4,0x6
    f7c8:	314a0a13          	add	s4,s4,788 # 15ad8 <__swrite>
    f7cc:	00006997          	auipc	s3,0x6
    f7d0:	39498993          	add	s3,s3,916 # 15b60 <__sseek>
    f7d4:	00006917          	auipc	s2,0x6
    f7d8:	40490913          	add	s2,s2,1028 # 15bd8 <__sclose>
    f7dc:	03542023          	sw	s5,32(s0)
    f7e0:	03442223          	sw	s4,36(s0)
    f7e4:	03342423          	sw	s3,40(s0)
    f7e8:	03242623          	sw	s2,44(s0)
    f7ec:	05840513          	add	a0,s0,88
    f7f0:	00842e23          	sw	s0,28(s0)
    f7f4:	375030ef          	jal	13368 <__retarget_lock_init_recursive>
    f7f8:	0084a403          	lw	s0,8(s1)
    f7fc:	000107b7          	lui	a5,0x10
    f800:	00878793          	add	a5,a5,8 # 10008 <__sfvwrite_r+0xa4>
    f804:	00f42623          	sw	a5,12(s0)
    f808:	00800613          	li	a2,8
    f80c:	00000593          	li	a1,0
    f810:	00042023          	sw	zero,0(s0)
    f814:	00042223          	sw	zero,4(s0)
    f818:	00042423          	sw	zero,8(s0)
    f81c:	06042223          	sw	zero,100(s0)
    f820:	00042823          	sw	zero,16(s0)
    f824:	00042a23          	sw	zero,20(s0)
    f828:	00042c23          	sw	zero,24(s0)
    f82c:	05c40513          	add	a0,s0,92
    f830:	ec0fc0ef          	jal	bef0 <memset>
    f834:	05840513          	add	a0,s0,88
    f838:	03542023          	sw	s5,32(s0)
    f83c:	03442223          	sw	s4,36(s0)
    f840:	03342423          	sw	s3,40(s0)
    f844:	03242623          	sw	s2,44(s0)
    f848:	00842e23          	sw	s0,28(s0)
    f84c:	31d030ef          	jal	13368 <__retarget_lock_init_recursive>
    f850:	00c4a403          	lw	s0,12(s1)
    f854:	000207b7          	lui	a5,0x20
    f858:	01278793          	add	a5,a5,18 # 20012 <__subtf3+0x53e>
    f85c:	00f42623          	sw	a5,12(s0)
    f860:	00042023          	sw	zero,0(s0)
    f864:	00042223          	sw	zero,4(s0)
    f868:	00042423          	sw	zero,8(s0)
    f86c:	06042223          	sw	zero,100(s0)
    f870:	00042823          	sw	zero,16(s0)
    f874:	00042a23          	sw	zero,20(s0)
    f878:	00042c23          	sw	zero,24(s0)
    f87c:	00800613          	li	a2,8
    f880:	00000593          	li	a1,0
    f884:	05c40513          	add	a0,s0,92
    f888:	e68fc0ef          	jal	bef0 <memset>
    f88c:	05840513          	add	a0,s0,88
    f890:	03542023          	sw	s5,32(s0)
    f894:	03442223          	sw	s4,36(s0)
    f898:	03342423          	sw	s3,40(s0)
    f89c:	03242623          	sw	s2,44(s0)
    f8a0:	00842e23          	sw	s0,28(s0)
    f8a4:	2c5030ef          	jal	13368 <__retarget_lock_init_recursive>
    f8a8:	01812403          	lw	s0,24(sp)
    f8ac:	01012903          	lw	s2,16(sp)
    f8b0:	00c12983          	lw	s3,12(sp)
    f8b4:	00812a03          	lw	s4,8(sp)
    f8b8:	00412a83          	lw	s5,4(sp)
    f8bc:	00100793          	li	a5,1
    f8c0:	02f4ac23          	sw	a5,56(s1)
    f8c4:	00018517          	auipc	a0,0x18
    f8c8:	fc050513          	add	a0,a0,-64 # 27884 <__lock___sinit_recursive_mutex>
    f8cc:	01c12083          	lw	ra,28(sp)
    f8d0:	01412483          	lw	s1,20(sp)
    f8d4:	02010113          	add	sp,sp,32
    f8d8:	2b90306f          	j	13390 <__retarget_lock_release_recursive>

0000f8dc <__sfp>:
    f8dc:	fe010113          	add	sp,sp,-32
    f8e0:	01312623          	sw	s3,12(sp)
    f8e4:	00050993          	mv	s3,a0
    f8e8:	00018517          	auipc	a0,0x18
    f8ec:	f9850513          	add	a0,a0,-104 # 27880 <__lock___sfp_recursive_mutex>
    f8f0:	01212823          	sw	s2,16(sp)
    f8f4:	00112e23          	sw	ra,28(sp)
    f8f8:	00812c23          	sw	s0,24(sp)
    f8fc:	00912a23          	sw	s1,20(sp)
    f900:	279030ef          	jal	13378 <__retarget_lock_acquire_recursive>
    f904:	00014917          	auipc	s2,0x14
    f908:	6c492903          	lw	s2,1732(s2) # 23fc8 <_global_impure_ptr>
    f90c:	03892783          	lw	a5,56(s2)
    f910:	0c078063          	beqz	a5,f9d0 <__sfp+0xf4>
    f914:	2e090913          	add	s2,s2,736
    f918:	fff00493          	li	s1,-1
    f91c:	00492783          	lw	a5,4(s2)
    f920:	00892403          	lw	s0,8(s2)
    f924:	fff78793          	add	a5,a5,-1
    f928:	0007d863          	bgez	a5,f938 <__sfp+0x5c>
    f92c:	0940006f          	j	f9c0 <__sfp+0xe4>
    f930:	06840413          	add	s0,s0,104
    f934:	08978663          	beq	a5,s1,f9c0 <__sfp+0xe4>
    f938:	00c41703          	lh	a4,12(s0)
    f93c:	fff78793          	add	a5,a5,-1
    f940:	fe0718e3          	bnez	a4,f930 <__sfp+0x54>
    f944:	ffff07b7          	lui	a5,0xffff0
    f948:	00178793          	add	a5,a5,1 # ffff0001 <__alt_data_end+0xfffa6c21>
    f94c:	00f42623          	sw	a5,12(s0)
    f950:	05840513          	add	a0,s0,88
    f954:	06042223          	sw	zero,100(s0)
    f958:	211030ef          	jal	13368 <__retarget_lock_init_recursive>
    f95c:	00018517          	auipc	a0,0x18
    f960:	f2450513          	add	a0,a0,-220 # 27880 <__lock___sfp_recursive_mutex>
    f964:	22d030ef          	jal	13390 <__retarget_lock_release_recursive>
    f968:	00800613          	li	a2,8
    f96c:	00042023          	sw	zero,0(s0)
    f970:	00042423          	sw	zero,8(s0)
    f974:	00042223          	sw	zero,4(s0)
    f978:	00042823          	sw	zero,16(s0)
    f97c:	00042a23          	sw	zero,20(s0)
    f980:	00042c23          	sw	zero,24(s0)
    f984:	00000593          	li	a1,0
    f988:	05c40513          	add	a0,s0,92
    f98c:	d64fc0ef          	jal	bef0 <memset>
    f990:	02042823          	sw	zero,48(s0)
    f994:	02042a23          	sw	zero,52(s0)
    f998:	04042223          	sw	zero,68(s0)
    f99c:	04042423          	sw	zero,72(s0)
    f9a0:	01c12083          	lw	ra,28(sp)
    f9a4:	00040513          	mv	a0,s0
    f9a8:	01812403          	lw	s0,24(sp)
    f9ac:	01412483          	lw	s1,20(sp)
    f9b0:	01012903          	lw	s2,16(sp)
    f9b4:	00c12983          	lw	s3,12(sp)
    f9b8:	02010113          	add	sp,sp,32
    f9bc:	00008067          	ret
    f9c0:	00092403          	lw	s0,0(s2)
    f9c4:	00040c63          	beqz	s0,f9dc <__sfp+0x100>
    f9c8:	00040913          	mv	s2,s0
    f9cc:	f51ff06f          	j	f91c <__sfp+0x40>
    f9d0:	00090513          	mv	a0,s2
    f9d4:	d51ff0ef          	jal	f724 <__sinit>
    f9d8:	f3dff06f          	j	f914 <__sfp+0x38>
    f9dc:	1ac00593          	li	a1,428
    f9e0:	00098513          	mv	a0,s3
    f9e4:	42d030ef          	jal	13610 <_malloc_r>
    f9e8:	00050413          	mv	s0,a0
    f9ec:	02050863          	beqz	a0,fa1c <__sfp+0x140>
    f9f0:	00c50513          	add	a0,a0,12
    f9f4:	00400793          	li	a5,4
    f9f8:	00042023          	sw	zero,0(s0)
    f9fc:	00f42223          	sw	a5,4(s0)
    fa00:	00a42423          	sw	a0,8(s0)
    fa04:	1a000613          	li	a2,416
    fa08:	00000593          	li	a1,0
    fa0c:	ce4fc0ef          	jal	bef0 <memset>
    fa10:	00892023          	sw	s0,0(s2)
    fa14:	00040913          	mv	s2,s0
    fa18:	f05ff06f          	j	f91c <__sfp+0x40>
    fa1c:	00092023          	sw	zero,0(s2)
    fa20:	00018517          	auipc	a0,0x18
    fa24:	e6050513          	add	a0,a0,-416 # 27880 <__lock___sfp_recursive_mutex>
    fa28:	169030ef          	jal	13390 <__retarget_lock_release_recursive>
    fa2c:	00c00793          	li	a5,12
    fa30:	00f9a023          	sw	a5,0(s3)
    fa34:	f6dff06f          	j	f9a0 <__sfp+0xc4>

0000fa38 <__sfp_lock_acquire>:
    fa38:	00018517          	auipc	a0,0x18
    fa3c:	e4850513          	add	a0,a0,-440 # 27880 <__lock___sfp_recursive_mutex>
    fa40:	1390306f          	j	13378 <__retarget_lock_acquire_recursive>

0000fa44 <__sfp_lock_release>:
    fa44:	00018517          	auipc	a0,0x18
    fa48:	e3c50513          	add	a0,a0,-452 # 27880 <__lock___sfp_recursive_mutex>
    fa4c:	1450306f          	j	13390 <__retarget_lock_release_recursive>

0000fa50 <__sinit_lock_acquire>:
    fa50:	00018517          	auipc	a0,0x18
    fa54:	e3450513          	add	a0,a0,-460 # 27884 <__lock___sinit_recursive_mutex>
    fa58:	1210306f          	j	13378 <__retarget_lock_acquire_recursive>

0000fa5c <__sinit_lock_release>:
    fa5c:	00018517          	auipc	a0,0x18
    fa60:	e2850513          	add	a0,a0,-472 # 27884 <__lock___sinit_recursive_mutex>
    fa64:	12d0306f          	j	13390 <__retarget_lock_release_recursive>

0000fa68 <__fp_lock_all>:
    fa68:	ff010113          	add	sp,sp,-16
    fa6c:	00018517          	auipc	a0,0x18
    fa70:	e1450513          	add	a0,a0,-492 # 27880 <__lock___sfp_recursive_mutex>
    fa74:	00112623          	sw	ra,12(sp)
    fa78:	101030ef          	jal	13378 <__retarget_lock_acquire_recursive>
    fa7c:	00c12083          	lw	ra,12(sp)
    fa80:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
    fa84:	00000597          	auipc	a1,0x0
    fa88:	b9458593          	add	a1,a1,-1132 # f618 <__fp_lock>
    fa8c:	01010113          	add	sp,sp,16
    fa90:	1e90006f          	j	10478 <_fwalk>

0000fa94 <__fp_unlock_all>:
    fa94:	ff010113          	add	sp,sp,-16
    fa98:	00000597          	auipc	a1,0x0
    fa9c:	bc058593          	add	a1,a1,-1088 # f658 <__fp_unlock>
    faa0:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
    faa4:	00112623          	sw	ra,12(sp)
    faa8:	1d1000ef          	jal	10478 <_fwalk>
    faac:	00c12083          	lw	ra,12(sp)
    fab0:	00018517          	auipc	a0,0x18
    fab4:	dd050513          	add	a0,a0,-560 # 27880 <__lock___sfp_recursive_mutex>
    fab8:	01010113          	add	sp,sp,16
    fabc:	0d50306f          	j	13390 <__retarget_lock_release_recursive>

0000fac0 <__libc_fini_array>:
    fac0:	ff010113          	add	sp,sp,-16
    fac4:	00812423          	sw	s0,8(sp)
    fac8:	00013797          	auipc	a5,0x13
    facc:	10878793          	add	a5,a5,264 # 22bd0 <__fini_array_end>
    fad0:	00013417          	auipc	s0,0x13
    fad4:	10040413          	add	s0,s0,256 # 22bd0 <__fini_array_end>
    fad8:	40f40433          	sub	s0,s0,a5
    fadc:	00912223          	sw	s1,4(sp)
    fae0:	00112623          	sw	ra,12(sp)
    fae4:	40245493          	sra	s1,s0,0x2
    fae8:	02048063          	beqz	s1,fb08 <__libc_fini_array+0x48>
    faec:	ffc40413          	add	s0,s0,-4
    faf0:	00f40433          	add	s0,s0,a5
    faf4:	00042783          	lw	a5,0(s0)
    faf8:	fff48493          	add	s1,s1,-1
    fafc:	ffc40413          	add	s0,s0,-4
    fb00:	000780e7          	jalr	a5
    fb04:	fe0498e3          	bnez	s1,faf4 <__libc_fini_array+0x34>
    fb08:	00c12083          	lw	ra,12(sp)
    fb0c:	00812403          	lw	s0,8(sp)
    fb10:	00412483          	lw	s1,4(sp)
    fb14:	01010113          	add	sp,sp,16
    fb18:	00008067          	ret

0000fb1c <_malloc_trim_r>:
    fb1c:	fe010113          	add	sp,sp,-32
    fb20:	00812c23          	sw	s0,24(sp)
    fb24:	00912a23          	sw	s1,20(sp)
    fb28:	01212823          	sw	s2,16(sp)
    fb2c:	01312623          	sw	s3,12(sp)
    fb30:	01412423          	sw	s4,8(sp)
    fb34:	00058993          	mv	s3,a1
    fb38:	00112e23          	sw	ra,28(sp)
    fb3c:	00050913          	mv	s2,a0
    fb40:	00016a17          	auipc	s4,0x16
    fb44:	ae8a0a13          	add	s4,s4,-1304 # 25628 <__malloc_av_>
    fb48:	fbdf00ef          	jal	b04 <__malloc_lock>
    fb4c:	008a2703          	lw	a4,8(s4)
    fb50:	000017b7          	lui	a5,0x1
    fb54:	fef78793          	add	a5,a5,-17 # fef <OSEventPendMulti+0xdb>
    fb58:	00472483          	lw	s1,4(a4)
    fb5c:	00001737          	lui	a4,0x1
    fb60:	ffc4f493          	and	s1,s1,-4
    fb64:	00f48433          	add	s0,s1,a5
    fb68:	41340433          	sub	s0,s0,s3
    fb6c:	00c45413          	srl	s0,s0,0xc
    fb70:	fff40413          	add	s0,s0,-1
    fb74:	00c41413          	sll	s0,s0,0xc
    fb78:	00e44e63          	blt	s0,a4,fb94 <_malloc_trim_r+0x78>
    fb7c:	00000593          	li	a1,0
    fb80:	00090513          	mv	a0,s2
    fb84:	5b5050ef          	jal	15938 <_sbrk_r>
    fb88:	008a2783          	lw	a5,8(s4)
    fb8c:	009787b3          	add	a5,a5,s1
    fb90:	02f50863          	beq	a0,a5,fbc0 <_malloc_trim_r+0xa4>
    fb94:	00090513          	mv	a0,s2
    fb98:	8a0f10ef          	jal	c38 <__malloc_unlock>
    fb9c:	01c12083          	lw	ra,28(sp)
    fba0:	01812403          	lw	s0,24(sp)
    fba4:	01412483          	lw	s1,20(sp)
    fba8:	01012903          	lw	s2,16(sp)
    fbac:	00c12983          	lw	s3,12(sp)
    fbb0:	00812a03          	lw	s4,8(sp)
    fbb4:	00000513          	li	a0,0
    fbb8:	02010113          	add	sp,sp,32
    fbbc:	00008067          	ret
    fbc0:	408005b3          	neg	a1,s0
    fbc4:	00090513          	mv	a0,s2
    fbc8:	571050ef          	jal	15938 <_sbrk_r>
    fbcc:	fff00793          	li	a5,-1
    fbd0:	04f50a63          	beq	a0,a5,fc24 <_malloc_trim_r+0x108>
    fbd4:	0001e717          	auipc	a4,0x1e
    fbd8:	5d870713          	add	a4,a4,1496 # 2e1ac <__malloc_current_mallinfo>
    fbdc:	00072783          	lw	a5,0(a4)
    fbe0:	008a2683          	lw	a3,8(s4)
    fbe4:	408484b3          	sub	s1,s1,s0
    fbe8:	0014e493          	or	s1,s1,1
    fbec:	408787b3          	sub	a5,a5,s0
    fbf0:	00090513          	mv	a0,s2
    fbf4:	0096a223          	sw	s1,4(a3)
    fbf8:	00f72023          	sw	a5,0(a4)
    fbfc:	83cf10ef          	jal	c38 <__malloc_unlock>
    fc00:	01c12083          	lw	ra,28(sp)
    fc04:	01812403          	lw	s0,24(sp)
    fc08:	01412483          	lw	s1,20(sp)
    fc0c:	01012903          	lw	s2,16(sp)
    fc10:	00c12983          	lw	s3,12(sp)
    fc14:	00812a03          	lw	s4,8(sp)
    fc18:	00100513          	li	a0,1
    fc1c:	02010113          	add	sp,sp,32
    fc20:	00008067          	ret
    fc24:	00000593          	li	a1,0
    fc28:	00090513          	mv	a0,s2
    fc2c:	50d050ef          	jal	15938 <_sbrk_r>
    fc30:	008a2703          	lw	a4,8(s4)
    fc34:	00f00693          	li	a3,15
    fc38:	40e507b3          	sub	a5,a0,a4
    fc3c:	f4f6dce3          	bge	a3,a5,fb94 <_malloc_trim_r+0x78>
    fc40:	8301a683          	lw	a3,-2000(gp) # 25bcc <__malloc_sbrk_base>
    fc44:	40d50533          	sub	a0,a0,a3
    fc48:	0017e793          	or	a5,a5,1
    fc4c:	0001e697          	auipc	a3,0x1e
    fc50:	56a6a023          	sw	a0,1376(a3) # 2e1ac <__malloc_current_mallinfo>
    fc54:	00f72223          	sw	a5,4(a4)
    fc58:	f3dff06f          	j	fb94 <_malloc_trim_r+0x78>

0000fc5c <_free_r>:
    fc5c:	18058263          	beqz	a1,fde0 <_free_r+0x184>
    fc60:	ff010113          	add	sp,sp,-16
    fc64:	00812423          	sw	s0,8(sp)
    fc68:	00912223          	sw	s1,4(sp)
    fc6c:	00058413          	mv	s0,a1
    fc70:	00050493          	mv	s1,a0
    fc74:	00112623          	sw	ra,12(sp)
    fc78:	e8df00ef          	jal	b04 <__malloc_lock>
    fc7c:	ffc42583          	lw	a1,-4(s0)
    fc80:	ff840713          	add	a4,s0,-8
    fc84:	00016517          	auipc	a0,0x16
    fc88:	9a450513          	add	a0,a0,-1628 # 25628 <__malloc_av_>
    fc8c:	ffe5f793          	and	a5,a1,-2
    fc90:	00f70633          	add	a2,a4,a5
    fc94:	00462683          	lw	a3,4(a2)
    fc98:	00852803          	lw	a6,8(a0)
    fc9c:	ffc6f693          	and	a3,a3,-4
    fca0:	1ac80263          	beq	a6,a2,fe44 <_free_r+0x1e8>
    fca4:	00d62223          	sw	a3,4(a2)
    fca8:	0015f593          	and	a1,a1,1
    fcac:	00d60833          	add	a6,a2,a3
    fcb0:	0a059063          	bnez	a1,fd50 <_free_r+0xf4>
    fcb4:	ff842303          	lw	t1,-8(s0)
    fcb8:	00482583          	lw	a1,4(a6)
    fcbc:	00016897          	auipc	a7,0x16
    fcc0:	97488893          	add	a7,a7,-1676 # 25630 <__malloc_av_+0x8>
    fcc4:	40670733          	sub	a4,a4,t1
    fcc8:	00872803          	lw	a6,8(a4)
    fccc:	006787b3          	add	a5,a5,t1
    fcd0:	0015f593          	and	a1,a1,1
    fcd4:	15180263          	beq	a6,a7,fe18 <_free_r+0x1bc>
    fcd8:	00c72303          	lw	t1,12(a4)
    fcdc:	00682623          	sw	t1,12(a6)
    fce0:	01032423          	sw	a6,8(t1)
    fce4:	1a058863          	beqz	a1,fe94 <_free_r+0x238>
    fce8:	0017e693          	or	a3,a5,1
    fcec:	00d72223          	sw	a3,4(a4)
    fcf0:	00f62023          	sw	a5,0(a2)
    fcf4:	1ff00693          	li	a3,511
    fcf8:	06f6ec63          	bltu	a3,a5,fd70 <_free_r+0x114>
    fcfc:	ff87f693          	and	a3,a5,-8
    fd00:	00868693          	add	a3,a3,8
    fd04:	00452583          	lw	a1,4(a0)
    fd08:	00d506b3          	add	a3,a0,a3
    fd0c:	0006a603          	lw	a2,0(a3)
    fd10:	0057d813          	srl	a6,a5,0x5
    fd14:	00100793          	li	a5,1
    fd18:	010797b3          	sll	a5,a5,a6
    fd1c:	00b7e7b3          	or	a5,a5,a1
    fd20:	ff868593          	add	a1,a3,-8
    fd24:	00b72623          	sw	a1,12(a4)
    fd28:	00c72423          	sw	a2,8(a4)
    fd2c:	00f52223          	sw	a5,4(a0)
    fd30:	00e6a023          	sw	a4,0(a3)
    fd34:	00e62623          	sw	a4,12(a2)
    fd38:	00812403          	lw	s0,8(sp)
    fd3c:	00c12083          	lw	ra,12(sp)
    fd40:	00048513          	mv	a0,s1
    fd44:	00412483          	lw	s1,4(sp)
    fd48:	01010113          	add	sp,sp,16
    fd4c:	eedf006f          	j	c38 <__malloc_unlock>
    fd50:	00482583          	lw	a1,4(a6)
    fd54:	0015f593          	and	a1,a1,1
    fd58:	08058663          	beqz	a1,fde4 <_free_r+0x188>
    fd5c:	0017e693          	or	a3,a5,1
    fd60:	fed42e23          	sw	a3,-4(s0)
    fd64:	00f62023          	sw	a5,0(a2)
    fd68:	1ff00693          	li	a3,511
    fd6c:	f8f6f8e3          	bgeu	a3,a5,fcfc <_free_r+0xa0>
    fd70:	0097d693          	srl	a3,a5,0x9
    fd74:	00400613          	li	a2,4
    fd78:	12d66263          	bltu	a2,a3,fe9c <_free_r+0x240>
    fd7c:	0067d693          	srl	a3,a5,0x6
    fd80:	03968593          	add	a1,a3,57
    fd84:	03868613          	add	a2,a3,56
    fd88:	00359593          	sll	a1,a1,0x3
    fd8c:	00b505b3          	add	a1,a0,a1
    fd90:	0005a683          	lw	a3,0(a1)
    fd94:	ff858593          	add	a1,a1,-8
    fd98:	00d59863          	bne	a1,a3,fda8 <_free_r+0x14c>
    fd9c:	1580006f          	j	fef4 <_free_r+0x298>
    fda0:	0086a683          	lw	a3,8(a3)
    fda4:	00d58863          	beq	a1,a3,fdb4 <_free_r+0x158>
    fda8:	0046a603          	lw	a2,4(a3)
    fdac:	ffc67613          	and	a2,a2,-4
    fdb0:	fec7e8e3          	bltu	a5,a2,fda0 <_free_r+0x144>
    fdb4:	00c6a583          	lw	a1,12(a3)
    fdb8:	00b72623          	sw	a1,12(a4)
    fdbc:	00d72423          	sw	a3,8(a4)
    fdc0:	00812403          	lw	s0,8(sp)
    fdc4:	00c12083          	lw	ra,12(sp)
    fdc8:	00e5a423          	sw	a4,8(a1)
    fdcc:	00048513          	mv	a0,s1
    fdd0:	00412483          	lw	s1,4(sp)
    fdd4:	00e6a623          	sw	a4,12(a3)
    fdd8:	01010113          	add	sp,sp,16
    fddc:	e5df006f          	j	c38 <__malloc_unlock>
    fde0:	00008067          	ret
    fde4:	00d787b3          	add	a5,a5,a3
    fde8:	00016897          	auipc	a7,0x16
    fdec:	84888893          	add	a7,a7,-1976 # 25630 <__malloc_av_+0x8>
    fdf0:	00862683          	lw	a3,8(a2)
    fdf4:	0d168e63          	beq	a3,a7,fed0 <_free_r+0x274>
    fdf8:	00c62803          	lw	a6,12(a2)
    fdfc:	0017e593          	or	a1,a5,1
    fe00:	00f70633          	add	a2,a4,a5
    fe04:	0106a623          	sw	a6,12(a3)
    fe08:	00d82423          	sw	a3,8(a6)
    fe0c:	00b72223          	sw	a1,4(a4)
    fe10:	00f62023          	sw	a5,0(a2)
    fe14:	ee1ff06f          	j	fcf4 <_free_r+0x98>
    fe18:	12059e63          	bnez	a1,ff54 <_free_r+0x2f8>
    fe1c:	00862583          	lw	a1,8(a2)
    fe20:	00c62603          	lw	a2,12(a2)
    fe24:	00f686b3          	add	a3,a3,a5
    fe28:	0016e793          	or	a5,a3,1
    fe2c:	00c5a623          	sw	a2,12(a1)
    fe30:	00b62423          	sw	a1,8(a2)
    fe34:	00f72223          	sw	a5,4(a4)
    fe38:	00d70733          	add	a4,a4,a3
    fe3c:	00d72023          	sw	a3,0(a4)
    fe40:	ef9ff06f          	j	fd38 <_free_r+0xdc>
    fe44:	0015f593          	and	a1,a1,1
    fe48:	00d786b3          	add	a3,a5,a3
    fe4c:	02059063          	bnez	a1,fe6c <_free_r+0x210>
    fe50:	ff842583          	lw	a1,-8(s0)
    fe54:	40b70733          	sub	a4,a4,a1
    fe58:	00c72783          	lw	a5,12(a4)
    fe5c:	00872603          	lw	a2,8(a4)
    fe60:	00b686b3          	add	a3,a3,a1
    fe64:	00f62623          	sw	a5,12(a2)
    fe68:	00c7a423          	sw	a2,8(a5)
    fe6c:	0016e793          	or	a5,a3,1
    fe70:	00f72223          	sw	a5,4(a4)
    fe74:	00e52423          	sw	a4,8(a0)
    fe78:	8341a783          	lw	a5,-1996(gp) # 25bd0 <__malloc_trim_threshold>
    fe7c:	eaf6eee3          	bltu	a3,a5,fd38 <_free_r+0xdc>
    fe80:	00018597          	auipc	a1,0x18
    fe84:	a105a583          	lw	a1,-1520(a1) # 27890 <__malloc_top_pad>
    fe88:	00048513          	mv	a0,s1
    fe8c:	c91ff0ef          	jal	fb1c <_malloc_trim_r>
    fe90:	ea9ff06f          	j	fd38 <_free_r+0xdc>
    fe94:	00d787b3          	add	a5,a5,a3
    fe98:	f59ff06f          	j	fdf0 <_free_r+0x194>
    fe9c:	01400613          	li	a2,20
    fea0:	02d67063          	bgeu	a2,a3,fec0 <_free_r+0x264>
    fea4:	05400613          	li	a2,84
    fea8:	06d66463          	bltu	a2,a3,ff10 <_free_r+0x2b4>
    feac:	00c7d693          	srl	a3,a5,0xc
    feb0:	06f68593          	add	a1,a3,111
    feb4:	06e68613          	add	a2,a3,110
    feb8:	00359593          	sll	a1,a1,0x3
    febc:	ed1ff06f          	j	fd8c <_free_r+0x130>
    fec0:	05c68593          	add	a1,a3,92
    fec4:	05b68613          	add	a2,a3,91
    fec8:	00359593          	sll	a1,a1,0x3
    fecc:	ec1ff06f          	j	fd8c <_free_r+0x130>
    fed0:	00e52a23          	sw	a4,20(a0)
    fed4:	00e52823          	sw	a4,16(a0)
    fed8:	0017e693          	or	a3,a5,1
    fedc:	01172623          	sw	a7,12(a4)
    fee0:	01172423          	sw	a7,8(a4)
    fee4:	00d72223          	sw	a3,4(a4)
    fee8:	00f70733          	add	a4,a4,a5
    feec:	00f72023          	sw	a5,0(a4)
    fef0:	e49ff06f          	j	fd38 <_free_r+0xdc>
    fef4:	00452803          	lw	a6,4(a0)
    fef8:	40265613          	sra	a2,a2,0x2
    fefc:	00100793          	li	a5,1
    ff00:	00c797b3          	sll	a5,a5,a2
    ff04:	0107e7b3          	or	a5,a5,a6
    ff08:	00f52223          	sw	a5,4(a0)
    ff0c:	eadff06f          	j	fdb8 <_free_r+0x15c>
    ff10:	15400613          	li	a2,340
    ff14:	00d66c63          	bltu	a2,a3,ff2c <_free_r+0x2d0>
    ff18:	00f7d693          	srl	a3,a5,0xf
    ff1c:	07868593          	add	a1,a3,120
    ff20:	07768613          	add	a2,a3,119
    ff24:	00359593          	sll	a1,a1,0x3
    ff28:	e65ff06f          	j	fd8c <_free_r+0x130>
    ff2c:	55400613          	li	a2,1364
    ff30:	00d66c63          	bltu	a2,a3,ff48 <_free_r+0x2ec>
    ff34:	0127d693          	srl	a3,a5,0x12
    ff38:	07d68593          	add	a1,a3,125
    ff3c:	07c68613          	add	a2,a3,124
    ff40:	00359593          	sll	a1,a1,0x3
    ff44:	e49ff06f          	j	fd8c <_free_r+0x130>
    ff48:	3f800593          	li	a1,1016
    ff4c:	07e00613          	li	a2,126
    ff50:	e3dff06f          	j	fd8c <_free_r+0x130>
    ff54:	0017e693          	or	a3,a5,1
    ff58:	00d72223          	sw	a3,4(a4)
    ff5c:	00f62023          	sw	a5,0(a2)
    ff60:	dd9ff06f          	j	fd38 <_free_r+0xdc>

0000ff64 <__sfvwrite_r>:
    ff64:	00862783          	lw	a5,8(a2)
    ff68:	2c078463          	beqz	a5,10230 <__sfvwrite_r+0x2cc>
    ff6c:	00c59683          	lh	a3,12(a1)
    ff70:	fd010113          	add	sp,sp,-48
    ff74:	02812423          	sw	s0,40(sp)
    ff78:	01412c23          	sw	s4,24(sp)
    ff7c:	01612823          	sw	s6,16(sp)
    ff80:	02112623          	sw	ra,44(sp)
    ff84:	0086f793          	and	a5,a3,8
    ff88:	00060b13          	mv	s6,a2
    ff8c:	00050a13          	mv	s4,a0
    ff90:	00058413          	mv	s0,a1
    ff94:	08078e63          	beqz	a5,10030 <__sfvwrite_r+0xcc>
    ff98:	0105a783          	lw	a5,16(a1)
    ff9c:	08078a63          	beqz	a5,10030 <__sfvwrite_r+0xcc>
    ffa0:	02912223          	sw	s1,36(sp)
    ffa4:	03212023          	sw	s2,32(sp)
    ffa8:	01312e23          	sw	s3,28(sp)
    ffac:	01512a23          	sw	s5,20(sp)
    ffb0:	0026f793          	and	a5,a3,2
    ffb4:	000b2483          	lw	s1,0(s6)
    ffb8:	0a078463          	beqz	a5,10060 <__sfvwrite_r+0xfc>
    ffbc:	02442783          	lw	a5,36(s0)
    ffc0:	01c42583          	lw	a1,28(s0)
    ffc4:	80000ab7          	lui	s5,0x80000
    ffc8:	00000993          	li	s3,0
    ffcc:	00000913          	li	s2,0
    ffd0:	c00a8a93          	add	s5,s5,-1024 # 7ffffc00 <__alt_data_end+0x7ffb6820>
    ffd4:	00098613          	mv	a2,s3
    ffd8:	000a0513          	mv	a0,s4
    ffdc:	04090263          	beqz	s2,10020 <__sfvwrite_r+0xbc>
    ffe0:	00090693          	mv	a3,s2
    ffe4:	012af463          	bgeu	s5,s2,ffec <__sfvwrite_r+0x88>
    ffe8:	000a8693          	mv	a3,s5
    ffec:	000780e7          	jalr	a5
    fff0:	46a05263          	blez	a0,10454 <__sfvwrite_r+0x4f0>
    fff4:	008b2783          	lw	a5,8(s6)
    fff8:	00a989b3          	add	s3,s3,a0
    fffc:	40a90933          	sub	s2,s2,a0
   10000:	40a787b3          	sub	a5,a5,a0
   10004:	00fb2423          	sw	a5,8(s6)
   10008:	1a078663          	beqz	a5,101b4 <__sfvwrite_r+0x250>
   1000c:	02442783          	lw	a5,36(s0)
   10010:	01c42583          	lw	a1,28(s0)
   10014:	00098613          	mv	a2,s3
   10018:	000a0513          	mv	a0,s4
   1001c:	fc0912e3          	bnez	s2,ffe0 <__sfvwrite_r+0x7c>
   10020:	0004a983          	lw	s3,0(s1)
   10024:	0044a903          	lw	s2,4(s1)
   10028:	00848493          	add	s1,s1,8
   1002c:	fa9ff06f          	j	ffd4 <__sfvwrite_r+0x70>
   10030:	00040593          	mv	a1,s0
   10034:	000a0513          	mv	a0,s4
   10038:	dedfe0ef          	jal	ee24 <__swsetup_r>
   1003c:	1c051c63          	bnez	a0,10214 <__sfvwrite_r+0x2b0>
   10040:	00c41683          	lh	a3,12(s0)
   10044:	02912223          	sw	s1,36(sp)
   10048:	03212023          	sw	s2,32(sp)
   1004c:	01312e23          	sw	s3,28(sp)
   10050:	01512a23          	sw	s5,20(sp)
   10054:	0026f793          	and	a5,a3,2
   10058:	000b2483          	lw	s1,0(s6)
   1005c:	f60790e3          	bnez	a5,ffbc <__sfvwrite_r+0x58>
   10060:	01712623          	sw	s7,12(sp)
   10064:	01812423          	sw	s8,8(sp)
   10068:	0016f793          	and	a5,a3,1
   1006c:	1c079663          	bnez	a5,10238 <__sfvwrite_r+0x2d4>
   10070:	00042783          	lw	a5,0(s0)
   10074:	00842703          	lw	a4,8(s0)
   10078:	80000ab7          	lui	s5,0x80000
   1007c:	01912223          	sw	s9,4(sp)
   10080:	00000b93          	li	s7,0
   10084:	00000993          	li	s3,0
   10088:	fffa8a93          	add	s5,s5,-1 # 7fffffff <__alt_data_end+0x7ffb6c1f>
   1008c:	00078513          	mv	a0,a5
   10090:	00070c13          	mv	s8,a4
   10094:	10098263          	beqz	s3,10198 <__sfvwrite_r+0x234>
   10098:	2006f613          	and	a2,a3,512
   1009c:	28060863          	beqz	a2,1032c <__sfvwrite_r+0x3c8>
   100a0:	00070c93          	mv	s9,a4
   100a4:	32e9e863          	bltu	s3,a4,103d4 <__sfvwrite_r+0x470>
   100a8:	4806f713          	and	a4,a3,1152
   100ac:	08070a63          	beqz	a4,10140 <__sfvwrite_r+0x1dc>
   100b0:	01442603          	lw	a2,20(s0)
   100b4:	01042583          	lw	a1,16(s0)
   100b8:	00161713          	sll	a4,a2,0x1
   100bc:	00c70733          	add	a4,a4,a2
   100c0:	40b78933          	sub	s2,a5,a1
   100c4:	01f75c13          	srl	s8,a4,0x1f
   100c8:	00ec0c33          	add	s8,s8,a4
   100cc:	00190793          	add	a5,s2,1
   100d0:	401c5c13          	sra	s8,s8,0x1
   100d4:	013787b3          	add	a5,a5,s3
   100d8:	000c0613          	mv	a2,s8
   100dc:	00fc7663          	bgeu	s8,a5,100e8 <__sfvwrite_r+0x184>
   100e0:	00078c13          	mv	s8,a5
   100e4:	00078613          	mv	a2,a5
   100e8:	4006f693          	and	a3,a3,1024
   100ec:	32068063          	beqz	a3,1040c <__sfvwrite_r+0x4a8>
   100f0:	00060593          	mv	a1,a2
   100f4:	000a0513          	mv	a0,s4
   100f8:	518030ef          	jal	13610 <_malloc_r>
   100fc:	00050c93          	mv	s9,a0
   10100:	34050e63          	beqz	a0,1045c <__sfvwrite_r+0x4f8>
   10104:	01042583          	lw	a1,16(s0)
   10108:	00090613          	mv	a2,s2
   1010c:	c41fb0ef          	jal	bd4c <memcpy>
   10110:	00c45783          	lhu	a5,12(s0)
   10114:	b7f7f793          	and	a5,a5,-1153
   10118:	0807e793          	or	a5,a5,128
   1011c:	00f41623          	sh	a5,12(s0)
   10120:	012c8533          	add	a0,s9,s2
   10124:	412c07b3          	sub	a5,s8,s2
   10128:	01942823          	sw	s9,16(s0)
   1012c:	01842a23          	sw	s8,20(s0)
   10130:	00a42023          	sw	a0,0(s0)
   10134:	00098c13          	mv	s8,s3
   10138:	00f42423          	sw	a5,8(s0)
   1013c:	00098c93          	mv	s9,s3
   10140:	000c8613          	mv	a2,s9
   10144:	000b8593          	mv	a1,s7
   10148:	569030ef          	jal	13eb0 <memmove>
   1014c:	00842703          	lw	a4,8(s0)
   10150:	00042783          	lw	a5,0(s0)
   10154:	00098913          	mv	s2,s3
   10158:	41870733          	sub	a4,a4,s8
   1015c:	019787b3          	add	a5,a5,s9
   10160:	00e42423          	sw	a4,8(s0)
   10164:	00f42023          	sw	a5,0(s0)
   10168:	00000993          	li	s3,0
   1016c:	008b2783          	lw	a5,8(s6)
   10170:	012b8bb3          	add	s7,s7,s2
   10174:	412787b3          	sub	a5,a5,s2
   10178:	00fb2423          	sw	a5,8(s6)
   1017c:	02078663          	beqz	a5,101a8 <__sfvwrite_r+0x244>
   10180:	00042783          	lw	a5,0(s0)
   10184:	00842703          	lw	a4,8(s0)
   10188:	00c41683          	lh	a3,12(s0)
   1018c:	00078513          	mv	a0,a5
   10190:	00070c13          	mv	s8,a4
   10194:	f00992e3          	bnez	s3,10098 <__sfvwrite_r+0x134>
   10198:	0004ab83          	lw	s7,0(s1)
   1019c:	0044a983          	lw	s3,4(s1)
   101a0:	00848493          	add	s1,s1,8
   101a4:	ee9ff06f          	j	1008c <__sfvwrite_r+0x128>
   101a8:	00c12b83          	lw	s7,12(sp)
   101ac:	00812c03          	lw	s8,8(sp)
   101b0:	00412c83          	lw	s9,4(sp)
   101b4:	02c12083          	lw	ra,44(sp)
   101b8:	02812403          	lw	s0,40(sp)
   101bc:	02412483          	lw	s1,36(sp)
   101c0:	02012903          	lw	s2,32(sp)
   101c4:	01c12983          	lw	s3,28(sp)
   101c8:	01412a83          	lw	s5,20(sp)
   101cc:	01812a03          	lw	s4,24(sp)
   101d0:	01012b03          	lw	s6,16(sp)
   101d4:	00000513          	li	a0,0
   101d8:	03010113          	add	sp,sp,48
   101dc:	00008067          	ret
   101e0:	00040593          	mv	a1,s0
   101e4:	000a0513          	mv	a0,s4
   101e8:	a7cff0ef          	jal	f464 <_fflush_r>
   101ec:	0a050e63          	beqz	a0,102a8 <__sfvwrite_r+0x344>
   101f0:	00c41783          	lh	a5,12(s0)
   101f4:	00c12b83          	lw	s7,12(sp)
   101f8:	00812c03          	lw	s8,8(sp)
   101fc:	02412483          	lw	s1,36(sp)
   10200:	02012903          	lw	s2,32(sp)
   10204:	01c12983          	lw	s3,28(sp)
   10208:	01412a83          	lw	s5,20(sp)
   1020c:	0407e793          	or	a5,a5,64
   10210:	00f41623          	sh	a5,12(s0)
   10214:	02c12083          	lw	ra,44(sp)
   10218:	02812403          	lw	s0,40(sp)
   1021c:	01812a03          	lw	s4,24(sp)
   10220:	01012b03          	lw	s6,16(sp)
   10224:	fff00513          	li	a0,-1
   10228:	03010113          	add	sp,sp,48
   1022c:	00008067          	ret
   10230:	00000513          	li	a0,0
   10234:	00008067          	ret
   10238:	00000a93          	li	s5,0
   1023c:	00000513          	li	a0,0
   10240:	00000c13          	li	s8,0
   10244:	00000993          	li	s3,0
   10248:	08098263          	beqz	s3,102cc <__sfvwrite_r+0x368>
   1024c:	08050a63          	beqz	a0,102e0 <__sfvwrite_r+0x37c>
   10250:	000a8793          	mv	a5,s5
   10254:	00098b93          	mv	s7,s3
   10258:	0137f463          	bgeu	a5,s3,10260 <__sfvwrite_r+0x2fc>
   1025c:	00078b93          	mv	s7,a5
   10260:	00042503          	lw	a0,0(s0)
   10264:	01042783          	lw	a5,16(s0)
   10268:	00842903          	lw	s2,8(s0)
   1026c:	01442683          	lw	a3,20(s0)
   10270:	00a7f663          	bgeu	a5,a0,1027c <__sfvwrite_r+0x318>
   10274:	00d90933          	add	s2,s2,a3
   10278:	09794463          	blt	s2,s7,10300 <__sfvwrite_r+0x39c>
   1027c:	16dbc263          	blt	s7,a3,103e0 <__sfvwrite_r+0x47c>
   10280:	02442783          	lw	a5,36(s0)
   10284:	01c42583          	lw	a1,28(s0)
   10288:	000c0613          	mv	a2,s8
   1028c:	000a0513          	mv	a0,s4
   10290:	000780e7          	jalr	a5
   10294:	00050913          	mv	s2,a0
   10298:	f4a05ce3          	blez	a0,101f0 <__sfvwrite_r+0x28c>
   1029c:	412a8ab3          	sub	s5,s5,s2
   102a0:	00100513          	li	a0,1
   102a4:	f20a8ee3          	beqz	s5,101e0 <__sfvwrite_r+0x27c>
   102a8:	008b2783          	lw	a5,8(s6)
   102ac:	012c0c33          	add	s8,s8,s2
   102b0:	412989b3          	sub	s3,s3,s2
   102b4:	412787b3          	sub	a5,a5,s2
   102b8:	00fb2423          	sw	a5,8(s6)
   102bc:	f80796e3          	bnez	a5,10248 <__sfvwrite_r+0x2e4>
   102c0:	00c12b83          	lw	s7,12(sp)
   102c4:	00812c03          	lw	s8,8(sp)
   102c8:	eedff06f          	j	101b4 <__sfvwrite_r+0x250>
   102cc:	0044a983          	lw	s3,4(s1)
   102d0:	00048793          	mv	a5,s1
   102d4:	00848493          	add	s1,s1,8
   102d8:	fe098ae3          	beqz	s3,102cc <__sfvwrite_r+0x368>
   102dc:	0007ac03          	lw	s8,0(a5)
   102e0:	00098613          	mv	a2,s3
   102e4:	00a00593          	li	a1,10
   102e8:	000c0513          	mv	a0,s8
   102ec:	301030ef          	jal	13dec <memchr>
   102f0:	14050c63          	beqz	a0,10448 <__sfvwrite_r+0x4e4>
   102f4:	00150513          	add	a0,a0,1
   102f8:	41850ab3          	sub	s5,a0,s8
   102fc:	f55ff06f          	j	10250 <__sfvwrite_r+0x2ec>
   10300:	000c0593          	mv	a1,s8
   10304:	00090613          	mv	a2,s2
   10308:	3a9030ef          	jal	13eb0 <memmove>
   1030c:	00042783          	lw	a5,0(s0)
   10310:	00040593          	mv	a1,s0
   10314:	000a0513          	mv	a0,s4
   10318:	012787b3          	add	a5,a5,s2
   1031c:	00f42023          	sw	a5,0(s0)
   10320:	944ff0ef          	jal	f464 <_fflush_r>
   10324:	f6050ce3          	beqz	a0,1029c <__sfvwrite_r+0x338>
   10328:	ec9ff06f          	j	101f0 <__sfvwrite_r+0x28c>
   1032c:	01042683          	lw	a3,16(s0)
   10330:	04f6e463          	bltu	a3,a5,10378 <__sfvwrite_r+0x414>
   10334:	01442583          	lw	a1,20(s0)
   10338:	04b9e063          	bltu	s3,a1,10378 <__sfvwrite_r+0x414>
   1033c:	00098913          	mv	s2,s3
   10340:	013af463          	bgeu	s5,s3,10348 <__sfvwrite_r+0x3e4>
   10344:	000a8913          	mv	s2,s5
   10348:	00090513          	mv	a0,s2
   1034c:	091110ef          	jal	21bdc <__modsi3>
   10350:	02442783          	lw	a5,36(s0)
   10354:	01c42583          	lw	a1,28(s0)
   10358:	40a906b3          	sub	a3,s2,a0
   1035c:	000b8613          	mv	a2,s7
   10360:	000a0513          	mv	a0,s4
   10364:	000780e7          	jalr	a5
   10368:	00050913          	mv	s2,a0
   1036c:	04a05a63          	blez	a0,103c0 <__sfvwrite_r+0x45c>
   10370:	412989b3          	sub	s3,s3,s2
   10374:	df9ff06f          	j	1016c <__sfvwrite_r+0x208>
   10378:	00070913          	mv	s2,a4
   1037c:	00e9f463          	bgeu	s3,a4,10384 <__sfvwrite_r+0x420>
   10380:	00098913          	mv	s2,s3
   10384:	00078513          	mv	a0,a5
   10388:	00090613          	mv	a2,s2
   1038c:	000b8593          	mv	a1,s7
   10390:	321030ef          	jal	13eb0 <memmove>
   10394:	00842703          	lw	a4,8(s0)
   10398:	00042783          	lw	a5,0(s0)
   1039c:	41270733          	sub	a4,a4,s2
   103a0:	012787b3          	add	a5,a5,s2
   103a4:	00e42423          	sw	a4,8(s0)
   103a8:	00f42023          	sw	a5,0(s0)
   103ac:	fc0712e3          	bnez	a4,10370 <__sfvwrite_r+0x40c>
   103b0:	00040593          	mv	a1,s0
   103b4:	000a0513          	mv	a0,s4
   103b8:	8acff0ef          	jal	f464 <_fflush_r>
   103bc:	fa050ae3          	beqz	a0,10370 <__sfvwrite_r+0x40c>
   103c0:	00c41783          	lh	a5,12(s0)
   103c4:	00c12b83          	lw	s7,12(sp)
   103c8:	00812c03          	lw	s8,8(sp)
   103cc:	00412c83          	lw	s9,4(sp)
   103d0:	e2dff06f          	j	101fc <__sfvwrite_r+0x298>
   103d4:	00098c13          	mv	s8,s3
   103d8:	00098c93          	mv	s9,s3
   103dc:	d65ff06f          	j	10140 <__sfvwrite_r+0x1dc>
   103e0:	000b8613          	mv	a2,s7
   103e4:	000c0593          	mv	a1,s8
   103e8:	2c9030ef          	jal	13eb0 <memmove>
   103ec:	00842703          	lw	a4,8(s0)
   103f0:	00042783          	lw	a5,0(s0)
   103f4:	000b8913          	mv	s2,s7
   103f8:	41770733          	sub	a4,a4,s7
   103fc:	017787b3          	add	a5,a5,s7
   10400:	00e42423          	sw	a4,8(s0)
   10404:	00f42023          	sw	a5,0(s0)
   10408:	e95ff06f          	j	1029c <__sfvwrite_r+0x338>
   1040c:	000a0513          	mv	a0,s4
   10410:	705040ef          	jal	15314 <_realloc_r>
   10414:	00050c93          	mv	s9,a0
   10418:	d00514e3          	bnez	a0,10120 <__sfvwrite_r+0x1bc>
   1041c:	01042583          	lw	a1,16(s0)
   10420:	000a0513          	mv	a0,s4
   10424:	839ff0ef          	jal	fc5c <_free_r>
   10428:	00c41783          	lh	a5,12(s0)
   1042c:	00c00713          	li	a4,12
   10430:	00c12b83          	lw	s7,12(sp)
   10434:	00812c03          	lw	s8,8(sp)
   10438:	00412c83          	lw	s9,4(sp)
   1043c:	00ea2023          	sw	a4,0(s4)
   10440:	f7f7f793          	and	a5,a5,-129
   10444:	db9ff06f          	j	101fc <__sfvwrite_r+0x298>
   10448:	00198793          	add	a5,s3,1
   1044c:	00078a93          	mv	s5,a5
   10450:	e05ff06f          	j	10254 <__sfvwrite_r+0x2f0>
   10454:	00c41783          	lh	a5,12(s0)
   10458:	da5ff06f          	j	101fc <__sfvwrite_r+0x298>
   1045c:	00c00713          	li	a4,12
   10460:	00c41783          	lh	a5,12(s0)
   10464:	00c12b83          	lw	s7,12(sp)
   10468:	00812c03          	lw	s8,8(sp)
   1046c:	00412c83          	lw	s9,4(sp)
   10470:	00ea2023          	sw	a4,0(s4)
   10474:	d89ff06f          	j	101fc <__sfvwrite_r+0x298>

00010478 <_fwalk>:
   10478:	fe010113          	add	sp,sp,-32
   1047c:	01212823          	sw	s2,16(sp)
   10480:	01312623          	sw	s3,12(sp)
   10484:	01412423          	sw	s4,8(sp)
   10488:	01512223          	sw	s5,4(sp)
   1048c:	01612023          	sw	s6,0(sp)
   10490:	00112e23          	sw	ra,28(sp)
   10494:	00812c23          	sw	s0,24(sp)
   10498:	00912a23          	sw	s1,20(sp)
   1049c:	00058b13          	mv	s6,a1
   104a0:	2e050a93          	add	s5,a0,736
   104a4:	00000a13          	li	s4,0
   104a8:	00100993          	li	s3,1
   104ac:	fff00913          	li	s2,-1
   104b0:	004aa483          	lw	s1,4(s5)
   104b4:	008aa403          	lw	s0,8(s5)
   104b8:	fff48493          	add	s1,s1,-1
   104bc:	0204c663          	bltz	s1,104e8 <_fwalk+0x70>
   104c0:	00c45783          	lhu	a5,12(s0)
   104c4:	00f9fc63          	bgeu	s3,a5,104dc <_fwalk+0x64>
   104c8:	00e41783          	lh	a5,14(s0)
   104cc:	00040513          	mv	a0,s0
   104d0:	01278663          	beq	a5,s2,104dc <_fwalk+0x64>
   104d4:	000b00e7          	jalr	s6
   104d8:	00aa6a33          	or	s4,s4,a0
   104dc:	fff48493          	add	s1,s1,-1
   104e0:	06840413          	add	s0,s0,104
   104e4:	fd249ee3          	bne	s1,s2,104c0 <_fwalk+0x48>
   104e8:	000aaa83          	lw	s5,0(s5)
   104ec:	fc0a92e3          	bnez	s5,104b0 <_fwalk+0x38>
   104f0:	01c12083          	lw	ra,28(sp)
   104f4:	01812403          	lw	s0,24(sp)
   104f8:	01412483          	lw	s1,20(sp)
   104fc:	01012903          	lw	s2,16(sp)
   10500:	00c12983          	lw	s3,12(sp)
   10504:	00412a83          	lw	s5,4(sp)
   10508:	00012b03          	lw	s6,0(sp)
   1050c:	000a0513          	mv	a0,s4
   10510:	00812a03          	lw	s4,8(sp)
   10514:	02010113          	add	sp,sp,32
   10518:	00008067          	ret

0001051c <_fwalk_reent>:
   1051c:	fd010113          	add	sp,sp,-48
   10520:	03212023          	sw	s2,32(sp)
   10524:	01312e23          	sw	s3,28(sp)
   10528:	01412c23          	sw	s4,24(sp)
   1052c:	01512a23          	sw	s5,20(sp)
   10530:	01612823          	sw	s6,16(sp)
   10534:	01712623          	sw	s7,12(sp)
   10538:	02112623          	sw	ra,44(sp)
   1053c:	02812423          	sw	s0,40(sp)
   10540:	02912223          	sw	s1,36(sp)
   10544:	00050a93          	mv	s5,a0
   10548:	00058b93          	mv	s7,a1
   1054c:	2e050b13          	add	s6,a0,736
   10550:	00000a13          	li	s4,0
   10554:	00100993          	li	s3,1
   10558:	fff00913          	li	s2,-1
   1055c:	004b2483          	lw	s1,4(s6)
   10560:	008b2403          	lw	s0,8(s6)
   10564:	fff48493          	add	s1,s1,-1
   10568:	0204c863          	bltz	s1,10598 <_fwalk_reent+0x7c>
   1056c:	00c45783          	lhu	a5,12(s0)
   10570:	00f9fe63          	bgeu	s3,a5,1058c <_fwalk_reent+0x70>
   10574:	00e41783          	lh	a5,14(s0)
   10578:	00040593          	mv	a1,s0
   1057c:	000a8513          	mv	a0,s5
   10580:	01278663          	beq	a5,s2,1058c <_fwalk_reent+0x70>
   10584:	000b80e7          	jalr	s7
   10588:	00aa6a33          	or	s4,s4,a0
   1058c:	fff48493          	add	s1,s1,-1
   10590:	06840413          	add	s0,s0,104
   10594:	fd249ce3          	bne	s1,s2,1056c <_fwalk_reent+0x50>
   10598:	000b2b03          	lw	s6,0(s6)
   1059c:	fc0b10e3          	bnez	s6,1055c <_fwalk_reent+0x40>
   105a0:	02c12083          	lw	ra,44(sp)
   105a4:	02812403          	lw	s0,40(sp)
   105a8:	02412483          	lw	s1,36(sp)
   105ac:	02012903          	lw	s2,32(sp)
   105b0:	01c12983          	lw	s3,28(sp)
   105b4:	01412a83          	lw	s5,20(sp)
   105b8:	01012b03          	lw	s6,16(sp)
   105bc:	00c12b83          	lw	s7,12(sp)
   105c0:	000a0513          	mv	a0,s4
   105c4:	01812a03          	lw	s4,24(sp)
   105c8:	03010113          	add	sp,sp,48
   105cc:	00008067          	ret

000105d0 <eshdn1>:
   105d0:	00450693          	add	a3,a0,4
   105d4:	00000793          	li	a5,0
   105d8:	01a50513          	add	a0,a0,26
   105dc:	ffff88b7          	lui	a7,0xffff8
   105e0:	0006d703          	lhu	a4,0(a3)
   105e4:	0027f613          	and	a2,a5,2
   105e8:	00177593          	and	a1,a4,1
   105ec:	00b7e7b3          	or	a5,a5,a1
   105f0:	00175713          	srl	a4,a4,0x1
   105f4:	01176833          	or	a6,a4,a7
   105f8:	00179793          	sll	a5,a5,0x1
   105fc:	00060663          	beqz	a2,10608 <eshdn1+0x38>
   10600:	01081713          	sll	a4,a6,0x10
   10604:	01075713          	srl	a4,a4,0x10
   10608:	00e69023          	sh	a4,0(a3)
   1060c:	01079793          	sll	a5,a5,0x10
   10610:	00268693          	add	a3,a3,2
   10614:	0107d793          	srl	a5,a5,0x10
   10618:	fca694e3          	bne	a3,a0,105e0 <eshdn1+0x10>
   1061c:	00008067          	ret

00010620 <eshup1>:
   10620:	01850693          	add	a3,a0,24
   10624:	00000713          	li	a4,0
   10628:	00250513          	add	a0,a0,2
   1062c:	0006d783          	lhu	a5,0(a3)
   10630:	01079613          	sll	a2,a5,0x10
   10634:	41065613          	sra	a2,a2,0x10
   10638:	00179793          	sll	a5,a5,0x1
   1063c:	00065463          	bgez	a2,10644 <eshup1+0x24>
   10640:	00176713          	or	a4,a4,1
   10644:	00277613          	and	a2,a4,2
   10648:	01079793          	sll	a5,a5,0x10
   1064c:	00171713          	sll	a4,a4,0x1
   10650:	0107d793          	srl	a5,a5,0x10
   10654:	00060463          	beqz	a2,1065c <eshup1+0x3c>
   10658:	0017e793          	or	a5,a5,1
   1065c:	00f69023          	sh	a5,0(a3)
   10660:	01071713          	sll	a4,a4,0x10
   10664:	ffe68693          	add	a3,a3,-2
   10668:	01075713          	srl	a4,a4,0x10
   1066c:	fca690e3          	bne	a3,a0,1062c <eshup1+0xc>
   10670:	00008067          	ret

00010674 <m16m>:
   10674:	fc010113          	add	sp,sp,-64
   10678:	03412423          	sw	s4,40(sp)
   1067c:	00010a37          	lui	s4,0x10
   10680:	02812c23          	sw	s0,56(sp)
   10684:	02912a23          	sw	s1,52(sp)
   10688:	03212823          	sw	s2,48(sp)
   1068c:	03312623          	sw	s3,44(sp)
   10690:	03512223          	sw	s5,36(sp)
   10694:	02112e23          	sw	ra,60(sp)
   10698:	00050993          	mv	s3,a0
   1069c:	00060493          	mv	s1,a2
   106a0:	00011d23          	sh	zero,26(sp)
   106a4:	00011e23          	sh	zero,28(sp)
   106a8:	01858913          	add	s2,a1,24
   106ac:	01c10413          	add	s0,sp,28
   106b0:	00810a93          	add	s5,sp,8
   106b4:	fffa0a13          	add	s4,s4,-1 # ffff <__sfvwrite_r+0x9b>
   106b8:	00095503          	lhu	a0,0(s2)
   106bc:	00098593          	mv	a1,s3
   106c0:	ffe40413          	add	s0,s0,-2
   106c4:	ffe90913          	add	s2,s2,-2
   106c8:	02050a63          	beqz	a0,106fc <m16m+0x88>
   106cc:	468110ef          	jal	21b34 <__mulsi3>
   106d0:	00245703          	lhu	a4,2(s0)
   106d4:	00045683          	lhu	a3,0(s0)
   106d8:	014577b3          	and	a5,a0,s4
   106dc:	00e787b3          	add	a5,a5,a4
   106e0:	01055513          	srl	a0,a0,0x10
   106e4:	0107d713          	srl	a4,a5,0x10
   106e8:	00d50533          	add	a0,a0,a3
   106ec:	00e50533          	add	a0,a0,a4
   106f0:	00a41023          	sh	a0,0(s0)
   106f4:	00f41123          	sh	a5,2(s0)
   106f8:	01055513          	srl	a0,a0,0x10
   106fc:	fea41f23          	sh	a0,-2(s0)
   10700:	fb541ce3          	bne	s0,s5,106b8 <m16m+0x44>
   10704:	00448613          	add	a2,s1,4
   10708:	01e10713          	add	a4,sp,30
   1070c:	00045783          	lhu	a5,0(s0)
   10710:	00240413          	add	s0,s0,2
   10714:	00260613          	add	a2,a2,2
   10718:	fef61f23          	sh	a5,-2(a2)
   1071c:	fee418e3          	bne	s0,a4,1070c <m16m+0x98>
   10720:	03c12083          	lw	ra,60(sp)
   10724:	03812403          	lw	s0,56(sp)
   10728:	03412483          	lw	s1,52(sp)
   1072c:	03012903          	lw	s2,48(sp)
   10730:	02c12983          	lw	s3,44(sp)
   10734:	02812a03          	lw	s4,40(sp)
   10738:	02412a83          	lw	s5,36(sp)
   1073c:	04010113          	add	sp,sp,64
   10740:	00008067          	ret

00010744 <emovo.isra.0>:
   10744:	00055703          	lhu	a4,0(a0)
   10748:	00255783          	lhu	a5,2(a0)
   1074c:	00070663          	beqz	a4,10758 <emovo.isra.0+0x14>
   10750:	00008737          	lui	a4,0x8
   10754:	00e7e7b3          	or	a5,a5,a4
   10758:	00f59923          	sh	a5,18(a1)
   1075c:	00255703          	lhu	a4,2(a0)
   10760:	000087b7          	lui	a5,0x8
   10764:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   10768:	02f70463          	beq	a4,a5,10790 <emovo.isra.0+0x4c>
   1076c:	00650793          	add	a5,a0,6
   10770:	01058593          	add	a1,a1,16
   10774:	01850513          	add	a0,a0,24
   10778:	0007d703          	lhu	a4,0(a5)
   1077c:	00278793          	add	a5,a5,2
   10780:	ffe58593          	add	a1,a1,-2
   10784:	00e59123          	sh	a4,2(a1)
   10788:	fea798e3          	bne	a5,a0,10778 <emovo.isra.0+0x34>
   1078c:	00008067          	ret
   10790:	00650793          	add	a5,a0,6
   10794:	01a50513          	add	a0,a0,26
   10798:	0007d703          	lhu	a4,0(a5)
   1079c:	00278793          	add	a5,a5,2
   107a0:	02071a63          	bnez	a4,107d4 <emovo.isra.0+0x90>
   107a4:	fea79ae3          	bne	a5,a0,10798 <emovo.isra.0+0x54>
   107a8:	01258713          	add	a4,a1,18
   107ac:	00058793          	mv	a5,a1
   107b0:	00278793          	add	a5,a5,2
   107b4:	fe079f23          	sh	zero,-2(a5)
   107b8:	fee79ce3          	bne	a5,a4,107b0 <emovo.isra.0+0x6c>
   107bc:	0125d783          	lhu	a5,18(a1)
   107c0:	00008737          	lui	a4,0x8
   107c4:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   107c8:	00e7e7b3          	or	a5,a5,a4
   107cc:	00f59923          	sh	a5,18(a1)
   107d0:	00008067          	ret
   107d4:	01058713          	add	a4,a1,16
   107d8:	00058793          	mv	a5,a1
   107dc:	00278793          	add	a5,a5,2
   107e0:	fe079f23          	sh	zero,-2(a5)
   107e4:	fee79ce3          	bne	a5,a4,107dc <emovo.isra.0+0x98>
   107e8:	ffffc7b7          	lui	a5,0xffffc
   107ec:	00f59823          	sh	a5,16(a1)
   107f0:	ffff87b7          	lui	a5,0xffff8
   107f4:	fff7c793          	not	a5,a5
   107f8:	00f59923          	sh	a5,18(a1)
   107fc:	00008067          	ret

00010800 <enormlz>:
   10800:	00455783          	lhu	a5,4(a0)
   10804:	ff010113          	add	sp,sp,-16
   10808:	00912223          	sw	s1,4(sp)
   1080c:	00112623          	sw	ra,12(sp)
   10810:	00812423          	sw	s0,8(sp)
   10814:	00050493          	mv	s1,a0
   10818:	0c079c63          	bnez	a5,108f0 <enormlz+0xf0>
   1081c:	00655783          	lhu	a5,6(a0)
   10820:	00000413          	li	s0,0
   10824:	01079713          	sll	a4,a5,0x10
   10828:	41075713          	sra	a4,a4,0x10
   1082c:	0a074663          	bltz	a4,108d8 <enormlz+0xd8>
   10830:	01850693          	add	a3,a0,24
   10834:	0a000613          	li	a2,160
   10838:	02079663          	bnez	a5,10864 <enormlz+0x64>
   1083c:	00448793          	add	a5,s1,4
   10840:	0027d703          	lhu	a4,2(a5) # ffff8002 <__alt_data_end+0xfffaec22>
   10844:	00278793          	add	a5,a5,2
   10848:	fee79f23          	sh	a4,-2(a5)
   1084c:	fed79ae3          	bne	a5,a3,10840 <enormlz+0x40>
   10850:	00049c23          	sh	zero,24(s1)
   10854:	01040413          	add	s0,s0,16
   10858:	08c40063          	beq	s0,a2,108d8 <enormlz+0xd8>
   1085c:	0064d783          	lhu	a5,6(s1)
   10860:	fc078ee3          	beqz	a5,1083c <enormlz+0x3c>
   10864:	01212023          	sw	s2,0(sp)
   10868:	0ff00713          	li	a4,255
   1086c:	04f76063          	bltu	a4,a5,108ac <enormlz+0xac>
   10870:	01848813          	add	a6,s1,24
   10874:	00248593          	add	a1,s1,2
   10878:	0ff00513          	li	a0,255
   1087c:	00000793          	li	a5,0
   10880:	00080713          	mv	a4,a6
   10884:	00075683          	lhu	a3,0(a4)
   10888:	ffe70713          	add	a4,a4,-2
   1088c:	00869613          	sll	a2,a3,0x8
   10890:	00c7e7b3          	or	a5,a5,a2
   10894:	00f71123          	sh	a5,2(a4)
   10898:	0086d793          	srl	a5,a3,0x8
   1089c:	feb714e3          	bne	a4,a1,10884 <enormlz+0x84>
   108a0:	0064d783          	lhu	a5,6(s1)
   108a4:	00840413          	add	s0,s0,8
   108a8:	fcf57ae3          	bgeu	a0,a5,1087c <enormlz+0x7c>
   108ac:	0a000913          	li	s2,160
   108b0:	0140006f          	j	108c4 <enormlz+0xc4>
   108b4:	00140413          	add	s0,s0,1
   108b8:	d69ff0ef          	jal	10620 <eshup1>
   108bc:	00894c63          	blt	s2,s0,108d4 <enormlz+0xd4>
   108c0:	0064d783          	lhu	a5,6(s1)
   108c4:	01079793          	sll	a5,a5,0x10
   108c8:	4107d793          	sra	a5,a5,0x10
   108cc:	00048513          	mv	a0,s1
   108d0:	fe07d2e3          	bgez	a5,108b4 <enormlz+0xb4>
   108d4:	00012903          	lw	s2,0(sp)
   108d8:	00c12083          	lw	ra,12(sp)
   108dc:	00040513          	mv	a0,s0
   108e0:	00812403          	lw	s0,8(sp)
   108e4:	00412483          	lw	s1,4(sp)
   108e8:	01010113          	add	sp,sp,16
   108ec:	00008067          	ret
   108f0:	01212023          	sw	s2,0(sp)
   108f4:	0ff00713          	li	a4,255
   108f8:	00000413          	li	s0,0
   108fc:	02f76663          	bltu	a4,a5,10928 <enormlz+0x128>
   10900:	f6f00913          	li	s2,-145
   10904:	0140006f          	j	10918 <enormlz+0x118>
   10908:	fff40413          	add	s0,s0,-1
   1090c:	cc5ff0ef          	jal	105d0 <eshdn1>
   10910:	fd2402e3          	beq	s0,s2,108d4 <enormlz+0xd4>
   10914:	0044d783          	lhu	a5,4(s1)
   10918:	00048513          	mv	a0,s1
   1091c:	fe0796e3          	bnez	a5,10908 <enormlz+0x108>
   10920:	00012903          	lw	s2,0(sp)
   10924:	fb5ff06f          	j	108d8 <enormlz+0xd8>
   10928:	00450713          	add	a4,a0,4
   1092c:	01a50593          	add	a1,a0,26
   10930:	00000793          	li	a5,0
   10934:	00075683          	lhu	a3,0(a4)
   10938:	00270713          	add	a4,a4,2
   1093c:	0086d613          	srl	a2,a3,0x8
   10940:	00c7e7b3          	or	a5,a5,a2
   10944:	00869693          	sll	a3,a3,0x8
   10948:	fef71f23          	sh	a5,-2(a4)
   1094c:	01069793          	sll	a5,a3,0x10
   10950:	0107d793          	srl	a5,a5,0x10
   10954:	feb710e3          	bne	a4,a1,10934 <enormlz+0x134>
   10958:	0044d783          	lhu	a5,4(s1)
   1095c:	ff800413          	li	s0,-8
   10960:	fa1ff06f          	j	10900 <enormlz+0x100>

00010964 <eshift.part.0>:
   10964:	fe010113          	add	sp,sp,-32
   10968:	00812c23          	sw	s0,24(sp)
   1096c:	00912a23          	sw	s1,20(sp)
   10970:	00112e23          	sw	ra,28(sp)
   10974:	00058493          	mv	s1,a1
   10978:	00050413          	mv	s0,a0
   1097c:	0a05c063          	bltz	a1,10a1c <eshift.part.0+0xb8>
   10980:	00f00793          	li	a5,15
   10984:	00058613          	mv	a2,a1
   10988:	00450513          	add	a0,a0,4
   1098c:	01840693          	add	a3,s0,24
   10990:	00f00593          	li	a1,15
   10994:	0297d463          	bge	a5,s1,109bc <eshift.part.0+0x58>
   10998:	00050793          	mv	a5,a0
   1099c:	0027d703          	lhu	a4,2(a5)
   109a0:	00278793          	add	a5,a5,2
   109a4:	fee79f23          	sh	a4,-2(a5)
   109a8:	fed79ae3          	bne	a5,a3,1099c <eshift.part.0+0x38>
   109ac:	00041c23          	sh	zero,24(s0)
   109b0:	ff060613          	add	a2,a2,-16
   109b4:	fec5c2e3          	blt	a1,a2,10998 <eshift.part.0+0x34>
   109b8:	00f4f493          	and	s1,s1,15
   109bc:	00700793          	li	a5,7
   109c0:	0297d863          	bge	a5,s1,109f0 <eshift.part.0+0x8c>
   109c4:	01840713          	add	a4,s0,24
   109c8:	00240593          	add	a1,s0,2
   109cc:	00000793          	li	a5,0
   109d0:	00075683          	lhu	a3,0(a4)
   109d4:	ffe70713          	add	a4,a4,-2
   109d8:	00869613          	sll	a2,a3,0x8
   109dc:	00c7e7b3          	or	a5,a5,a2
   109e0:	00f71123          	sh	a5,2(a4)
   109e4:	0086d793          	srl	a5,a3,0x8
   109e8:	feb714e3          	bne	a4,a1,109d0 <eshift.part.0+0x6c>
   109ec:	ff848493          	add	s1,s1,-8
   109f0:	00048a63          	beqz	s1,10a04 <eshift.part.0+0xa0>
   109f4:	00040513          	mv	a0,s0
   109f8:	fff48493          	add	s1,s1,-1
   109fc:	c25ff0ef          	jal	10620 <eshup1>
   10a00:	fe049ae3          	bnez	s1,109f4 <eshift.part.0+0x90>
   10a04:	01c12083          	lw	ra,28(sp)
   10a08:	01812403          	lw	s0,24(sp)
   10a0c:	01412483          	lw	s1,20(sp)
   10a10:	00000513          	li	a0,0
   10a14:	02010113          	add	sp,sp,32
   10a18:	00008067          	ret
   10a1c:	01212823          	sw	s2,16(sp)
   10a20:	01312623          	sw	s3,12(sp)
   10a24:	ff100793          	li	a5,-15
   10a28:	40b00933          	neg	s2,a1
   10a2c:	00000993          	li	s3,0
   10a30:	01850593          	add	a1,a0,24
   10a34:	00450693          	add	a3,a0,4
   10a38:	00f00613          	li	a2,15
   10a3c:	0af4da63          	bge	s1,a5,10af0 <eshift.part.0+0x18c>
   10a40:	01845703          	lhu	a4,24(s0)
   10a44:	00058793          	mv	a5,a1
   10a48:	00e9e9b3          	or	s3,s3,a4
   10a4c:	ffe7d703          	lhu	a4,-2(a5)
   10a50:	ffe78793          	add	a5,a5,-2
   10a54:	00e79123          	sh	a4,2(a5)
   10a58:	fed79ae3          	bne	a5,a3,10a4c <eshift.part.0+0xe8>
   10a5c:	00041223          	sh	zero,4(s0)
   10a60:	ff090913          	add	s2,s2,-16
   10a64:	fd264ee3          	blt	a2,s2,10a40 <eshift.part.0+0xdc>
   10a68:	40900933          	neg	s2,s1
   10a6c:	00f97913          	and	s2,s2,15
   10a70:	00700793          	li	a5,7
   10a74:	0327de63          	bge	a5,s2,10ab0 <eshift.part.0+0x14c>
   10a78:	01844783          	lbu	a5,24(s0)
   10a7c:	01a40593          	add	a1,s0,26
   10a80:	00f9e9b3          	or	s3,s3,a5
   10a84:	00000793          	li	a5,0
   10a88:	0006d703          	lhu	a4,0(a3)
   10a8c:	00268693          	add	a3,a3,2
   10a90:	00875613          	srl	a2,a4,0x8
   10a94:	00c7e7b3          	or	a5,a5,a2
   10a98:	00871713          	sll	a4,a4,0x8
   10a9c:	fef69f23          	sh	a5,-2(a3)
   10aa0:	01071793          	sll	a5,a4,0x10
   10aa4:	0107d793          	srl	a5,a5,0x10
   10aa8:	feb690e3          	bne	a3,a1,10a88 <eshift.part.0+0x124>
   10aac:	ff890913          	add	s2,s2,-8
   10ab0:	02090063          	beqz	s2,10ad0 <eshift.part.0+0x16c>
   10ab4:	01845783          	lhu	a5,24(s0)
   10ab8:	00040513          	mv	a0,s0
   10abc:	fff90913          	add	s2,s2,-1
   10ac0:	0017f793          	and	a5,a5,1
   10ac4:	00f9e9b3          	or	s3,s3,a5
   10ac8:	b09ff0ef          	jal	105d0 <eshdn1>
   10acc:	fe0914e3          	bnez	s2,10ab4 <eshift.part.0+0x150>
   10ad0:	01c12083          	lw	ra,28(sp)
   10ad4:	01812403          	lw	s0,24(sp)
   10ad8:	01012903          	lw	s2,16(sp)
   10adc:	01412483          	lw	s1,20(sp)
   10ae0:	01303533          	snez	a0,s3
   10ae4:	00c12983          	lw	s3,12(sp)
   10ae8:	02010113          	add	sp,sp,32
   10aec:	00008067          	ret
   10af0:	ff900793          	li	a5,-7
   10af4:	f8f4c2e3          	blt	s1,a5,10a78 <eshift.part.0+0x114>
   10af8:	fbdff06f          	j	10ab4 <eshift.part.0+0x150>

00010afc <emovi>:
   10afc:	01255783          	lhu	a5,18(a0)
   10b00:	000086b7          	lui	a3,0x8
   10b04:	fff68693          	add	a3,a3,-1 # 7fff <OSTaskChangePrio+0x17f>
   10b08:	00f7d793          	srl	a5,a5,0xf
   10b0c:	40f007b3          	neg	a5,a5
   10b10:	00f59023          	sh	a5,0(a1)
   10b14:	01255703          	lhu	a4,18(a0)
   10b18:	01050793          	add	a5,a0,16
   10b1c:	00d77733          	and	a4,a4,a3
   10b20:	00e59123          	sh	a4,2(a1)
   10b24:	02d70663          	beq	a4,a3,10b50 <emovi+0x54>
   10b28:	00658713          	add	a4,a1,6
   10b2c:	00059223          	sh	zero,4(a1)
   10b30:	ffe50513          	add	a0,a0,-2
   10b34:	0007d683          	lhu	a3,0(a5)
   10b38:	ffe78793          	add	a5,a5,-2
   10b3c:	00270713          	add	a4,a4,2
   10b40:	fed71f23          	sh	a3,-2(a4)
   10b44:	fea798e3          	bne	a5,a0,10b34 <emovi+0x38>
   10b48:	00059c23          	sh	zero,24(a1)
   10b4c:	00008067          	ret
   10b50:	01255683          	lhu	a3,18(a0)
   10b54:	00e6f6b3          	and	a3,a3,a4
   10b58:	00e69e63          	bne	a3,a4,10b74 <emovi+0x78>
   10b5c:	01250613          	add	a2,a0,18
   10b60:	00050713          	mv	a4,a0
   10b64:	00075683          	lhu	a3,0(a4)
   10b68:	00270713          	add	a4,a4,2
   10b6c:	02069063          	bnez	a3,10b8c <emovi+0x90>
   10b70:	fec71ae3          	bne	a4,a2,10b64 <emovi+0x68>
   10b74:	00458793          	add	a5,a1,4
   10b78:	01a58593          	add	a1,a1,26
   10b7c:	00278793          	add	a5,a5,2
   10b80:	fe079f23          	sh	zero,-2(a5)
   10b84:	feb79ce3          	bne	a5,a1,10b7c <emovi+0x80>
   10b88:	00008067          	ret
   10b8c:	00658713          	add	a4,a1,6
   10b90:	00059223          	sh	zero,4(a1)
   10b94:	ffc50513          	add	a0,a0,-4
   10b98:	0007d683          	lhu	a3,0(a5)
   10b9c:	ffe78793          	add	a5,a5,-2
   10ba0:	00270713          	add	a4,a4,2
   10ba4:	fed71f23          	sh	a3,-2(a4)
   10ba8:	fef518e3          	bne	a0,a5,10b98 <emovi+0x9c>
   10bac:	00008067          	ret

00010bb0 <ecmp>:
   10bb0:	01255783          	lhu	a5,18(a0)
   10bb4:	fb010113          	add	sp,sp,-80
   10bb8:	04812423          	sw	s0,72(sp)
   10bbc:	fff7c793          	not	a5,a5
   10bc0:	04112623          	sw	ra,76(sp)
   10bc4:	01179713          	sll	a4,a5,0x11
   10bc8:	00058413          	mv	s0,a1
   10bcc:	00071e63          	bnez	a4,10be8 <ecmp+0x38>
   10bd0:	01250693          	add	a3,a0,18
   10bd4:	00050793          	mv	a5,a0
   10bd8:	0007d703          	lhu	a4,0(a5)
   10bdc:	00278793          	add	a5,a5,2
   10be0:	08071c63          	bnez	a4,10c78 <ecmp+0xc8>
   10be4:	fed79ae3          	bne	a5,a3,10bd8 <ecmp+0x28>
   10be8:	01245783          	lhu	a5,18(s0)
   10bec:	fff7c793          	not	a5,a5
   10bf0:	01179713          	sll	a4,a5,0x11
   10bf4:	06070063          	beqz	a4,10c54 <ecmp+0xa4>
   10bf8:	00810593          	add	a1,sp,8
   10bfc:	f01ff0ef          	jal	10afc <emovi>
   10c00:	02410593          	add	a1,sp,36
   10c04:	00040513          	mv	a0,s0
   10c08:	ef5ff0ef          	jal	10afc <emovi>
   10c0c:	00815583          	lhu	a1,8(sp)
   10c10:	02415503          	lhu	a0,36(sp)
   10c14:	06b50c63          	beq	a0,a1,10c8c <ecmp+0xdc>
   10c18:	00a10793          	add	a5,sp,10
   10c1c:	02610713          	add	a4,sp,38
   10c20:	02010613          	add	a2,sp,32
   10c24:	0007d683          	lhu	a3,0(a5)
   10c28:	00278793          	add	a5,a5,2
   10c2c:	0a069863          	bnez	a3,10cdc <ecmp+0x12c>
   10c30:	00075683          	lhu	a3,0(a4)
   10c34:	00270713          	add	a4,a4,2
   10c38:	0a069263          	bnez	a3,10cdc <ecmp+0x12c>
   10c3c:	fef614e3          	bne	a2,a5,10c24 <ecmp+0x74>
   10c40:	00000513          	li	a0,0
   10c44:	04c12083          	lw	ra,76(sp)
   10c48:	04812403          	lw	s0,72(sp)
   10c4c:	05010113          	add	sp,sp,80
   10c50:	00008067          	ret
   10c54:	00040793          	mv	a5,s0
   10c58:	0007d703          	lhu	a4,0(a5)
   10c5c:	01240693          	add	a3,s0,18
   10c60:	00278793          	add	a5,a5,2
   10c64:	00071a63          	bnez	a4,10c78 <ecmp+0xc8>
   10c68:	f8d788e3          	beq	a5,a3,10bf8 <ecmp+0x48>
   10c6c:	0007d703          	lhu	a4,0(a5)
   10c70:	00278793          	add	a5,a5,2
   10c74:	fe070ae3          	beqz	a4,10c68 <ecmp+0xb8>
   10c78:	04c12083          	lw	ra,76(sp)
   10c7c:	04812403          	lw	s0,72(sp)
   10c80:	ffe00513          	li	a0,-2
   10c84:	05010113          	add	sp,sp,80
   10c88:	00008067          	ret
   10c8c:	00815603          	lhu	a2,8(sp)
   10c90:	02415683          	lhu	a3,36(sp)
   10c94:	00a03533          	snez	a0,a0
   10c98:	02410713          	add	a4,sp,36
   10c9c:	00810793          	add	a5,sp,8
   10ca0:	40a00533          	neg	a0,a0
   10ca4:	00156513          	or	a0,a0,1
   10ca8:	02010593          	add	a1,sp,32
   10cac:	00278793          	add	a5,a5,2
   10cb0:	00270713          	add	a4,a4,2
   10cb4:	00d61e63          	bne	a2,a3,10cd0 <ecmp+0x120>
   10cb8:	f8b784e3          	beq	a5,a1,10c40 <ecmp+0x90>
   10cbc:	0007d603          	lhu	a2,0(a5)
   10cc0:	00075683          	lhu	a3,0(a4)
   10cc4:	00278793          	add	a5,a5,2
   10cc8:	00270713          	add	a4,a4,2
   10ccc:	fed606e3          	beq	a2,a3,10cb8 <ecmp+0x108>
   10cd0:	f6c6eae3          	bltu	a3,a2,10c44 <ecmp+0x94>
   10cd4:	40a00533          	neg	a0,a0
   10cd8:	f6dff06f          	j	10c44 <ecmp+0x94>
   10cdc:	00059c63          	bnez	a1,10cf4 <ecmp+0x144>
   10ce0:	04c12083          	lw	ra,76(sp)
   10ce4:	04812403          	lw	s0,72(sp)
   10ce8:	00100513          	li	a0,1
   10cec:	05010113          	add	sp,sp,80
   10cf0:	00008067          	ret
   10cf4:	fff00513          	li	a0,-1
   10cf8:	f4dff06f          	j	10c44 <ecmp+0x94>

00010cfc <emdnorm>:
   10cfc:	fe010113          	add	sp,sp,-32
   10d00:	00812c23          	sw	s0,24(sp)
   10d04:	00912a23          	sw	s1,20(sp)
   10d08:	01212823          	sw	s2,16(sp)
   10d0c:	01312623          	sw	s3,12(sp)
   10d10:	01412423          	sw	s4,8(sp)
   10d14:	01512223          	sw	s5,4(sp)
   10d18:	00068913          	mv	s2,a3
   10d1c:	00078413          	mv	s0,a5
   10d20:	00112e23          	sw	ra,28(sp)
   10d24:	00050493          	mv	s1,a0
   10d28:	00058993          	mv	s3,a1
   10d2c:	00060a13          	mv	s4,a2
   10d30:	00070a93          	mv	s5,a4
   10d34:	acdff0ef          	jal	10800 <enormlz>
   10d38:	09000793          	li	a5,144
   10d3c:	40a90933          	sub	s2,s2,a0
   10d40:	10a7dc63          	bge	a5,a0,10e58 <emdnorm+0x15c>
   10d44:	000087b7          	lui	a5,0x8
   10d48:	ffe78793          	add	a5,a5,-2 # 7ffe <OSTaskChangePrio+0x17e>
   10d4c:	2b27da63          	bge	a5,s2,11000 <emdnorm+0x304>
   10d50:	200a8263          	beqz	s5,10f54 <emdnorm+0x258>
   10d54:	00442a83          	lw	s5,4(s0)
   10d58:	00042783          	lw	a5,0(s0)
   10d5c:	26fa8a63          	beq	s5,a5,10fd0 <emdnorm+0x2d4>
   10d60:	01a40713          	add	a4,s0,26
   10d64:	03440793          	add	a5,s0,52
   10d68:	00270713          	add	a4,a4,2
   10d6c:	fe071f23          	sh	zero,-2(a4)
   10d70:	fee79ce3          	bne	a5,a4,10d68 <emdnorm+0x6c>
   10d74:	03800793          	li	a5,56
   10d78:	30fa8463          	beq	s5,a5,11080 <emdnorm+0x384>
   10d7c:	2157d063          	bge	a5,s5,10f7c <emdnorm+0x280>
   10d80:	04000793          	li	a5,64
   10d84:	36fa8663          	beq	s5,a5,110f0 <emdnorm+0x3f4>
   10d88:	07100793          	li	a5,113
   10d8c:	32fa9863          	bne	s5,a5,110bc <emdnorm+0x3c0>
   10d90:	400087b7          	lui	a5,0x40008
   10d94:	00a00693          	li	a3,10
   10d98:	ffff8737          	lui	a4,0xffff8
   10d9c:	fff78793          	add	a5,a5,-1 # 40007fff <__alt_data_end+0x3ffbec1f>
   10da0:	00d42423          	sw	a3,8(s0)
   10da4:	00f42a23          	sw	a5,20(s0)
   10da8:	00e41c23          	sh	a4,24(s0)
   10dac:	00d42623          	sw	a3,12(s0)
   10db0:	02e41723          	sh	a4,46(s0)
   10db4:	01542023          	sw	s5,0(s0)
   10db8:	21205263          	blez	s2,10fbc <emdnorm+0x2c0>
   10dbc:	0144d683          	lhu	a3,20(s1)
   10dc0:	01448593          	add	a1,s1,20
   10dc4:	00b00793          	li	a5,11
   10dc8:	01169693          	sll	a3,a3,0x11
   10dcc:	0116d693          	srl	a3,a3,0x11
   10dd0:	00179793          	sll	a5,a5,0x1
   10dd4:	00f487b3          	add	a5,s1,a5
   10dd8:	01a48613          	add	a2,s1,26
   10ddc:	0007d703          	lhu	a4,0(a5)
   10de0:	00070463          	beqz	a4,10de8 <emdnorm+0xec>
   10de4:	0016e693          	or	a3,a3,1
   10de8:	00079023          	sh	zero,0(a5)
   10dec:	00278793          	add	a5,a5,2
   10df0:	fec796e3          	bne	a5,a2,10ddc <emdnorm+0xe0>
   10df4:	0005d703          	lhu	a4,0(a1)
   10df8:	01445603          	lhu	a2,20(s0)
   10dfc:	fff64613          	not	a2,a2
   10e00:	00c77733          	and	a4,a4,a2
   10e04:	00e59023          	sh	a4,0(a1)
   10e08:	01645783          	lhu	a5,22(s0)
   10e0c:	00d7f733          	and	a4,a5,a3
   10e10:	08071e63          	bnez	a4,10eac <emdnorm+0x1b0>
   10e14:	0f205c63          	blez	s2,10f0c <emdnorm+0x210>
   10e18:	0044d783          	lhu	a5,4(s1)
   10e1c:	22079263          	bnez	a5,11040 <emdnorm+0x344>
   10e20:	000087b7          	lui	a5,0x8
   10e24:	00049c23          	sh	zero,24(s1)
   10e28:	ffe78793          	add	a5,a5,-2 # 7ffe <OSTaskChangePrio+0x17e>
   10e2c:	1327c663          	blt	a5,s2,10f58 <emdnorm+0x25c>
   10e30:	01249123          	sh	s2,2(s1)
   10e34:	01c12083          	lw	ra,28(sp)
   10e38:	01812403          	lw	s0,24(sp)
   10e3c:	01412483          	lw	s1,20(sp)
   10e40:	01012903          	lw	s2,16(sp)
   10e44:	00c12983          	lw	s3,12(sp)
   10e48:	00812a03          	lw	s4,8(sp)
   10e4c:	00412a83          	lw	s5,4(sp)
   10e50:	02010113          	add	sp,sp,32
   10e54:	00008067          	ret
   10e58:	0c094e63          	bltz	s2,10f34 <emdnorm+0x238>
   10e5c:	fc0a82e3          	beqz	s5,10e20 <emdnorm+0x124>
   10e60:	00442a83          	lw	s5,4(s0)
   10e64:	00042783          	lw	a5,0(s0)
   10e68:	eefa9ce3          	bne	s5,a5,10d60 <emdnorm+0x64>
   10e6c:	33204a63          	bgtz	s2,111a0 <emdnorm+0x4a4>
   10e70:	09000713          	li	a4,144
   10e74:	32e79a63          	bne	a5,a4,111a8 <emdnorm+0x4ac>
   10e78:	00842783          	lw	a5,8(s0)
   10e7c:	01445603          	lhu	a2,20(s0)
   10e80:	00179793          	sll	a5,a5,0x1
   10e84:	00f487b3          	add	a5,s1,a5
   10e88:	0007d683          	lhu	a3,0(a5)
   10e8c:	fff64713          	not	a4,a2
   10e90:	00e6f733          	and	a4,a3,a4
   10e94:	00e79023          	sh	a4,0(a5)
   10e98:	01645783          	lhu	a5,22(s0)
   10e9c:	00c6f6b3          	and	a3,a3,a2
   10ea0:	00f6f733          	and	a4,a3,a5
   10ea4:	1a070e63          	beqz	a4,11060 <emdnorm+0x364>
   10ea8:	09000a93          	li	s5,144
   10eac:	02d79263          	bne	a5,a3,10ed0 <emdnorm+0x1d4>
   10eb0:	1c099463          	bnez	s3,11078 <emdnorm+0x37c>
   10eb4:	00c42783          	lw	a5,12(s0)
   10eb8:	01845703          	lhu	a4,24(s0)
   10ebc:	00179793          	sll	a5,a5,0x1
   10ec0:	00f487b3          	add	a5,s1,a5
   10ec4:	0007d783          	lhu	a5,0(a5)
   10ec8:	00e7f7b3          	and	a5,a5,a4
   10ecc:	f40784e3          	beqz	a5,10e14 <emdnorm+0x118>
   10ed0:	03240793          	add	a5,s0,50
   10ed4:	01848613          	add	a2,s1,24
   10ed8:	00248593          	add	a1,s1,2
   10edc:	00000513          	li	a0,0
   10ee0:	0007d703          	lhu	a4,0(a5)
   10ee4:	00065683          	lhu	a3,0(a2)
   10ee8:	ffe60613          	add	a2,a2,-2
   10eec:	ffe78793          	add	a5,a5,-2
   10ef0:	00d70733          	add	a4,a4,a3
   10ef4:	00a70733          	add	a4,a4,a0
   10ef8:	01075513          	srl	a0,a4,0x10
   10efc:	00e61123          	sh	a4,2(a2)
   10f00:	00157513          	and	a0,a0,1
   10f04:	fcc59ee3          	bne	a1,a2,10ee0 <emdnorm+0x1e4>
   10f08:	f12048e3          	bgtz	s2,10e18 <emdnorm+0x11c>
   10f0c:	09000793          	li	a5,144
   10f10:	14fa8863          	beq	s5,a5,11060 <emdnorm+0x364>
   10f14:	00048513          	mv	a0,s1
   10f18:	f08ff0ef          	jal	10620 <eshup1>
   10f1c:	0044d783          	lhu	a5,4(s1)
   10f20:	14079463          	bnez	a5,11068 <emdnorm+0x36c>
   10f24:	00049c23          	sh	zero,24(s1)
   10f28:	f00954e3          	bgez	s2,10e30 <emdnorm+0x134>
   10f2c:	00049123          	sh	zero,2(s1)
   10f30:	f05ff06f          	j	10e34 <emdnorm+0x138>
   10f34:	f7000793          	li	a5,-144
   10f38:	0ef95063          	bge	s2,a5,11018 <emdnorm+0x31c>
   10f3c:	00248793          	add	a5,s1,2
   10f40:	01a48493          	add	s1,s1,26
   10f44:	00278793          	add	a5,a5,2
   10f48:	fe079f23          	sh	zero,-2(a5)
   10f4c:	fef49ce3          	bne	s1,a5,10f44 <emdnorm+0x248>
   10f50:	ee5ff06f          	j	10e34 <emdnorm+0x138>
   10f54:	00049c23          	sh	zero,24(s1)
   10f58:	ffff87b7          	lui	a5,0xffff8
   10f5c:	fff7c793          	not	a5,a5
   10f60:	00f49123          	sh	a5,2(s1)
   10f64:	00448793          	add	a5,s1,4
   10f68:	01848493          	add	s1,s1,24
   10f6c:	00079023          	sh	zero,0(a5) # ffff8000 <__alt_data_end+0xfffaec20>
   10f70:	00278793          	add	a5,a5,2
   10f74:	fef49ce3          	bne	s1,a5,10f6c <emdnorm+0x270>
   10f78:	ebdff06f          	j	10e34 <emdnorm+0x138>
   10f7c:	01800793          	li	a5,24
   10f80:	1afa8863          	beq	s5,a5,11130 <emdnorm+0x434>
   10f84:	03500793          	li	a5,53
   10f88:	12fa9a63          	bne	s5,a5,110bc <emdnorm+0x3c0>
   10f8c:	04000737          	lui	a4,0x4000
   10f90:	000017b7          	lui	a5,0x1
   10f94:	00600693          	li	a3,6
   10f98:	80078793          	add	a5,a5,-2048 # 800 <_start+0x44>
   10f9c:	7ff70713          	add	a4,a4,2047 # 40007ff <__alt_data_end+0x3fb741f>
   10fa0:	00d42423          	sw	a3,8(s0)
   10fa4:	00e42a23          	sw	a4,20(s0)
   10fa8:	00f41c23          	sh	a5,24(s0)
   10fac:	00d42623          	sw	a3,12(s0)
   10fb0:	02f41323          	sh	a5,38(s0)
   10fb4:	01542023          	sw	s5,0(s0)
   10fb8:	1d204463          	bgtz	s2,11180 <emdnorm+0x484>
   10fbc:	0184d783          	lhu	a5,24(s1)
   10fc0:	00048513          	mv	a0,s1
   10fc4:	0017f793          	and	a5,a5,1
   10fc8:	00f9e9b3          	or	s3,s3,a5
   10fcc:	e04ff0ef          	jal	105d0 <eshdn1>
   10fd0:	00842783          	lw	a5,8(s0)
   10fd4:	01445603          	lhu	a2,20(s0)
   10fd8:	08f00513          	li	a0,143
   10fdc:	00179593          	sll	a1,a5,0x1
   10fe0:	00b485b3          	add	a1,s1,a1
   10fe4:	0005d703          	lhu	a4,0(a1)
   10fe8:	00c776b3          	and	a3,a4,a2
   10fec:	e15548e3          	blt	a0,s5,10dfc <emdnorm+0x100>
   10ff0:	00178793          	add	a5,a5,1
   10ff4:	00c00513          	li	a0,12
   10ff8:	dcf55ce3          	bge	a0,a5,10dd0 <emdnorm+0xd4>
   10ffc:	e01ff06f          	j	10dfc <emdnorm+0x100>
   11000:	00248793          	add	a5,s1,2
   11004:	01a48493          	add	s1,s1,26
   11008:	00278793          	add	a5,a5,2
   1100c:	fe079f23          	sh	zero,-2(a5)
   11010:	fe979ce3          	bne	a5,s1,11008 <emdnorm+0x30c>
   11014:	e21ff06f          	j	10e34 <emdnorm+0x138>
   11018:	00090593          	mv	a1,s2
   1101c:	00048513          	mv	a0,s1
   11020:	945ff0ef          	jal	10964 <eshift.part.0>
   11024:	14050463          	beqz	a0,1116c <emdnorm+0x470>
   11028:	160a8663          	beqz	s5,11194 <emdnorm+0x498>
   1102c:	00442a83          	lw	s5,4(s0)
   11030:	00042783          	lw	a5,0(s0)
   11034:	00100993          	li	s3,1
   11038:	d2fa94e3          	bne	s5,a5,10d60 <emdnorm+0x64>
   1103c:	e35ff06f          	j	10e70 <emdnorm+0x174>
   11040:	00048513          	mv	a0,s1
   11044:	d8cff0ef          	jal	105d0 <eshdn1>
   11048:	000087b7          	lui	a5,0x8
   1104c:	00190913          	add	s2,s2,1
   11050:	00049c23          	sh	zero,24(s1)
   11054:	ffe78793          	add	a5,a5,-2 # 7ffe <OSTaskChangePrio+0x17e>
   11058:	f127c0e3          	blt	a5,s2,10f58 <emdnorm+0x25c>
   1105c:	dd5ff06f          	j	10e30 <emdnorm+0x134>
   11060:	0044d783          	lhu	a5,4(s1)
   11064:	ec0780e3          	beqz	a5,10f24 <emdnorm+0x228>
   11068:	00048513          	mv	a0,s1
   1106c:	d64ff0ef          	jal	105d0 <eshdn1>
   11070:	00190913          	add	s2,s2,1
   11074:	eb1ff06f          	j	10f24 <emdnorm+0x228>
   11078:	e40a0ce3          	beqz	s4,10ed0 <emdnorm+0x1d4>
   1107c:	d99ff06f          	j	10e14 <emdnorm+0x118>
   11080:	008007b7          	lui	a5,0x800
   11084:	00600693          	li	a3,6
   11088:	10000713          	li	a4,256
   1108c:	0ff78793          	add	a5,a5,255 # 8000ff <__alt_data_end+0x7b6d1f>
   11090:	00d42423          	sw	a3,8(s0)
   11094:	00f42a23          	sw	a5,20(s0)
   11098:	00e41c23          	sh	a4,24(s0)
   1109c:	00d42623          	sw	a3,12(s0)
   110a0:	02e41323          	sh	a4,38(s0)
   110a4:	01542023          	sw	s5,0(s0)
   110a8:	f1205ae3          	blez	s2,10fbc <emdnorm+0x2c0>
   110ac:	00c4c683          	lbu	a3,12(s1)
   110b0:	00c48593          	add	a1,s1,12
   110b4:	00700793          	li	a5,7
   110b8:	d19ff06f          	j	10dd0 <emdnorm+0xd4>
   110bc:	800107b7          	lui	a5,0x80010
   110c0:	fff78793          	add	a5,a5,-1 # 8000ffff <__alt_data_end+0x7ffc6c1f>
   110c4:	00100713          	li	a4,1
   110c8:	00c00693          	li	a3,12
   110cc:	00f42a23          	sw	a5,20(s0)
   110d0:	00b00793          	li	a5,11
   110d4:	00f42623          	sw	a5,12(s0)
   110d8:	00d42423          	sw	a3,8(s0)
   110dc:	00e41c23          	sh	a4,24(s0)
   110e0:	02e41823          	sh	a4,48(s0)
   110e4:	01542023          	sw	s5,0(s0)
   110e8:	000a8793          	mv	a5,s5
   110ec:	d81ff06f          	j	10e6c <emdnorm+0x170>
   110f0:	800107b7          	lui	a5,0x80010
   110f4:	fff78793          	add	a5,a5,-1 # 8000ffff <__alt_data_end+0x7ffc6c1f>
   110f8:	00100713          	li	a4,1
   110fc:	00700693          	li	a3,7
   11100:	00f42a23          	sw	a5,20(s0)
   11104:	00600793          	li	a5,6
   11108:	00d42423          	sw	a3,8(s0)
   1110c:	00e41c23          	sh	a4,24(s0)
   11110:	00f42623          	sw	a5,12(s0)
   11114:	02e41323          	sh	a4,38(s0)
   11118:	01542023          	sw	s5,0(s0)
   1111c:	eb2050e3          	blez	s2,10fbc <emdnorm+0x2c0>
   11120:	00e4d683          	lhu	a3,14(s1)
   11124:	00e48593          	add	a1,s1,14
   11128:	00800793          	li	a5,8
   1112c:	ca5ff06f          	j	10dd0 <emdnorm+0xd4>
   11130:	008007b7          	lui	a5,0x800
   11134:	00400693          	li	a3,4
   11138:	10000713          	li	a4,256
   1113c:	0ff78793          	add	a5,a5,255 # 8000ff <__alt_data_end+0x7b6d1f>
   11140:	00d42423          	sw	a3,8(s0)
   11144:	00f42a23          	sw	a5,20(s0)
   11148:	00e41c23          	sh	a4,24(s0)
   1114c:	00d42623          	sw	a3,12(s0)
   11150:	02e41123          	sh	a4,34(s0)
   11154:	01542023          	sw	s5,0(s0)
   11158:	e72052e3          	blez	s2,10fbc <emdnorm+0x2c0>
   1115c:	0084c683          	lbu	a3,8(s1)
   11160:	00848593          	add	a1,s1,8
   11164:	00500793          	li	a5,5
   11168:	c69ff06f          	j	10dd0 <emdnorm+0xd4>
   1116c:	020a8463          	beqz	s5,11194 <emdnorm+0x498>
   11170:	00442a83          	lw	s5,4(s0)
   11174:	00042783          	lw	a5,0(s0)
   11178:	befa94e3          	bne	s5,a5,10d60 <emdnorm+0x64>
   1117c:	cf5ff06f          	j	10e70 <emdnorm+0x174>
   11180:	00c4d683          	lhu	a3,12(s1)
   11184:	00c48593          	add	a1,s1,12
   11188:	00700793          	li	a5,7
   1118c:	7ff6f693          	and	a3,a3,2047
   11190:	c41ff06f          	j	10dd0 <emdnorm+0xd4>
   11194:	00049c23          	sh	zero,24(s1)
   11198:	00049123          	sh	zero,2(s1)
   1119c:	c99ff06f          	j	10e34 <emdnorm+0x138>
   111a0:	00078a93          	mv	s5,a5
   111a4:	e2dff06f          	j	10fd0 <emdnorm+0x2d4>
   111a8:	00078a93          	mv	s5,a5
   111ac:	e11ff06f          	j	10fbc <emdnorm+0x2c0>

000111b0 <eiremain>:
   111b0:	fd010113          	add	sp,sp,-48
   111b4:	02912223          	sw	s1,36(sp)
   111b8:	03212023          	sw	s2,32(sp)
   111bc:	00058493          	mv	s1,a1
   111c0:	00255903          	lhu	s2,2(a0)
   111c4:	02112623          	sw	ra,44(sp)
   111c8:	02812423          	sw	s0,40(sp)
   111cc:	01312e23          	sw	s3,28(sp)
   111d0:	00060413          	mv	s0,a2
   111d4:	03460993          	add	s3,a2,52
   111d8:	01612823          	sw	s6,16(sp)
   111dc:	01912223          	sw	s9,4(sp)
   111e0:	00050b13          	mv	s6,a0
   111e4:	e1cff0ef          	jal	10800 <enormlz>
   111e8:	0024dc83          	lhu	s9,2(s1)
   111ec:	00050793          	mv	a5,a0
   111f0:	00048513          	mv	a0,s1
   111f4:	40f90933          	sub	s2,s2,a5
   111f8:	e08ff0ef          	jal	10800 <enormlz>
   111fc:	40ac8cb3          	sub	s9,s9,a0
   11200:	04e40713          	add	a4,s0,78
   11204:	00098793          	mv	a5,s3
   11208:	00278793          	add	a5,a5,2
   1120c:	fe079f23          	sh	zero,-2(a5)
   11210:	fee79ce3          	bne	a5,a4,11208 <eiremain+0x58>
   11214:	0b2ccc63          	blt	s9,s2,112cc <eiremain+0x11c>
   11218:	01412c23          	sw	s4,24(sp)
   1121c:	01512a23          	sw	s5,20(sp)
   11220:	01712623          	sw	s7,12(sp)
   11224:	01a12023          	sw	s10,0(sp)
   11228:	01812423          	sw	s8,8(sp)
   1122c:	004b0a93          	add	s5,s6,4
   11230:	00448a13          	add	s4,s1,4
   11234:	01ab0b93          	add	s7,s6,26
   11238:	00248d13          	add	s10,s1,2
   1123c:	000a0713          	mv	a4,s4
   11240:	000a8793          	mv	a5,s5
   11244:	0007d583          	lhu	a1,0(a5)
   11248:	00075603          	lhu	a2,0(a4)
   1124c:	00278793          	add	a5,a5,2
   11250:	00270713          	add	a4,a4,2
   11254:	0ac59a63          	bne	a1,a2,11308 <eiremain+0x158>
   11258:	fefb96e3          	bne	s7,a5,11244 <eiremain+0x94>
   1125c:	018b0593          	add	a1,s6,24
   11260:	01848713          	add	a4,s1,24
   11264:	00000613          	li	a2,0
   11268:	00075783          	lhu	a5,0(a4)
   1126c:	0005d803          	lhu	a6,0(a1)
   11270:	ffe70713          	add	a4,a4,-2
   11274:	ffe58593          	add	a1,a1,-2
   11278:	410787b3          	sub	a5,a5,a6
   1127c:	40c787b3          	sub	a5,a5,a2
   11280:	0107d613          	srl	a2,a5,0x10
   11284:	00f71123          	sh	a5,2(a4)
   11288:	00167613          	and	a2,a2,1
   1128c:	fda71ee3          	bne	a4,s10,11268 <eiremain+0xb8>
   11290:	00100c13          	li	s8,1
   11294:	00098513          	mv	a0,s3
   11298:	b88ff0ef          	jal	10620 <eshup1>
   1129c:	04c45783          	lhu	a5,76(s0)
   112a0:	00048513          	mv	a0,s1
   112a4:	fffc8c93          	add	s9,s9,-1
   112a8:	00fc67b3          	or	a5,s8,a5
   112ac:	04f41623          	sh	a5,76(s0)
   112b0:	b70ff0ef          	jal	10620 <eshup1>
   112b4:	f92cd4e3          	bge	s9,s2,1123c <eiremain+0x8c>
   112b8:	01812a03          	lw	s4,24(sp)
   112bc:	01412a83          	lw	s5,20(sp)
   112c0:	00c12b83          	lw	s7,12(sp)
   112c4:	00812c03          	lw	s8,8(sp)
   112c8:	00012d03          	lw	s10,0(sp)
   112cc:	00040793          	mv	a5,s0
   112d0:	02812403          	lw	s0,40(sp)
   112d4:	02c12083          	lw	ra,44(sp)
   112d8:	02012903          	lw	s2,32(sp)
   112dc:	01c12983          	lw	s3,28(sp)
   112e0:	01012b03          	lw	s6,16(sp)
   112e4:	000c8693          	mv	a3,s9
   112e8:	00048513          	mv	a0,s1
   112ec:	00412c83          	lw	s9,4(sp)
   112f0:	02412483          	lw	s1,36(sp)
   112f4:	00000713          	li	a4,0
   112f8:	00000613          	li	a2,0
   112fc:	00000593          	li	a1,0
   11300:	03010113          	add	sp,sp,48
   11304:	9f9ff06f          	j	10cfc <emdnorm>
   11308:	00000c13          	li	s8,0
   1130c:	f8b664e3          	bltu	a2,a1,11294 <eiremain+0xe4>
   11310:	f4dff06f          	j	1125c <eiremain+0xac>

00011314 <e113toe.isra.0>:
   11314:	fd010113          	add	sp,sp,-48
   11318:	02812423          	sw	s0,40(sp)
   1131c:	02112623          	sw	ra,44(sp)
   11320:	00058413          	mv	s0,a1
   11324:	00410793          	add	a5,sp,4
   11328:	01e10713          	add	a4,sp,30
   1132c:	00278793          	add	a5,a5,2
   11330:	fe079f23          	sh	zero,-2(a5)
   11334:	fee79ce3          	bne	a5,a4,1132c <e113toe.isra.0+0x18>
   11338:	00e55603          	lhu	a2,14(a0)
   1133c:	000087b7          	lui	a5,0x8
   11340:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   11344:	00f65713          	srl	a4,a2,0xf
   11348:	40e00733          	neg	a4,a4
   1134c:	00e11223          	sh	a4,4(sp)
   11350:	00f67633          	and	a2,a2,a5
   11354:	06f60063          	beq	a2,a5,113b4 <e113toe.isra.0+0xa0>
   11358:	00e50793          	add	a5,a0,14
   1135c:	00c11323          	sh	a2,6(sp)
   11360:	00a10713          	add	a4,sp,10
   11364:	ffe7d683          	lhu	a3,-2(a5)
   11368:	ffe78793          	add	a5,a5,-2
   1136c:	00270713          	add	a4,a4,2
   11370:	fed71f23          	sh	a3,-2(a4)
   11374:	fef518e3          	bne	a0,a5,11364 <e113toe.isra.0+0x50>
   11378:	02061263          	bnez	a2,1139c <e113toe.isra.0+0x88>
   1137c:	00011423          	sh	zero,8(sp)
   11380:	00040593          	mv	a1,s0
   11384:	00410513          	add	a0,sp,4
   11388:	bbcff0ef          	jal	10744 <emovo.isra.0>
   1138c:	02c12083          	lw	ra,44(sp)
   11390:	02812403          	lw	s0,40(sp)
   11394:	03010113          	add	sp,sp,48
   11398:	00008067          	ret
   1139c:	00100793          	li	a5,1
   113a0:	fff00593          	li	a1,-1
   113a4:	00410513          	add	a0,sp,4
   113a8:	00f11423          	sh	a5,8(sp)
   113ac:	db8ff0ef          	jal	10964 <eshift.part.0>
   113b0:	fd1ff06f          	j	11380 <e113toe.isra.0+0x6c>
   113b4:	00050793          	mv	a5,a0
   113b8:	00e50693          	add	a3,a0,14
   113bc:	0007d703          	lhu	a4,0(a5)
   113c0:	00278793          	add	a5,a5,2
   113c4:	06071c63          	bnez	a4,1143c <e113toe.isra.0+0x128>
   113c8:	fed79ae3          	bne	a5,a3,113bc <e113toe.isra.0+0xa8>
   113cc:	01440713          	add	a4,s0,20
   113d0:	00040793          	mv	a5,s0
   113d4:	00278793          	add	a5,a5,2
   113d8:	fe079f23          	sh	zero,-2(a5)
   113dc:	fee79ce3          	bne	a5,a4,113d4 <e113toe.isra.0+0xc0>
   113e0:	01240713          	add	a4,s0,18
   113e4:	00040793          	mv	a5,s0
   113e8:	00278793          	add	a5,a5,2
   113ec:	fe079f23          	sh	zero,-2(a5)
   113f0:	fee79ce3          	bne	a5,a4,113e8 <e113toe.isra.0+0xd4>
   113f4:	01245783          	lhu	a5,18(s0)
   113f8:	000086b7          	lui	a3,0x8
   113fc:	fff68693          	add	a3,a3,-1 # 7fff <OSTaskChangePrio+0x17f>
   11400:	00d7e7b3          	or	a5,a5,a3
   11404:	01079793          	sll	a5,a5,0x10
   11408:	0107d793          	srl	a5,a5,0x10
   1140c:	00f41923          	sh	a5,18(s0)
   11410:	00e51683          	lh	a3,14(a0)
   11414:	f606dce3          	bgez	a3,1138c <e113toe.isra.0+0x78>
   11418:	00040693          	mv	a3,s0
   1141c:	0006d603          	lhu	a2,0(a3)
   11420:	00268693          	add	a3,a3,2
   11424:	f60614e3          	bnez	a2,1138c <e113toe.isra.0+0x78>
   11428:	fee69ae3          	bne	a3,a4,1141c <e113toe.isra.0+0x108>
   1142c:	ffff8737          	lui	a4,0xffff8
   11430:	00e7c7b3          	xor	a5,a5,a4
   11434:	00f41923          	sh	a5,18(s0)
   11438:	f55ff06f          	j	1138c <e113toe.isra.0+0x78>
   1143c:	01040713          	add	a4,s0,16
   11440:	00040793          	mv	a5,s0
   11444:	00278793          	add	a5,a5,2
   11448:	fe079f23          	sh	zero,-2(a5)
   1144c:	fee79ce3          	bne	a5,a4,11444 <e113toe.isra.0+0x130>
   11450:	ffffc7b7          	lui	a5,0xffffc
   11454:	00f41823          	sh	a5,16(s0)
   11458:	ffff87b7          	lui	a5,0xffff8
   1145c:	fff7c793          	not	a5,a5
   11460:	00f41923          	sh	a5,18(s0)
   11464:	f29ff06f          	j	1138c <e113toe.isra.0+0x78>

00011468 <ediv>:
   11468:	01255783          	lhu	a5,18(a0)
   1146c:	f5010113          	add	sp,sp,-176
   11470:	0a812423          	sw	s0,168(sp)
   11474:	fff7c793          	not	a5,a5
   11478:	0a912223          	sw	s1,164(sp)
   1147c:	0b212023          	sw	s2,160(sp)
   11480:	09312e23          	sw	s3,156(sp)
   11484:	0a112623          	sw	ra,172(sp)
   11488:	01179713          	sll	a4,a5,0x11
   1148c:	00050493          	mv	s1,a0
   11490:	00058993          	mv	s3,a1
   11494:	00060413          	mv	s0,a2
   11498:	00068913          	mv	s2,a3
   1149c:	00071e63          	bnez	a4,114b8 <ediv+0x50>
   114a0:	01250693          	add	a3,a0,18
   114a4:	00050793          	mv	a5,a0
   114a8:	0007d703          	lhu	a4,0(a5) # ffff8000 <__alt_data_end+0xfffaec20>
   114ac:	00278793          	add	a5,a5,2
   114b0:	0c071e63          	bnez	a4,1158c <ediv+0x124>
   114b4:	fef69ae3          	bne	a3,a5,114a8 <ediv+0x40>
   114b8:	0129d783          	lhu	a5,18(s3)
   114bc:	fff7c793          	not	a5,a5
   114c0:	01179713          	sll	a4,a5,0x11
   114c4:	00071e63          	bnez	a4,114e0 <ediv+0x78>
   114c8:	01298693          	add	a3,s3,18
   114cc:	00098793          	mv	a5,s3
   114d0:	0007d703          	lhu	a4,0(a5)
   114d4:	00278793          	add	a5,a5,2
   114d8:	0e071463          	bnez	a4,115c0 <ediv+0x158>
   114dc:	fef69ae3          	bne	a3,a5,114d0 <ediv+0x68>
   114e0:	00012597          	auipc	a1,0x12
   114e4:	f7058593          	add	a1,a1,-144 # 23450 <ezero>
   114e8:	00048513          	mv	a0,s1
   114ec:	ec4ff0ef          	jal	10bb0 <ecmp>
   114f0:	1a050263          	beqz	a0,11694 <ediv+0x22c>
   114f4:	0124d603          	lhu	a2,18(s1)
   114f8:	000087b7          	lui	a5,0x8
   114fc:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   11500:	00f67533          	and	a0,a2,a5
   11504:	0ef51863          	bne	a0,a5,115f4 <ediv+0x18c>
   11508:	01248693          	add	a3,s1,18
   1150c:	00048793          	mv	a5,s1
   11510:	0007d703          	lhu	a4,0(a5)
   11514:	00278793          	add	a5,a5,2
   11518:	0c071e63          	bnez	a4,115f4 <ediv+0x18c>
   1151c:	fef69ae3          	bne	a3,a5,11510 <ediv+0xa8>
   11520:	0129d703          	lhu	a4,18(s3)
   11524:	fff74793          	not	a5,a4
   11528:	01179693          	sll	a3,a5,0x11
   1152c:	14069a63          	bnez	a3,11680 <ediv+0x218>
   11530:	01298693          	add	a3,s3,18
   11534:	00098793          	mv	a5,s3
   11538:	0007d583          	lhu	a1,0(a5)
   1153c:	00278793          	add	a5,a5,2
   11540:	52059863          	bnez	a1,11a70 <ediv+0x608>
   11544:	fef69ae3          	bne	a3,a5,11538 <ediv+0xd0>
   11548:	01040713          	add	a4,s0,16
   1154c:	00040793          	mv	a5,s0
   11550:	00278793          	add	a5,a5,2
   11554:	fe079f23          	sh	zero,-2(a5)
   11558:	fee79ce3          	bne	a5,a4,11550 <ediv+0xe8>
   1155c:	ffffc7b7          	lui	a5,0xffffc
   11560:	00f41823          	sh	a5,16(s0)
   11564:	ffff87b7          	lui	a5,0xffff8
   11568:	fff7c793          	not	a5,a5
   1156c:	00f41923          	sh	a5,18(s0)
   11570:	0ac12083          	lw	ra,172(sp)
   11574:	0a812403          	lw	s0,168(sp)
   11578:	0a412483          	lw	s1,164(sp)
   1157c:	0a012903          	lw	s2,160(sp)
   11580:	09c12983          	lw	s3,156(sp)
   11584:	0b010113          	add	sp,sp,176
   11588:	00008067          	ret
   1158c:	01448713          	add	a4,s1,20
   11590:	0004d783          	lhu	a5,0(s1)
   11594:	00248493          	add	s1,s1,2
   11598:	00240413          	add	s0,s0,2
   1159c:	fef41f23          	sh	a5,-2(s0)
   115a0:	fee498e3          	bne	s1,a4,11590 <ediv+0x128>
   115a4:	0ac12083          	lw	ra,172(sp)
   115a8:	0a812403          	lw	s0,168(sp)
   115ac:	0a412483          	lw	s1,164(sp)
   115b0:	0a012903          	lw	s2,160(sp)
   115b4:	09c12983          	lw	s3,156(sp)
   115b8:	0b010113          	add	sp,sp,176
   115bc:	00008067          	ret
   115c0:	01440713          	add	a4,s0,20
   115c4:	0009d783          	lhu	a5,0(s3)
   115c8:	00240413          	add	s0,s0,2
   115cc:	00298993          	add	s3,s3,2
   115d0:	fef41f23          	sh	a5,-2(s0)
   115d4:	fee418e3          	bne	s0,a4,115c4 <ediv+0x15c>
   115d8:	0ac12083          	lw	ra,172(sp)
   115dc:	0a812403          	lw	s0,168(sp)
   115e0:	0a412483          	lw	s1,164(sp)
   115e4:	0a012903          	lw	s2,160(sp)
   115e8:	09c12983          	lw	s3,156(sp)
   115ec:	0b010113          	add	sp,sp,176
   115f0:	00008067          	ret
   115f4:	0129d703          	lhu	a4,18(s3)
   115f8:	fff74793          	not	a5,a4
   115fc:	01179693          	sll	a3,a5,0x11
   11600:	0a069663          	bnez	a3,116ac <ediv+0x244>
   11604:	00000813          	li	a6,0
   11608:	01298693          	add	a3,s3,18
   1160c:	00098793          	mv	a5,s3
   11610:	0007d583          	lhu	a1,0(a5) # ffff8000 <__alt_data_end+0xfffaec20>
   11614:	00278793          	add	a5,a5,2
   11618:	06059263          	bnez	a1,1167c <ediv+0x214>
   1161c:	fef69ae3          	bne	a3,a5,11610 <ediv+0x1a8>
   11620:	000087b7          	lui	a5,0x8
   11624:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   11628:	14f50c63          	beq	a0,a5,11780 <ediv+0x318>
   1162c:	00f65613          	srl	a2,a2,0xf
   11630:	0009d783          	lhu	a5,0(s3)
   11634:	00298993          	add	s3,s3,2
   11638:	42079463          	bnez	a5,11a60 <ediv+0x5f8>
   1163c:	ff369ae3          	bne	a3,s3,11630 <ediv+0x1c8>
   11640:	00f75793          	srl	a5,a4,0xf
   11644:	00c7c7b3          	xor	a5,a5,a2
   11648:	00f79793          	sll	a5,a5,0xf
   1164c:	00f41923          	sh	a5,18(s0)
   11650:	01240713          	add	a4,s0,18
   11654:	00040793          	mv	a5,s0
   11658:	00278793          	add	a5,a5,2
   1165c:	fe079f23          	sh	zero,-2(a5)
   11660:	fee79ce3          	bne	a5,a4,11658 <ediv+0x1f0>
   11664:	01245783          	lhu	a5,18(s0)
   11668:	00008737          	lui	a4,0x8
   1166c:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   11670:	00e7e7b3          	or	a5,a5,a4
   11674:	00f41923          	sh	a5,18(s0)
   11678:	ef9ff06f          	j	11570 <ediv+0x108>
   1167c:	02080863          	beqz	a6,116ac <ediv+0x244>
   11680:	01440793          	add	a5,s0,20
   11684:	00240413          	add	s0,s0,2
   11688:	fe041f23          	sh	zero,-2(s0)
   1168c:	fef41ce3          	bne	s0,a5,11684 <ediv+0x21c>
   11690:	ee1ff06f          	j	11570 <ediv+0x108>
   11694:	00012597          	auipc	a1,0x12
   11698:	dbc58593          	add	a1,a1,-580 # 23450 <ezero>
   1169c:	00098513          	mv	a0,s3
   116a0:	d10ff0ef          	jal	10bb0 <ecmp>
   116a4:	e40518e3          	bnez	a0,114f4 <ediv+0x8c>
   116a8:	ea1ff06f          	j	11548 <ediv+0xe0>
   116ac:	01c10593          	add	a1,sp,28
   116b0:	00048513          	mv	a0,s1
   116b4:	09612823          	sw	s6,144(sp)
   116b8:	09812423          	sw	s8,136(sp)
   116bc:	c40ff0ef          	jal	10afc <emovi>
   116c0:	03810593          	add	a1,sp,56
   116c4:	00098513          	mv	a0,s3
   116c8:	c34ff0ef          	jal	10afc <emovi>
   116cc:	03a15b03          	lhu	s6,58(sp)
   116d0:	01e15c03          	lhu	s8,30(sp)
   116d4:	040b1063          	bnez	s6,11714 <ediv+0x2ac>
   116d8:	09912223          	sw	s9,132(sp)
   116dc:	03a10793          	add	a5,sp,58
   116e0:	05010c93          	add	s9,sp,80
   116e4:	0007d703          	lhu	a4,0(a5)
   116e8:	00278793          	add	a5,a5,2
   116ec:	32071863          	bnez	a4,11a1c <ediv+0x5b4>
   116f0:	fefc9ae3          	bne	s9,a5,116e4 <ediv+0x27c>
   116f4:	01440793          	add	a5,s0,20
   116f8:	00240413          	add	s0,s0,2
   116fc:	fe041f23          	sh	zero,-2(s0)
   11700:	fef41ce3          	bne	s0,a5,116f8 <ediv+0x290>
   11704:	09012b03          	lw	s6,144(sp)
   11708:	08812c03          	lw	s8,136(sp)
   1170c:	08412c83          	lw	s9,132(sp)
   11710:	e61ff06f          	j	11570 <ediv+0x108>
   11714:	01612223          	sw	s6,4(sp)
   11718:	080c1063          	bnez	s8,11798 <ediv+0x330>
   1171c:	01e10793          	add	a5,sp,30
   11720:	03410693          	add	a3,sp,52
   11724:	0007d703          	lhu	a4,0(a5)
   11728:	00278793          	add	a5,a5,2
   1172c:	30071463          	bnez	a4,11a34 <ediv+0x5cc>
   11730:	fed79ae3          	bne	a5,a3,11724 <ediv+0x2bc>
   11734:	01c15683          	lhu	a3,28(sp)
   11738:	03815603          	lhu	a2,56(sp)
   1173c:	01240713          	add	a4,s0,18
   11740:	00040793          	mv	a5,s0
   11744:	40c686b3          	sub	a3,a3,a2
   11748:	00d036b3          	snez	a3,a3
   1174c:	00f69693          	sll	a3,a3,0xf
   11750:	00d41923          	sh	a3,18(s0)
   11754:	00278793          	add	a5,a5,2
   11758:	fe079f23          	sh	zero,-2(a5)
   1175c:	fee79ce3          	bne	a5,a4,11754 <ediv+0x2ec>
   11760:	01245783          	lhu	a5,18(s0)
   11764:	00008737          	lui	a4,0x8
   11768:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   1176c:	00e7e7b3          	or	a5,a5,a4
   11770:	09012b03          	lw	s6,144(sp)
   11774:	08812c03          	lw	s8,136(sp)
   11778:	00f41923          	sh	a5,18(s0)
   1177c:	df5ff06f          	j	11570 <ediv+0x108>
   11780:	01248593          	add	a1,s1,18
   11784:	0004d783          	lhu	a5,0(s1)
   11788:	00248493          	add	s1,s1,2
   1178c:	2c079e63          	bnez	a5,11a68 <ediv+0x600>
   11790:	fe959ae3          	bne	a1,s1,11784 <ediv+0x31c>
   11794:	e99ff06f          	j	1162c <ediv+0x1c4>
   11798:	09412c23          	sw	s4,152(sp)
   1179c:	09512a23          	sw	s5,148(sp)
   117a0:	09712623          	sw	s7,140(sp)
   117a4:	09912223          	sw	s9,132(sp)
   117a8:	09a12023          	sw	s10,128(sp)
   117ac:	07b12e23          	sw	s11,124(sp)
   117b0:	01812423          	sw	s8,8(sp)
   117b4:	03490793          	add	a5,s2,52
   117b8:	00f12623          	sw	a5,12(sp)
   117bc:	03812783          	lw	a5,56(sp)
   117c0:	03890493          	add	s1,s2,56
   117c4:	04e90993          	add	s3,s2,78
   117c8:	02f92a23          	sw	a5,52(s2)
   117cc:	00048793          	mv	a5,s1
   117d0:	00278793          	add	a5,a5,2
   117d4:	fe079f23          	sh	zero,-2(a5)
   117d8:	ff379ce3          	bne	a5,s3,117d0 <ediv+0x368>
   117dc:	03810513          	add	a0,sp,56
   117e0:	df1fe0ef          	jal	105d0 <eshdn1>
   117e4:	02215b83          	lhu	s7,34(sp)
   117e8:	00010a37          	lui	s4,0x10
   117ec:	03a10d13          	add	s10,sp,58
   117f0:	010b9a93          	sll	s5,s7,0x10
   117f4:	417a8ab3          	sub	s5,s5,s7
   117f8:	05010c93          	add	s9,sp,80
   117fc:	fffa0a13          	add	s4,s4,-1 # ffff <__sfvwrite_r+0x9b>
   11800:	06e10d93          	add	s11,sp,110
   11804:	05610c13          	add	s8,sp,86
   11808:	03c15503          	lhu	a0,60(sp)
   1180c:	03e15783          	lhu	a5,62(sp)
   11810:	000a0b13          	mv	s6,s4
   11814:	01051513          	sll	a0,a0,0x10
   11818:	00f50533          	add	a0,a0,a5
   1181c:	00aaea63          	bltu	s5,a0,11830 <ediv+0x3c8>
   11820:	000b8593          	mv	a1,s7
   11824:	33c100ef          	jal	21b60 <__hidden___udivsi3>
   11828:	01051b13          	sll	s6,a0,0x10
   1182c:	010b5b13          	srl	s6,s6,0x10
   11830:	05410613          	add	a2,sp,84
   11834:	01c10593          	add	a1,sp,28
   11838:	000b0513          	mv	a0,s6
   1183c:	e39fe0ef          	jal	10674 <m16m>
   11840:	03c10713          	add	a4,sp,60
   11844:	05810793          	add	a5,sp,88
   11848:	0007d603          	lhu	a2,0(a5)
   1184c:	00075683          	lhu	a3,0(a4)
   11850:	00278793          	add	a5,a5,2
   11854:	00270713          	add	a4,a4,2
   11858:	10d61863          	bne	a2,a3,11968 <ediv+0x500>
   1185c:	ffb796e3          	bne	a5,s11,11848 <ediv+0x3e0>
   11860:	00000693          	li	a3,0
   11864:	06c10613          	add	a2,sp,108
   11868:	000c8793          	mv	a5,s9
   1186c:	0007d703          	lhu	a4,0(a5)
   11870:	00065583          	lhu	a1,0(a2)
   11874:	ffe78793          	add	a5,a5,-2
   11878:	ffe60613          	add	a2,a2,-2
   1187c:	40b70733          	sub	a4,a4,a1
   11880:	40d70733          	sub	a4,a4,a3
   11884:	01075693          	srl	a3,a4,0x10
   11888:	00e79123          	sh	a4,2(a5)
   1188c:	0016f693          	and	a3,a3,1
   11890:	fda79ee3          	bne	a5,s10,1186c <ediv+0x404>
   11894:	01649023          	sh	s6,0(s1)
   11898:	03c10793          	add	a5,sp,60
   1189c:	0027d703          	lhu	a4,2(a5)
   118a0:	00278793          	add	a5,a5,2
   118a4:	fee79f23          	sh	a4,-2(a5)
   118a8:	ff979ae3          	bne	a5,s9,1189c <ediv+0x434>
   118ac:	04011823          	sh	zero,80(sp)
   118b0:	00248493          	add	s1,s1,2
   118b4:	f4999ae3          	bne	s3,s1,11808 <ediv+0x3a0>
   118b8:	00000713          	li	a4,0
   118bc:	03c10793          	add	a5,sp,60
   118c0:	05210693          	add	a3,sp,82
   118c4:	0007d603          	lhu	a2,0(a5)
   118c8:	00278793          	add	a5,a5,2
   118cc:	00c76733          	or	a4,a4,a2
   118d0:	fed79ae3          	bne	a5,a3,118c4 <ediv+0x45c>
   118d4:	00c12483          	lw	s1,12(sp)
   118d8:	00e035b3          	snez	a1,a4
   118dc:	03810793          	add	a5,sp,56
   118e0:	0004d703          	lhu	a4,0(s1)
   118e4:	00278793          	add	a5,a5,2
   118e8:	00248493          	add	s1,s1,2
   118ec:	fee79f23          	sh	a4,-2(a5)
   118f0:	fef698e3          	bne	a3,a5,118e0 <ediv+0x478>
   118f4:	00412783          	lw	a5,4(sp)
   118f8:	00812703          	lw	a4,8(sp)
   118fc:	000046b7          	lui	a3,0x4
   11900:	fff68693          	add	a3,a3,-1 # 3fff <OSFlagPend+0x54f>
   11904:	40e78b33          	sub	s6,a5,a4
   11908:	00db06b3          	add	a3,s6,a3
   1190c:	00090793          	mv	a5,s2
   11910:	04000713          	li	a4,64
   11914:	00000613          	li	a2,0
   11918:	03810513          	add	a0,sp,56
   1191c:	be0ff0ef          	jal	10cfc <emdnorm>
   11920:	03815703          	lhu	a4,56(sp)
   11924:	01c15783          	lhu	a5,28(sp)
   11928:	00040593          	mv	a1,s0
   1192c:	03810513          	add	a0,sp,56
   11930:	40e787b3          	sub	a5,a5,a4
   11934:	00f037b3          	snez	a5,a5
   11938:	40f007b3          	neg	a5,a5
   1193c:	02f11c23          	sh	a5,56(sp)
   11940:	e05fe0ef          	jal	10744 <emovo.isra.0>
   11944:	09812a03          	lw	s4,152(sp)
   11948:	09412a83          	lw	s5,148(sp)
   1194c:	09012b03          	lw	s6,144(sp)
   11950:	08c12b83          	lw	s7,140(sp)
   11954:	08812c03          	lw	s8,136(sp)
   11958:	08412c83          	lw	s9,132(sp)
   1195c:	08012d03          	lw	s10,128(sp)
   11960:	07c12d83          	lw	s11,124(sp)
   11964:	c0dff06f          	j	11570 <ediv+0x108>
   11968:	eec6fce3          	bgeu	a3,a2,11860 <ediv+0x3f8>
   1196c:	fffb0793          	add	a5,s6,-1
   11970:	01079513          	sll	a0,a5,0x10
   11974:	01055513          	srl	a0,a0,0x10
   11978:	00000693          	li	a3,0
   1197c:	03410613          	add	a2,sp,52
   11980:	06c10713          	add	a4,sp,108
   11984:	00075783          	lhu	a5,0(a4)
   11988:	00065583          	lhu	a1,0(a2)
   1198c:	ffe70713          	add	a4,a4,-2
   11990:	ffe60613          	add	a2,a2,-2
   11994:	40b787b3          	sub	a5,a5,a1
   11998:	40d787b3          	sub	a5,a5,a3
   1199c:	0107d693          	srl	a3,a5,0x10
   119a0:	00f71123          	sh	a5,2(a4)
   119a4:	0016f693          	and	a3,a3,1
   119a8:	fd871ee3          	bne	a4,s8,11984 <ediv+0x51c>
   119ac:	03c10713          	add	a4,sp,60
   119b0:	05810793          	add	a5,sp,88
   119b4:	0007d603          	lhu	a2,0(a5)
   119b8:	00075683          	lhu	a3,0(a4)
   119bc:	00278793          	add	a5,a5,2
   119c0:	00270713          	add	a4,a4,2
   119c4:	00d61863          	bne	a2,a3,119d4 <ediv+0x56c>
   119c8:	ffb796e3          	bne	a5,s11,119b4 <ediv+0x54c>
   119cc:	00050b13          	mv	s6,a0
   119d0:	e91ff06f          	j	11860 <ediv+0x3f8>
   119d4:	fec6fce3          	bgeu	a3,a2,119cc <ediv+0x564>
   119d8:	ffeb0313          	add	t1,s6,-2
   119dc:	01031b13          	sll	s6,t1,0x10
   119e0:	010b5b13          	srl	s6,s6,0x10
   119e4:	00000693          	li	a3,0
   119e8:	03410613          	add	a2,sp,52
   119ec:	06c10713          	add	a4,sp,108
   119f0:	00075783          	lhu	a5,0(a4)
   119f4:	00065583          	lhu	a1,0(a2)
   119f8:	ffe70713          	add	a4,a4,-2
   119fc:	ffe60613          	add	a2,a2,-2
   11a00:	40b787b3          	sub	a5,a5,a1
   11a04:	40d787b3          	sub	a5,a5,a3
   11a08:	0107d693          	srl	a3,a5,0x10
   11a0c:	00f71123          	sh	a5,2(a4)
   11a10:	0016f693          	and	a3,a3,1
   11a14:	fd871ee3          	bne	a4,s8,119f0 <ediv+0x588>
   11a18:	e49ff06f          	j	11860 <ediv+0x3f8>
   11a1c:	03810513          	add	a0,sp,56
   11a20:	de1fe0ef          	jal	10800 <enormlz>
   11a24:	40a007b3          	neg	a5,a0
   11a28:	08412c83          	lw	s9,132(sp)
   11a2c:	00f12223          	sw	a5,4(sp)
   11a30:	ce9ff06f          	j	11718 <ediv+0x2b0>
   11a34:	01c10513          	add	a0,sp,28
   11a38:	09412c23          	sw	s4,152(sp)
   11a3c:	09512a23          	sw	s5,148(sp)
   11a40:	09712623          	sw	s7,140(sp)
   11a44:	09912223          	sw	s9,132(sp)
   11a48:	09a12023          	sw	s10,128(sp)
   11a4c:	07b12e23          	sw	s11,124(sp)
   11a50:	db1fe0ef          	jal	10800 <enormlz>
   11a54:	40a007b3          	neg	a5,a0
   11a58:	00f12423          	sw	a5,8(sp)
   11a5c:	d59ff06f          	j	117b4 <ediv+0x34c>
   11a60:	00000793          	li	a5,0
   11a64:	be1ff06f          	j	11644 <ediv+0x1dc>
   11a68:	00000613          	li	a2,0
   11a6c:	bc5ff06f          	j	11630 <ediv+0x1c8>
   11a70:	00100813          	li	a6,1
   11a74:	b99ff06f          	j	1160c <ediv+0x1a4>

00011a78 <emul>:
   11a78:	f7010113          	add	sp,sp,-144
   11a7c:	08912223          	sw	s1,132(sp)
   11a80:	00050493          	mv	s1,a0
   11a84:	01255503          	lhu	a0,18(a0)
   11a88:	00008737          	lui	a4,0x8
   11a8c:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   11a90:	08812423          	sw	s0,136(sp)
   11a94:	09212023          	sw	s2,128(sp)
   11a98:	07512a23          	sw	s5,116(sp)
   11a9c:	08112623          	sw	ra,140(sp)
   11aa0:	07312e23          	sw	s3,124(sp)
   11aa4:	00e57833          	and	a6,a0,a4
   11aa8:	00058913          	mv	s2,a1
   11aac:	00060413          	mv	s0,a2
   11ab0:	00068a93          	mv	s5,a3
   11ab4:	16e81263          	bne	a6,a4,11c18 <emul+0x1a0>
   11ab8:	01248993          	add	s3,s1,18
   11abc:	00048713          	mv	a4,s1
   11ac0:	00075603          	lhu	a2,0(a4)
   11ac4:	00270713          	add	a4,a4,2
   11ac8:	1e061063          	bnez	a2,11ca8 <emul+0x230>
   11acc:	ff371ae3          	bne	a4,s3,11ac0 <emul+0x48>
   11ad0:	01295603          	lhu	a2,18(s2)
   11ad4:	fff64793          	not	a5,a2
   11ad8:	01179713          	sll	a4,a5,0x11
   11adc:	14070463          	beqz	a4,11c24 <emul+0x1ac>
   11ae0:	00048793          	mv	a5,s1
   11ae4:	0007d703          	lhu	a4,0(a5)
   11ae8:	00278793          	add	a5,a5,2
   11aec:	2a071063          	bnez	a4,11d8c <emul+0x314>
   11af0:	ff379ae3          	bne	a5,s3,11ae4 <emul+0x6c>
   11af4:	00012597          	auipc	a1,0x12
   11af8:	95c58593          	add	a1,a1,-1700 # 23450 <ezero>
   11afc:	00090513          	mv	a0,s2
   11b00:	8b0ff0ef          	jal	10bb0 <ecmp>
   11b04:	2a050063          	beqz	a0,11da4 <emul+0x32c>
   11b08:	01295603          	lhu	a2,18(s2)
   11b0c:	00008737          	lui	a4,0x8
   11b10:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   11b14:	00e676b3          	and	a3,a2,a4
   11b18:	01290793          	add	a5,s2,18
   11b1c:	46e69663          	bne	a3,a4,11f88 <emul+0x510>
   11b20:	00090713          	mv	a4,s2
   11b24:	00075683          	lhu	a3,0(a4)
   11b28:	00270713          	add	a4,a4,2
   11b2c:	20069c63          	bnez	a3,11d44 <emul+0x2cc>
   11b30:	fef71ae3          	bne	a4,a5,11b24 <emul+0xac>
   11b34:	00012597          	auipc	a1,0x12
   11b38:	91c58593          	add	a1,a1,-1764 # 23450 <ezero>
   11b3c:	00048513          	mv	a0,s1
   11b40:	870ff0ef          	jal	10bb0 <ecmp>
   11b44:	26050063          	beqz	a0,11da4 <emul+0x32c>
   11b48:	0124d503          	lhu	a0,18(s1)
   11b4c:	01295603          	lhu	a2,18(s2)
   11b50:	000087b7          	lui	a5,0x8
   11b54:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   11b58:	00f57733          	and	a4,a0,a5
   11b5c:	00f676b3          	and	a3,a2,a5
   11b60:	1ef70c63          	beq	a4,a5,11d58 <emul+0x2e0>
   11b64:	00068593          	mv	a1,a3
   11b68:	00070693          	mv	a3,a4
   11b6c:	000087b7          	lui	a5,0x8
   11b70:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   11b74:	0ef59063          	bne	a1,a5,11c54 <emul+0x1dc>
   11b78:	01290793          	add	a5,s2,18
   11b7c:	00090713          	mv	a4,s2
   11b80:	00075583          	lhu	a1,0(a4)
   11b84:	00270713          	add	a4,a4,2
   11b88:	0c059663          	bnez	a1,11c54 <emul+0x1dc>
   11b8c:	fee79ae3          	bne	a5,a4,11b80 <emul+0x108>
   11b90:	00008737          	lui	a4,0x8
   11b94:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   11b98:	01248993          	add	s3,s1,18
   11b9c:	22e69a63          	bne	a3,a4,11dd0 <emul+0x358>
   11ba0:	0004d783          	lhu	a5,0(s1)
   11ba4:	00248493          	add	s1,s1,2
   11ba8:	22079c63          	bnez	a5,11de0 <emul+0x368>
   11bac:	fe999ae3          	bne	s3,s1,11ba0 <emul+0x128>
   11bb0:	00f55513          	srl	a0,a0,0xf
   11bb4:	000087b7          	lui	a5,0x8
   11bb8:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   11bbc:	1af68c63          	beq	a3,a5,11d74 <emul+0x2fc>
   11bc0:	00f65613          	srl	a2,a2,0xf
   11bc4:	00c547b3          	xor	a5,a0,a2
   11bc8:	00f79793          	sll	a5,a5,0xf
   11bcc:	00f41923          	sh	a5,18(s0)
   11bd0:	01240713          	add	a4,s0,18
   11bd4:	00040793          	mv	a5,s0
   11bd8:	00278793          	add	a5,a5,2
   11bdc:	fe079f23          	sh	zero,-2(a5)
   11be0:	fef71ce3          	bne	a4,a5,11bd8 <emul+0x160>
   11be4:	01245783          	lhu	a5,18(s0)
   11be8:	00008737          	lui	a4,0x8
   11bec:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   11bf0:	00e7e7b3          	or	a5,a5,a4
   11bf4:	00f41923          	sh	a5,18(s0)
   11bf8:	08c12083          	lw	ra,140(sp)
   11bfc:	08812403          	lw	s0,136(sp)
   11c00:	08412483          	lw	s1,132(sp)
   11c04:	08012903          	lw	s2,128(sp)
   11c08:	07c12983          	lw	s3,124(sp)
   11c0c:	07412a83          	lw	s5,116(sp)
   11c10:	09010113          	add	sp,sp,144
   11c14:	00008067          	ret
   11c18:	0125d603          	lhu	a2,18(a1)
   11c1c:	00e677b3          	and	a5,a2,a4
   11c20:	02e79a63          	bne	a5,a4,11c54 <emul+0x1dc>
   11c24:	01290793          	add	a5,s2,18
   11c28:	00090713          	mv	a4,s2
   11c2c:	00075683          	lhu	a3,0(a4)
   11c30:	00270713          	add	a4,a4,2
   11c34:	0a069663          	bnez	a3,11ce0 <emul+0x268>
   11c38:	fef71ae3          	bne	a4,a5,11c2c <emul+0x1b4>
   11c3c:	00008737          	lui	a4,0x8
   11c40:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   11c44:	01248993          	add	s3,s1,18
   11c48:	e8e80ce3          	beq	a6,a4,11ae0 <emul+0x68>
   11c4c:	00e676b3          	and	a3,a2,a4
   11c50:	ece688e3          	beq	a3,a4,11b20 <emul+0xa8>
   11c54:	00048513          	mv	a0,s1
   11c58:	00c10593          	add	a1,sp,12
   11c5c:	ea1fe0ef          	jal	10afc <emovi>
   11c60:	00090513          	mv	a0,s2
   11c64:	02810593          	add	a1,sp,40
   11c68:	e95fe0ef          	jal	10afc <emovi>
   11c6c:	00e15903          	lhu	s2,14(sp)
   11c70:	02a15483          	lhu	s1,42(sp)
   11c74:	0a090263          	beqz	s2,11d18 <emul+0x2a0>
   11c78:	18049063          	bnez	s1,11df8 <emul+0x380>
   11c7c:	02a10793          	add	a5,sp,42
   11c80:	04010693          	add	a3,sp,64
   11c84:	0007d703          	lhu	a4,0(a5)
   11c88:	00278793          	add	a5,a5,2
   11c8c:	2c071863          	bnez	a4,11f5c <emul+0x4e4>
   11c90:	fed79ae3          	bne	a5,a3,11c84 <emul+0x20c>
   11c94:	01440793          	add	a5,s0,20
   11c98:	00240413          	add	s0,s0,2
   11c9c:	fe041f23          	sh	zero,-2(s0)
   11ca0:	fe879ce3          	bne	a5,s0,11c98 <emul+0x220>
   11ca4:	f55ff06f          	j	11bf8 <emul+0x180>
   11ca8:	01440713          	add	a4,s0,20
   11cac:	0004d783          	lhu	a5,0(s1)
   11cb0:	00240413          	add	s0,s0,2
   11cb4:	00248493          	add	s1,s1,2
   11cb8:	fef41f23          	sh	a5,-2(s0)
   11cbc:	fee418e3          	bne	s0,a4,11cac <emul+0x234>
   11cc0:	08c12083          	lw	ra,140(sp)
   11cc4:	08812403          	lw	s0,136(sp)
   11cc8:	08412483          	lw	s1,132(sp)
   11ccc:	08012903          	lw	s2,128(sp)
   11cd0:	07c12983          	lw	s3,124(sp)
   11cd4:	07412a83          	lw	s5,116(sp)
   11cd8:	09010113          	add	sp,sp,144
   11cdc:	00008067          	ret
   11ce0:	01440713          	add	a4,s0,20
   11ce4:	00095783          	lhu	a5,0(s2)
   11ce8:	00240413          	add	s0,s0,2
   11cec:	00290913          	add	s2,s2,2
   11cf0:	fef41f23          	sh	a5,-2(s0)
   11cf4:	fee418e3          	bne	s0,a4,11ce4 <emul+0x26c>
   11cf8:	08c12083          	lw	ra,140(sp)
   11cfc:	08812403          	lw	s0,136(sp)
   11d00:	08412483          	lw	s1,132(sp)
   11d04:	08012903          	lw	s2,128(sp)
   11d08:	07c12983          	lw	s3,124(sp)
   11d0c:	07412a83          	lw	s5,116(sp)
   11d10:	09010113          	add	sp,sp,144
   11d14:	00008067          	ret
   11d18:	00e10793          	add	a5,sp,14
   11d1c:	02410693          	add	a3,sp,36
   11d20:	0007d703          	lhu	a4,0(a5)
   11d24:	00278793          	add	a5,a5,2
   11d28:	22071263          	bnez	a4,11f4c <emul+0x4d4>
   11d2c:	fef69ae3          	bne	a3,a5,11d20 <emul+0x2a8>
   11d30:	01440793          	add	a5,s0,20
   11d34:	00240413          	add	s0,s0,2
   11d38:	fe041f23          	sh	zero,-2(s0)
   11d3c:	fef41ce3          	bne	s0,a5,11d34 <emul+0x2bc>
   11d40:	eb9ff06f          	j	11bf8 <emul+0x180>
   11d44:	0124d503          	lhu	a0,18(s1)
   11d48:	00008737          	lui	a4,0x8
   11d4c:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   11d50:	00e576b3          	and	a3,a0,a4
   11d54:	e2e694e3          	bne	a3,a4,11b7c <emul+0x104>
   11d58:	01248993          	add	s3,s1,18
   11d5c:	00048793          	mv	a5,s1
   11d60:	0007d703          	lhu	a4,0(a5)
   11d64:	00278793          	add	a5,a5,2
   11d68:	08071063          	bnez	a4,11de8 <emul+0x370>
   11d6c:	ff379ae3          	bne	a5,s3,11d60 <emul+0x2e8>
   11d70:	e31ff06f          	j	11ba0 <emul+0x128>
   11d74:	01290793          	add	a5,s2,18
   11d78:	00095703          	lhu	a4,0(s2)
   11d7c:	00290913          	add	s2,s2,2
   11d80:	04071c63          	bnez	a4,11dd8 <emul+0x360>
   11d84:	ff279ae3          	bne	a5,s2,11d78 <emul+0x300>
   11d88:	e39ff06f          	j	11bc0 <emul+0x148>
   11d8c:	00008737          	lui	a4,0x8
   11d90:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   11d94:	00e676b3          	and	a3,a2,a4
   11d98:	01290793          	add	a5,s2,18
   11d9c:	d8e682e3          	beq	a3,a4,11b20 <emul+0xa8>
   11da0:	fbdff06f          	j	11d5c <emul+0x2e4>
   11da4:	01040713          	add	a4,s0,16
   11da8:	00040793          	mv	a5,s0
   11dac:	00278793          	add	a5,a5,2
   11db0:	fe079f23          	sh	zero,-2(a5)
   11db4:	fee79ce3          	bne	a5,a4,11dac <emul+0x334>
   11db8:	ffffc7b7          	lui	a5,0xffffc
   11dbc:	00f41823          	sh	a5,16(s0)
   11dc0:	ffff87b7          	lui	a5,0xffff8
   11dc4:	fff7c793          	not	a5,a5
   11dc8:	00f41923          	sh	a5,18(s0)
   11dcc:	e2dff06f          	j	11bf8 <emul+0x180>
   11dd0:	00f55513          	srl	a0,a0,0xf
   11dd4:	fa5ff06f          	j	11d78 <emul+0x300>
   11dd8:	00000613          	li	a2,0
   11ddc:	de9ff06f          	j	11bc4 <emul+0x14c>
   11de0:	00000513          	li	a0,0
   11de4:	dd1ff06f          	j	11bb4 <emul+0x13c>
   11de8:	00068593          	mv	a1,a3
   11dec:	000086b7          	lui	a3,0x8
   11df0:	fff68693          	add	a3,a3,-1 # 7fff <OSTaskChangePrio+0x17f>
   11df4:	d79ff06f          	j	11b6c <emul+0xf4>
   11df8:	07412c23          	sw	s4,120(sp)
   11dfc:	07612823          	sw	s6,112(sp)
   11e00:	07712623          	sw	s7,108(sp)
   11e04:	07812423          	sw	s8,104(sp)
   11e08:	07912223          	sw	s9,100(sp)
   11e0c:	07a12023          	sw	s10,96(sp)
   11e10:	00048993          	mv	s3,s1
   11e14:	02815783          	lhu	a5,40(sp)
   11e18:	01049493          	sll	s1,s1,0x10
   11e1c:	038a8a13          	add	s4,s5,56
   11e20:	0097e7b3          	or	a5,a5,s1
   11e24:	02faaa23          	sw	a5,52(s5)
   11e28:	034a8493          	add	s1,s5,52
   11e2c:	000a0793          	mv	a5,s4
   11e30:	04ea8713          	add	a4,s5,78
   11e34:	00079023          	sh	zero,0(a5) # ffff8000 <__alt_data_end+0xfffaec20>
   11e38:	00278793          	add	a5,a5,2
   11e3c:	fee79ce3          	bne	a5,a4,11e34 <emul+0x3bc>
   11e40:	04ca8c93          	add	s9,s5,76
   11e44:	00000c13          	li	s8,0
   11e48:	02410b13          	add	s6,sp,36
   11e4c:	01010d13          	add	s10,sp,16
   11e50:	04610b93          	add	s7,sp,70
   11e54:	000b5503          	lhu	a0,0(s6)
   11e58:	ffeb0b13          	add	s6,s6,-2
   11e5c:	0a051663          	bnez	a0,11f08 <emul+0x490>
   11e60:	04cad783          	lhu	a5,76(s5)
   11e64:	000c8713          	mv	a4,s9
   11e68:	00fc6c33          	or	s8,s8,a5
   11e6c:	ffe75603          	lhu	a2,-2(a4)
   11e70:	ffe70713          	add	a4,a4,-2
   11e74:	00c71123          	sh	a2,2(a4)
   11e78:	feea1ae3          	bne	s4,a4,11e6c <emul+0x3f4>
   11e7c:	020a9c23          	sh	zero,56(s5)
   11e80:	fdab1ae3          	bne	s6,s10,11e54 <emul+0x3dc>
   11e84:	02810793          	add	a5,sp,40
   11e88:	04210693          	add	a3,sp,66
   11e8c:	0004d703          	lhu	a4,0(s1)
   11e90:	00278793          	add	a5,a5,2
   11e94:	00248493          	add	s1,s1,2
   11e98:	fee79f23          	sh	a4,-2(a5)
   11e9c:	fed798e3          	bne	a5,a3,11e8c <emul+0x414>
   11ea0:	ffffc6b7          	lui	a3,0xffffc
   11ea4:	01390933          	add	s2,s2,s3
   11ea8:	00268693          	add	a3,a3,2 # ffffc002 <__alt_data_end+0xfffb2c22>
   11eac:	000c0593          	mv	a1,s8
   11eb0:	000a8793          	mv	a5,s5
   11eb4:	04000713          	li	a4,64
   11eb8:	00d906b3          	add	a3,s2,a3
   11ebc:	00000613          	li	a2,0
   11ec0:	02810513          	add	a0,sp,40
   11ec4:	e39fe0ef          	jal	10cfc <emdnorm>
   11ec8:	02815703          	lhu	a4,40(sp)
   11ecc:	00c15783          	lhu	a5,12(sp)
   11ed0:	00040593          	mv	a1,s0
   11ed4:	02810513          	add	a0,sp,40
   11ed8:	40e787b3          	sub	a5,a5,a4
   11edc:	00f037b3          	snez	a5,a5
   11ee0:	40f007b3          	neg	a5,a5
   11ee4:	02f11423          	sh	a5,40(sp)
   11ee8:	85dfe0ef          	jal	10744 <emovo.isra.0>
   11eec:	07812a03          	lw	s4,120(sp)
   11ef0:	07012b03          	lw	s6,112(sp)
   11ef4:	06c12b83          	lw	s7,108(sp)
   11ef8:	06812c03          	lw	s8,104(sp)
   11efc:	06412c83          	lw	s9,100(sp)
   11f00:	06012d03          	lw	s10,96(sp)
   11f04:	cf5ff06f          	j	11bf8 <emul+0x180>
   11f08:	04410613          	add	a2,sp,68
   11f0c:	02810593          	add	a1,sp,40
   11f10:	f64fe0ef          	jal	10674 <m16m>
   11f14:	000c8513          	mv	a0,s9
   11f18:	00000593          	li	a1,0
   11f1c:	05c10613          	add	a2,sp,92
   11f20:	00055783          	lhu	a5,0(a0)
   11f24:	00065703          	lhu	a4,0(a2)
   11f28:	ffe50513          	add	a0,a0,-2
   11f2c:	ffe60613          	add	a2,a2,-2
   11f30:	00f70733          	add	a4,a4,a5
   11f34:	00b70733          	add	a4,a4,a1
   11f38:	01075593          	srl	a1,a4,0x10
   11f3c:	00e51123          	sh	a4,2(a0)
   11f40:	0015f593          	and	a1,a1,1
   11f44:	fd761ee3          	bne	a2,s7,11f20 <emul+0x4a8>
   11f48:	f19ff06f          	j	11e60 <emul+0x3e8>
   11f4c:	00c10513          	add	a0,sp,12
   11f50:	8b1fe0ef          	jal	10800 <enormlz>
   11f54:	40a00933          	neg	s2,a0
   11f58:	d21ff06f          	j	11c78 <emul+0x200>
   11f5c:	02810513          	add	a0,sp,40
   11f60:	07412c23          	sw	s4,120(sp)
   11f64:	07612823          	sw	s6,112(sp)
   11f68:	07712623          	sw	s7,108(sp)
   11f6c:	07812423          	sw	s8,104(sp)
   11f70:	07912223          	sw	s9,100(sp)
   11f74:	07a12023          	sw	s10,96(sp)
   11f78:	889fe0ef          	jal	10800 <enormlz>
   11f7c:	40a009b3          	neg	s3,a0
   11f80:	02a15483          	lhu	s1,42(sp)
   11f84:	e91ff06f          	j	11e14 <emul+0x39c>
   11f88:	0124d503          	lhu	a0,18(s1)
   11f8c:	00e577b3          	and	a5,a0,a4
   11f90:	dce786e3          	beq	a5,a4,11d5c <emul+0x2e4>
   11f94:	cc1ff06f          	j	11c54 <emul+0x1dc>

00011f98 <_ldtoa_r>:
   11f98:	00c5a883          	lw	a7,12(a1)
   11f9c:	e1010113          	add	sp,sp,-496
   11fa0:	0005ae83          	lw	t4,0(a1)
   11fa4:	0045ae03          	lw	t3,4(a1)
   11fa8:	0085a303          	lw	t1,8(a1)
   11fac:	03112e23          	sw	a7,60(sp)
   11fb0:	04052583          	lw	a1,64(a0)
   11fb4:	fff00893          	li	a7,-1
   11fb8:	17112023          	sw	a7,352(sp)
   11fbc:	09000893          	li	a7,144
   11fc0:	1e812423          	sw	s0,488(sp)
   11fc4:	1d312e23          	sw	s3,476(sp)
   11fc8:	1d512a23          	sw	s5,468(sp)
   11fcc:	1e112623          	sw	ra,492(sp)
   11fd0:	1e912223          	sw	s1,484(sp)
   11fd4:	1f212023          	sw	s2,480(sp)
   11fd8:	1d612823          	sw	s6,464(sp)
   11fdc:	1bb12e23          	sw	s11,444(sp)
   11fe0:	03d12823          	sw	t4,48(sp)
   11fe4:	03c12a23          	sw	t3,52(sp)
   11fe8:	02612c23          	sw	t1,56(sp)
   11fec:	17112223          	sw	a7,356(sp)
   11ff0:	00d12023          	sw	a3,0(sp)
   11ff4:	00e12223          	sw	a4,4(sp)
   11ff8:	01012423          	sw	a6,8(sp)
   11ffc:	00050993          	mv	s3,a0
   12000:	00060a93          	mv	s5,a2
   12004:	00078413          	mv	s0,a5
   12008:	02058063          	beqz	a1,12028 <_ldtoa_r+0x90>
   1200c:	04452703          	lw	a4,68(a0)
   12010:	00100793          	li	a5,1
   12014:	00e797b3          	sll	a5,a5,a4
   12018:	00e5a223          	sw	a4,4(a1)
   1201c:	00f5a423          	sw	a5,8(a1)
   12020:	050020ef          	jal	14070 <_Bfree>
   12024:	0409a023          	sw	zero,64(s3)
   12028:	06010593          	add	a1,sp,96
   1202c:	03010513          	add	a0,sp,48
   12030:	ae4ff0ef          	jal	11314 <e113toe.isra.0>
   12034:	07215603          	lhu	a2,114(sp)
   12038:	00008737          	lui	a4,0x8
   1203c:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   12040:	00e677b3          	and	a5,a2,a4
   12044:	00f12623          	sw	a5,12(sp)
   12048:	4ee78c63          	beq	a5,a4,12540 <_ldtoa_r+0x5a8>
   1204c:	1d412c23          	sw	s4,472(sp)
   12050:	1d712623          	sw	s7,460(sp)
   12054:	1d812423          	sw	s8,456(sp)
   12058:	1d912223          	sw	s9,452(sp)
   1205c:	1da12023          	sw	s10,448(sp)
   12060:	00f65613          	srl	a2,a2,0xf
   12064:	00c42023          	sw	a2,0(s0)
   12068:	00300793          	li	a5,3
   1206c:	16fa84e3          	beq	s5,a5,129d4 <_ldtoa_r+0xa3c>
   12070:	01400b13          	li	s6,20
   12074:	160a9ce3          	bnez	s5,129ec <_ldtoa_r+0xa54>
   12078:	06010793          	add	a5,sp,96
   1207c:	07410613          	add	a2,sp,116
   12080:	07c10713          	add	a4,sp,124
   12084:	0007a683          	lw	a3,0(a5)
   12088:	00478793          	add	a5,a5,4
   1208c:	00470713          	add	a4,a4,4
   12090:	fed72e23          	sw	a3,-4(a4)
   12094:	fef618e3          	bne	a2,a5,12084 <_ldtoa_r+0xec>
   12098:	08e15c83          	lhu	s9,142(sp)
   1209c:	00012823          	sw	zero,16(sp)
   120a0:	010c9793          	sll	a5,s9,0x10
   120a4:	4107d793          	sra	a5,a5,0x10
   120a8:	0007de63          	bgez	a5,120c4 <_ldtoa_r+0x12c>
   120ac:	011c9c93          	sll	s9,s9,0x11
   120b0:	000107b7          	lui	a5,0x10
   120b4:	011cdc93          	srl	s9,s9,0x11
   120b8:	fff78793          	add	a5,a5,-1 # ffff <__sfvwrite_r+0x9b>
   120bc:	09911723          	sh	s9,142(sp)
   120c0:	00f12823          	sw	a5,16(sp)
   120c4:	00011717          	auipc	a4,0x11
   120c8:	5a870713          	add	a4,a4,1448 # 2366c <eone>
   120cc:	09810493          	add	s1,sp,152
   120d0:	0ac10b93          	add	s7,sp,172
   120d4:	00070613          	mv	a2,a4
   120d8:	00048693          	mv	a3,s1
   120dc:	00062783          	lw	a5,0(a2)
   120e0:	00468693          	add	a3,a3,4
   120e4:	00460613          	add	a2,a2,4
   120e8:	fef6ae23          	sw	a5,-4(a3)
   120ec:	ff7698e3          	bne	a3,s7,120dc <_ldtoa_r+0x144>
   120f0:	6c0c9463          	bnez	s9,127b8 <_ldtoa_r+0x820>
   120f4:	07c10793          	add	a5,sp,124
   120f8:	08e10593          	add	a1,sp,142
   120fc:	00078693          	mv	a3,a5
   12100:	0006d783          	lhu	a5,0(a3)
   12104:	6c079463          	bnez	a5,127cc <_ldtoa_r+0x834>
   12108:	00268693          	add	a3,a3,2
   1210c:	fed59ae3          	bne	a1,a3,12100 <_ldtoa_r+0x168>
   12110:	00000413          	li	s0,0
   12114:	12410d93          	add	s11,sp,292
   12118:	16010913          	add	s2,sp,352
   1211c:	0d010c13          	add	s8,sp,208
   12120:	000c0593          	mv	a1,s8
   12124:	09810513          	add	a0,sp,152
   12128:	9d5fe0ef          	jal	10afc <emovi>
   1212c:	000c0a13          	mv	s4,s8
   12130:	0b010613          	add	a2,sp,176
   12134:	000c0713          	mv	a4,s8
   12138:	00072783          	lw	a5,0(a4)
   1213c:	00448493          	add	s1,s1,4
   12140:	00470713          	add	a4,a4,4
   12144:	fef4ae23          	sw	a5,-4(s1)
   12148:	fec498e3          	bne	s1,a2,12138 <_ldtoa_r+0x1a0>
   1214c:	000c0593          	mv	a1,s8
   12150:	07c10513          	add	a0,sp,124
   12154:	0a011823          	sh	zero,176(sp)
   12158:	9a5fe0ef          	jal	10afc <emovi>
   1215c:	0e810693          	add	a3,sp,232
   12160:	07c10793          	add	a5,sp,124
   12164:	000a2703          	lw	a4,0(s4)
   12168:	004a0a13          	add	s4,s4,4
   1216c:	00478793          	add	a5,a5,4
   12170:	fee7ae23          	sw	a4,-4(a5)
   12174:	ff4698e3          	bne	a3,s4,12164 <_ldtoa_r+0x1cc>
   12178:	09810513          	add	a0,sp,152
   1217c:	00090613          	mv	a2,s2
   12180:	07c10593          	add	a1,sp,124
   12184:	08011a23          	sh	zero,148(sp)
   12188:	828ff0ef          	jal	111b0 <eiremain>
   1218c:	1ac15503          	lhu	a0,428(sp)
   12190:	16051e63          	bnez	a0,1230c <_ldtoa_r+0x374>
   12194:	00011a17          	auipc	s4,0x11
   12198:	2bca0a13          	add	s4,s4,700 # 23450 <ezero>
   1219c:	07e10c93          	add	s9,sp,126
   121a0:	09410d13          	add	s10,sp,148
   121a4:	0b610b93          	add	s7,sp,182
   121a8:	000a0593          	mv	a1,s4
   121ac:	07c10513          	add	a0,sp,124
   121b0:	a01fe0ef          	jal	10bb0 <ecmp>
   121b4:	14050c63          	beqz	a0,1230c <_ldtoa_r+0x374>
   121b8:	00000713          	li	a4,0
   121bc:	09410693          	add	a3,sp,148
   121c0:	0006d783          	lhu	a5,0(a3)
   121c4:	01079613          	sll	a2,a5,0x10
   121c8:	41065613          	sra	a2,a2,0x10
   121cc:	00065463          	bgez	a2,121d4 <_ldtoa_r+0x23c>
   121d0:	00176713          	or	a4,a4,1
   121d4:	00179793          	sll	a5,a5,0x1
   121d8:	01079793          	sll	a5,a5,0x10
   121dc:	00277613          	and	a2,a4,2
   121e0:	0107d793          	srl	a5,a5,0x10
   121e4:	00060463          	beqz	a2,121ec <_ldtoa_r+0x254>
   121e8:	0017e793          	or	a5,a5,1
   121ec:	00171713          	sll	a4,a4,0x1
   121f0:	00f69023          	sh	a5,0(a3)
   121f4:	01071713          	sll	a4,a4,0x10
   121f8:	ffe68693          	add	a3,a3,-2
   121fc:	01075713          	srl	a4,a4,0x10
   12200:	fd9690e3          	bne	a3,s9,121c0 <_ldtoa_r+0x228>
   12204:	0b410713          	add	a4,sp,180
   12208:	07c10793          	add	a5,sp,124
   1220c:	0007a683          	lw	a3,0(a5)
   12210:	00478793          	add	a5,a5,4
   12214:	00470713          	add	a4,a4,4
   12218:	fed72e23          	sw	a3,-4(a4)
   1221c:	fefd18e3          	bne	s10,a5,1220c <_ldtoa_r+0x274>
   12220:	0c011623          	sh	zero,204(sp)
   12224:	00000713          	li	a4,0
   12228:	0cc10693          	add	a3,sp,204
   1222c:	0006d783          	lhu	a5,0(a3)
   12230:	01079613          	sll	a2,a5,0x10
   12234:	41065613          	sra	a2,a2,0x10
   12238:	00065463          	bgez	a2,12240 <_ldtoa_r+0x2a8>
   1223c:	00176713          	or	a4,a4,1
   12240:	00179793          	sll	a5,a5,0x1
   12244:	01079793          	sll	a5,a5,0x10
   12248:	00277613          	and	a2,a4,2
   1224c:	0107d793          	srl	a5,a5,0x10
   12250:	00060463          	beqz	a2,12258 <_ldtoa_r+0x2c0>
   12254:	0017e793          	or	a5,a5,1
   12258:	00171713          	sll	a4,a4,0x1
   1225c:	00f69023          	sh	a5,0(a3)
   12260:	01071713          	sll	a4,a4,0x10
   12264:	ffe68693          	add	a3,a3,-2
   12268:	01075713          	srl	a4,a4,0x10
   1226c:	fd7690e3          	bne	a3,s7,1222c <_ldtoa_r+0x294>
   12270:	00000713          	li	a4,0
   12274:	0cc10693          	add	a3,sp,204
   12278:	0006d783          	lhu	a5,0(a3)
   1227c:	01079613          	sll	a2,a5,0x10
   12280:	41065613          	sra	a2,a2,0x10
   12284:	00065463          	bgez	a2,1228c <_ldtoa_r+0x2f4>
   12288:	00176713          	or	a4,a4,1
   1228c:	00179793          	sll	a5,a5,0x1
   12290:	01079793          	sll	a5,a5,0x10
   12294:	00277613          	and	a2,a4,2
   12298:	0107d793          	srl	a5,a5,0x10
   1229c:	00060463          	beqz	a2,122a4 <_ldtoa_r+0x30c>
   122a0:	0017e793          	or	a5,a5,1
   122a4:	00171713          	sll	a4,a4,0x1
   122a8:	00f69023          	sh	a5,0(a3)
   122ac:	01071713          	sll	a4,a4,0x10
   122b0:	ffe68693          	add	a3,a3,-2
   122b4:	01075713          	srl	a4,a4,0x10
   122b8:	fd7690e3          	bne	a3,s7,12278 <_ldtoa_r+0x2e0>
   122bc:	00000613          	li	a2,0
   122c0:	09410693          	add	a3,sp,148
   122c4:	0cc10713          	add	a4,sp,204
   122c8:	0006d583          	lhu	a1,0(a3)
   122cc:	00075783          	lhu	a5,0(a4)
   122d0:	ffe68693          	add	a3,a3,-2
   122d4:	ffe70713          	add	a4,a4,-2
   122d8:	00b787b3          	add	a5,a5,a1
   122dc:	00c787b3          	add	a5,a5,a2
   122e0:	0107d613          	srl	a2,a5,0x10
   122e4:	00f69123          	sh	a5,2(a3)
   122e8:	00167613          	and	a2,a2,1
   122ec:	fd771ee3          	bne	a4,s7,122c8 <_ldtoa_r+0x330>
   122f0:	09810513          	add	a0,sp,152
   122f4:	00090613          	mv	a2,s2
   122f8:	07c10593          	add	a1,sp,124
   122fc:	eb5fe0ef          	jal	111b0 <eiremain>
   12300:	1ac15503          	lhu	a0,428(sp)
   12304:	fff40413          	add	s0,s0,-1
   12308:	ea0500e3          	beqz	a0,121a8 <_ldtoa_r+0x210>
   1230c:	01012783          	lw	a5,16(sp)
   12310:	00300713          	li	a4,3
   12314:	0017b793          	seqz	a5,a5
   12318:	40f007b3          	neg	a5,a5
   1231c:	ff37f793          	and	a5,a5,-13
   12320:	02d78793          	add	a5,a5,45
   12324:	12f10223          	sb	a5,292(sp)
   12328:	000b0793          	mv	a5,s6
   1232c:	00ea9463          	bne	s5,a4,12334 <_ldtoa_r+0x39c>
   12330:	008b07b3          	add	a5,s6,s0
   12334:	02a00713          	li	a4,42
   12338:	00078613          	mv	a2,a5
   1233c:	00f75463          	bge	a4,a5,12344 <_ldtoa_r+0x3ac>
   12340:	02a00613          	li	a2,42
   12344:	00a00713          	li	a4,10
   12348:	66e50063          	beq	a0,a4,129a8 <_ldtoa_r+0xa10>
   1234c:	03050513          	add	a0,a0,48
   12350:	02e00713          	li	a4,46
   12354:	12a102a3          	sb	a0,293(sp)
   12358:	12e10323          	sb	a4,294(sp)
   1235c:	3c07c0e3          	bltz	a5,12f1c <_ldtoa_r+0xf84>
   12360:	12710593          	add	a1,sp,295
   12364:	09410d13          	add	s10,sp,148
   12368:	00160693          	add	a3,a2,1
   1236c:	00812823          	sw	s0,16(sp)
   12370:	000d0493          	mv	s1,s10
   12374:	00d58c33          	add	s8,a1,a3
   12378:	0b410a13          	add	s4,sp,180
   1237c:	07e10c93          	add	s9,sp,126
   12380:	0b610b93          	add	s7,sp,182
   12384:	00c12a23          	sw	a2,20(sp)
   12388:	00058413          	mv	s0,a1
   1238c:	00058d13          	mv	s10,a1
   12390:	00000613          	li	a2,0
   12394:	09410593          	add	a1,sp,148
   12398:	0005d783          	lhu	a5,0(a1)
   1239c:	01079513          	sll	a0,a5,0x10
   123a0:	41055513          	sra	a0,a0,0x10
   123a4:	00055463          	bgez	a0,123ac <_ldtoa_r+0x414>
   123a8:	00166613          	or	a2,a2,1
   123ac:	00179793          	sll	a5,a5,0x1
   123b0:	01079793          	sll	a5,a5,0x10
   123b4:	00267513          	and	a0,a2,2
   123b8:	0107d793          	srl	a5,a5,0x10
   123bc:	00050463          	beqz	a0,123c4 <_ldtoa_r+0x42c>
   123c0:	0017e793          	or	a5,a5,1
   123c4:	00161613          	sll	a2,a2,0x1
   123c8:	00f59023          	sh	a5,0(a1)
   123cc:	01061613          	sll	a2,a2,0x10
   123d0:	ffe58593          	add	a1,a1,-2
   123d4:	01065613          	srl	a2,a2,0x10
   123d8:	fd9590e3          	bne	a1,s9,12398 <_ldtoa_r+0x400>
   123dc:	000a0613          	mv	a2,s4
   123e0:	07c10793          	add	a5,sp,124
   123e4:	0007a583          	lw	a1,0(a5)
   123e8:	00478793          	add	a5,a5,4
   123ec:	00460613          	add	a2,a2,4
   123f0:	feb62e23          	sw	a1,-4(a2)
   123f4:	fef498e3          	bne	s1,a5,123e4 <_ldtoa_r+0x44c>
   123f8:	0c011623          	sh	zero,204(sp)
   123fc:	00000613          	li	a2,0
   12400:	0cc10593          	add	a1,sp,204
   12404:	0005d783          	lhu	a5,0(a1)
   12408:	01079513          	sll	a0,a5,0x10
   1240c:	41055513          	sra	a0,a0,0x10
   12410:	00055463          	bgez	a0,12418 <_ldtoa_r+0x480>
   12414:	00166613          	or	a2,a2,1
   12418:	00179793          	sll	a5,a5,0x1
   1241c:	01079793          	sll	a5,a5,0x10
   12420:	00267513          	and	a0,a2,2
   12424:	0107d793          	srl	a5,a5,0x10
   12428:	00050463          	beqz	a0,12430 <_ldtoa_r+0x498>
   1242c:	0017e793          	or	a5,a5,1
   12430:	00161613          	sll	a2,a2,0x1
   12434:	00f59023          	sh	a5,0(a1)
   12438:	01061613          	sll	a2,a2,0x10
   1243c:	ffe58593          	add	a1,a1,-2
   12440:	01065613          	srl	a2,a2,0x10
   12444:	fd7590e3          	bne	a1,s7,12404 <_ldtoa_r+0x46c>
   12448:	00000613          	li	a2,0
   1244c:	0cc10593          	add	a1,sp,204
   12450:	0005d783          	lhu	a5,0(a1)
   12454:	01079513          	sll	a0,a5,0x10
   12458:	41055513          	sra	a0,a0,0x10
   1245c:	00055463          	bgez	a0,12464 <_ldtoa_r+0x4cc>
   12460:	00166613          	or	a2,a2,1
   12464:	00179793          	sll	a5,a5,0x1
   12468:	01079793          	sll	a5,a5,0x10
   1246c:	00267513          	and	a0,a2,2
   12470:	0107d793          	srl	a5,a5,0x10
   12474:	00050463          	beqz	a0,1247c <_ldtoa_r+0x4e4>
   12478:	0017e793          	or	a5,a5,1
   1247c:	00161613          	sll	a2,a2,0x1
   12480:	00f59023          	sh	a5,0(a1)
   12484:	01061613          	sll	a2,a2,0x10
   12488:	ffe58593          	add	a1,a1,-2
   1248c:	01065613          	srl	a2,a2,0x10
   12490:	fd7590e3          	bne	a1,s7,12450 <_ldtoa_r+0x4b8>
   12494:	00000513          	li	a0,0
   12498:	09410593          	add	a1,sp,148
   1249c:	0cc10613          	add	a2,sp,204
   124a0:	0005d803          	lhu	a6,0(a1)
   124a4:	00065783          	lhu	a5,0(a2)
   124a8:	ffe58593          	add	a1,a1,-2
   124ac:	ffe60613          	add	a2,a2,-2
   124b0:	010787b3          	add	a5,a5,a6
   124b4:	00a787b3          	add	a5,a5,a0
   124b8:	0107d513          	srl	a0,a5,0x10
   124bc:	00f59123          	sh	a5,2(a1)
   124c0:	00157513          	and	a0,a0,1
   124c4:	fd761ee3          	bne	a2,s7,124a0 <_ldtoa_r+0x508>
   124c8:	00090613          	mv	a2,s2
   124cc:	07c10593          	add	a1,sp,124
   124d0:	09810513          	add	a0,sp,152
   124d4:	cddfe0ef          	jal	111b0 <eiremain>
   124d8:	1ac15783          	lhu	a5,428(sp)
   124dc:	00140413          	add	s0,s0,1
   124e0:	03078613          	add	a2,a5,48
   124e4:	fec40fa3          	sb	a2,-1(s0)
   124e8:	ea8c14e3          	bne	s8,s0,12390 <_ldtoa_r+0x3f8>
   124ec:	01412603          	lw	a2,20(sp)
   124f0:	01012403          	lw	s0,16(sp)
   124f4:	00cd0a33          	add	s4,s10,a2
   124f8:	00400713          	li	a4,4
   124fc:	0cf75063          	bge	a4,a5,125bc <_ldtoa_r+0x624>
   12500:	00500713          	li	a4,5
   12504:	22e784e3          	beq	a5,a4,12f2c <_ldtoa_r+0xf94>
   12508:	ffec4783          	lbu	a5,-2(s8)
   1250c:	ffec0713          	add	a4,s8,-2
   12510:	07f7f793          	and	a5,a5,127
   12514:	08064e63          	bltz	a2,125b0 <_ldtoa_r+0x618>
   12518:	02e00693          	li	a3,46
   1251c:	03800613          	li	a2,56
   12520:	03000593          	li	a1,48
   12524:	18d78ae3          	beq	a5,a3,12eb8 <_ldtoa_r+0xf20>
   12528:	18f672e3          	bgeu	a2,a5,12eac <_ldtoa_r+0xf14>
   1252c:	fff74783          	lbu	a5,-1(a4)
   12530:	00b70023          	sb	a1,0(a4)
   12534:	fff70713          	add	a4,a4,-1
   12538:	07f7f793          	and	a5,a5,127
   1253c:	fe9ff06f          	j	12524 <_ldtoa_r+0x58c>
   12540:	06010713          	add	a4,sp,96
   12544:	07210793          	add	a5,sp,114
   12548:	00075683          	lhu	a3,0(a4)
   1254c:	00270713          	add	a4,a4,2
   12550:	78069a63          	bnez	a3,12ce4 <_ldtoa_r+0xd4c>
   12554:	fef71ae3          	bne	a4,a5,12548 <_ldtoa_r+0x5b0>
   12558:	00f65613          	srl	a2,a2,0xf
   1255c:	00c42023          	sw	a2,0(s0)
   12560:	00300793          	li	a5,3
   12564:	76fa8063          	beq	s5,a5,12cc4 <_ldtoa_r+0xd2c>
   12568:	01400b13          	li	s6,20
   1256c:	000a8a63          	beqz	s5,12580 <_ldtoa_r+0x5e8>
   12570:	00012783          	lw	a5,0(sp)
   12574:	fff78b13          	add	s6,a5,-1
   12578:	02a00793          	li	a5,42
   1257c:	7567cc63          	blt	a5,s6,12cd4 <_ldtoa_r+0xd3c>
   12580:	06010793          	add	a5,sp,96
   12584:	07210693          	add	a3,sp,114
   12588:	0007d703          	lhu	a4,0(a5)
   1258c:	00278793          	add	a5,a5,2
   12590:	1c071a63          	bnez	a4,12764 <_ldtoa_r+0x7cc>
   12594:	fed79ae3          	bne	a5,a3,12588 <_ldtoa_r+0x5f0>
   12598:	1d412c23          	sw	s4,472(sp)
   1259c:	1d712623          	sw	s7,460(sp)
   125a0:	1d812423          	sw	s8,456(sp)
   125a4:	1d912223          	sw	s9,452(sp)
   125a8:	1da12023          	sw	s10,448(sp)
   125ac:	acdff06f          	j	12078 <_ldtoa_r+0xe0>
   125b0:	03100793          	li	a5,49
   125b4:	fefc0f23          	sb	a5,-2(s8)
   125b8:	00140413          	add	s0,s0,1
   125bc:	00040613          	mv	a2,s0
   125c0:	00011597          	auipc	a1,0x11
   125c4:	b6058593          	add	a1,a1,-1184 # 23120 <OSUnMapTbl+0x1bc>
   125c8:	000a0513          	mv	a0,s4
   125cc:	430030ef          	jal	159fc <sprintf>
   125d0:	09000793          	li	a5,144
   125d4:	00c12703          	lw	a4,12(sp)
   125d8:	16f12223          	sw	a5,356(sp)
   125dc:	000087b7          	lui	a5,0x8
   125e0:	16812823          	sw	s0,368(sp)
   125e4:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   125e8:	1d812a03          	lw	s4,472(sp)
   125ec:	1cc12b83          	lw	s7,460(sp)
   125f0:	1c812c03          	lw	s8,456(sp)
   125f4:	1c412c83          	lw	s9,452(sp)
   125f8:	1c012d03          	lw	s10,448(sp)
   125fc:	18f70863          	beq	a4,a5,1278c <_ldtoa_r+0x7f4>
   12600:	00412683          	lw	a3,4(sp)
   12604:	12414703          	lbu	a4,292(sp)
   12608:	00140793          	add	a5,s0,1
   1260c:	00f6a023          	sw	a5,0(a3)
   12610:	6c070663          	beqz	a4,12cdc <_ldtoa_r+0xd44>
   12614:	000d8793          	mv	a5,s11
   12618:	02e00693          	li	a3,46
   1261c:	36d70063          	beq	a4,a3,1297c <_ldtoa_r+0x9e4>
   12620:	0017c703          	lbu	a4,1(a5)
   12624:	00178793          	add	a5,a5,1
   12628:	fe071ae3          	bnez	a4,1261c <_ldtoa_r+0x684>
   1262c:	04500693          	li	a3,69
   12630:	00fde663          	bltu	s11,a5,1263c <_ldtoa_r+0x6a4>
   12634:	0140006f          	j	12648 <_ldtoa_r+0x6b0>
   12638:	6bb78263          	beq	a5,s11,12cdc <_ldtoa_r+0xd44>
   1263c:	fff7c703          	lbu	a4,-1(a5)
   12640:	fff78793          	add	a5,a5,-1
   12644:	fed71ae3          	bne	a4,a3,12638 <_ldtoa_r+0x6a0>
   12648:	00078023          	sb	zero,0(a5)
   1264c:	000d8793          	mv	a5,s11
   12650:	02000693          	li	a3,32
   12654:	02d00613          	li	a2,45
   12658:	0007c703          	lbu	a4,0(a5)
   1265c:	00d70463          	beq	a4,a3,12664 <_ldtoa_r+0x6cc>
   12660:	00c71663          	bne	a4,a2,1266c <_ldtoa_r+0x6d4>
   12664:	00178793          	add	a5,a5,1
   12668:	ff1ff06f          	j	12658 <_ldtoa_r+0x6c0>
   1266c:	000d8693          	mv	a3,s11
   12670:	0007c703          	lbu	a4,0(a5)
   12674:	00068913          	mv	s2,a3
   12678:	00178793          	add	a5,a5,1
   1267c:	00e68023          	sb	a4,0(a3)
   12680:	00168693          	add	a3,a3,1
   12684:	fe0716e3          	bnez	a4,12670 <_ldtoa_r+0x6d8>
   12688:	00200793          	li	a5,2
   1268c:	fff94683          	lbu	a3,-1(s2)
   12690:	2cfa8a63          	beq	s5,a5,12964 <_ldtoa_r+0x9cc>
   12694:	00040713          	mv	a4,s0
   12698:	01645463          	bge	s0,s6,126a0 <_ldtoa_r+0x708>
   1269c:	000b0713          	mv	a4,s6
   126a0:	03000793          	li	a5,48
   126a4:	02f69663          	bne	a3,a5,126d0 <_ldtoa_r+0x738>
   126a8:	41b907b3          	sub	a5,s2,s11
   126ac:	02f75263          	bge	a4,a5,126d0 <_ldtoa_r+0x738>
   126b0:	03000693          	li	a3,48
   126b4:	00c0006f          	j	126c0 <_ldtoa_r+0x728>
   126b8:	41b907b3          	sub	a5,s2,s11
   126bc:	00f75a63          	bge	a4,a5,126d0 <_ldtoa_r+0x738>
   126c0:	ffe94783          	lbu	a5,-2(s2)
   126c4:	fe090fa3          	sb	zero,-1(s2)
   126c8:	fff90913          	add	s2,s2,-1
   126cc:	fed786e3          	beq	a5,a3,126b8 <_ldtoa_r+0x720>
   126d0:	00300793          	li	a5,3
   126d4:	24fa8863          	beq	s5,a5,12924 <_ldtoa_r+0x98c>
   126d8:	00012783          	lw	a5,0(sp)
   126dc:	01700693          	li	a3,23
   126e0:	00100713          	li	a4,1
   126e4:	00978493          	add	s1,a5,9
   126e8:	00400793          	li	a5,4
   126ec:	2696f663          	bgeu	a3,s1,12958 <_ldtoa_r+0x9c0>
   126f0:	00179793          	sll	a5,a5,0x1
   126f4:	01478693          	add	a3,a5,20
   126f8:	00070593          	mv	a1,a4
   126fc:	00170713          	add	a4,a4,1
   12700:	fed4f8e3          	bgeu	s1,a3,126f0 <_ldtoa_r+0x758>
   12704:	04b9a223          	sw	a1,68(s3)
   12708:	00098513          	mv	a0,s3
   1270c:	0b1010ef          	jal	13fbc <_Balloc>
   12710:	00050413          	mv	s0,a0
   12714:	240502e3          	beqz	a0,13158 <_ldtoa_r+0x11c0>
   12718:	04a9a023          	sw	a0,64(s3)
   1271c:	000d8593          	mv	a1,s11
   12720:	4c0030ef          	jal	15be0 <strcpy>
   12724:	00812703          	lw	a4,8(sp)
   12728:	00070863          	beqz	a4,12738 <_ldtoa_r+0x7a0>
   1272c:	41b907b3          	sub	a5,s2,s11
   12730:	00f407b3          	add	a5,s0,a5
   12734:	00f72023          	sw	a5,0(a4)
   12738:	1ec12083          	lw	ra,492(sp)
   1273c:	00040513          	mv	a0,s0
   12740:	1e812403          	lw	s0,488(sp)
   12744:	1e412483          	lw	s1,484(sp)
   12748:	1e012903          	lw	s2,480(sp)
   1274c:	1dc12983          	lw	s3,476(sp)
   12750:	1d412a83          	lw	s5,468(sp)
   12754:	1d012b03          	lw	s6,464(sp)
   12758:	1bc12d83          	lw	s11,444(sp)
   1275c:	1f010113          	add	sp,sp,496
   12760:	00008067          	ret
   12764:	12410d93          	add	s11,sp,292
   12768:	00011597          	auipc	a1,0x11
   1276c:	a0458593          	add	a1,a1,-1532 # 2316c <OSUnMapTbl+0x208>
   12770:	000d8513          	mv	a0,s11
   12774:	288030ef          	jal	159fc <sprintf>
   12778:	00002437          	lui	s0,0x2
   1277c:	70f40413          	add	s0,s0,1807 # 270f <OS_MemClr+0x2f>
   12780:	09000793          	li	a5,144
   12784:	16f12223          	sw	a5,356(sp)
   12788:	16812823          	sw	s0,368(sp)
   1278c:	06010793          	add	a5,sp,96
   12790:	07210693          	add	a3,sp,114
   12794:	0007d703          	lhu	a4,0(a5)
   12798:	00278793          	add	a5,a5,2
   1279c:	72071c63          	bnez	a4,12ed4 <_ldtoa_r+0xf3c>
   127a0:	fed79ae3          	bne	a5,a3,12794 <_ldtoa_r+0x7fc>
   127a4:	00412703          	lw	a4,4(sp)
   127a8:	000027b7          	lui	a5,0x2
   127ac:	70f78793          	add	a5,a5,1807 # 270f <OS_MemClr+0x2f>
   127b0:	00f72023          	sw	a5,0(a4)
   127b4:	e99ff06f          	j	1264c <_ldtoa_r+0x6b4>
   127b8:	000086b7          	lui	a3,0x8
   127bc:	fff68693          	add	a3,a3,-1 # 7fff <OSTaskChangePrio+0x17f>
   127c0:	6cdc8263          	beq	s9,a3,12e84 <_ldtoa_r+0xeec>
   127c4:	08c11683          	lh	a3,140(sp)
   127c8:	7206de63          	bgez	a3,12f04 <_ldtoa_r+0xf6c>
   127cc:	07c10593          	add	a1,sp,124
   127d0:	00011517          	auipc	a0,0x11
   127d4:	e9c50513          	add	a0,a0,-356 # 2366c <eone>
   127d8:	00e12a23          	sw	a4,20(sp)
   127dc:	bd4fe0ef          	jal	10bb0 <ecmp>
   127e0:	920508e3          	beqz	a0,12110 <_ldtoa_r+0x178>
   127e4:	01412703          	lw	a4,20(sp)
   127e8:	20054e63          	bltz	a0,12a04 <_ldtoa_r+0xa6c>
   127ec:	7a0c9c63          	bnez	s9,12fa4 <_ldtoa_r+0x100c>
   127f0:	08c11683          	lh	a3,140(sp)
   127f4:	00000413          	li	s0,0
   127f8:	16010913          	add	s2,sp,352
   127fc:	1006c6e3          	bltz	a3,13108 <_ldtoa_r+0x1170>
   12800:	00011a17          	auipc	s4,0x11
   12804:	d54a0a13          	add	s4,s4,-684 # 23554 <etens+0xf0>
   12808:	00070b93          	mv	s7,a4
   1280c:	07c10613          	add	a2,sp,124
   12810:	00090693          	mv	a3,s2
   12814:	00060593          	mv	a1,a2
   12818:	000a0513          	mv	a0,s4
   1281c:	a5cff0ef          	jal	11a78 <emul>
   12820:	08c11783          	lh	a5,140(sp)
   12824:	fff40413          	add	s0,s0,-1
   12828:	fe07d2e3          	bgez	a5,1280c <_ldtoa_r+0x874>
   1282c:	000b8713          	mv	a4,s7
   12830:	0d010c13          	add	s8,sp,208
   12834:	07c10793          	add	a5,sp,124
   12838:	000c0613          	mv	a2,s8
   1283c:	09010513          	add	a0,sp,144
   12840:	00078693          	mv	a3,a5
   12844:	0006a783          	lw	a5,0(a3)
   12848:	00468693          	add	a3,a3,4
   1284c:	00460613          	add	a2,a2,4
   12850:	fef62e23          	sw	a5,-4(a2)
   12854:	fed518e3          	bne	a0,a3,12844 <_ldtoa_r+0x8ac>
   12858:	00011597          	auipc	a1,0x11
   1285c:	e2858593          	add	a1,a1,-472 # 23680 <bmask>
   12860:	09810693          	add	a3,sp,152
   12864:	00072783          	lw	a5,0(a4)
   12868:	00470713          	add	a4,a4,4
   1286c:	00468693          	add	a3,a3,4
   12870:	fef6ae23          	sw	a5,-4(a3)
   12874:	feb718e3          	bne	a4,a1,12864 <_ldtoa_r+0x8cc>
   12878:	fffffa37          	lui	s4,0xfffff
   1287c:	00011c97          	auipc	s9,0x11
   12880:	be8c8c93          	add	s9,s9,-1048 # 23464 <etens>
   12884:	00011b97          	auipc	s7,0x11
   12888:	ce4b8b93          	add	s7,s7,-796 # 23568 <emtens>
   1288c:	00011d97          	auipc	s11,0x11
   12890:	de0d8d93          	add	s11,s11,-544 # 2366c <eone>
   12894:	00011d17          	auipc	s10,0x11
   12898:	dc4d0d13          	add	s10,s10,-572 # 23658 <emtens+0xf0>
   1289c:	00c0006f          	j	128a8 <_ldtoa_r+0x910>
   128a0:	014b8b93          	add	s7,s7,20
   128a4:	014c8c93          	add	s9,s9,20
   128a8:	000c0593          	mv	a1,s8
   128ac:	000d8513          	mv	a0,s11
   128b0:	b00fe0ef          	jal	10bb0 <ecmp>
   128b4:	04a05863          	blez	a0,12904 <_ldtoa_r+0x96c>
   128b8:	000c0593          	mv	a1,s8
   128bc:	000b8513          	mv	a0,s7
   128c0:	af0fe0ef          	jal	10bb0 <ecmp>
   128c4:	02054863          	bltz	a0,128f4 <_ldtoa_r+0x95c>
   128c8:	00090693          	mv	a3,s2
   128cc:	000c0613          	mv	a2,s8
   128d0:	000c0593          	mv	a1,s8
   128d4:	000c8513          	mv	a0,s9
   128d8:	9a0ff0ef          	jal	11a78 <emul>
   128dc:	09810613          	add	a2,sp,152
   128e0:	00090693          	mv	a3,s2
   128e4:	00060593          	mv	a1,a2
   128e8:	000c8513          	mv	a0,s9
   128ec:	98cff0ef          	jal	11a78 <emul>
   128f0:	01440433          	add	s0,s0,s4
   128f4:	01fa5793          	srl	a5,s4,0x1f
   128f8:	014787b3          	add	a5,a5,s4
   128fc:	4017da13          	sra	s4,a5,0x1
   12900:	fbab90e3          	bne	s7,s10,128a0 <_ldtoa_r+0x908>
   12904:	09810613          	add	a2,sp,152
   12908:	00090693          	mv	a3,s2
   1290c:	00011597          	auipc	a1,0x11
   12910:	d6058593          	add	a1,a1,-672 # 2366c <eone>
   12914:	00060513          	mv	a0,a2
   12918:	b51fe0ef          	jal	11468 <ediv>
   1291c:	12410d93          	add	s11,sp,292
   12920:	801ff06f          	j	12120 <_ldtoa_r+0x188>
   12924:	01640433          	add	s0,s0,s6
   12928:	52044863          	bltz	s0,12e58 <_ldtoa_r+0xec0>
   1292c:	00412783          	lw	a5,4(sp)
   12930:	00012703          	lw	a4,0(sp)
   12934:	0007a783          	lw	a5,0(a5)
   12938:	00f707b3          	add	a5,a4,a5
   1293c:	00f12023          	sw	a5,0(sp)
   12940:	00012783          	lw	a5,0(sp)
   12944:	01700693          	li	a3,23
   12948:	00100713          	li	a4,1
   1294c:	00378493          	add	s1,a5,3
   12950:	00400793          	li	a5,4
   12954:	d896eee3          	bltu	a3,s1,126f0 <_ldtoa_r+0x758>
   12958:	0409a223          	sw	zero,68(s3)
   1295c:	00000593          	li	a1,0
   12960:	da9ff06f          	j	12708 <_ldtoa_r+0x770>
   12964:	03000793          	li	a5,48
   12968:	d6f698e3          	bne	a3,a5,126d8 <_ldtoa_r+0x740>
   1296c:	41b907b3          	sub	a5,s2,s11
   12970:	00100713          	li	a4,1
   12974:	d2f74ee3          	blt	a4,a5,126b0 <_ldtoa_r+0x718>
   12978:	d61ff06f          	j	126d8 <_ldtoa_r+0x740>
   1297c:	0007c703          	lbu	a4,0(a5)
   12980:	ca0706e3          	beqz	a4,1262c <_ldtoa_r+0x694>
   12984:	0017c703          	lbu	a4,1(a5)
   12988:	00178793          	add	a5,a5,1
   1298c:	fee78fa3          	sb	a4,-1(a5)
   12990:	c8070ee3          	beqz	a4,1262c <_ldtoa_r+0x694>
   12994:	0017c703          	lbu	a4,1(a5)
   12998:	00178793          	add	a5,a5,1
   1299c:	fee78fa3          	sb	a4,-1(a5)
   129a0:	fe0712e3          	bnez	a4,12984 <_ldtoa_r+0x9ec>
   129a4:	c89ff06f          	j	1262c <_ldtoa_r+0x694>
   129a8:	03100713          	li	a4,49
   129ac:	12e102a3          	sb	a4,293(sp)
   129b0:	02e00713          	li	a4,46
   129b4:	12e10323          	sb	a4,294(sp)
   129b8:	00140413          	add	s0,s0,1
   129bc:	2ef05a63          	blez	a5,12cb0 <_ldtoa_r+0xd18>
   129c0:	03000793          	li	a5,48
   129c4:	12f103a3          	sb	a5,295(sp)
   129c8:	fff60613          	add	a2,a2,-1
   129cc:	12810593          	add	a1,sp,296
   129d0:	995ff06f          	j	12364 <_ldtoa_r+0x3cc>
   129d4:	00012703          	lw	a4,0(sp)
   129d8:	02a00793          	li	a5,42
   129dc:	00070b13          	mv	s6,a4
   129e0:	e8e7dc63          	bge	a5,a4,12078 <_ldtoa_r+0xe0>
   129e4:	02a00b13          	li	s6,42
   129e8:	e90ff06f          	j	12078 <_ldtoa_r+0xe0>
   129ec:	00012783          	lw	a5,0(sp)
   129f0:	fff78b13          	add	s6,a5,-1
   129f4:	02a00793          	li	a5,42
   129f8:	e967d063          	bge	a5,s6,12078 <_ldtoa_r+0xe0>
   129fc:	02a00b13          	li	s6,42
   12a00:	e78ff06f          	j	12078 <_ldtoa_r+0xe0>
   12a04:	0b410a13          	add	s4,sp,180
   12a08:	000a0893          	mv	a7,s4
   12a0c:	09010513          	add	a0,sp,144
   12a10:	000a0613          	mv	a2,s4
   12a14:	07c10693          	add	a3,sp,124
   12a18:	0006a783          	lw	a5,0(a3)
   12a1c:	00468693          	add	a3,a3,4
   12a20:	00460613          	add	a2,a2,4
   12a24:	fef62e23          	sw	a5,-4(a2)
   12a28:	fea698e3          	bne	a3,a0,12a18 <_ldtoa_r+0xa80>
   12a2c:	000046b7          	lui	a3,0x4
   12a30:	08e68693          	add	a3,a3,142 # 408e <OSFlagPend+0x5de>
   12a34:	01000793          	li	a5,16
   12a38:	0aa10d13          	add	s10,sp,170
   12a3c:	ffffc3b7          	lui	t2,0xffffc
   12a40:	0cd11323          	sh	a3,198(sp)
   12a44:	000086b7          	lui	a3,0x8
   12a48:	00011317          	auipc	t1,0x11
   12a4c:	abc30313          	add	t1,t1,-1348 # 23504 <etens+0xa0>
   12a50:	fff68693          	add	a3,a3,-1 # 7fff <OSTaskChangePrio+0x17f>
   12a54:	00238393          	add	t2,t2,2 # ffffc002 <__alt_data_end+0xfffb2c22>
   12a58:	01612c23          	sw	s6,24(sp)
   12a5c:	00078b13          	mv	s6,a5
   12a60:	000d0793          	mv	a5,s10
   12a64:	02912023          	sw	s1,32(sp)
   12a68:	03312423          	sw	s3,40(sp)
   12a6c:	000a8d13          	mv	s10,s5
   12a70:	00000413          	li	s0,0
   12a74:	12410d93          	add	s11,sp,292
   12a78:	16010913          	add	s2,sp,352
   12a7c:	0d010c13          	add	s8,sp,208
   12a80:	00d12a23          	sw	a3,20(sp)
   12a84:	01112e23          	sw	a7,28(sp)
   12a88:	02e12223          	sw	a4,36(sp)
   12a8c:	00030993          	mv	s3,t1
   12a90:	00038493          	mv	s1,t2
   12a94:	00078a93          	mv	s5,a5
   12a98:	09810613          	add	a2,sp,152
   12a9c:	00090693          	mv	a3,s2
   12aa0:	000a0593          	mv	a1,s4
   12aa4:	00098513          	mv	a0,s3
   12aa8:	9c1fe0ef          	jal	11468 <ediv>
   12aac:	04c10613          	add	a2,sp,76
   12ab0:	00060713          	mv	a4,a2
   12ab4:	09810793          	add	a5,sp,152
   12ab8:	06010e13          	add	t3,sp,96
   12abc:	0007a683          	lw	a3,0(a5)
   12ac0:	00478793          	add	a5,a5,4
   12ac4:	00470713          	add	a4,a4,4
   12ac8:	fed72e23          	sw	a3,-4(a4)
   12acc:	fefb98e3          	bne	s7,a5,12abc <_ldtoa_r+0xb24>
   12ad0:	05e15503          	lhu	a0,94(sp)
   12ad4:	01412783          	lw	a5,20(sp)
   12ad8:	00f57eb3          	and	t4,a0,a5
   12adc:	009e8eb3          	add	t4,t4,s1
   12ae0:	39d05663          	blez	t4,12e6c <_ldtoa_r+0xed4>
   12ae4:	09000793          	li	a5,144
   12ae8:	41d785b3          	sub	a1,a5,t4
   12aec:	000c0713          	mv	a4,s8
   12af0:	04c10793          	add	a5,sp,76
   12af4:	0007a683          	lw	a3,0(a5)
   12af8:	00478793          	add	a5,a5,4
   12afc:	00470713          	add	a4,a4,4
   12b00:	fed72e23          	sw	a3,-4(a4)
   12b04:	fefe18e3          	bne	t3,a5,12af4 <_ldtoa_r+0xb5c>
   12b08:	06b05a63          	blez	a1,12b7c <_ldtoa_r+0xbe4>
   12b0c:	00f00793          	li	a5,15
   12b10:	000c0713          	mv	a4,s8
   12b14:	02b7de63          	bge	a5,a1,12b50 <_ldtoa_r+0xbb8>
   12b18:	08000693          	li	a3,128
   12b1c:	41d686b3          	sub	a3,a3,t4
   12b20:	0046d693          	srl	a3,a3,0x4
   12b24:	00168713          	add	a4,a3,1
   12b28:	00171713          	sll	a4,a4,0x1
   12b2c:	00ec0733          	add	a4,s8,a4
   12b30:	000c0793          	mv	a5,s8
   12b34:	00278793          	add	a5,a5,2
   12b38:	fe079f23          	sh	zero,-2(a5)
   12b3c:	fee79ce3          	bne	a5,a4,12b34 <_ldtoa_r+0xb9c>
   12b40:	08000593          	li	a1,128
   12b44:	41d585b3          	sub	a1,a1,t4
   12b48:	00469693          	sll	a3,a3,0x4
   12b4c:	40d585b3          	sub	a1,a1,a3
   12b50:	00011697          	auipc	a3,0x11
   12b54:	90068693          	add	a3,a3,-1792 # 23450 <ezero>
   12b58:	00159793          	sll	a5,a1,0x1
   12b5c:	00f687b3          	add	a5,a3,a5
   12b60:	2307d783          	lhu	a5,560(a5)
   12b64:	00075683          	lhu	a3,0(a4)
   12b68:	00f6f7b3          	and	a5,a3,a5
   12b6c:	00f71023          	sh	a5,0(a4)
   12b70:	01051513          	sll	a0,a0,0x10
   12b74:	41055513          	sra	a0,a0,0x10
   12b78:	16054a63          	bltz	a0,12cec <_ldtoa_r+0xd54>
   12b7c:	000c0713          	mv	a4,s8
   12b80:	09810793          	add	a5,sp,152
   12b84:	0007d603          	lhu	a2,0(a5)
   12b88:	00075683          	lhu	a3,0(a4)
   12b8c:	02d61863          	bne	a2,a3,12bbc <_ldtoa_r+0xc24>
   12b90:	00278793          	add	a5,a5,2
   12b94:	00270713          	add	a4,a4,2
   12b98:	ff5796e3          	bne	a5,s5,12b84 <_ldtoa_r+0xbec>
   12b9c:	000a0713          	mv	a4,s4
   12ba0:	09810793          	add	a5,sp,152
   12ba4:	0007a683          	lw	a3,0(a5)
   12ba8:	00478793          	add	a5,a5,4
   12bac:	00470713          	add	a4,a4,4
   12bb0:	fed72e23          	sw	a3,-4(a4)
   12bb4:	ff7798e3          	bne	a5,s7,12ba4 <_ldtoa_r+0xc0c>
   12bb8:	01640433          	add	s0,s0,s6
   12bbc:	01498993          	add	s3,s3,20
   12bc0:	00011797          	auipc	a5,0x11
   12bc4:	9a878793          	add	a5,a5,-1624 # 23568 <emtens>
   12bc8:	001b5b13          	srl	s6,s6,0x1
   12bcc:	ecf996e3          	bne	s3,a5,12a98 <_ldtoa_r+0xb00>
   12bd0:	0c615683          	lhu	a3,198(sp)
   12bd4:	ffffc637          	lui	a2,0xffffc
   12bd8:	f7260613          	add	a2,a2,-142 # ffffbf72 <__alt_data_end+0xfffb2b92>
   12bdc:	00c686b3          	add	a3,a3,a2
   12be0:	01812b03          	lw	s6,24(sp)
   12be4:	01c12883          	lw	a7,28(sp)
   12be8:	02012483          	lw	s1,32(sp)
   12bec:	02412703          	lw	a4,36(sp)
   12bf0:	02812983          	lw	s3,40(sp)
   12bf4:	00dc86b3          	add	a3,s9,a3
   12bf8:	0cd11323          	sh	a3,198(sp)
   12bfc:	000d0a93          	mv	s5,s10
   12c00:	014a0593          	add	a1,s4,20 # fffff014 <__alt_data_end+0xfffb5c34>
   12c04:	07c10693          	add	a3,sp,124
   12c08:	0008a783          	lw	a5,0(a7) # ffff8000 <__alt_data_end+0xfffaec20>
   12c0c:	00488893          	add	a7,a7,4
   12c10:	00468693          	add	a3,a3,4
   12c14:	fef6ae23          	sw	a5,-4(a3)
   12c18:	feb898e3          	bne	a7,a1,12c08 <_ldtoa_r+0xc70>
   12c1c:	00011597          	auipc	a1,0x11
   12c20:	a6458593          	add	a1,a1,-1436 # 23680 <bmask>
   12c24:	09810693          	add	a3,sp,152
   12c28:	00072783          	lw	a5,0(a4)
   12c2c:	00470713          	add	a4,a4,4
   12c30:	00468693          	add	a3,a3,4
   12c34:	fef6ae23          	sw	a5,-4(a3)
   12c38:	feb718e3          	bne	a4,a1,12c28 <_ldtoa_r+0xc90>
   12c3c:	00001cb7          	lui	s9,0x1
   12c40:	00011b97          	auipc	s7,0x11
   12c44:	824b8b93          	add	s7,s7,-2012 # 23464 <etens>
   12c48:	00011d17          	auipc	s10,0x11
   12c4c:	90cd0d13          	add	s10,s10,-1780 # 23554 <etens+0xf0>
   12c50:	0100006f          	j	12c60 <_ldtoa_r+0xcc8>
   12c54:	001cdc93          	srl	s9,s9,0x1
   12c58:	cdab8463          	beq	s7,s10,12120 <_ldtoa_r+0x188>
   12c5c:	014b8b93          	add	s7,s7,20
   12c60:	000a0593          	mv	a1,s4
   12c64:	000d0513          	mv	a0,s10
   12c68:	f49fd0ef          	jal	10bb0 <ecmp>
   12c6c:	caa04a63          	bgtz	a0,12120 <_ldtoa_r+0x188>
   12c70:	000a0593          	mv	a1,s4
   12c74:	000b8513          	mv	a0,s7
   12c78:	f39fd0ef          	jal	10bb0 <ecmp>
   12c7c:	fca04ce3          	bgtz	a0,12c54 <_ldtoa_r+0xcbc>
   12c80:	00090693          	mv	a3,s2
   12c84:	000a0613          	mv	a2,s4
   12c88:	000a0593          	mv	a1,s4
   12c8c:	000b8513          	mv	a0,s7
   12c90:	fd8fe0ef          	jal	11468 <ediv>
   12c94:	09810613          	add	a2,sp,152
   12c98:	00090693          	mv	a3,s2
   12c9c:	00060593          	mv	a1,a2
   12ca0:	000b8513          	mv	a0,s7
   12ca4:	dd5fe0ef          	jal	11a78 <emul>
   12ca8:	01940433          	add	s0,s0,s9
   12cac:	fa9ff06f          	j	12c54 <_ldtoa_r+0xcbc>
   12cb0:	12710a13          	add	s4,sp,295
   12cb4:	00000613          	li	a2,0
   12cb8:	000a0593          	mv	a1,s4
   12cbc:	900790e3          	bnez	a5,125bc <_ldtoa_r+0x624>
   12cc0:	ea4ff06f          	j	12364 <_ldtoa_r+0x3cc>
   12cc4:	00012703          	lw	a4,0(sp)
   12cc8:	02a00793          	li	a5,42
   12ccc:	00070b13          	mv	s6,a4
   12cd0:	8ae7d8e3          	bge	a5,a4,12580 <_ldtoa_r+0x5e8>
   12cd4:	02a00b13          	li	s6,42
   12cd8:	8a9ff06f          	j	12580 <_ldtoa_r+0x5e8>
   12cdc:	000d8793          	mv	a5,s11
   12ce0:	969ff06f          	j	12648 <_ldtoa_r+0x6b0>
   12ce4:	00000613          	li	a2,0
   12ce8:	875ff06f          	j	1255c <_ldtoa_r+0x5c4>
   12cec:	000c0793          	mv	a5,s8
   12cf0:	0140006f          	j	12d04 <_ldtoa_r+0xd6c>
   12cf4:	00260613          	add	a2,a2,2
   12cf8:	05e10713          	add	a4,sp,94
   12cfc:	00278793          	add	a5,a5,2
   12d00:	e6c70ee3          	beq	a4,a2,12b7c <_ldtoa_r+0xbe4>
   12d04:	00065683          	lhu	a3,0(a2)
   12d08:	0007d703          	lhu	a4,0(a5)
   12d0c:	fee684e3          	beq	a3,a4,12cf4 <_ldtoa_r+0xd5c>
   12d10:	0e215783          	lhu	a5,226(sp)
   12d14:	fff7c793          	not	a5,a5
   12d18:	01179713          	sll	a4,a5,0x11
   12d1c:	3a070e63          	beqz	a4,130d8 <_ldtoa_r+0x1140>
   12d20:	0ec10593          	add	a1,sp,236
   12d24:	00011517          	auipc	a0,0x11
   12d28:	94850513          	add	a0,a0,-1720 # 2366c <eone>
   12d2c:	dd1fd0ef          	jal	10afc <emovi>
   12d30:	10810593          	add	a1,sp,264
   12d34:	000c0513          	mv	a0,s8
   12d38:	dc5fd0ef          	jal	10afc <emovi>
   12d3c:	0ec15783          	lhu	a5,236(sp)
   12d40:	10a15703          	lhu	a4,266(sp)
   12d44:	0ee15503          	lhu	a0,238(sp)
   12d48:	fff7c793          	not	a5,a5
   12d4c:	0ef11623          	sh	a5,236(sp)
   12d50:	40e505b3          	sub	a1,a0,a4
   12d54:	00070693          	mv	a3,a4
   12d58:	06b05c63          	blez	a1,12dd0 <_ldtoa_r+0xe38>
   12d5c:	10810593          	add	a1,sp,264
   12d60:	000d8613          	mv	a2,s11
   12d64:	12010e93          	add	t4,sp,288
   12d68:	000d8693          	mv	a3,s11
   12d6c:	00058793          	mv	a5,a1
   12d70:	0007a803          	lw	a6,0(a5)
   12d74:	00478793          	add	a5,a5,4
   12d78:	00468693          	add	a3,a3,4
   12d7c:	ff06ae23          	sw	a6,-4(a3)
   12d80:	fefe98e3          	bne	t4,a5,12d70 <_ldtoa_r+0xdd8>
   12d84:	0ec10793          	add	a5,sp,236
   12d88:	12011e23          	sh	zero,316(sp)
   12d8c:	10410e93          	add	t4,sp,260
   12d90:	00078693          	mv	a3,a5
   12d94:	0006a803          	lw	a6,0(a3)
   12d98:	00468693          	add	a3,a3,4
   12d9c:	00458593          	add	a1,a1,4
   12da0:	ff05ae23          	sw	a6,-4(a1)
   12da4:	ffd698e3          	bne	a3,t4,12d94 <_ldtoa_r+0xdfc>
   12da8:	12011023          	sh	zero,288(sp)
   12dac:	00062683          	lw	a3,0(a2)
   12db0:	00478793          	add	a5,a5,4
   12db4:	00460613          	add	a2,a2,4
   12db8:	fed7ae23          	sw	a3,-4(a5)
   12dbc:	ffd798e3          	bne	a5,t4,12dac <_ldtoa_r+0xe14>
   12dc0:	10a15683          	lhu	a3,266(sp)
   12dc4:	40a705b3          	sub	a1,a4,a0
   12dc8:	10011223          	sh	zero,260(sp)
   12dcc:	00068713          	mv	a4,a3
   12dd0:	34058063          	beqz	a1,13110 <_ldtoa_r+0x1178>
   12dd4:	02d12623          	sw	a3,44(sp)
   12dd8:	f6f00793          	li	a5,-145
   12ddc:	06f5c663          	blt	a1,a5,12e48 <_ldtoa_r+0xeb0>
   12de0:	0ec10513          	add	a0,sp,236
   12de4:	b81fd0ef          	jal	10964 <eshift.part.0>
   12de8:	02c12683          	lw	a3,44(sp)
   12dec:	00050593          	mv	a1,a0
   12df0:	0ec15703          	lhu	a4,236(sp)
   12df4:	10815783          	lhu	a5,264(sp)
   12df8:	42f70c63          	beq	a4,a5,13230 <_ldtoa_r+0x1298>
   12dfc:	00000793          	li	a5,0
   12e00:	10410e93          	add	t4,sp,260
   12e04:	12010513          	add	a0,sp,288
   12e08:	10a10613          	add	a2,sp,266
   12e0c:	00055703          	lhu	a4,0(a0)
   12e10:	000ed803          	lhu	a6,0(t4)
   12e14:	ffe50513          	add	a0,a0,-2
   12e18:	ffee8e93          	add	t4,t4,-2
   12e1c:	41070733          	sub	a4,a4,a6
   12e20:	40f707b3          	sub	a5,a4,a5
   12e24:	0107d713          	srl	a4,a5,0x10
   12e28:	00f51123          	sh	a5,2(a0)
   12e2c:	00177793          	and	a5,a4,1
   12e30:	fcc51ee3          	bne	a0,a2,12e0c <_ldtoa_r+0xe74>
   12e34:	00100613          	li	a2,1
   12e38:	00090793          	mv	a5,s2
   12e3c:	04000713          	li	a4,64
   12e40:	10810513          	add	a0,sp,264
   12e44:	eb9fd0ef          	jal	10cfc <emdnorm>
   12e48:	000c0593          	mv	a1,s8
   12e4c:	10810513          	add	a0,sp,264
   12e50:	8f5fd0ef          	jal	10744 <emovo.isra.0>
   12e54:	d29ff06f          	j	12b7c <_ldtoa_r+0xbe4>
   12e58:	00412783          	lw	a5,4(sp)
   12e5c:	12010223          	sb	zero,292(sp)
   12e60:	000d8913          	mv	s2,s11
   12e64:	0007a023          	sw	zero,0(a5)
   12e68:	ad9ff06f          	j	12940 <_ldtoa_r+0x9a8>
   12e6c:	000c0793          	mv	a5,s8
   12e70:	00278793          	add	a5,a5,2
   12e74:	0e410713          	add	a4,sp,228
   12e78:	fe079f23          	sh	zero,-2(a5)
   12e7c:	fee79ae3          	bne	a5,a4,12e70 <_ldtoa_r+0xed8>
   12e80:	cf1ff06f          	j	12b70 <_ldtoa_r+0xbd8>
   12e84:	01012783          	lw	a5,16(sp)
   12e88:	12410d93          	add	s11,sp,292
   12e8c:	0e078c63          	beqz	a5,12f84 <_ldtoa_r+0xfec>
   12e90:	00010597          	auipc	a1,0x10
   12e94:	27458593          	add	a1,a1,628 # 23104 <OSUnMapTbl+0x1a0>
   12e98:	000d8513          	mv	a0,s11
   12e9c:	361020ef          	jal	159fc <sprintf>
   12ea0:	00002437          	lui	s0,0x2
   12ea4:	70f40413          	add	s0,s0,1807 # 270f <OS_MemClr+0x2f>
   12ea8:	f28ff06f          	j	125d0 <_ldtoa_r+0x638>
   12eac:	00178793          	add	a5,a5,1
   12eb0:	00f70023          	sb	a5,0(a4)
   12eb4:	f08ff06f          	j	125bc <_ldtoa_r+0x624>
   12eb8:	fff74783          	lbu	a5,-1(a4)
   12ebc:	03800693          	li	a3,56
   12ec0:	0cf6fc63          	bgeu	a3,a5,12f98 <_ldtoa_r+0x1000>
   12ec4:	03100793          	li	a5,49
   12ec8:	00140413          	add	s0,s0,1
   12ecc:	fef70fa3          	sb	a5,-1(a4)
   12ed0:	eecff06f          	j	125bc <_ldtoa_r+0x624>
   12ed4:	06010793          	add	a5,sp,96
   12ed8:	07210693          	add	a3,sp,114
   12edc:	0080006f          	j	12ee4 <_ldtoa_r+0xf4c>
   12ee0:	f2d78063          	beq	a5,a3,12600 <_ldtoa_r+0x668>
   12ee4:	0007d703          	lhu	a4,0(a5)
   12ee8:	00278793          	add	a5,a5,2
   12eec:	fe070ae3          	beqz	a4,12ee0 <_ldtoa_r+0xf48>
   12ef0:	00412703          	lw	a4,4(sp)
   12ef4:	000027b7          	lui	a5,0x2
   12ef8:	70f78793          	add	a5,a5,1807 # 270f <OS_MemClr+0x2f>
   12efc:	00f72023          	sw	a5,0(a4)
   12f00:	f4cff06f          	j	1264c <_ldtoa_r+0x6b4>
   12f04:	12410d93          	add	s11,sp,292
   12f08:	00010597          	auipc	a1,0x10
   12f0c:	21458593          	add	a1,a1,532 # 2311c <OSUnMapTbl+0x1b8>
   12f10:	000d8513          	mv	a0,s11
   12f14:	2e9020ef          	jal	159fc <sprintf>
   12f18:	f89ff06f          	j	12ea0 <_ldtoa_r+0xf08>
   12f1c:	1ac15783          	lhu	a5,428(sp)
   12f20:	12610a13          	add	s4,sp,294
   12f24:	12710c13          	add	s8,sp,295
   12f28:	dd0ff06f          	j	124f8 <_ldtoa_r+0x560>
   12f2c:	09810593          	add	a1,sp,152
   12f30:	07c10513          	add	a0,sp,124
   12f34:	00c12823          	sw	a2,16(sp)
   12f38:	80dfd0ef          	jal	10744 <emovo.isra.0>
   12f3c:	00010597          	auipc	a1,0x10
   12f40:	51458593          	add	a1,a1,1300 # 23450 <ezero>
   12f44:	09810513          	add	a0,sp,152
   12f48:	c69fd0ef          	jal	10bb0 <ecmp>
   12f4c:	01012603          	lw	a2,16(sp)
   12f50:	da051c63          	bnez	a0,12508 <_ldtoa_r+0x570>
   12f54:	e6064463          	bltz	a2,125bc <_ldtoa_r+0x624>
   12f58:	ffec4783          	lbu	a5,-2(s8)
   12f5c:	fd278713          	add	a4,a5,-46
   12f60:	00173713          	seqz	a4,a4
   12f64:	fff74713          	not	a4,a4
   12f68:	00ea0733          	add	a4,s4,a4
   12f6c:	00074703          	lbu	a4,0(a4)
   12f70:	00177713          	and	a4,a4,1
   12f74:	e4070463          	beqz	a4,125bc <_ldtoa_r+0x624>
   12f78:	ffec0713          	add	a4,s8,-2
   12f7c:	07f7f793          	and	a5,a5,127
   12f80:	d98ff06f          	j	12518 <_ldtoa_r+0x580>
   12f84:	00010597          	auipc	a1,0x10
   12f88:	18c58593          	add	a1,a1,396 # 23110 <OSUnMapTbl+0x1ac>
   12f8c:	000d8513          	mv	a0,s11
   12f90:	26d020ef          	jal	159fc <sprintf>
   12f94:	f0dff06f          	j	12ea0 <_ldtoa_r+0xf08>
   12f98:	00178793          	add	a5,a5,1
   12f9c:	fef70fa3          	sb	a5,-1(a4)
   12fa0:	e1cff06f          	j	125bc <_ldtoa_r+0x624>
   12fa4:	0d010c13          	add	s8,sp,208
   12fa8:	000c0593          	mv	a1,s8
   12fac:	07c10513          	add	a0,sp,124
   12fb0:	00e12c23          	sw	a4,24(sp)
   12fb4:	b49fd0ef          	jal	10afc <emovi>
   12fb8:	01812703          	lw	a4,24(sp)
   12fbc:	00004d37          	lui	s10,0x4
   12fc0:	00000413          	li	s0,0
   12fc4:	0e810b93          	add	s7,sp,232
   12fc8:	0d210a13          	add	s4,sp,210
   12fcc:	ffed0d13          	add	s10,s10,-2 # 3ffe <OSFlagPend+0x54e>
   12fd0:	0cc10c93          	add	s9,sp,204
   12fd4:	00912a23          	sw	s1,20(sp)
   12fd8:	00070d93          	mv	s11,a4
   12fdc:	0e815783          	lhu	a5,232(sp)
   12fe0:	0077f793          	and	a5,a5,7
   12fe4:	0c079a63          	bnez	a5,130b8 <_ldtoa_r+0x1120>
   12fe8:	0b410493          	add	s1,sp,180
   12fec:	000c0913          	mv	s2,s8
   12ff0:	00048713          	mv	a4,s1
   12ff4:	000c0793          	mv	a5,s8
   12ff8:	0007a683          	lw	a3,0(a5)
   12ffc:	00478793          	add	a5,a5,4
   13000:	00470713          	add	a4,a4,4
   13004:	fed72e23          	sw	a3,-4(a4)
   13008:	fefb98e3          	bne	s7,a5,12ff8 <_ldtoa_r+0x1060>
   1300c:	0b410513          	add	a0,sp,180
   13010:	0c011623          	sh	zero,204(sp)
   13014:	dbcfd0ef          	jal	105d0 <eshdn1>
   13018:	0b410513          	add	a0,sp,180
   1301c:	db4fd0ef          	jal	105d0 <eshdn1>
   13020:	00000613          	li	a2,0
   13024:	0cc10693          	add	a3,sp,204
   13028:	000b8713          	mv	a4,s7
   1302c:	0006d503          	lhu	a0,0(a3)
   13030:	00075783          	lhu	a5,0(a4)
   13034:	ffe68693          	add	a3,a3,-2
   13038:	ffe70713          	add	a4,a4,-2
   1303c:	00a787b3          	add	a5,a5,a0
   13040:	00c787b3          	add	a5,a5,a2
   13044:	0107d613          	srl	a2,a5,0x10
   13048:	00f69123          	sh	a5,2(a3)
   1304c:	00167613          	and	a2,a2,1
   13050:	fd471ee3          	bne	a4,s4,1302c <_ldtoa_r+0x1094>
   13054:	0b615783          	lhu	a5,182(sp)
   13058:	0b815703          	lhu	a4,184(sp)
   1305c:	00378793          	add	a5,a5,3
   13060:	0af11b23          	sh	a5,182(sp)
   13064:	02070063          	beqz	a4,13084 <_ldtoa_r+0x10ec>
   13068:	0b410513          	add	a0,sp,180
   1306c:	d64fd0ef          	jal	105d0 <eshdn1>
   13070:	0b615783          	lhu	a5,182(sp)
   13074:	0b815703          	lhu	a4,184(sp)
   13078:	00178793          	add	a5,a5,1
   1307c:	0af11b23          	sh	a5,182(sp)
   13080:	fe0714e3          	bnez	a4,13068 <_ldtoa_r+0x10d0>
   13084:	0cc15783          	lhu	a5,204(sp)
   13088:	02079863          	bnez	a5,130b8 <_ldtoa_r+0x1120>
   1308c:	0b615783          	lhu	a5,182(sp)
   13090:	02fd6463          	bltu	s10,a5,130b8 <_ldtoa_r+0x1120>
   13094:	0004a783          	lw	a5,0(s1)
   13098:	00448493          	add	s1,s1,4
   1309c:	00490913          	add	s2,s2,4
   130a0:	fef92e23          	sw	a5,-4(s2)
   130a4:	fe9c98e3          	bne	s9,s1,13094 <_ldtoa_r+0x10fc>
   130a8:	0e011423          	sh	zero,232(sp)
   130ac:	fff40413          	add	s0,s0,-1
   130b0:	fd500793          	li	a5,-43
   130b4:	f2f414e3          	bne	s0,a5,12fdc <_ldtoa_r+0x1044>
   130b8:	07c10593          	add	a1,sp,124
   130bc:	000c0513          	mv	a0,s8
   130c0:	01412483          	lw	s1,20(sp)
   130c4:	01b12a23          	sw	s11,20(sp)
   130c8:	e7cfd0ef          	jal	10744 <emovo.isra.0>
   130cc:	01412703          	lw	a4,20(sp)
   130d0:	16010913          	add	s2,sp,352
   130d4:	f60ff06f          	j	12834 <_ldtoa_r+0x89c>
   130d8:	000c0793          	mv	a5,s8
   130dc:	0e210713          	add	a4,sp,226
   130e0:	0007d683          	lhu	a3,0(a5)
   130e4:	00278793          	add	a5,a5,2
   130e8:	a8069ae3          	bnez	a3,12b7c <_ldtoa_r+0xbe4>
   130ec:	fee79ae3          	bne	a5,a4,130e0 <_ldtoa_r+0x1148>
   130f0:	000c0793          	mv	a5,s8
   130f4:	0007d683          	lhu	a3,0(a5)
   130f8:	00278793          	add	a5,a5,2
   130fc:	c20692e3          	bnez	a3,12d20 <_ldtoa_r+0xd88>
   13100:	fee79ae3          	bne	a5,a4,130f4 <_ldtoa_r+0x115c>
   13104:	a79ff06f          	j	12b7c <_ldtoa_r+0xbe4>
   13108:	0d010c13          	add	s8,sp,208
   1310c:	f28ff06f          	j	12834 <_ldtoa_r+0x89c>
   13110:	10c10613          	add	a2,sp,268
   13114:	0f010793          	add	a5,sp,240
   13118:	10610f13          	add	t5,sp,262
   1311c:	0007de83          	lhu	t4,0(a5)
   13120:	00065503          	lhu	a0,0(a2)
   13124:	00278793          	add	a5,a5,2
   13128:	00260613          	add	a2,a2,2
   1312c:	06ae9063          	bne	t4,a0,1318c <_ldtoa_r+0x11f4>
   13130:	ffe796e3          	bne	a5,t5,1311c <_ldtoa_r+0x1184>
   13134:	0ec15603          	lhu	a2,236(sp)
   13138:	10815783          	lhu	a5,264(sp)
   1313c:	0cf60263          	beq	a2,a5,13200 <_ldtoa_r+0x1268>
   13140:	000c0793          	mv	a5,s8
   13144:	0e410713          	add	a4,sp,228
   13148:	00278793          	add	a5,a5,2
   1314c:	fe079f23          	sh	zero,-2(a5)
   13150:	fee79ce3          	bne	a5,a4,13148 <_ldtoa_r+0x11b0>
   13154:	a29ff06f          	j	12b7c <_ldtoa_r+0xbe4>
   13158:	000015b7          	lui	a1,0x1
   1315c:	00010697          	auipc	a3,0x10
   13160:	fc868693          	add	a3,a3,-56 # 23124 <OSUnMapTbl+0x1c0>
   13164:	00000613          	li	a2,0
   13168:	b6e58593          	add	a1,a1,-1170 # b6e <__malloc_lock+0x6a>
   1316c:	00010517          	auipc	a0,0x10
   13170:	fcc50513          	add	a0,a0,-52 # 23138 <OSUnMapTbl+0x1d4>
   13174:	1d412c23          	sw	s4,472(sp)
   13178:	1d712623          	sw	s7,460(sp)
   1317c:	1d812423          	sw	s8,456(sp)
   13180:	1d912223          	sw	s9,452(sp)
   13184:	1da12023          	sw	s10,448(sp)
   13188:	479060ef          	jal	19e00 <__assert_func>
   1318c:	c7d572e3          	bgeu	a0,t4,12df0 <_ldtoa_r+0xe58>
   13190:	10810793          	add	a5,sp,264
   13194:	000d8613          	mv	a2,s11
   13198:	13c10e93          	add	t4,sp,316
   1319c:	00078513          	mv	a0,a5
   131a0:	000d8713          	mv	a4,s11
   131a4:	00052803          	lw	a6,0(a0)
   131a8:	00470713          	add	a4,a4,4
   131ac:	00450513          	add	a0,a0,4
   131b0:	ff072e23          	sw	a6,-4(a4)
   131b4:	ffd718e3          	bne	a4,t4,131a4 <_ldtoa_r+0x120c>
   131b8:	0ec10713          	add	a4,sp,236
   131bc:	12011e23          	sh	zero,316(sp)
   131c0:	12010e93          	add	t4,sp,288
   131c4:	00070513          	mv	a0,a4
   131c8:	00052803          	lw	a6,0(a0)
   131cc:	00478793          	add	a5,a5,4
   131d0:	00450513          	add	a0,a0,4
   131d4:	ff07ae23          	sw	a6,-4(a5)
   131d8:	fefe98e3          	bne	t4,a5,131c8 <_ldtoa_r+0x1230>
   131dc:	12011023          	sh	zero,288(sp)
   131e0:	10410793          	add	a5,sp,260
   131e4:	00062503          	lw	a0,0(a2)
   131e8:	00470713          	add	a4,a4,4
   131ec:	00460613          	add	a2,a2,4
   131f0:	fea72e23          	sw	a0,-4(a4)
   131f4:	fef718e3          	bne	a4,a5,131e4 <_ldtoa_r+0x124c>
   131f8:	10011223          	sh	zero,260(sp)
   131fc:	bf5ff06f          	j	12df0 <_ldtoa_r+0xe58>
   13200:	00068793          	mv	a5,a3
   13204:	00069663          	bnez	a3,13210 <_ldtoa_r+0x1278>
   13208:	10e11603          	lh	a2,270(sp)
   1320c:	06065263          	bgez	a2,13270 <_ldtoa_r+0x12d8>
   13210:	10a10793          	add	a5,sp,266
   13214:	12010613          	add	a2,sp,288
   13218:	0007d583          	lhu	a1,0(a5)
   1321c:	0a059263          	bnez	a1,132c0 <_ldtoa_r+0x1328>
   13220:	00278793          	add	a5,a5,2
   13224:	fec79ae3          	bne	a5,a2,13218 <_ldtoa_r+0x1280>
   13228:	10e11523          	sh	a4,266(sp)
   1322c:	c1dff06f          	j	12e48 <_ldtoa_r+0xeb0>
   13230:	00000793          	li	a5,0
   13234:	12010513          	add	a0,sp,288
   13238:	10410613          	add	a2,sp,260
   1323c:	0ee10e93          	add	t4,sp,238
   13240:	00055803          	lhu	a6,0(a0)
   13244:	00065703          	lhu	a4,0(a2)
   13248:	ffe50513          	add	a0,a0,-2
   1324c:	ffe60613          	add	a2,a2,-2
   13250:	01070733          	add	a4,a4,a6
   13254:	00f707b3          	add	a5,a4,a5
   13258:	0107d713          	srl	a4,a5,0x10
   1325c:	00f51123          	sh	a5,2(a0)
   13260:	00177793          	and	a5,a4,1
   13264:	fdd61ee3          	bne	a2,t4,13240 <_ldtoa_r+0x12a8>
   13268:	00000613          	li	a2,0
   1326c:	bcdff06f          	j	12e38 <_ldtoa_r+0xea0>
   13270:	12010693          	add	a3,sp,288
   13274:	10a10613          	add	a2,sp,266
   13278:	0006d703          	lhu	a4,0(a3)
   1327c:	01071593          	sll	a1,a4,0x10
   13280:	4105d593          	sra	a1,a1,0x10
   13284:	0005d463          	bgez	a1,1328c <_ldtoa_r+0x12f4>
   13288:	0017e793          	or	a5,a5,1
   1328c:	00171713          	sll	a4,a4,0x1
   13290:	01071713          	sll	a4,a4,0x10
   13294:	0027f593          	and	a1,a5,2
   13298:	01075713          	srl	a4,a4,0x10
   1329c:	00058463          	beqz	a1,132a4 <_ldtoa_r+0x130c>
   132a0:	00176713          	or	a4,a4,1
   132a4:	00179793          	sll	a5,a5,0x1
   132a8:	00e69023          	sh	a4,0(a3)
   132ac:	01079793          	sll	a5,a5,0x10
   132b0:	ffe68693          	add	a3,a3,-2
   132b4:	0107d793          	srl	a5,a5,0x10
   132b8:	fcc690e3          	bne	a3,a2,13278 <_ldtoa_r+0x12e0>
   132bc:	b8dff06f          	j	12e48 <_ldtoa_r+0xeb0>
   132c0:	00168713          	add	a4,a3,1
   132c4:	10e11523          	sh	a4,266(sp)
   132c8:	b81ff06f          	j	12e48 <_ldtoa_r+0xeb0>

000132cc <_ldcheck>:
   132cc:	00852703          	lw	a4,8(a0)
   132d0:	00c52783          	lw	a5,12(a0)
   132d4:	00052603          	lw	a2,0(a0)
   132d8:	00452683          	lw	a3,4(a0)
   132dc:	fc010113          	add	sp,sp,-64
   132e0:	00010513          	mv	a0,sp
   132e4:	01410593          	add	a1,sp,20
   132e8:	00e12423          	sw	a4,8(sp)
   132ec:	00f12623          	sw	a5,12(sp)
   132f0:	02112e23          	sw	ra,60(sp)
   132f4:	00c12023          	sw	a2,0(sp)
   132f8:	00d12223          	sw	a3,4(sp)
   132fc:	818fe0ef          	jal	11314 <e113toe.isra.0>
   13300:	02615783          	lhu	a5,38(sp)
   13304:	00000513          	li	a0,0
   13308:	fff7c793          	not	a5,a5
   1330c:	01179713          	sll	a4,a5,0x11
   13310:	02071063          	bnez	a4,13330 <_ldcheck+0x64>
   13314:	01410793          	add	a5,sp,20
   13318:	02610693          	add	a3,sp,38
   1331c:	0007d703          	lhu	a4,0(a5)
   13320:	00278793          	add	a5,a5,2
   13324:	00071c63          	bnez	a4,1333c <_ldcheck+0x70>
   13328:	fed79ae3          	bne	a5,a3,1331c <_ldcheck+0x50>
   1332c:	00200513          	li	a0,2
   13330:	03c12083          	lw	ra,60(sp)
   13334:	04010113          	add	sp,sp,64
   13338:	00008067          	ret
   1333c:	00100513          	li	a0,1
   13340:	ff1ff06f          	j	13330 <_ldcheck+0x64>

00013344 <__localeconv_l>:
   13344:	0f050513          	add	a0,a0,240
   13348:	00008067          	ret

0001334c <_localeconv_r>:
   1334c:	00012517          	auipc	a0,0x12
   13350:	7d450513          	add	a0,a0,2004 # 25b20 <__global_locale+0xf0>
   13354:	00008067          	ret

00013358 <localeconv>:
   13358:	00012517          	auipc	a0,0x12
   1335c:	7c850513          	add	a0,a0,1992 # 25b20 <__global_locale+0xf0>
   13360:	00008067          	ret

00013364 <__retarget_lock_init>:
   13364:	00008067          	ret

00013368 <__retarget_lock_init_recursive>:
   13368:	00008067          	ret

0001336c <__retarget_lock_close>:
   1336c:	00008067          	ret

00013370 <__retarget_lock_close_recursive>:
   13370:	00008067          	ret

00013374 <__retarget_lock_acquire>:
   13374:	00008067          	ret

00013378 <__retarget_lock_acquire_recursive>:
   13378:	00008067          	ret

0001337c <__retarget_lock_try_acquire>:
   1337c:	00100513          	li	a0,1
   13380:	00008067          	ret

00013384 <__retarget_lock_try_acquire_recursive>:
   13384:	00100513          	li	a0,1
   13388:	00008067          	ret

0001338c <__retarget_lock_release>:
   1338c:	00008067          	ret

00013390 <__retarget_lock_release_recursive>:
   13390:	00008067          	ret

00013394 <__smakebuf_r>:
   13394:	00c59783          	lh	a5,12(a1)
   13398:	f8010113          	add	sp,sp,-128
   1339c:	06812c23          	sw	s0,120(sp)
   133a0:	06112e23          	sw	ra,124(sp)
   133a4:	0027f713          	and	a4,a5,2
   133a8:	00058413          	mv	s0,a1
   133ac:	02070463          	beqz	a4,133d4 <__smakebuf_r+0x40>
   133b0:	04358793          	add	a5,a1,67
   133b4:	00f5a023          	sw	a5,0(a1)
   133b8:	00f5a823          	sw	a5,16(a1)
   133bc:	00100793          	li	a5,1
   133c0:	00f5aa23          	sw	a5,20(a1)
   133c4:	07c12083          	lw	ra,124(sp)
   133c8:	07812403          	lw	s0,120(sp)
   133cc:	08010113          	add	sp,sp,128
   133d0:	00008067          	ret
   133d4:	00e59583          	lh	a1,14(a1)
   133d8:	06912a23          	sw	s1,116(sp)
   133dc:	07212823          	sw	s2,112(sp)
   133e0:	07312623          	sw	s3,108(sp)
   133e4:	07412423          	sw	s4,104(sp)
   133e8:	00050493          	mv	s1,a0
   133ec:	0805cc63          	bltz	a1,13484 <__smakebuf_r+0xf0>
   133f0:	00810613          	add	a2,sp,8
   133f4:	0f4070ef          	jal	1a4e8 <_fstat_r>
   133f8:	08054463          	bltz	a0,13480 <__smakebuf_r+0xec>
   133fc:	00c12783          	lw	a5,12(sp)
   13400:	0000f937          	lui	s2,0xf
   13404:	000019b7          	lui	s3,0x1
   13408:	00f97933          	and	s2,s2,a5
   1340c:	ffffe7b7          	lui	a5,0xffffe
   13410:	00f90933          	add	s2,s2,a5
   13414:	00193913          	seqz	s2,s2
   13418:	40000a13          	li	s4,1024
   1341c:	80098993          	add	s3,s3,-2048 # 800 <_start+0x44>
   13420:	000a0593          	mv	a1,s4
   13424:	00048513          	mv	a0,s1
   13428:	1e8000ef          	jal	13610 <_malloc_r>
   1342c:	00c41783          	lh	a5,12(s0)
   13430:	06050e63          	beqz	a0,134ac <__smakebuf_r+0x118>
   13434:	ffffc717          	auipc	a4,0xffffc
   13438:	1d870713          	add	a4,a4,472 # f60c <_cleanup_r>
   1343c:	02e4ae23          	sw	a4,60(s1)
   13440:	0807e793          	or	a5,a5,128
   13444:	00f41623          	sh	a5,12(s0)
   13448:	00a42023          	sw	a0,0(s0)
   1344c:	00a42823          	sw	a0,16(s0)
   13450:	01442a23          	sw	s4,20(s0)
   13454:	0a091063          	bnez	s2,134f4 <__smakebuf_r+0x160>
   13458:	0137e7b3          	or	a5,a5,s3
   1345c:	07c12083          	lw	ra,124(sp)
   13460:	00f41623          	sh	a5,12(s0)
   13464:	07812403          	lw	s0,120(sp)
   13468:	07412483          	lw	s1,116(sp)
   1346c:	07012903          	lw	s2,112(sp)
   13470:	06c12983          	lw	s3,108(sp)
   13474:	06812a03          	lw	s4,104(sp)
   13478:	08010113          	add	sp,sp,128
   1347c:	00008067          	ret
   13480:	00c41783          	lh	a5,12(s0)
   13484:	0807f793          	and	a5,a5,128
   13488:	00000913          	li	s2,0
   1348c:	04078e63          	beqz	a5,134e8 <__smakebuf_r+0x154>
   13490:	04000a13          	li	s4,64
   13494:	000a0593          	mv	a1,s4
   13498:	00048513          	mv	a0,s1
   1349c:	174000ef          	jal	13610 <_malloc_r>
   134a0:	00c41783          	lh	a5,12(s0)
   134a4:	00000993          	li	s3,0
   134a8:	f80516e3          	bnez	a0,13434 <__smakebuf_r+0xa0>
   134ac:	2007f713          	and	a4,a5,512
   134b0:	04071e63          	bnez	a4,1350c <__smakebuf_r+0x178>
   134b4:	ffc7f793          	and	a5,a5,-4
   134b8:	0027e793          	or	a5,a5,2
   134bc:	04340713          	add	a4,s0,67
   134c0:	00f41623          	sh	a5,12(s0)
   134c4:	00100793          	li	a5,1
   134c8:	07412483          	lw	s1,116(sp)
   134cc:	07012903          	lw	s2,112(sp)
   134d0:	06c12983          	lw	s3,108(sp)
   134d4:	06812a03          	lw	s4,104(sp)
   134d8:	00e42023          	sw	a4,0(s0)
   134dc:	00e42823          	sw	a4,16(s0)
   134e0:	00f42a23          	sw	a5,20(s0)
   134e4:	ee1ff06f          	j	133c4 <__smakebuf_r+0x30>
   134e8:	40000a13          	li	s4,1024
   134ec:	00000993          	li	s3,0
   134f0:	f31ff06f          	j	13420 <__smakebuf_r+0x8c>
   134f4:	00e41583          	lh	a1,14(s0)
   134f8:	00048513          	mv	a0,s1
   134fc:	04c070ef          	jal	1a548 <_isatty_r>
   13500:	02051063          	bnez	a0,13520 <__smakebuf_r+0x18c>
   13504:	00c41783          	lh	a5,12(s0)
   13508:	f51ff06f          	j	13458 <__smakebuf_r+0xc4>
   1350c:	07412483          	lw	s1,116(sp)
   13510:	07012903          	lw	s2,112(sp)
   13514:	06c12983          	lw	s3,108(sp)
   13518:	06812a03          	lw	s4,104(sp)
   1351c:	ea9ff06f          	j	133c4 <__smakebuf_r+0x30>
   13520:	00c45783          	lhu	a5,12(s0)
   13524:	ffc7f793          	and	a5,a5,-4
   13528:	0017e793          	or	a5,a5,1
   1352c:	01079793          	sll	a5,a5,0x10
   13530:	4107d793          	sra	a5,a5,0x10
   13534:	f25ff06f          	j	13458 <__smakebuf_r+0xc4>

00013538 <__swhatbuf_r>:
   13538:	f9010113          	add	sp,sp,-112
   1353c:	06812423          	sw	s0,104(sp)
   13540:	00058413          	mv	s0,a1
   13544:	00e59583          	lh	a1,14(a1)
   13548:	06912223          	sw	s1,100(sp)
   1354c:	07212023          	sw	s2,96(sp)
   13550:	06112623          	sw	ra,108(sp)
   13554:	00060493          	mv	s1,a2
   13558:	00068913          	mv	s2,a3
   1355c:	0405ca63          	bltz	a1,135b0 <__swhatbuf_r+0x78>
   13560:	00810613          	add	a2,sp,8
   13564:	785060ef          	jal	1a4e8 <_fstat_r>
   13568:	04054463          	bltz	a0,135b0 <__swhatbuf_r+0x78>
   1356c:	00c12703          	lw	a4,12(sp)
   13570:	0000f7b7          	lui	a5,0xf
   13574:	06c12083          	lw	ra,108(sp)
   13578:	00e7f7b3          	and	a5,a5,a4
   1357c:	ffffe737          	lui	a4,0xffffe
   13580:	00e787b3          	add	a5,a5,a4
   13584:	06812403          	lw	s0,104(sp)
   13588:	0017b793          	seqz	a5,a5
   1358c:	00f92023          	sw	a5,0(s2) # f000 <__register_exitproc+0x94>
   13590:	40000713          	li	a4,1024
   13594:	00e4a023          	sw	a4,0(s1)
   13598:	00001537          	lui	a0,0x1
   1359c:	06412483          	lw	s1,100(sp)
   135a0:	06012903          	lw	s2,96(sp)
   135a4:	80050513          	add	a0,a0,-2048 # 800 <_start+0x44>
   135a8:	07010113          	add	sp,sp,112
   135ac:	00008067          	ret
   135b0:	00c45783          	lhu	a5,12(s0)
   135b4:	0807f793          	and	a5,a5,128
   135b8:	02078863          	beqz	a5,135e8 <__swhatbuf_r+0xb0>
   135bc:	06c12083          	lw	ra,108(sp)
   135c0:	06812403          	lw	s0,104(sp)
   135c4:	00000793          	li	a5,0
   135c8:	00f92023          	sw	a5,0(s2)
   135cc:	04000713          	li	a4,64
   135d0:	00e4a023          	sw	a4,0(s1)
   135d4:	06012903          	lw	s2,96(sp)
   135d8:	06412483          	lw	s1,100(sp)
   135dc:	00000513          	li	a0,0
   135e0:	07010113          	add	sp,sp,112
   135e4:	00008067          	ret
   135e8:	06c12083          	lw	ra,108(sp)
   135ec:	06812403          	lw	s0,104(sp)
   135f0:	00f92023          	sw	a5,0(s2)
   135f4:	40000713          	li	a4,1024
   135f8:	00e4a023          	sw	a4,0(s1)
   135fc:	06012903          	lw	s2,96(sp)
   13600:	06412483          	lw	s1,100(sp)
   13604:	00000513          	li	a0,0
   13608:	07010113          	add	sp,sp,112
   1360c:	00008067          	ret

00013610 <_malloc_r>:
   13610:	fd010113          	add	sp,sp,-48
   13614:	03212023          	sw	s2,32(sp)
   13618:	02112623          	sw	ra,44(sp)
   1361c:	02812423          	sw	s0,40(sp)
   13620:	02912223          	sw	s1,36(sp)
   13624:	01312e23          	sw	s3,28(sp)
   13628:	00b58793          	add	a5,a1,11
   1362c:	01600713          	li	a4,22
   13630:	00050913          	mv	s2,a0
   13634:	08f76263          	bltu	a4,a5,136b8 <_malloc_r+0xa8>
   13638:	01000793          	li	a5,16
   1363c:	20b7e663          	bltu	a5,a1,13848 <_malloc_r+0x238>
   13640:	cc4ed0ef          	jal	b04 <__malloc_lock>
   13644:	01800793          	li	a5,24
   13648:	00200593          	li	a1,2
   1364c:	01000493          	li	s1,16
   13650:	00012997          	auipc	s3,0x12
   13654:	fd898993          	add	s3,s3,-40 # 25628 <__malloc_av_>
   13658:	00f987b3          	add	a5,s3,a5
   1365c:	0047a403          	lw	s0,4(a5) # f004 <__register_exitproc+0x98>
   13660:	ff878713          	add	a4,a5,-8
   13664:	36e40263          	beq	s0,a4,139c8 <_malloc_r+0x3b8>
   13668:	00442783          	lw	a5,4(s0)
   1366c:	00c42683          	lw	a3,12(s0)
   13670:	00842603          	lw	a2,8(s0)
   13674:	ffc7f793          	and	a5,a5,-4
   13678:	00f407b3          	add	a5,s0,a5
   1367c:	0047a703          	lw	a4,4(a5)
   13680:	00d62623          	sw	a3,12(a2)
   13684:	00c6a423          	sw	a2,8(a3)
   13688:	00176713          	or	a4,a4,1
   1368c:	00090513          	mv	a0,s2
   13690:	00e7a223          	sw	a4,4(a5)
   13694:	da4ed0ef          	jal	c38 <__malloc_unlock>
   13698:	00840513          	add	a0,s0,8
   1369c:	02c12083          	lw	ra,44(sp)
   136a0:	02812403          	lw	s0,40(sp)
   136a4:	02412483          	lw	s1,36(sp)
   136a8:	02012903          	lw	s2,32(sp)
   136ac:	01c12983          	lw	s3,28(sp)
   136b0:	03010113          	add	sp,sp,48
   136b4:	00008067          	ret
   136b8:	ff87f493          	and	s1,a5,-8
   136bc:	1807c663          	bltz	a5,13848 <_malloc_r+0x238>
   136c0:	18b4e463          	bltu	s1,a1,13848 <_malloc_r+0x238>
   136c4:	c40ed0ef          	jal	b04 <__malloc_lock>
   136c8:	1f700793          	li	a5,503
   136cc:	4097f863          	bgeu	a5,s1,13adc <_malloc_r+0x4cc>
   136d0:	0094d793          	srl	a5,s1,0x9
   136d4:	18078263          	beqz	a5,13858 <_malloc_r+0x248>
   136d8:	00400713          	li	a4,4
   136dc:	34f76e63          	bltu	a4,a5,13a38 <_malloc_r+0x428>
   136e0:	0064d793          	srl	a5,s1,0x6
   136e4:	03978593          	add	a1,a5,57
   136e8:	03878813          	add	a6,a5,56
   136ec:	00359613          	sll	a2,a1,0x3
   136f0:	00012997          	auipc	s3,0x12
   136f4:	f3898993          	add	s3,s3,-200 # 25628 <__malloc_av_>
   136f8:	00c98633          	add	a2,s3,a2
   136fc:	00462403          	lw	s0,4(a2)
   13700:	ff860613          	add	a2,a2,-8
   13704:	02860863          	beq	a2,s0,13734 <_malloc_r+0x124>
   13708:	00f00513          	li	a0,15
   1370c:	0140006f          	j	13720 <_malloc_r+0x110>
   13710:	00c42683          	lw	a3,12(s0)
   13714:	2a075663          	bgez	a4,139c0 <_malloc_r+0x3b0>
   13718:	00d60e63          	beq	a2,a3,13734 <_malloc_r+0x124>
   1371c:	00068413          	mv	s0,a3
   13720:	00442783          	lw	a5,4(s0)
   13724:	ffc7f793          	and	a5,a5,-4
   13728:	40978733          	sub	a4,a5,s1
   1372c:	fee552e3          	bge	a0,a4,13710 <_malloc_r+0x100>
   13730:	00080593          	mv	a1,a6
   13734:	0109a403          	lw	s0,16(s3)
   13738:	00012897          	auipc	a7,0x12
   1373c:	ef888893          	add	a7,a7,-264 # 25630 <__malloc_av_+0x8>
   13740:	27140c63          	beq	s0,a7,139b8 <_malloc_r+0x3a8>
   13744:	00442783          	lw	a5,4(s0)
   13748:	00f00693          	li	a3,15
   1374c:	ffc7f793          	and	a5,a5,-4
   13750:	40978733          	sub	a4,a5,s1
   13754:	38e6ca63          	blt	a3,a4,13ae8 <_malloc_r+0x4d8>
   13758:	0119aa23          	sw	a7,20(s3)
   1375c:	0119a823          	sw	a7,16(s3)
   13760:	34075e63          	bgez	a4,13abc <_malloc_r+0x4ac>
   13764:	1ff00713          	li	a4,511
   13768:	0049a503          	lw	a0,4(s3)
   1376c:	26f76663          	bltu	a4,a5,139d8 <_malloc_r+0x3c8>
   13770:	ff87f713          	and	a4,a5,-8
   13774:	00870713          	add	a4,a4,8 # ffffe008 <__alt_data_end+0xfffb4c28>
   13778:	00e98733          	add	a4,s3,a4
   1377c:	00072683          	lw	a3,0(a4)
   13780:	0057d613          	srl	a2,a5,0x5
   13784:	00100793          	li	a5,1
   13788:	00c797b3          	sll	a5,a5,a2
   1378c:	00f56533          	or	a0,a0,a5
   13790:	ff870793          	add	a5,a4,-8
   13794:	00f42623          	sw	a5,12(s0)
   13798:	00d42423          	sw	a3,8(s0)
   1379c:	00a9a223          	sw	a0,4(s3)
   137a0:	00872023          	sw	s0,0(a4)
   137a4:	0086a623          	sw	s0,12(a3)
   137a8:	4025d793          	sra	a5,a1,0x2
   137ac:	00100613          	li	a2,1
   137b0:	00f61633          	sll	a2,a2,a5
   137b4:	0ac56a63          	bltu	a0,a2,13868 <_malloc_r+0x258>
   137b8:	00a677b3          	and	a5,a2,a0
   137bc:	02079463          	bnez	a5,137e4 <_malloc_r+0x1d4>
   137c0:	00161613          	sll	a2,a2,0x1
   137c4:	ffc5f593          	and	a1,a1,-4
   137c8:	00a677b3          	and	a5,a2,a0
   137cc:	00458593          	add	a1,a1,4
   137d0:	00079a63          	bnez	a5,137e4 <_malloc_r+0x1d4>
   137d4:	00161613          	sll	a2,a2,0x1
   137d8:	00a677b3          	and	a5,a2,a0
   137dc:	00458593          	add	a1,a1,4
   137e0:	fe078ae3          	beqz	a5,137d4 <_malloc_r+0x1c4>
   137e4:	00f00813          	li	a6,15
   137e8:	00359313          	sll	t1,a1,0x3
   137ec:	00698333          	add	t1,s3,t1
   137f0:	00030513          	mv	a0,t1
   137f4:	00c52783          	lw	a5,12(a0)
   137f8:	00058e13          	mv	t3,a1
   137fc:	26f50063          	beq	a0,a5,13a5c <_malloc_r+0x44c>
   13800:	0047a703          	lw	a4,4(a5)
   13804:	00078413          	mv	s0,a5
   13808:	00c7a783          	lw	a5,12(a5)
   1380c:	ffc77713          	and	a4,a4,-4
   13810:	409706b3          	sub	a3,a4,s1
   13814:	26d84063          	blt	a6,a3,13a74 <_malloc_r+0x464>
   13818:	fe06c2e3          	bltz	a3,137fc <_malloc_r+0x1ec>
   1381c:	00e40733          	add	a4,s0,a4
   13820:	00472683          	lw	a3,4(a4)
   13824:	00842603          	lw	a2,8(s0)
   13828:	00090513          	mv	a0,s2
   1382c:	0016e693          	or	a3,a3,1
   13830:	00d72223          	sw	a3,4(a4)
   13834:	00f62623          	sw	a5,12(a2)
   13838:	00c7a423          	sw	a2,8(a5)
   1383c:	bfced0ef          	jal	c38 <__malloc_unlock>
   13840:	00840513          	add	a0,s0,8
   13844:	e59ff06f          	j	1369c <_malloc_r+0x8c>
   13848:	00c00793          	li	a5,12
   1384c:	00f92023          	sw	a5,0(s2)
   13850:	00000513          	li	a0,0
   13854:	e49ff06f          	j	1369c <_malloc_r+0x8c>
   13858:	20000613          	li	a2,512
   1385c:	04000593          	li	a1,64
   13860:	03f00813          	li	a6,63
   13864:	e8dff06f          	j	136f0 <_malloc_r+0xe0>
   13868:	0089a403          	lw	s0,8(s3)
   1386c:	01612823          	sw	s6,16(sp)
   13870:	00442783          	lw	a5,4(s0)
   13874:	ffc7fb13          	and	s6,a5,-4
   13878:	009b6863          	bltu	s6,s1,13888 <_malloc_r+0x278>
   1387c:	409b0733          	sub	a4,s6,s1
   13880:	00f00793          	li	a5,15
   13884:	0ee7c863          	blt	a5,a4,13974 <_malloc_r+0x364>
   13888:	01912223          	sw	s9,4(sp)
   1388c:	83018c93          	add	s9,gp,-2000 # 25bcc <__malloc_sbrk_base>
   13890:	000ca703          	lw	a4,0(s9) # 1000 <OSEventPendMulti+0xec>
   13894:	01412c23          	sw	s4,24(sp)
   13898:	01512a23          	sw	s5,20(sp)
   1389c:	01712623          	sw	s7,12(sp)
   138a0:	00014a97          	auipc	s5,0x14
   138a4:	ff0aaa83          	lw	s5,-16(s5) # 27890 <__malloc_top_pad>
   138a8:	fff00793          	li	a5,-1
   138ac:	01640a33          	add	s4,s0,s6
   138b0:	01548ab3          	add	s5,s1,s5
   138b4:	3ef70263          	beq	a4,a5,13c98 <_malloc_r+0x688>
   138b8:	000017b7          	lui	a5,0x1
   138bc:	00f78793          	add	a5,a5,15 # 100f <OSEventPendMulti+0xfb>
   138c0:	00fa8ab3          	add	s5,s5,a5
   138c4:	fffff7b7          	lui	a5,0xfffff
   138c8:	00fafab3          	and	s5,s5,a5
   138cc:	000a8593          	mv	a1,s5
   138d0:	00090513          	mv	a0,s2
   138d4:	064020ef          	jal	15938 <_sbrk_r>
   138d8:	fff00793          	li	a5,-1
   138dc:	00050b93          	mv	s7,a0
   138e0:	46f50663          	beq	a0,a5,13d4c <_malloc_r+0x73c>
   138e4:	01812423          	sw	s8,8(sp)
   138e8:	25456863          	bltu	a0,s4,13b38 <_malloc_r+0x528>
   138ec:	0001bc17          	auipc	s8,0x1b
   138f0:	8c0c0c13          	add	s8,s8,-1856 # 2e1ac <__malloc_current_mallinfo>
   138f4:	000c2583          	lw	a1,0(s8)
   138f8:	00ba85b3          	add	a1,s5,a1
   138fc:	00bc2023          	sw	a1,0(s8)
   13900:	00058713          	mv	a4,a1
   13904:	2caa1063          	bne	s4,a0,13bc4 <_malloc_r+0x5b4>
   13908:	01451793          	sll	a5,a0,0x14
   1390c:	2a079c63          	bnez	a5,13bc4 <_malloc_r+0x5b4>
   13910:	0089ab83          	lw	s7,8(s3)
   13914:	015b07b3          	add	a5,s6,s5
   13918:	0017e793          	or	a5,a5,1
   1391c:	00fba223          	sw	a5,4(s7)
   13920:	00014717          	auipc	a4,0x14
   13924:	f6c70713          	add	a4,a4,-148 # 2788c <__malloc_max_sbrked_mem>
   13928:	00072683          	lw	a3,0(a4)
   1392c:	00b6f463          	bgeu	a3,a1,13934 <_malloc_r+0x324>
   13930:	00b72023          	sw	a1,0(a4)
   13934:	00014717          	auipc	a4,0x14
   13938:	f5470713          	add	a4,a4,-172 # 27888 <__malloc_max_total_mem>
   1393c:	00072683          	lw	a3,0(a4)
   13940:	00b6f463          	bgeu	a3,a1,13948 <_malloc_r+0x338>
   13944:	00b72023          	sw	a1,0(a4)
   13948:	00812c03          	lw	s8,8(sp)
   1394c:	000b8413          	mv	s0,s7
   13950:	ffc7f793          	and	a5,a5,-4
   13954:	40978733          	sub	a4,a5,s1
   13958:	3897ec63          	bltu	a5,s1,13cf0 <_malloc_r+0x6e0>
   1395c:	00f00793          	li	a5,15
   13960:	38e7d863          	bge	a5,a4,13cf0 <_malloc_r+0x6e0>
   13964:	01812a03          	lw	s4,24(sp)
   13968:	01412a83          	lw	s5,20(sp)
   1396c:	00c12b83          	lw	s7,12(sp)
   13970:	00412c83          	lw	s9,4(sp)
   13974:	0014e793          	or	a5,s1,1
   13978:	00f42223          	sw	a5,4(s0)
   1397c:	009404b3          	add	s1,s0,s1
   13980:	0099a423          	sw	s1,8(s3)
   13984:	00176713          	or	a4,a4,1
   13988:	00090513          	mv	a0,s2
   1398c:	00e4a223          	sw	a4,4(s1)
   13990:	aa8ed0ef          	jal	c38 <__malloc_unlock>
   13994:	02c12083          	lw	ra,44(sp)
   13998:	00840513          	add	a0,s0,8
   1399c:	02812403          	lw	s0,40(sp)
   139a0:	01012b03          	lw	s6,16(sp)
   139a4:	02412483          	lw	s1,36(sp)
   139a8:	02012903          	lw	s2,32(sp)
   139ac:	01c12983          	lw	s3,28(sp)
   139b0:	03010113          	add	sp,sp,48
   139b4:	00008067          	ret
   139b8:	0049a503          	lw	a0,4(s3)
   139bc:	dedff06f          	j	137a8 <_malloc_r+0x198>
   139c0:	00842603          	lw	a2,8(s0)
   139c4:	cb5ff06f          	j	13678 <_malloc_r+0x68>
   139c8:	00c7a403          	lw	s0,12(a5) # fffff00c <__alt_data_end+0xfffb5c2c>
   139cc:	00258593          	add	a1,a1,2
   139d0:	d68782e3          	beq	a5,s0,13734 <_malloc_r+0x124>
   139d4:	c95ff06f          	j	13668 <_malloc_r+0x58>
   139d8:	0097d713          	srl	a4,a5,0x9
   139dc:	00400693          	li	a3,4
   139e0:	14e6f263          	bgeu	a3,a4,13b24 <_malloc_r+0x514>
   139e4:	01400693          	li	a3,20
   139e8:	32e6e663          	bltu	a3,a4,13d14 <_malloc_r+0x704>
   139ec:	05c70613          	add	a2,a4,92
   139f0:	05b70693          	add	a3,a4,91
   139f4:	00361613          	sll	a2,a2,0x3
   139f8:	00c98633          	add	a2,s3,a2
   139fc:	00062703          	lw	a4,0(a2)
   13a00:	ff860613          	add	a2,a2,-8
   13a04:	00e61863          	bne	a2,a4,13a14 <_malloc_r+0x404>
   13a08:	2980006f          	j	13ca0 <_malloc_r+0x690>
   13a0c:	00872703          	lw	a4,8(a4)
   13a10:	00e60863          	beq	a2,a4,13a20 <_malloc_r+0x410>
   13a14:	00472683          	lw	a3,4(a4)
   13a18:	ffc6f693          	and	a3,a3,-4
   13a1c:	fed7e8e3          	bltu	a5,a3,13a0c <_malloc_r+0x3fc>
   13a20:	00c72603          	lw	a2,12(a4)
   13a24:	00c42623          	sw	a2,12(s0)
   13a28:	00e42423          	sw	a4,8(s0)
   13a2c:	00862423          	sw	s0,8(a2)
   13a30:	00872623          	sw	s0,12(a4)
   13a34:	d75ff06f          	j	137a8 <_malloc_r+0x198>
   13a38:	01400713          	li	a4,20
   13a3c:	10f77863          	bgeu	a4,a5,13b4c <_malloc_r+0x53c>
   13a40:	05400713          	li	a4,84
   13a44:	2ef76663          	bltu	a4,a5,13d30 <_malloc_r+0x720>
   13a48:	00c4d793          	srl	a5,s1,0xc
   13a4c:	06f78593          	add	a1,a5,111
   13a50:	06e78813          	add	a6,a5,110
   13a54:	00359613          	sll	a2,a1,0x3
   13a58:	c99ff06f          	j	136f0 <_malloc_r+0xe0>
   13a5c:	001e0e13          	add	t3,t3,1
   13a60:	003e7793          	and	a5,t3,3
   13a64:	00850513          	add	a0,a0,8
   13a68:	10078063          	beqz	a5,13b68 <_malloc_r+0x558>
   13a6c:	00c52783          	lw	a5,12(a0)
   13a70:	d8dff06f          	j	137fc <_malloc_r+0x1ec>
   13a74:	00842603          	lw	a2,8(s0)
   13a78:	0014e593          	or	a1,s1,1
   13a7c:	00b42223          	sw	a1,4(s0)
   13a80:	00f62623          	sw	a5,12(a2)
   13a84:	00c7a423          	sw	a2,8(a5)
   13a88:	009404b3          	add	s1,s0,s1
   13a8c:	0099aa23          	sw	s1,20(s3)
   13a90:	0099a823          	sw	s1,16(s3)
   13a94:	0016e793          	or	a5,a3,1
   13a98:	0114a623          	sw	a7,12(s1)
   13a9c:	0114a423          	sw	a7,8(s1)
   13aa0:	00f4a223          	sw	a5,4(s1)
   13aa4:	00e40733          	add	a4,s0,a4
   13aa8:	00090513          	mv	a0,s2
   13aac:	00d72023          	sw	a3,0(a4)
   13ab0:	988ed0ef          	jal	c38 <__malloc_unlock>
   13ab4:	00840513          	add	a0,s0,8
   13ab8:	be5ff06f          	j	1369c <_malloc_r+0x8c>
   13abc:	00f407b3          	add	a5,s0,a5
   13ac0:	0047a703          	lw	a4,4(a5)
   13ac4:	00090513          	mv	a0,s2
   13ac8:	00176713          	or	a4,a4,1
   13acc:	00e7a223          	sw	a4,4(a5)
   13ad0:	968ed0ef          	jal	c38 <__malloc_unlock>
   13ad4:	00840513          	add	a0,s0,8
   13ad8:	bc5ff06f          	j	1369c <_malloc_r+0x8c>
   13adc:	0034d593          	srl	a1,s1,0x3
   13ae0:	00848793          	add	a5,s1,8
   13ae4:	b6dff06f          	j	13650 <_malloc_r+0x40>
   13ae8:	0014e693          	or	a3,s1,1
   13aec:	00d42223          	sw	a3,4(s0)
   13af0:	009404b3          	add	s1,s0,s1
   13af4:	0099aa23          	sw	s1,20(s3)
   13af8:	0099a823          	sw	s1,16(s3)
   13afc:	00176693          	or	a3,a4,1
   13b00:	0114a623          	sw	a7,12(s1)
   13b04:	0114a423          	sw	a7,8(s1)
   13b08:	00d4a223          	sw	a3,4(s1)
   13b0c:	00f407b3          	add	a5,s0,a5
   13b10:	00090513          	mv	a0,s2
   13b14:	00e7a023          	sw	a4,0(a5)
   13b18:	920ed0ef          	jal	c38 <__malloc_unlock>
   13b1c:	00840513          	add	a0,s0,8
   13b20:	b7dff06f          	j	1369c <_malloc_r+0x8c>
   13b24:	0067d713          	srl	a4,a5,0x6
   13b28:	03970613          	add	a2,a4,57
   13b2c:	03870693          	add	a3,a4,56
   13b30:	00361613          	sll	a2,a2,0x3
   13b34:	ec5ff06f          	j	139f8 <_malloc_r+0x3e8>
   13b38:	07340c63          	beq	s0,s3,13bb0 <_malloc_r+0x5a0>
   13b3c:	0089a403          	lw	s0,8(s3)
   13b40:	00812c03          	lw	s8,8(sp)
   13b44:	00442783          	lw	a5,4(s0)
   13b48:	e09ff06f          	j	13950 <_malloc_r+0x340>
   13b4c:	05c78593          	add	a1,a5,92
   13b50:	05b78813          	add	a6,a5,91
   13b54:	00359613          	sll	a2,a1,0x3
   13b58:	b99ff06f          	j	136f0 <_malloc_r+0xe0>
   13b5c:	00832783          	lw	a5,8(t1)
   13b60:	fff58593          	add	a1,a1,-1
   13b64:	28679063          	bne	a5,t1,13de4 <_malloc_r+0x7d4>
   13b68:	0035f793          	and	a5,a1,3
   13b6c:	ff830313          	add	t1,t1,-8
   13b70:	fe0796e3          	bnez	a5,13b5c <_malloc_r+0x54c>
   13b74:	0049a703          	lw	a4,4(s3)
   13b78:	fff64793          	not	a5,a2
   13b7c:	00e7f7b3          	and	a5,a5,a4
   13b80:	00f9a223          	sw	a5,4(s3)
   13b84:	00161613          	sll	a2,a2,0x1
   13b88:	cec7e0e3          	bltu	a5,a2,13868 <_malloc_r+0x258>
   13b8c:	cc060ee3          	beqz	a2,13868 <_malloc_r+0x258>
   13b90:	00f67733          	and	a4,a2,a5
   13b94:	00071a63          	bnez	a4,13ba8 <_malloc_r+0x598>
   13b98:	00161613          	sll	a2,a2,0x1
   13b9c:	00f67733          	and	a4,a2,a5
   13ba0:	004e0e13          	add	t3,t3,4
   13ba4:	fe070ae3          	beqz	a4,13b98 <_malloc_r+0x588>
   13ba8:	000e0593          	mv	a1,t3
   13bac:	c3dff06f          	j	137e8 <_malloc_r+0x1d8>
   13bb0:	0001ac17          	auipc	s8,0x1a
   13bb4:	5fcc0c13          	add	s8,s8,1532 # 2e1ac <__malloc_current_mallinfo>
   13bb8:	000c2703          	lw	a4,0(s8)
   13bbc:	00ea8733          	add	a4,s5,a4
   13bc0:	00ec2023          	sw	a4,0(s8)
   13bc4:	000ca683          	lw	a3,0(s9)
   13bc8:	fff00793          	li	a5,-1
   13bcc:	18f68663          	beq	a3,a5,13d58 <_malloc_r+0x748>
   13bd0:	414b87b3          	sub	a5,s7,s4
   13bd4:	00e787b3          	add	a5,a5,a4
   13bd8:	00fc2023          	sw	a5,0(s8)
   13bdc:	007bfc93          	and	s9,s7,7
   13be0:	0c0c8c63          	beqz	s9,13cb8 <_malloc_r+0x6a8>
   13be4:	419b8bb3          	sub	s7,s7,s9
   13be8:	000017b7          	lui	a5,0x1
   13bec:	00878793          	add	a5,a5,8 # 1008 <OSEventPendMulti+0xf4>
   13bf0:	008b8b93          	add	s7,s7,8
   13bf4:	419785b3          	sub	a1,a5,s9
   13bf8:	015b8ab3          	add	s5,s7,s5
   13bfc:	415585b3          	sub	a1,a1,s5
   13c00:	01459593          	sll	a1,a1,0x14
   13c04:	0145da13          	srl	s4,a1,0x14
   13c08:	000a0593          	mv	a1,s4
   13c0c:	00090513          	mv	a0,s2
   13c10:	529010ef          	jal	15938 <_sbrk_r>
   13c14:	fff00793          	li	a5,-1
   13c18:	18f50063          	beq	a0,a5,13d98 <_malloc_r+0x788>
   13c1c:	41750533          	sub	a0,a0,s7
   13c20:	01450ab3          	add	s5,a0,s4
   13c24:	000c2703          	lw	a4,0(s8)
   13c28:	0179a423          	sw	s7,8(s3)
   13c2c:	001ae793          	or	a5,s5,1
   13c30:	00ea05b3          	add	a1,s4,a4
   13c34:	00bc2023          	sw	a1,0(s8)
   13c38:	00fba223          	sw	a5,4(s7)
   13c3c:	cf3402e3          	beq	s0,s3,13920 <_malloc_r+0x310>
   13c40:	00f00693          	li	a3,15
   13c44:	0b66f063          	bgeu	a3,s6,13ce4 <_malloc_r+0x6d4>
   13c48:	00442703          	lw	a4,4(s0)
   13c4c:	ff4b0793          	add	a5,s6,-12
   13c50:	ff87f793          	and	a5,a5,-8
   13c54:	00177713          	and	a4,a4,1
   13c58:	00f76733          	or	a4,a4,a5
   13c5c:	00e42223          	sw	a4,4(s0)
   13c60:	00500613          	li	a2,5
   13c64:	00f40733          	add	a4,s0,a5
   13c68:	00c72223          	sw	a2,4(a4)
   13c6c:	00c72423          	sw	a2,8(a4)
   13c70:	00f6e663          	bltu	a3,a5,13c7c <_malloc_r+0x66c>
   13c74:	004ba783          	lw	a5,4(s7)
   13c78:	ca9ff06f          	j	13920 <_malloc_r+0x310>
   13c7c:	00840593          	add	a1,s0,8
   13c80:	00090513          	mv	a0,s2
   13c84:	fd9fb0ef          	jal	fc5c <_free_r>
   13c88:	0089ab83          	lw	s7,8(s3)
   13c8c:	000c2583          	lw	a1,0(s8)
   13c90:	004ba783          	lw	a5,4(s7)
   13c94:	c8dff06f          	j	13920 <_malloc_r+0x310>
   13c98:	010a8a93          	add	s5,s5,16
   13c9c:	c31ff06f          	j	138cc <_malloc_r+0x2bc>
   13ca0:	4026d693          	sra	a3,a3,0x2
   13ca4:	00100793          	li	a5,1
   13ca8:	00d797b3          	sll	a5,a5,a3
   13cac:	00f56533          	or	a0,a0,a5
   13cb0:	00a9a223          	sw	a0,4(s3)
   13cb4:	d71ff06f          	j	13a24 <_malloc_r+0x414>
   13cb8:	015b85b3          	add	a1,s7,s5
   13cbc:	40b005b3          	neg	a1,a1
   13cc0:	01459593          	sll	a1,a1,0x14
   13cc4:	0145da13          	srl	s4,a1,0x14
   13cc8:	000a0593          	mv	a1,s4
   13ccc:	00090513          	mv	a0,s2
   13cd0:	469010ef          	jal	15938 <_sbrk_r>
   13cd4:	fff00793          	li	a5,-1
   13cd8:	f4f512e3          	bne	a0,a5,13c1c <_malloc_r+0x60c>
   13cdc:	00000a13          	li	s4,0
   13ce0:	f45ff06f          	j	13c24 <_malloc_r+0x614>
   13ce4:	00812c03          	lw	s8,8(sp)
   13ce8:	00100793          	li	a5,1
   13cec:	00fba223          	sw	a5,4(s7)
   13cf0:	00090513          	mv	a0,s2
   13cf4:	f45ec0ef          	jal	c38 <__malloc_unlock>
   13cf8:	00000513          	li	a0,0
   13cfc:	01812a03          	lw	s4,24(sp)
   13d00:	01412a83          	lw	s5,20(sp)
   13d04:	01012b03          	lw	s6,16(sp)
   13d08:	00c12b83          	lw	s7,12(sp)
   13d0c:	00412c83          	lw	s9,4(sp)
   13d10:	98dff06f          	j	1369c <_malloc_r+0x8c>
   13d14:	05400693          	li	a3,84
   13d18:	04e6e463          	bltu	a3,a4,13d60 <_malloc_r+0x750>
   13d1c:	00c7d713          	srl	a4,a5,0xc
   13d20:	06f70613          	add	a2,a4,111
   13d24:	06e70693          	add	a3,a4,110
   13d28:	00361613          	sll	a2,a2,0x3
   13d2c:	ccdff06f          	j	139f8 <_malloc_r+0x3e8>
   13d30:	15400713          	li	a4,340
   13d34:	04f76463          	bltu	a4,a5,13d7c <_malloc_r+0x76c>
   13d38:	00f4d793          	srl	a5,s1,0xf
   13d3c:	07878593          	add	a1,a5,120
   13d40:	07778813          	add	a6,a5,119
   13d44:	00359613          	sll	a2,a1,0x3
   13d48:	9a9ff06f          	j	136f0 <_malloc_r+0xe0>
   13d4c:	0089a403          	lw	s0,8(s3)
   13d50:	00442783          	lw	a5,4(s0)
   13d54:	bfdff06f          	j	13950 <_malloc_r+0x340>
   13d58:	017ca023          	sw	s7,0(s9)
   13d5c:	e81ff06f          	j	13bdc <_malloc_r+0x5cc>
   13d60:	15400693          	li	a3,340
   13d64:	04e6e463          	bltu	a3,a4,13dac <_malloc_r+0x79c>
   13d68:	00f7d713          	srl	a4,a5,0xf
   13d6c:	07870613          	add	a2,a4,120
   13d70:	07770693          	add	a3,a4,119
   13d74:	00361613          	sll	a2,a2,0x3
   13d78:	c81ff06f          	j	139f8 <_malloc_r+0x3e8>
   13d7c:	55400713          	li	a4,1364
   13d80:	04f76463          	bltu	a4,a5,13dc8 <_malloc_r+0x7b8>
   13d84:	0124d793          	srl	a5,s1,0x12
   13d88:	07d78593          	add	a1,a5,125
   13d8c:	07c78813          	add	a6,a5,124
   13d90:	00359613          	sll	a2,a1,0x3
   13d94:	95dff06f          	j	136f0 <_malloc_r+0xe0>
   13d98:	ff8c8c93          	add	s9,s9,-8
   13d9c:	019a8ab3          	add	s5,s5,s9
   13da0:	417a8ab3          	sub	s5,s5,s7
   13da4:	00000a13          	li	s4,0
   13da8:	e7dff06f          	j	13c24 <_malloc_r+0x614>
   13dac:	55400693          	li	a3,1364
   13db0:	02e6e463          	bltu	a3,a4,13dd8 <_malloc_r+0x7c8>
   13db4:	0127d713          	srl	a4,a5,0x12
   13db8:	07d70613          	add	a2,a4,125
   13dbc:	07c70693          	add	a3,a4,124
   13dc0:	00361613          	sll	a2,a2,0x3
   13dc4:	c35ff06f          	j	139f8 <_malloc_r+0x3e8>
   13dc8:	3f800613          	li	a2,1016
   13dcc:	07f00593          	li	a1,127
   13dd0:	07e00813          	li	a6,126
   13dd4:	91dff06f          	j	136f0 <_malloc_r+0xe0>
   13dd8:	3f800613          	li	a2,1016
   13ddc:	07e00693          	li	a3,126
   13de0:	c19ff06f          	j	139f8 <_malloc_r+0x3e8>
   13de4:	0049a783          	lw	a5,4(s3)
   13de8:	d9dff06f          	j	13b84 <_malloc_r+0x574>

00013dec <memchr>:
   13dec:	00357793          	and	a5,a0,3
   13df0:	0ff5f693          	zext.b	a3,a1
   13df4:	02078a63          	beqz	a5,13e28 <memchr+0x3c>
   13df8:	fff60793          	add	a5,a2,-1
   13dfc:	02060e63          	beqz	a2,13e38 <memchr+0x4c>
   13e00:	fff00613          	li	a2,-1
   13e04:	0180006f          	j	13e1c <memchr+0x30>
   13e08:	00150513          	add	a0,a0,1
   13e0c:	00357713          	and	a4,a0,3
   13e10:	00070e63          	beqz	a4,13e2c <memchr+0x40>
   13e14:	fff78793          	add	a5,a5,-1
   13e18:	02c78063          	beq	a5,a2,13e38 <memchr+0x4c>
   13e1c:	00054703          	lbu	a4,0(a0)
   13e20:	fed714e3          	bne	a4,a3,13e08 <memchr+0x1c>
   13e24:	00008067          	ret
   13e28:	00060793          	mv	a5,a2
   13e2c:	00300713          	li	a4,3
   13e30:	00f76863          	bltu	a4,a5,13e40 <memchr+0x54>
   13e34:	06079063          	bnez	a5,13e94 <memchr+0xa8>
   13e38:	00000513          	li	a0,0
   13e3c:	00008067          	ret
   13e40:	0ff5f593          	zext.b	a1,a1
   13e44:	00859713          	sll	a4,a1,0x8
   13e48:	00b705b3          	add	a1,a4,a1
   13e4c:	01059713          	sll	a4,a1,0x10
   13e50:	feff08b7          	lui	a7,0xfeff0
   13e54:	80808837          	lui	a6,0x80808
   13e58:	00e585b3          	add	a1,a1,a4
   13e5c:	eff88893          	add	a7,a7,-257 # fefefeff <__alt_data_end+0xfefa6b1f>
   13e60:	08080813          	add	a6,a6,128 # 80808080 <__alt_data_end+0x807beca0>
   13e64:	00300313          	li	t1,3
   13e68:	0100006f          	j	13e78 <memchr+0x8c>
   13e6c:	ffc78793          	add	a5,a5,-4
   13e70:	00450513          	add	a0,a0,4
   13e74:	fcf370e3          	bgeu	t1,a5,13e34 <memchr+0x48>
   13e78:	00052703          	lw	a4,0(a0)
   13e7c:	00e5c733          	xor	a4,a1,a4
   13e80:	01170633          	add	a2,a4,a7
   13e84:	fff74713          	not	a4,a4
   13e88:	00e67733          	and	a4,a2,a4
   13e8c:	01077733          	and	a4,a4,a6
   13e90:	fc070ee3          	beqz	a4,13e6c <memchr+0x80>
   13e94:	00f507b3          	add	a5,a0,a5
   13e98:	00c0006f          	j	13ea4 <memchr+0xb8>
   13e9c:	00150513          	add	a0,a0,1
   13ea0:	f8f50ce3          	beq	a0,a5,13e38 <memchr+0x4c>
   13ea4:	00054703          	lbu	a4,0(a0)
   13ea8:	fed71ae3          	bne	a4,a3,13e9c <memchr+0xb0>
   13eac:	00008067          	ret

00013eb0 <memmove>:
   13eb0:	02a5f663          	bgeu	a1,a0,13edc <memmove+0x2c>
   13eb4:	00c58733          	add	a4,a1,a2
   13eb8:	02e57263          	bgeu	a0,a4,13edc <memmove+0x2c>
   13ebc:	00c507b3          	add	a5,a0,a2
   13ec0:	04060663          	beqz	a2,13f0c <memmove+0x5c>
   13ec4:	fff74683          	lbu	a3,-1(a4)
   13ec8:	fff78793          	add	a5,a5,-1
   13ecc:	fff70713          	add	a4,a4,-1
   13ed0:	00d78023          	sb	a3,0(a5)
   13ed4:	fef518e3          	bne	a0,a5,13ec4 <memmove+0x14>
   13ed8:	00008067          	ret
   13edc:	00f00793          	li	a5,15
   13ee0:	02c7e863          	bltu	a5,a2,13f10 <memmove+0x60>
   13ee4:	00050793          	mv	a5,a0
   13ee8:	fff60693          	add	a3,a2,-1
   13eec:	0c060263          	beqz	a2,13fb0 <memmove+0x100>
   13ef0:	00168693          	add	a3,a3,1
   13ef4:	00d786b3          	add	a3,a5,a3
   13ef8:	0005c703          	lbu	a4,0(a1)
   13efc:	00178793          	add	a5,a5,1
   13f00:	00158593          	add	a1,a1,1
   13f04:	fee78fa3          	sb	a4,-1(a5)
   13f08:	fed798e3          	bne	a5,a3,13ef8 <memmove+0x48>
   13f0c:	00008067          	ret
   13f10:	00b567b3          	or	a5,a0,a1
   13f14:	0037f793          	and	a5,a5,3
   13f18:	08079663          	bnez	a5,13fa4 <memmove+0xf4>
   13f1c:	ff060893          	add	a7,a2,-16
   13f20:	ff08f893          	and	a7,a7,-16
   13f24:	01088893          	add	a7,a7,16
   13f28:	011506b3          	add	a3,a0,a7
   13f2c:	00058713          	mv	a4,a1
   13f30:	00050793          	mv	a5,a0
   13f34:	00072803          	lw	a6,0(a4)
   13f38:	01070713          	add	a4,a4,16
   13f3c:	01078793          	add	a5,a5,16
   13f40:	ff07a823          	sw	a6,-16(a5)
   13f44:	ff472803          	lw	a6,-12(a4)
   13f48:	ff07aa23          	sw	a6,-12(a5)
   13f4c:	ff872803          	lw	a6,-8(a4)
   13f50:	ff07ac23          	sw	a6,-8(a5)
   13f54:	ffc72803          	lw	a6,-4(a4)
   13f58:	ff07ae23          	sw	a6,-4(a5)
   13f5c:	fcd79ce3          	bne	a5,a3,13f34 <memmove+0x84>
   13f60:	00c67813          	and	a6,a2,12
   13f64:	011585b3          	add	a1,a1,a7
   13f68:	00f67713          	and	a4,a2,15
   13f6c:	04080463          	beqz	a6,13fb4 <memmove+0x104>
   13f70:	ffc70813          	add	a6,a4,-4
   13f74:	ffc87813          	and	a6,a6,-4
   13f78:	00480813          	add	a6,a6,4
   13f7c:	010687b3          	add	a5,a3,a6
   13f80:	00058713          	mv	a4,a1
   13f84:	00072883          	lw	a7,0(a4)
   13f88:	00468693          	add	a3,a3,4
   13f8c:	00470713          	add	a4,a4,4
   13f90:	ff16ae23          	sw	a7,-4(a3)
   13f94:	fef698e3          	bne	a3,a5,13f84 <memmove+0xd4>
   13f98:	00367613          	and	a2,a2,3
   13f9c:	010585b3          	add	a1,a1,a6
   13fa0:	f49ff06f          	j	13ee8 <memmove+0x38>
   13fa4:	fff60693          	add	a3,a2,-1
   13fa8:	00050793          	mv	a5,a0
   13fac:	f45ff06f          	j	13ef0 <memmove+0x40>
   13fb0:	00008067          	ret
   13fb4:	00070613          	mv	a2,a4
   13fb8:	f31ff06f          	j	13ee8 <memmove+0x38>

00013fbc <_Balloc>:
   13fbc:	04c52783          	lw	a5,76(a0)
   13fc0:	ff010113          	add	sp,sp,-16
   13fc4:	00812423          	sw	s0,8(sp)
   13fc8:	00912223          	sw	s1,4(sp)
   13fcc:	00112623          	sw	ra,12(sp)
   13fd0:	00050413          	mv	s0,a0
   13fd4:	00058493          	mv	s1,a1
   13fd8:	02078c63          	beqz	a5,14010 <_Balloc+0x54>
   13fdc:	00249713          	sll	a4,s1,0x2
   13fe0:	00e787b3          	add	a5,a5,a4
   13fe4:	0007a503          	lw	a0,0(a5)
   13fe8:	04050463          	beqz	a0,14030 <_Balloc+0x74>
   13fec:	00052703          	lw	a4,0(a0)
   13ff0:	00e7a023          	sw	a4,0(a5)
   13ff4:	00052823          	sw	zero,16(a0)
   13ff8:	00052623          	sw	zero,12(a0)
   13ffc:	00c12083          	lw	ra,12(sp)
   14000:	00812403          	lw	s0,8(sp)
   14004:	00412483          	lw	s1,4(sp)
   14008:	01010113          	add	sp,sp,16
   1400c:	00008067          	ret
   14010:	02100613          	li	a2,33
   14014:	00400593          	li	a1,4
   14018:	651050ef          	jal	19e68 <_calloc_r>
   1401c:	04a42623          	sw	a0,76(s0)
   14020:	00050793          	mv	a5,a0
   14024:	fa051ce3          	bnez	a0,13fdc <_Balloc+0x20>
   14028:	00000513          	li	a0,0
   1402c:	fd1ff06f          	j	13ffc <_Balloc+0x40>
   14030:	01212023          	sw	s2,0(sp)
   14034:	00100913          	li	s2,1
   14038:	00991933          	sll	s2,s2,s1
   1403c:	00590613          	add	a2,s2,5
   14040:	00261613          	sll	a2,a2,0x2
   14044:	00100593          	li	a1,1
   14048:	00040513          	mv	a0,s0
   1404c:	61d050ef          	jal	19e68 <_calloc_r>
   14050:	00050a63          	beqz	a0,14064 <_Balloc+0xa8>
   14054:	01252423          	sw	s2,8(a0)
   14058:	00952223          	sw	s1,4(a0)
   1405c:	00012903          	lw	s2,0(sp)
   14060:	f95ff06f          	j	13ff4 <_Balloc+0x38>
   14064:	00012903          	lw	s2,0(sp)
   14068:	00000513          	li	a0,0
   1406c:	f91ff06f          	j	13ffc <_Balloc+0x40>

00014070 <_Bfree>:
   14070:	02058063          	beqz	a1,14090 <_Bfree+0x20>
   14074:	0045a703          	lw	a4,4(a1)
   14078:	04c52783          	lw	a5,76(a0)
   1407c:	00271713          	sll	a4,a4,0x2
   14080:	00e787b3          	add	a5,a5,a4
   14084:	0007a703          	lw	a4,0(a5)
   14088:	00e5a023          	sw	a4,0(a1)
   1408c:	00b7a023          	sw	a1,0(a5)
   14090:	00008067          	ret

00014094 <__multadd>:
   14094:	fd010113          	add	sp,sp,-48
   14098:	01412c23          	sw	s4,24(sp)
   1409c:	0105aa03          	lw	s4,16(a1)
   140a0:	01912223          	sw	s9,4(sp)
   140a4:	00010cb7          	lui	s9,0x10
   140a8:	02912223          	sw	s1,36(sp)
   140ac:	03212023          	sw	s2,32(sp)
   140b0:	01312e23          	sw	s3,28(sp)
   140b4:	01512a23          	sw	s5,20(sp)
   140b8:	01612823          	sw	s6,16(sp)
   140bc:	01712623          	sw	s7,12(sp)
   140c0:	02112623          	sw	ra,44(sp)
   140c4:	02812423          	sw	s0,40(sp)
   140c8:	01812423          	sw	s8,8(sp)
   140cc:	00058a93          	mv	s5,a1
   140d0:	00050b13          	mv	s6,a0
   140d4:	00060993          	mv	s3,a2
   140d8:	00068493          	mv	s1,a3
   140dc:	01458913          	add	s2,a1,20
   140e0:	00000b93          	li	s7,0
   140e4:	fffc8c93          	add	s9,s9,-1 # ffff <__sfvwrite_r+0x9b>
   140e8:	00092c03          	lw	s8,0(s2)
   140ec:	00098593          	mv	a1,s3
   140f0:	00490913          	add	s2,s2,4
   140f4:	019c7533          	and	a0,s8,s9
   140f8:	23d0d0ef          	jal	21b34 <__mulsi3>
   140fc:	00050413          	mv	s0,a0
   14100:	00098593          	mv	a1,s3
   14104:	010c5513          	srl	a0,s8,0x10
   14108:	00940433          	add	s0,s0,s1
   1410c:	2290d0ef          	jal	21b34 <__mulsi3>
   14110:	01045793          	srl	a5,s0,0x10
   14114:	00f50533          	add	a0,a0,a5
   14118:	01051793          	sll	a5,a0,0x10
   1411c:	01947433          	and	s0,s0,s9
   14120:	008787b3          	add	a5,a5,s0
   14124:	fef92e23          	sw	a5,-4(s2)
   14128:	001b8b93          	add	s7,s7,1
   1412c:	01055493          	srl	s1,a0,0x10
   14130:	fb4bcce3          	blt	s7,s4,140e8 <__multadd+0x54>
   14134:	02048263          	beqz	s1,14158 <__multadd+0xc4>
   14138:	008aa783          	lw	a5,8(s5)
   1413c:	04fa5a63          	bge	s4,a5,14190 <__multadd+0xfc>
   14140:	004a0793          	add	a5,s4,4
   14144:	00279793          	sll	a5,a5,0x2
   14148:	00fa87b3          	add	a5,s5,a5
   1414c:	0097a223          	sw	s1,4(a5)
   14150:	001a0a13          	add	s4,s4,1
   14154:	014aa823          	sw	s4,16(s5)
   14158:	02c12083          	lw	ra,44(sp)
   1415c:	02812403          	lw	s0,40(sp)
   14160:	02412483          	lw	s1,36(sp)
   14164:	02012903          	lw	s2,32(sp)
   14168:	01c12983          	lw	s3,28(sp)
   1416c:	01812a03          	lw	s4,24(sp)
   14170:	01012b03          	lw	s6,16(sp)
   14174:	00c12b83          	lw	s7,12(sp)
   14178:	00812c03          	lw	s8,8(sp)
   1417c:	00412c83          	lw	s9,4(sp)
   14180:	000a8513          	mv	a0,s5
   14184:	01412a83          	lw	s5,20(sp)
   14188:	03010113          	add	sp,sp,48
   1418c:	00008067          	ret
   14190:	004aa583          	lw	a1,4(s5)
   14194:	000b0513          	mv	a0,s6
   14198:	00158593          	add	a1,a1,1
   1419c:	e21ff0ef          	jal	13fbc <_Balloc>
   141a0:	00050413          	mv	s0,a0
   141a4:	04050c63          	beqz	a0,141fc <__multadd+0x168>
   141a8:	010aa603          	lw	a2,16(s5)
   141ac:	00ca8593          	add	a1,s5,12
   141b0:	00c50513          	add	a0,a0,12
   141b4:	00260613          	add	a2,a2,2
   141b8:	00261613          	sll	a2,a2,0x2
   141bc:	b91f70ef          	jal	bd4c <memcpy>
   141c0:	004aa703          	lw	a4,4(s5)
   141c4:	04cb2783          	lw	a5,76(s6)
   141c8:	00271713          	sll	a4,a4,0x2
   141cc:	00e787b3          	add	a5,a5,a4
   141d0:	0007a703          	lw	a4,0(a5)
   141d4:	00eaa023          	sw	a4,0(s5)
   141d8:	0157a023          	sw	s5,0(a5)
   141dc:	004a0793          	add	a5,s4,4
   141e0:	00040a93          	mv	s5,s0
   141e4:	00279793          	sll	a5,a5,0x2
   141e8:	00fa87b3          	add	a5,s5,a5
   141ec:	0097a223          	sw	s1,4(a5)
   141f0:	001a0a13          	add	s4,s4,1
   141f4:	014aa823          	sw	s4,16(s5)
   141f8:	f61ff06f          	j	14158 <__multadd+0xc4>
   141fc:	0000f697          	auipc	a3,0xf
   14200:	f2868693          	add	a3,a3,-216 # 23124 <OSUnMapTbl+0x1c0>
   14204:	00000613          	li	a2,0
   14208:	0b500593          	li	a1,181
   1420c:	0000f517          	auipc	a0,0xf
   14210:	f6850513          	add	a0,a0,-152 # 23174 <OSUnMapTbl+0x210>
   14214:	3ed050ef          	jal	19e00 <__assert_func>

00014218 <__s2b>:
   14218:	fe010113          	add	sp,sp,-32
   1421c:	00812c23          	sw	s0,24(sp)
   14220:	01212823          	sw	s2,16(sp)
   14224:	00058413          	mv	s0,a1
   14228:	00050913          	mv	s2,a0
   1422c:	00900593          	li	a1,9
   14230:	00868513          	add	a0,a3,8
   14234:	00912a23          	sw	s1,20(sp)
   14238:	01312623          	sw	s3,12(sp)
   1423c:	01412423          	sw	s4,8(sp)
   14240:	00112e23          	sw	ra,28(sp)
   14244:	00068493          	mv	s1,a3
   14248:	00060993          	mv	s3,a2
   1424c:	00070a13          	mv	s4,a4
   14250:	1090d0ef          	jal	21b58 <__divsi3>
   14254:	00900793          	li	a5,9
   14258:	0c97da63          	bge	a5,s1,1432c <__s2b+0x114>
   1425c:	00100793          	li	a5,1
   14260:	00000593          	li	a1,0
   14264:	00179793          	sll	a5,a5,0x1
   14268:	00158593          	add	a1,a1,1
   1426c:	fea7cce3          	blt	a5,a0,14264 <__s2b+0x4c>
   14270:	00090513          	mv	a0,s2
   14274:	d49ff0ef          	jal	13fbc <_Balloc>
   14278:	00050593          	mv	a1,a0
   1427c:	0a050c63          	beqz	a0,14334 <__s2b+0x11c>
   14280:	00100793          	li	a5,1
   14284:	00f52823          	sw	a5,16(a0)
   14288:	01452a23          	sw	s4,20(a0)
   1428c:	00900793          	li	a5,9
   14290:	0937d863          	bge	a5,s3,14320 <__s2b+0x108>
   14294:	01512223          	sw	s5,4(sp)
   14298:	00940a93          	add	s5,s0,9
   1429c:	01340a33          	add	s4,s0,s3
   142a0:	000a8413          	mv	s0,s5
   142a4:	00044683          	lbu	a3,0(s0)
   142a8:	00a00613          	li	a2,10
   142ac:	00090513          	mv	a0,s2
   142b0:	fd068693          	add	a3,a3,-48
   142b4:	de1ff0ef          	jal	14094 <__multadd>
   142b8:	00140413          	add	s0,s0,1
   142bc:	00050593          	mv	a1,a0
   142c0:	ff4412e3          	bne	s0,s4,142a4 <__s2b+0x8c>
   142c4:	ff898413          	add	s0,s3,-8
   142c8:	008a8433          	add	s0,s5,s0
   142cc:	00412a83          	lw	s5,4(sp)
   142d0:	0299d663          	bge	s3,s1,142fc <__s2b+0xe4>
   142d4:	413484b3          	sub	s1,s1,s3
   142d8:	009404b3          	add	s1,s0,s1
   142dc:	00044683          	lbu	a3,0(s0)
   142e0:	00a00613          	li	a2,10
   142e4:	00090513          	mv	a0,s2
   142e8:	fd068693          	add	a3,a3,-48
   142ec:	da9ff0ef          	jal	14094 <__multadd>
   142f0:	00140413          	add	s0,s0,1
   142f4:	00050593          	mv	a1,a0
   142f8:	fe9412e3          	bne	s0,s1,142dc <__s2b+0xc4>
   142fc:	01c12083          	lw	ra,28(sp)
   14300:	01812403          	lw	s0,24(sp)
   14304:	01412483          	lw	s1,20(sp)
   14308:	01012903          	lw	s2,16(sp)
   1430c:	00c12983          	lw	s3,12(sp)
   14310:	00812a03          	lw	s4,8(sp)
   14314:	00058513          	mv	a0,a1
   14318:	02010113          	add	sp,sp,32
   1431c:	00008067          	ret
   14320:	00a40413          	add	s0,s0,10
   14324:	00900993          	li	s3,9
   14328:	fa9ff06f          	j	142d0 <__s2b+0xb8>
   1432c:	00000593          	li	a1,0
   14330:	f41ff06f          	j	14270 <__s2b+0x58>
   14334:	0000f697          	auipc	a3,0xf
   14338:	df068693          	add	a3,a3,-528 # 23124 <OSUnMapTbl+0x1c0>
   1433c:	00000613          	li	a2,0
   14340:	0ce00593          	li	a1,206
   14344:	0000f517          	auipc	a0,0xf
   14348:	e3050513          	add	a0,a0,-464 # 23174 <OSUnMapTbl+0x210>
   1434c:	01512223          	sw	s5,4(sp)
   14350:	2b1050ef          	jal	19e00 <__assert_func>

00014354 <__hi0bits>:
   14354:	00050793          	mv	a5,a0
   14358:	00010737          	lui	a4,0x10
   1435c:	00000513          	li	a0,0
   14360:	00e7f663          	bgeu	a5,a4,1436c <__hi0bits+0x18>
   14364:	01079793          	sll	a5,a5,0x10
   14368:	01000513          	li	a0,16
   1436c:	01000737          	lui	a4,0x1000
   14370:	00e7f663          	bgeu	a5,a4,1437c <__hi0bits+0x28>
   14374:	00850513          	add	a0,a0,8
   14378:	00879793          	sll	a5,a5,0x8
   1437c:	10000737          	lui	a4,0x10000
   14380:	00e7f663          	bgeu	a5,a4,1438c <__hi0bits+0x38>
   14384:	00450513          	add	a0,a0,4
   14388:	00479793          	sll	a5,a5,0x4
   1438c:	40000737          	lui	a4,0x40000
   14390:	00e7ea63          	bltu	a5,a4,143a4 <__hi0bits+0x50>
   14394:	fff7c793          	not	a5,a5
   14398:	01f7d793          	srl	a5,a5,0x1f
   1439c:	00f50533          	add	a0,a0,a5
   143a0:	00008067          	ret
   143a4:	00279793          	sll	a5,a5,0x2
   143a8:	0007ca63          	bltz	a5,143bc <__hi0bits+0x68>
   143ac:	00179713          	sll	a4,a5,0x1
   143b0:	00074a63          	bltz	a4,143c4 <__hi0bits+0x70>
   143b4:	02000513          	li	a0,32
   143b8:	00008067          	ret
   143bc:	00250513          	add	a0,a0,2
   143c0:	00008067          	ret
   143c4:	00350513          	add	a0,a0,3
   143c8:	00008067          	ret

000143cc <__lo0bits>:
   143cc:	00052783          	lw	a5,0(a0)
   143d0:	00050713          	mv	a4,a0
   143d4:	0077f693          	and	a3,a5,7
   143d8:	02068463          	beqz	a3,14400 <__lo0bits+0x34>
   143dc:	0017f693          	and	a3,a5,1
   143e0:	00000513          	li	a0,0
   143e4:	04069e63          	bnez	a3,14440 <__lo0bits+0x74>
   143e8:	0027f693          	and	a3,a5,2
   143ec:	0a068863          	beqz	a3,1449c <__lo0bits+0xd0>
   143f0:	0017d793          	srl	a5,a5,0x1
   143f4:	00f72023          	sw	a5,0(a4) # 40000000 <__alt_data_end+0x3ffb6c20>
   143f8:	00100513          	li	a0,1
   143fc:	00008067          	ret
   14400:	01079693          	sll	a3,a5,0x10
   14404:	0106d693          	srl	a3,a3,0x10
   14408:	00000513          	li	a0,0
   1440c:	06068e63          	beqz	a3,14488 <__lo0bits+0xbc>
   14410:	0ff7f693          	zext.b	a3,a5
   14414:	06068063          	beqz	a3,14474 <__lo0bits+0xa8>
   14418:	00f7f693          	and	a3,a5,15
   1441c:	04068263          	beqz	a3,14460 <__lo0bits+0x94>
   14420:	0037f693          	and	a3,a5,3
   14424:	02068463          	beqz	a3,1444c <__lo0bits+0x80>
   14428:	0017f693          	and	a3,a5,1
   1442c:	00069c63          	bnez	a3,14444 <__lo0bits+0x78>
   14430:	0017d793          	srl	a5,a5,0x1
   14434:	00150513          	add	a0,a0,1
   14438:	00079663          	bnez	a5,14444 <__lo0bits+0x78>
   1443c:	02000513          	li	a0,32
   14440:	00008067          	ret
   14444:	00f72023          	sw	a5,0(a4)
   14448:	00008067          	ret
   1444c:	0027d793          	srl	a5,a5,0x2
   14450:	0017f693          	and	a3,a5,1
   14454:	00250513          	add	a0,a0,2
   14458:	fe0696e3          	bnez	a3,14444 <__lo0bits+0x78>
   1445c:	fd5ff06f          	j	14430 <__lo0bits+0x64>
   14460:	0047d793          	srl	a5,a5,0x4
   14464:	0037f693          	and	a3,a5,3
   14468:	00450513          	add	a0,a0,4
   1446c:	fa069ee3          	bnez	a3,14428 <__lo0bits+0x5c>
   14470:	fddff06f          	j	1444c <__lo0bits+0x80>
   14474:	0087d793          	srl	a5,a5,0x8
   14478:	00f7f693          	and	a3,a5,15
   1447c:	00850513          	add	a0,a0,8
   14480:	fa0690e3          	bnez	a3,14420 <__lo0bits+0x54>
   14484:	fddff06f          	j	14460 <__lo0bits+0x94>
   14488:	0107d793          	srl	a5,a5,0x10
   1448c:	0ff7f693          	zext.b	a3,a5
   14490:	01000513          	li	a0,16
   14494:	f80692e3          	bnez	a3,14418 <__lo0bits+0x4c>
   14498:	fddff06f          	j	14474 <__lo0bits+0xa8>
   1449c:	0027d793          	srl	a5,a5,0x2
   144a0:	00f72023          	sw	a5,0(a4)
   144a4:	00200513          	li	a0,2
   144a8:	00008067          	ret

000144ac <__i2b>:
   144ac:	04c52783          	lw	a5,76(a0)
   144b0:	ff010113          	add	sp,sp,-16
   144b4:	00812423          	sw	s0,8(sp)
   144b8:	00912223          	sw	s1,4(sp)
   144bc:	00112623          	sw	ra,12(sp)
   144c0:	00050413          	mv	s0,a0
   144c4:	00058493          	mv	s1,a1
   144c8:	02078c63          	beqz	a5,14500 <__i2b+0x54>
   144cc:	0047a503          	lw	a0,4(a5)
   144d0:	06050263          	beqz	a0,14534 <__i2b+0x88>
   144d4:	00052703          	lw	a4,0(a0)
   144d8:	00e7a223          	sw	a4,4(a5)
   144dc:	00c12083          	lw	ra,12(sp)
   144e0:	00812403          	lw	s0,8(sp)
   144e4:	00100793          	li	a5,1
   144e8:	00952a23          	sw	s1,20(a0)
   144ec:	00052623          	sw	zero,12(a0)
   144f0:	00f52823          	sw	a5,16(a0)
   144f4:	00412483          	lw	s1,4(sp)
   144f8:	01010113          	add	sp,sp,16
   144fc:	00008067          	ret
   14500:	02100613          	li	a2,33
   14504:	00400593          	li	a1,4
   14508:	161050ef          	jal	19e68 <_calloc_r>
   1450c:	04a42623          	sw	a0,76(s0)
   14510:	00050793          	mv	a5,a0
   14514:	fa051ce3          	bnez	a0,144cc <__i2b+0x20>
   14518:	0000f697          	auipc	a3,0xf
   1451c:	c0c68693          	add	a3,a3,-1012 # 23124 <OSUnMapTbl+0x1c0>
   14520:	00000613          	li	a2,0
   14524:	14000593          	li	a1,320
   14528:	0000f517          	auipc	a0,0xf
   1452c:	c4c50513          	add	a0,a0,-948 # 23174 <OSUnMapTbl+0x210>
   14530:	0d1050ef          	jal	19e00 <__assert_func>
   14534:	01c00613          	li	a2,28
   14538:	00100593          	li	a1,1
   1453c:	00040513          	mv	a0,s0
   14540:	129050ef          	jal	19e68 <_calloc_r>
   14544:	fc050ae3          	beqz	a0,14518 <__i2b+0x6c>
   14548:	00100793          	li	a5,1
   1454c:	00f52223          	sw	a5,4(a0)
   14550:	00200793          	li	a5,2
   14554:	00f52423          	sw	a5,8(a0)
   14558:	f85ff06f          	j	144dc <__i2b+0x30>

0001455c <__multiply>:
   1455c:	fb010113          	add	sp,sp,-80
   14560:	03312e23          	sw	s3,60(sp)
   14564:	03812423          	sw	s8,40(sp)
   14568:	01062983          	lw	s3,16(a2)
   1456c:	0105ac03          	lw	s8,16(a1)
   14570:	04812423          	sw	s0,72(sp)
   14574:	03412c23          	sw	s4,56(sp)
   14578:	04112623          	sw	ra,76(sp)
   1457c:	03712623          	sw	s7,44(sp)
   14580:	00058a13          	mv	s4,a1
   14584:	00060413          	mv	s0,a2
   14588:	013c4c63          	blt	s8,s3,145a0 <__multiply+0x44>
   1458c:	00098713          	mv	a4,s3
   14590:	00058413          	mv	s0,a1
   14594:	000c0993          	mv	s3,s8
   14598:	00060a13          	mv	s4,a2
   1459c:	00070c13          	mv	s8,a4
   145a0:	00842783          	lw	a5,8(s0)
   145a4:	00442583          	lw	a1,4(s0)
   145a8:	01898bb3          	add	s7,s3,s8
   145ac:	0177a7b3          	slt	a5,a5,s7
   145b0:	00f585b3          	add	a1,a1,a5
   145b4:	a09ff0ef          	jal	13fbc <_Balloc>
   145b8:	00a12623          	sw	a0,12(sp)
   145bc:	22050863          	beqz	a0,147ec <__multiply+0x290>
   145c0:	00c12783          	lw	a5,12(sp)
   145c4:	03512a23          	sw	s5,52(sp)
   145c8:	03612823          	sw	s6,48(sp)
   145cc:	002b9a93          	sll	s5,s7,0x2
   145d0:	01478b13          	add	s6,a5,20
   145d4:	015b0ab3          	add	s5,s6,s5
   145d8:	000b0793          	mv	a5,s6
   145dc:	015b7863          	bgeu	s6,s5,145ec <__multiply+0x90>
   145e0:	0007a023          	sw	zero,0(a5)
   145e4:	00478793          	add	a5,a5,4
   145e8:	ff57ece3          	bltu	a5,s5,145e0 <__multiply+0x84>
   145ec:	014a0a13          	add	s4,s4,20
   145f0:	002c1c13          	sll	s8,s8,0x2
   145f4:	01440793          	add	a5,s0,20
   145f8:	018a0733          	add	a4,s4,s8
   145fc:	00299993          	sll	s3,s3,0x2
   14600:	00f12423          	sw	a5,8(sp)
   14604:	00e12023          	sw	a4,0(sp)
   14608:	013789b3          	add	s3,a5,s3
   1460c:	16ea7c63          	bgeu	s4,a4,14784 <__multiply+0x228>
   14610:	00400713          	li	a4,4
   14614:	04912223          	sw	s1,68(sp)
   14618:	05212023          	sw	s2,64(sp)
   1461c:	03912223          	sw	s9,36(sp)
   14620:	03a12023          	sw	s10,32(sp)
   14624:	01b12e23          	sw	s11,28(sp)
   14628:	01540793          	add	a5,s0,21
   1462c:	00e12223          	sw	a4,4(sp)
   14630:	1af9f263          	bgeu	s3,a5,147d4 <__multiply+0x278>
   14634:	00010437          	lui	s0,0x10
   14638:	fff40413          	add	s0,s0,-1 # ffff <__sfvwrite_r+0x9b>
   1463c:	01c0006f          	j	14658 <__multiply+0xfc>
   14640:	01095913          	srl	s2,s2,0x10
   14644:	0a091063          	bnez	s2,146e4 <__multiply+0x188>
   14648:	00012783          	lw	a5,0(sp)
   1464c:	004a0a13          	add	s4,s4,4
   14650:	004b0b13          	add	s6,s6,4
   14654:	10fa7e63          	bgeu	s4,a5,14770 <__multiply+0x214>
   14658:	000a2903          	lw	s2,0(s4)
   1465c:	008974b3          	and	s1,s2,s0
   14660:	fe0480e3          	beqz	s1,14640 <__multiply+0xe4>
   14664:	00812c83          	lw	s9,8(sp)
   14668:	000b0d13          	mv	s10,s6
   1466c:	00000c13          	li	s8,0
   14670:	000cad83          	lw	s11,0(s9)
   14674:	000d2903          	lw	s2,0(s10)
   14678:	00048593          	mv	a1,s1
   1467c:	008df533          	and	a0,s11,s0
   14680:	4b40d0ef          	jal	21b34 <__mulsi3>
   14684:	00897733          	and	a4,s2,s0
   14688:	00e50733          	add	a4,a0,a4
   1468c:	00048593          	mv	a1,s1
   14690:	010dd513          	srl	a0,s11,0x10
   14694:	01870c33          	add	s8,a4,s8
   14698:	01095913          	srl	s2,s2,0x10
   1469c:	4980d0ef          	jal	21b34 <__mulsi3>
   146a0:	010c5713          	srl	a4,s8,0x10
   146a4:	01250533          	add	a0,a0,s2
   146a8:	00e50533          	add	a0,a0,a4
   146ac:	008c77b3          	and	a5,s8,s0
   146b0:	01051713          	sll	a4,a0,0x10
   146b4:	004d0d13          	add	s10,s10,4
   146b8:	00f767b3          	or	a5,a4,a5
   146bc:	004c8c93          	add	s9,s9,4
   146c0:	fefd2e23          	sw	a5,-4(s10)
   146c4:	01055c13          	srl	s8,a0,0x10
   146c8:	fb3ce4e3          	bltu	s9,s3,14670 <__multiply+0x114>
   146cc:	00412783          	lw	a5,4(sp)
   146d0:	00fb0733          	add	a4,s6,a5
   146d4:	01872023          	sw	s8,0(a4)
   146d8:	000a2903          	lw	s2,0(s4)
   146dc:	01095913          	srl	s2,s2,0x10
   146e0:	f60904e3          	beqz	s2,14648 <__multiply+0xec>
   146e4:	000b2c83          	lw	s9,0(s6)
   146e8:	00812d03          	lw	s10,8(sp)
   146ec:	000b0c13          	mv	s8,s6
   146f0:	000c8493          	mv	s1,s9
   146f4:	00000d93          	li	s11,0
   146f8:	000d2503          	lw	a0,0(s10)
   146fc:	00090593          	mv	a1,s2
   14700:	0104d493          	srl	s1,s1,0x10
   14704:	00857533          	and	a0,a0,s0
   14708:	42c0d0ef          	jal	21b34 <__mulsi3>
   1470c:	01b50733          	add	a4,a0,s11
   14710:	00970db3          	add	s11,a4,s1
   14714:	010d9593          	sll	a1,s11,0x10
   14718:	008cf7b3          	and	a5,s9,s0
   1471c:	00f5e7b3          	or	a5,a1,a5
   14720:	00fc2023          	sw	a5,0(s8)
   14724:	002d5503          	lhu	a0,2(s10)
   14728:	004c2483          	lw	s1,4(s8)
   1472c:	00090593          	mv	a1,s2
   14730:	4040d0ef          	jal	21b34 <__mulsi3>
   14734:	0084f7b3          	and	a5,s1,s0
   14738:	010dd713          	srl	a4,s11,0x10
   1473c:	00f507b3          	add	a5,a0,a5
   14740:	004d0d13          	add	s10,s10,4
   14744:	00e78cb3          	add	s9,a5,a4
   14748:	004c0c13          	add	s8,s8,4
   1474c:	010cdd93          	srl	s11,s9,0x10
   14750:	fb3d64e3          	bltu	s10,s3,146f8 <__multiply+0x19c>
   14754:	00412783          	lw	a5,4(sp)
   14758:	004a0a13          	add	s4,s4,4
   1475c:	00fb0733          	add	a4,s6,a5
   14760:	00012783          	lw	a5,0(sp)
   14764:	01972023          	sw	s9,0(a4)
   14768:	004b0b13          	add	s6,s6,4
   1476c:	eefa66e3          	bltu	s4,a5,14658 <__multiply+0xfc>
   14770:	04412483          	lw	s1,68(sp)
   14774:	04012903          	lw	s2,64(sp)
   14778:	02412c83          	lw	s9,36(sp)
   1477c:	02012d03          	lw	s10,32(sp)
   14780:	01c12d83          	lw	s11,28(sp)
   14784:	01704863          	bgtz	s7,14794 <__multiply+0x238>
   14788:	0180006f          	j	147a0 <__multiply+0x244>
   1478c:	fffb8b93          	add	s7,s7,-1
   14790:	000b8863          	beqz	s7,147a0 <__multiply+0x244>
   14794:	ffcaa783          	lw	a5,-4(s5)
   14798:	ffca8a93          	add	s5,s5,-4
   1479c:	fe0788e3          	beqz	a5,1478c <__multiply+0x230>
   147a0:	00c12783          	lw	a5,12(sp)
   147a4:	04c12083          	lw	ra,76(sp)
   147a8:	04812403          	lw	s0,72(sp)
   147ac:	0177a823          	sw	s7,16(a5)
   147b0:	03412a83          	lw	s5,52(sp)
   147b4:	03012b03          	lw	s6,48(sp)
   147b8:	03c12983          	lw	s3,60(sp)
   147bc:	03812a03          	lw	s4,56(sp)
   147c0:	02c12b83          	lw	s7,44(sp)
   147c4:	02812c03          	lw	s8,40(sp)
   147c8:	00078513          	mv	a0,a5
   147cc:	05010113          	add	sp,sp,80
   147d0:	00008067          	ret
   147d4:	408987b3          	sub	a5,s3,s0
   147d8:	feb78793          	add	a5,a5,-21
   147dc:	ffc7f793          	and	a5,a5,-4
   147e0:	00478793          	add	a5,a5,4
   147e4:	00f12223          	sw	a5,4(sp)
   147e8:	e4dff06f          	j	14634 <__multiply+0xd8>
   147ec:	0000f697          	auipc	a3,0xf
   147f0:	93868693          	add	a3,a3,-1736 # 23124 <OSUnMapTbl+0x1c0>
   147f4:	00000613          	li	a2,0
   147f8:	15d00593          	li	a1,349
   147fc:	0000f517          	auipc	a0,0xf
   14800:	97850513          	add	a0,a0,-1672 # 23174 <OSUnMapTbl+0x210>
   14804:	04912223          	sw	s1,68(sp)
   14808:	05212023          	sw	s2,64(sp)
   1480c:	03512a23          	sw	s5,52(sp)
   14810:	03612823          	sw	s6,48(sp)
   14814:	03912223          	sw	s9,36(sp)
   14818:	03a12023          	sw	s10,32(sp)
   1481c:	01b12e23          	sw	s11,28(sp)
   14820:	5e0050ef          	jal	19e00 <__assert_func>

00014824 <__pow5mult>:
   14824:	fe010113          	add	sp,sp,-32
   14828:	00812c23          	sw	s0,24(sp)
   1482c:	01212823          	sw	s2,16(sp)
   14830:	01312623          	sw	s3,12(sp)
   14834:	00112e23          	sw	ra,28(sp)
   14838:	00367793          	and	a5,a2,3
   1483c:	00060413          	mv	s0,a2
   14840:	00050993          	mv	s3,a0
   14844:	00058913          	mv	s2,a1
   14848:	0a079c63          	bnez	a5,14900 <__pow5mult+0xdc>
   1484c:	40245413          	sra	s0,s0,0x2
   14850:	06040a63          	beqz	s0,148c4 <__pow5mult+0xa0>
   14854:	00912a23          	sw	s1,20(sp)
   14858:	0489a483          	lw	s1,72(s3)
   1485c:	0c048663          	beqz	s1,14928 <__pow5mult+0x104>
   14860:	00147793          	and	a5,s0,1
   14864:	02079063          	bnez	a5,14884 <__pow5mult+0x60>
   14868:	40145413          	sra	s0,s0,0x1
   1486c:	04040a63          	beqz	s0,148c0 <__pow5mult+0x9c>
   14870:	0004a503          	lw	a0,0(s1)
   14874:	06050663          	beqz	a0,148e0 <__pow5mult+0xbc>
   14878:	00050493          	mv	s1,a0
   1487c:	00147793          	and	a5,s0,1
   14880:	fe0784e3          	beqz	a5,14868 <__pow5mult+0x44>
   14884:	00048613          	mv	a2,s1
   14888:	00090593          	mv	a1,s2
   1488c:	00098513          	mv	a0,s3
   14890:	ccdff0ef          	jal	1455c <__multiply>
   14894:	02090063          	beqz	s2,148b4 <__pow5mult+0x90>
   14898:	00492703          	lw	a4,4(s2)
   1489c:	04c9a783          	lw	a5,76(s3)
   148a0:	00271713          	sll	a4,a4,0x2
   148a4:	00e787b3          	add	a5,a5,a4
   148a8:	0007a703          	lw	a4,0(a5)
   148ac:	00e92023          	sw	a4,0(s2)
   148b0:	0127a023          	sw	s2,0(a5)
   148b4:	40145413          	sra	s0,s0,0x1
   148b8:	00050913          	mv	s2,a0
   148bc:	fa041ae3          	bnez	s0,14870 <__pow5mult+0x4c>
   148c0:	01412483          	lw	s1,20(sp)
   148c4:	01c12083          	lw	ra,28(sp)
   148c8:	01812403          	lw	s0,24(sp)
   148cc:	00c12983          	lw	s3,12(sp)
   148d0:	00090513          	mv	a0,s2
   148d4:	01012903          	lw	s2,16(sp)
   148d8:	02010113          	add	sp,sp,32
   148dc:	00008067          	ret
   148e0:	00048613          	mv	a2,s1
   148e4:	00048593          	mv	a1,s1
   148e8:	00098513          	mv	a0,s3
   148ec:	c71ff0ef          	jal	1455c <__multiply>
   148f0:	00a4a023          	sw	a0,0(s1)
   148f4:	00052023          	sw	zero,0(a0)
   148f8:	00050493          	mv	s1,a0
   148fc:	f81ff06f          	j	1487c <__pow5mult+0x58>
   14900:	fff78793          	add	a5,a5,-1
   14904:	0000f717          	auipc	a4,0xf
   14908:	da470713          	add	a4,a4,-604 # 236a8 <p05.0>
   1490c:	00279793          	sll	a5,a5,0x2
   14910:	00f707b3          	add	a5,a4,a5
   14914:	0007a603          	lw	a2,0(a5)
   14918:	00000693          	li	a3,0
   1491c:	f78ff0ef          	jal	14094 <__multadd>
   14920:	00050913          	mv	s2,a0
   14924:	f29ff06f          	j	1484c <__pow5mult+0x28>
   14928:	00100593          	li	a1,1
   1492c:	00098513          	mv	a0,s3
   14930:	e8cff0ef          	jal	13fbc <_Balloc>
   14934:	00050493          	mv	s1,a0
   14938:	02050063          	beqz	a0,14958 <__pow5mult+0x134>
   1493c:	27100793          	li	a5,625
   14940:	00f52a23          	sw	a5,20(a0)
   14944:	00100793          	li	a5,1
   14948:	00f52823          	sw	a5,16(a0)
   1494c:	04a9a423          	sw	a0,72(s3)
   14950:	00052023          	sw	zero,0(a0)
   14954:	f0dff06f          	j	14860 <__pow5mult+0x3c>
   14958:	0000e697          	auipc	a3,0xe
   1495c:	7cc68693          	add	a3,a3,1996 # 23124 <OSUnMapTbl+0x1c0>
   14960:	00000613          	li	a2,0
   14964:	14000593          	li	a1,320
   14968:	0000f517          	auipc	a0,0xf
   1496c:	80c50513          	add	a0,a0,-2036 # 23174 <OSUnMapTbl+0x210>
   14970:	490050ef          	jal	19e00 <__assert_func>

00014974 <__lshift>:
   14974:	fe010113          	add	sp,sp,-32
   14978:	01512223          	sw	s5,4(sp)
   1497c:	0105aa83          	lw	s5,16(a1)
   14980:	0085a783          	lw	a5,8(a1)
   14984:	01312623          	sw	s3,12(sp)
   14988:	40565993          	sra	s3,a2,0x5
   1498c:	01598ab3          	add	s5,s3,s5
   14990:	00812c23          	sw	s0,24(sp)
   14994:	00912a23          	sw	s1,20(sp)
   14998:	01212823          	sw	s2,16(sp)
   1499c:	01412423          	sw	s4,8(sp)
   149a0:	00112e23          	sw	ra,28(sp)
   149a4:	001a8913          	add	s2,s5,1
   149a8:	00058493          	mv	s1,a1
   149ac:	00060413          	mv	s0,a2
   149b0:	0045a583          	lw	a1,4(a1)
   149b4:	00050a13          	mv	s4,a0
   149b8:	0127d863          	bge	a5,s2,149c8 <__lshift+0x54>
   149bc:	00179793          	sll	a5,a5,0x1
   149c0:	00158593          	add	a1,a1,1
   149c4:	ff27cce3          	blt	a5,s2,149bc <__lshift+0x48>
   149c8:	000a0513          	mv	a0,s4
   149cc:	df0ff0ef          	jal	13fbc <_Balloc>
   149d0:	10050c63          	beqz	a0,14ae8 <__lshift+0x174>
   149d4:	01450813          	add	a6,a0,20
   149d8:	03305463          	blez	s3,14a00 <__lshift+0x8c>
   149dc:	00598993          	add	s3,s3,5
   149e0:	00299993          	sll	s3,s3,0x2
   149e4:	01350733          	add	a4,a0,s3
   149e8:	00080793          	mv	a5,a6
   149ec:	00478793          	add	a5,a5,4
   149f0:	fe07ae23          	sw	zero,-4(a5)
   149f4:	fee79ce3          	bne	a5,a4,149ec <__lshift+0x78>
   149f8:	fec98993          	add	s3,s3,-20
   149fc:	01380833          	add	a6,a6,s3
   14a00:	0104a883          	lw	a7,16(s1)
   14a04:	01448793          	add	a5,s1,20
   14a08:	01f47613          	and	a2,s0,31
   14a0c:	00289893          	sll	a7,a7,0x2
   14a10:	011788b3          	add	a7,a5,a7
   14a14:	0a060463          	beqz	a2,14abc <__lshift+0x148>
   14a18:	02000593          	li	a1,32
   14a1c:	40c585b3          	sub	a1,a1,a2
   14a20:	00080313          	mv	t1,a6
   14a24:	00000693          	li	a3,0
   14a28:	0007a703          	lw	a4,0(a5)
   14a2c:	00430313          	add	t1,t1,4
   14a30:	00478793          	add	a5,a5,4
   14a34:	00c71733          	sll	a4,a4,a2
   14a38:	00d76733          	or	a4,a4,a3
   14a3c:	fee32e23          	sw	a4,-4(t1)
   14a40:	ffc7a683          	lw	a3,-4(a5)
   14a44:	00b6d6b3          	srl	a3,a3,a1
   14a48:	ff17e0e3          	bltu	a5,a7,14a28 <__lshift+0xb4>
   14a4c:	01548793          	add	a5,s1,21
   14a50:	00400713          	li	a4,4
   14a54:	00f8ea63          	bltu	a7,a5,14a68 <__lshift+0xf4>
   14a58:	409887b3          	sub	a5,a7,s1
   14a5c:	feb78793          	add	a5,a5,-21
   14a60:	ffc7f793          	and	a5,a5,-4
   14a64:	00478713          	add	a4,a5,4
   14a68:	00e80833          	add	a6,a6,a4
   14a6c:	00d82023          	sw	a3,0(a6)
   14a70:	00069463          	bnez	a3,14a78 <__lshift+0x104>
   14a74:	000a8913          	mv	s2,s5
   14a78:	0044a703          	lw	a4,4(s1)
   14a7c:	04ca2783          	lw	a5,76(s4)
   14a80:	01c12083          	lw	ra,28(sp)
   14a84:	00271713          	sll	a4,a4,0x2
   14a88:	00e787b3          	add	a5,a5,a4
   14a8c:	0007a703          	lw	a4,0(a5)
   14a90:	01252823          	sw	s2,16(a0)
   14a94:	01812403          	lw	s0,24(sp)
   14a98:	00e4a023          	sw	a4,0(s1)
   14a9c:	0097a023          	sw	s1,0(a5)
   14aa0:	01012903          	lw	s2,16(sp)
   14aa4:	01412483          	lw	s1,20(sp)
   14aa8:	00c12983          	lw	s3,12(sp)
   14aac:	00812a03          	lw	s4,8(sp)
   14ab0:	00412a83          	lw	s5,4(sp)
   14ab4:	02010113          	add	sp,sp,32
   14ab8:	00008067          	ret
   14abc:	0007a703          	lw	a4,0(a5)
   14ac0:	00478793          	add	a5,a5,4
   14ac4:	00480813          	add	a6,a6,4
   14ac8:	fee82e23          	sw	a4,-4(a6)
   14acc:	fb17f4e3          	bgeu	a5,a7,14a74 <__lshift+0x100>
   14ad0:	0007a703          	lw	a4,0(a5)
   14ad4:	00478793          	add	a5,a5,4
   14ad8:	00480813          	add	a6,a6,4
   14adc:	fee82e23          	sw	a4,-4(a6)
   14ae0:	fd17eee3          	bltu	a5,a7,14abc <__lshift+0x148>
   14ae4:	f91ff06f          	j	14a74 <__lshift+0x100>
   14ae8:	0000e697          	auipc	a3,0xe
   14aec:	63c68693          	add	a3,a3,1596 # 23124 <OSUnMapTbl+0x1c0>
   14af0:	00000613          	li	a2,0
   14af4:	1d900593          	li	a1,473
   14af8:	0000e517          	auipc	a0,0xe
   14afc:	67c50513          	add	a0,a0,1660 # 23174 <OSUnMapTbl+0x210>
   14b00:	300050ef          	jal	19e00 <__assert_func>

00014b04 <__mcmp>:
   14b04:	01052703          	lw	a4,16(a0)
   14b08:	0105a783          	lw	a5,16(a1)
   14b0c:	00050813          	mv	a6,a0
   14b10:	40f70533          	sub	a0,a4,a5
   14b14:	04f71263          	bne	a4,a5,14b58 <__mcmp+0x54>
   14b18:	00279793          	sll	a5,a5,0x2
   14b1c:	01480813          	add	a6,a6,20
   14b20:	01458593          	add	a1,a1,20
   14b24:	00f80733          	add	a4,a6,a5
   14b28:	00f587b3          	add	a5,a1,a5
   14b2c:	0080006f          	j	14b34 <__mcmp+0x30>
   14b30:	02e87463          	bgeu	a6,a4,14b58 <__mcmp+0x54>
   14b34:	ffc72603          	lw	a2,-4(a4)
   14b38:	ffc7a683          	lw	a3,-4(a5)
   14b3c:	ffc70713          	add	a4,a4,-4
   14b40:	ffc78793          	add	a5,a5,-4
   14b44:	fed606e3          	beq	a2,a3,14b30 <__mcmp+0x2c>
   14b48:	00100513          	li	a0,1
   14b4c:	00d67663          	bgeu	a2,a3,14b58 <__mcmp+0x54>
   14b50:	fff00513          	li	a0,-1
   14b54:	00008067          	ret
   14b58:	00008067          	ret

00014b5c <__mdiff>:
   14b5c:	0105a703          	lw	a4,16(a1)
   14b60:	01062783          	lw	a5,16(a2)
   14b64:	ff010113          	add	sp,sp,-16
   14b68:	00812423          	sw	s0,8(sp)
   14b6c:	00912223          	sw	s1,4(sp)
   14b70:	00112623          	sw	ra,12(sp)
   14b74:	01212023          	sw	s2,0(sp)
   14b78:	00058413          	mv	s0,a1
   14b7c:	00060493          	mv	s1,a2
   14b80:	40f706b3          	sub	a3,a4,a5
   14b84:	18f71e63          	bne	a4,a5,14d20 <__mdiff+0x1c4>
   14b88:	00279693          	sll	a3,a5,0x2
   14b8c:	01458613          	add	a2,a1,20
   14b90:	01448713          	add	a4,s1,20
   14b94:	00d607b3          	add	a5,a2,a3
   14b98:	00d70733          	add	a4,a4,a3
   14b9c:	0080006f          	j	14ba4 <__mdiff+0x48>
   14ba0:	18f67c63          	bgeu	a2,a5,14d38 <__mdiff+0x1dc>
   14ba4:	ffc7a583          	lw	a1,-4(a5)
   14ba8:	ffc72683          	lw	a3,-4(a4)
   14bac:	ffc78793          	add	a5,a5,-4
   14bb0:	ffc70713          	add	a4,a4,-4
   14bb4:	fed586e3          	beq	a1,a3,14ba0 <__mdiff+0x44>
   14bb8:	00100913          	li	s2,1
   14bbc:	00d5ea63          	bltu	a1,a3,14bd0 <__mdiff+0x74>
   14bc0:	00048793          	mv	a5,s1
   14bc4:	00000913          	li	s2,0
   14bc8:	00040493          	mv	s1,s0
   14bcc:	00078413          	mv	s0,a5
   14bd0:	0044a583          	lw	a1,4(s1)
   14bd4:	be8ff0ef          	jal	13fbc <_Balloc>
   14bd8:	1a050663          	beqz	a0,14d84 <__mdiff+0x228>
   14bdc:	0104a883          	lw	a7,16(s1)
   14be0:	01042283          	lw	t0,16(s0)
   14be4:	01448f93          	add	t6,s1,20
   14be8:	00289313          	sll	t1,a7,0x2
   14bec:	01440813          	add	a6,s0,20
   14bf0:	00229293          	sll	t0,t0,0x2
   14bf4:	01450593          	add	a1,a0,20
   14bf8:	00010e37          	lui	t3,0x10
   14bfc:	01252623          	sw	s2,12(a0)
   14c00:	006f8333          	add	t1,t6,t1
   14c04:	005802b3          	add	t0,a6,t0
   14c08:	00058f13          	mv	t5,a1
   14c0c:	000f8e93          	mv	t4,t6
   14c10:	00000693          	li	a3,0
   14c14:	fffe0e13          	add	t3,t3,-1 # ffff <__sfvwrite_r+0x9b>
   14c18:	000ea703          	lw	a4,0(t4)
   14c1c:	00082603          	lw	a2,0(a6)
   14c20:	004f0f13          	add	t5,t5,4
   14c24:	01c777b3          	and	a5,a4,t3
   14c28:	01c673b3          	and	t2,a2,t3
   14c2c:	407787b3          	sub	a5,a5,t2
   14c30:	00d787b3          	add	a5,a5,a3
   14c34:	01075713          	srl	a4,a4,0x10
   14c38:	01065613          	srl	a2,a2,0x10
   14c3c:	4107d693          	sra	a3,a5,0x10
   14c40:	40c70733          	sub	a4,a4,a2
   14c44:	00d70733          	add	a4,a4,a3
   14c48:	01071693          	sll	a3,a4,0x10
   14c4c:	01c7f7b3          	and	a5,a5,t3
   14c50:	00d7e7b3          	or	a5,a5,a3
   14c54:	00480813          	add	a6,a6,4
   14c58:	feff2e23          	sw	a5,-4(t5)
   14c5c:	004e8e93          	add	t4,t4,4
   14c60:	41075693          	sra	a3,a4,0x10
   14c64:	fa586ae3          	bltu	a6,t0,14c18 <__mdiff+0xbc>
   14c68:	01540713          	add	a4,s0,21
   14c6c:	40828433          	sub	s0,t0,s0
   14c70:	feb40413          	add	s0,s0,-21
   14c74:	00e2b2b3          	sltu	t0,t0,a4
   14c78:	0012cf13          	xor	t5,t0,1
   14c7c:	00245413          	srl	s0,s0,0x2
   14c80:	00400713          	li	a4,4
   14c84:	0a028463          	beqz	t0,14d2c <__mdiff+0x1d0>
   14c88:	00ef8fb3          	add	t6,t6,a4
   14c8c:	00e58833          	add	a6,a1,a4
   14c90:	00010eb7          	lui	t4,0x10
   14c94:	00080e13          	mv	t3,a6
   14c98:	000f8613          	mv	a2,t6
   14c9c:	fffe8e93          	add	t4,t4,-1 # ffff <__sfvwrite_r+0x9b>
   14ca0:	0c6ff463          	bgeu	t6,t1,14d68 <__mdiff+0x20c>
   14ca4:	00062783          	lw	a5,0(a2)
   14ca8:	004e0e13          	add	t3,t3,4
   14cac:	00460613          	add	a2,a2,4
   14cb0:	01d7f733          	and	a4,a5,t4
   14cb4:	00d70733          	add	a4,a4,a3
   14cb8:	0107d593          	srl	a1,a5,0x10
   14cbc:	41075713          	sra	a4,a4,0x10
   14cc0:	00b70733          	add	a4,a4,a1
   14cc4:	00d787b3          	add	a5,a5,a3
   14cc8:	01d7f7b3          	and	a5,a5,t4
   14ccc:	01071693          	sll	a3,a4,0x10
   14cd0:	00d7e7b3          	or	a5,a5,a3
   14cd4:	fefe2e23          	sw	a5,-4(t3)
   14cd8:	41075693          	sra	a3,a4,0x10
   14cdc:	fc6664e3          	bltu	a2,t1,14ca4 <__mdiff+0x148>
   14ce0:	fff30313          	add	t1,t1,-1
   14ce4:	41f30333          	sub	t1,t1,t6
   14ce8:	ffc37313          	and	t1,t1,-4
   14cec:	00680733          	add	a4,a6,t1
   14cf0:	00079a63          	bnez	a5,14d04 <__mdiff+0x1a8>
   14cf4:	ffc72783          	lw	a5,-4(a4)
   14cf8:	fff88893          	add	a7,a7,-1
   14cfc:	ffc70713          	add	a4,a4,-4
   14d00:	fe078ae3          	beqz	a5,14cf4 <__mdiff+0x198>
   14d04:	00c12083          	lw	ra,12(sp)
   14d08:	00812403          	lw	s0,8(sp)
   14d0c:	01152823          	sw	a7,16(a0)
   14d10:	00412483          	lw	s1,4(sp)
   14d14:	00012903          	lw	s2,0(sp)
   14d18:	01010113          	add	sp,sp,16
   14d1c:	00008067          	ret
   14d20:	00100913          	li	s2,1
   14d24:	e806dee3          	bgez	a3,14bc0 <__mdiff+0x64>
   14d28:	ea9ff06f          	j	14bd0 <__mdiff+0x74>
   14d2c:	00140713          	add	a4,s0,1
   14d30:	00271713          	sll	a4,a4,0x2
   14d34:	f55ff06f          	j	14c88 <__mdiff+0x12c>
   14d38:	00000593          	li	a1,0
   14d3c:	a80ff0ef          	jal	13fbc <_Balloc>
   14d40:	06050063          	beqz	a0,14da0 <__mdiff+0x244>
   14d44:	00c12083          	lw	ra,12(sp)
   14d48:	00812403          	lw	s0,8(sp)
   14d4c:	00100793          	li	a5,1
   14d50:	00f52823          	sw	a5,16(a0)
   14d54:	00052a23          	sw	zero,20(a0)
   14d58:	00412483          	lw	s1,4(sp)
   14d5c:	00012903          	lw	s2,0(sp)
   14d60:	01010113          	add	sp,sp,16
   14d64:	00008067          	ret
   14d68:	00000713          	li	a4,0
   14d6c:	000f1663          	bnez	t5,14d78 <__mdiff+0x21c>
   14d70:	00e58733          	add	a4,a1,a4
   14d74:	f7dff06f          	j	14cf0 <__mdiff+0x194>
   14d78:	00241713          	sll	a4,s0,0x2
   14d7c:	00e58733          	add	a4,a1,a4
   14d80:	f71ff06f          	j	14cf0 <__mdiff+0x194>
   14d84:	0000e697          	auipc	a3,0xe
   14d88:	3a068693          	add	a3,a3,928 # 23124 <OSUnMapTbl+0x1c0>
   14d8c:	00000613          	li	a2,0
   14d90:	24000593          	li	a1,576
   14d94:	0000e517          	auipc	a0,0xe
   14d98:	3e050513          	add	a0,a0,992 # 23174 <OSUnMapTbl+0x210>
   14d9c:	064050ef          	jal	19e00 <__assert_func>
   14da0:	0000e697          	auipc	a3,0xe
   14da4:	38468693          	add	a3,a3,900 # 23124 <OSUnMapTbl+0x1c0>
   14da8:	00000613          	li	a2,0
   14dac:	23200593          	li	a1,562
   14db0:	0000e517          	auipc	a0,0xe
   14db4:	3c450513          	add	a0,a0,964 # 23174 <OSUnMapTbl+0x210>
   14db8:	048050ef          	jal	19e00 <__assert_func>

00014dbc <__ulp>:
   14dbc:	7ff007b7          	lui	a5,0x7ff00
   14dc0:	00b7f5b3          	and	a1,a5,a1
   14dc4:	fcc007b7          	lui	a5,0xfcc00
   14dc8:	00f585b3          	add	a1,a1,a5
   14dcc:	00000793          	li	a5,0
   14dd0:	00b05663          	blez	a1,14ddc <__ulp+0x20>
   14dd4:	00078513          	mv	a0,a5
   14dd8:	00008067          	ret
   14ddc:	40b005b3          	neg	a1,a1
   14de0:	4145d593          	sra	a1,a1,0x14
   14de4:	01300793          	li	a5,19
   14de8:	00b7cc63          	blt	a5,a1,14e00 <__ulp+0x44>
   14dec:	000807b7          	lui	a5,0x80
   14df0:	40b7d5b3          	sra	a1,a5,a1
   14df4:	00000793          	li	a5,0
   14df8:	00078513          	mv	a0,a5
   14dfc:	00008067          	ret
   14e00:	fec58593          	add	a1,a1,-20
   14e04:	01e00713          	li	a4,30
   14e08:	00100793          	li	a5,1
   14e0c:	00b74663          	blt	a4,a1,14e18 <__ulp+0x5c>
   14e10:	800007b7          	lui	a5,0x80000
   14e14:	00b7d7b3          	srl	a5,a5,a1
   14e18:	00000593          	li	a1,0
   14e1c:	00078513          	mv	a0,a5
   14e20:	00008067          	ret

00014e24 <__b2d>:
   14e24:	fe010113          	add	sp,sp,-32
   14e28:	00912a23          	sw	s1,20(sp)
   14e2c:	01052483          	lw	s1,16(a0)
   14e30:	00812c23          	sw	s0,24(sp)
   14e34:	01450413          	add	s0,a0,20
   14e38:	00249493          	sll	s1,s1,0x2
   14e3c:	009404b3          	add	s1,s0,s1
   14e40:	01212823          	sw	s2,16(sp)
   14e44:	ffc4a903          	lw	s2,-4(s1)
   14e48:	01312623          	sw	s3,12(sp)
   14e4c:	01412423          	sw	s4,8(sp)
   14e50:	00090513          	mv	a0,s2
   14e54:	00058993          	mv	s3,a1
   14e58:	00112e23          	sw	ra,28(sp)
   14e5c:	cf8ff0ef          	jal	14354 <__hi0bits>
   14e60:	02000713          	li	a4,32
   14e64:	40a707b3          	sub	a5,a4,a0
   14e68:	00f9a023          	sw	a5,0(s3)
   14e6c:	00a00793          	li	a5,10
   14e70:	ffc48a13          	add	s4,s1,-4
   14e74:	08a7dc63          	bge	a5,a0,14f0c <__b2d+0xe8>
   14e78:	ff550613          	add	a2,a0,-11
   14e7c:	05447063          	bgeu	s0,s4,14ebc <__b2d+0x98>
   14e80:	ff84a783          	lw	a5,-8(s1)
   14e84:	04060c63          	beqz	a2,14edc <__b2d+0xb8>
   14e88:	40c706b3          	sub	a3,a4,a2
   14e8c:	00d7d733          	srl	a4,a5,a3
   14e90:	00c91933          	sll	s2,s2,a2
   14e94:	00e96933          	or	s2,s2,a4
   14e98:	ff848593          	add	a1,s1,-8
   14e9c:	3ff00737          	lui	a4,0x3ff00
   14ea0:	00e96733          	or	a4,s2,a4
   14ea4:	00c797b3          	sll	a5,a5,a2
   14ea8:	02b47e63          	bgeu	s0,a1,14ee4 <__b2d+0xc0>
   14eac:	ff44a603          	lw	a2,-12(s1)
   14eb0:	00d656b3          	srl	a3,a2,a3
   14eb4:	00d7e7b3          	or	a5,a5,a3
   14eb8:	02c0006f          	j	14ee4 <__b2d+0xc0>
   14ebc:	00b00793          	li	a5,11
   14ec0:	00f50c63          	beq	a0,a5,14ed8 <__b2d+0xb4>
   14ec4:	00c91933          	sll	s2,s2,a2
   14ec8:	3ff00737          	lui	a4,0x3ff00
   14ecc:	00e96733          	or	a4,s2,a4
   14ed0:	00000793          	li	a5,0
   14ed4:	0100006f          	j	14ee4 <__b2d+0xc0>
   14ed8:	00000793          	li	a5,0
   14edc:	3ff00737          	lui	a4,0x3ff00
   14ee0:	00e96733          	or	a4,s2,a4
   14ee4:	01c12083          	lw	ra,28(sp)
   14ee8:	01812403          	lw	s0,24(sp)
   14eec:	01412483          	lw	s1,20(sp)
   14ef0:	01012903          	lw	s2,16(sp)
   14ef4:	00c12983          	lw	s3,12(sp)
   14ef8:	00812a03          	lw	s4,8(sp)
   14efc:	00078513          	mv	a0,a5
   14f00:	00070593          	mv	a1,a4
   14f04:	02010113          	add	sp,sp,32
   14f08:	00008067          	ret
   14f0c:	00b00693          	li	a3,11
   14f10:	40a686b3          	sub	a3,a3,a0
   14f14:	3ff007b7          	lui	a5,0x3ff00
   14f18:	00d95733          	srl	a4,s2,a3
   14f1c:	00f76733          	or	a4,a4,a5
   14f20:	00000793          	li	a5,0
   14f24:	01447663          	bgeu	s0,s4,14f30 <__b2d+0x10c>
   14f28:	ff84a783          	lw	a5,-8(s1)
   14f2c:	00d7d7b3          	srl	a5,a5,a3
   14f30:	01550513          	add	a0,a0,21
   14f34:	00a91933          	sll	s2,s2,a0
   14f38:	00f967b3          	or	a5,s2,a5
   14f3c:	fa9ff06f          	j	14ee4 <__b2d+0xc0>

00014f40 <__d2b>:
   14f40:	fd010113          	add	sp,sp,-48
   14f44:	01512a23          	sw	s5,20(sp)
   14f48:	00058a93          	mv	s5,a1
   14f4c:	00100593          	li	a1,1
   14f50:	02912223          	sw	s1,36(sp)
   14f54:	01312e23          	sw	s3,28(sp)
   14f58:	01412c23          	sw	s4,24(sp)
   14f5c:	02112623          	sw	ra,44(sp)
   14f60:	02812423          	sw	s0,40(sp)
   14f64:	03212023          	sw	s2,32(sp)
   14f68:	00060493          	mv	s1,a2
   14f6c:	00068a13          	mv	s4,a3
   14f70:	00070993          	mv	s3,a4
   14f74:	848ff0ef          	jal	13fbc <_Balloc>
   14f78:	10050263          	beqz	a0,1507c <__d2b+0x13c>
   14f7c:	00100737          	lui	a4,0x100
   14f80:	0144d913          	srl	s2,s1,0x14
   14f84:	fff70793          	add	a5,a4,-1 # fffff <__alt_data_end+0xb6c1f>
   14f88:	7ff97913          	and	s2,s2,2047
   14f8c:	00050413          	mv	s0,a0
   14f90:	0097f7b3          	and	a5,a5,s1
   14f94:	00090463          	beqz	s2,14f9c <__d2b+0x5c>
   14f98:	00e7e7b3          	or	a5,a5,a4
   14f9c:	00f12623          	sw	a5,12(sp)
   14fa0:	060a9263          	bnez	s5,15004 <__d2b+0xc4>
   14fa4:	00c10513          	add	a0,sp,12
   14fa8:	c24ff0ef          	jal	143cc <__lo0bits>
   14fac:	00c12703          	lw	a4,12(sp)
   14fb0:	00100493          	li	s1,1
   14fb4:	00942823          	sw	s1,16(s0)
   14fb8:	00e42a23          	sw	a4,20(s0)
   14fbc:	02050793          	add	a5,a0,32
   14fc0:	08090863          	beqz	s2,15050 <__d2b+0x110>
   14fc4:	bcd90913          	add	s2,s2,-1075
   14fc8:	00f90933          	add	s2,s2,a5
   14fcc:	03500493          	li	s1,53
   14fd0:	012a2023          	sw	s2,0(s4)
   14fd4:	40f48533          	sub	a0,s1,a5
   14fd8:	00a9a023          	sw	a0,0(s3)
   14fdc:	02c12083          	lw	ra,44(sp)
   14fe0:	00040513          	mv	a0,s0
   14fe4:	02812403          	lw	s0,40(sp)
   14fe8:	02412483          	lw	s1,36(sp)
   14fec:	02012903          	lw	s2,32(sp)
   14ff0:	01c12983          	lw	s3,28(sp)
   14ff4:	01812a03          	lw	s4,24(sp)
   14ff8:	01412a83          	lw	s5,20(sp)
   14ffc:	03010113          	add	sp,sp,48
   15000:	00008067          	ret
   15004:	00810513          	add	a0,sp,8
   15008:	01512423          	sw	s5,8(sp)
   1500c:	bc0ff0ef          	jal	143cc <__lo0bits>
   15010:	00c12703          	lw	a4,12(sp)
   15014:	00050793          	mv	a5,a0
   15018:	04050e63          	beqz	a0,15074 <__d2b+0x134>
   1501c:	00812603          	lw	a2,8(sp)
   15020:	02000693          	li	a3,32
   15024:	40a686b3          	sub	a3,a3,a0
   15028:	00d716b3          	sll	a3,a4,a3
   1502c:	00a75733          	srl	a4,a4,a0
   15030:	00c6e6b3          	or	a3,a3,a2
   15034:	00e12623          	sw	a4,12(sp)
   15038:	00e034b3          	snez	s1,a4
   1503c:	00148493          	add	s1,s1,1
   15040:	00d42a23          	sw	a3,20(s0)
   15044:	00e42c23          	sw	a4,24(s0)
   15048:	00942823          	sw	s1,16(s0)
   1504c:	f6091ce3          	bnez	s2,14fc4 <__d2b+0x84>
   15050:	00249713          	sll	a4,s1,0x2
   15054:	00e40733          	add	a4,s0,a4
   15058:	01072503          	lw	a0,16(a4)
   1505c:	bce78793          	add	a5,a5,-1074 # 3feffbce <__alt_data_end+0x3feb67ee>
   15060:	00fa2023          	sw	a5,0(s4)
   15064:	af0ff0ef          	jal	14354 <__hi0bits>
   15068:	00549493          	sll	s1,s1,0x5
   1506c:	40a48533          	sub	a0,s1,a0
   15070:	f69ff06f          	j	14fd8 <__d2b+0x98>
   15074:	00812683          	lw	a3,8(sp)
   15078:	fc1ff06f          	j	15038 <__d2b+0xf8>
   1507c:	0000e697          	auipc	a3,0xe
   15080:	0a868693          	add	a3,a3,168 # 23124 <OSUnMapTbl+0x1c0>
   15084:	00000613          	li	a2,0
   15088:	30a00593          	li	a1,778
   1508c:	0000e517          	auipc	a0,0xe
   15090:	0e850513          	add	a0,a0,232 # 23174 <OSUnMapTbl+0x210>
   15094:	56d040ef          	jal	19e00 <__assert_func>

00015098 <__ratio>:
   15098:	fd010113          	add	sp,sp,-48
   1509c:	03212023          	sw	s2,32(sp)
   150a0:	00058913          	mv	s2,a1
   150a4:	00810593          	add	a1,sp,8
   150a8:	02112623          	sw	ra,44(sp)
   150ac:	02812423          	sw	s0,40(sp)
   150b0:	02912223          	sw	s1,36(sp)
   150b4:	01312e23          	sw	s3,28(sp)
   150b8:	00050993          	mv	s3,a0
   150bc:	d69ff0ef          	jal	14e24 <__b2d>
   150c0:	00050493          	mv	s1,a0
   150c4:	00058413          	mv	s0,a1
   150c8:	00090513          	mv	a0,s2
   150cc:	00c10593          	add	a1,sp,12
   150d0:	d55ff0ef          	jal	14e24 <__b2d>
   150d4:	01092703          	lw	a4,16(s2)
   150d8:	0109a783          	lw	a5,16(s3)
   150dc:	00c12683          	lw	a3,12(sp)
   150e0:	40e787b3          	sub	a5,a5,a4
   150e4:	00812703          	lw	a4,8(sp)
   150e8:	00579793          	sll	a5,a5,0x5
   150ec:	40d70733          	sub	a4,a4,a3
   150f0:	00e787b3          	add	a5,a5,a4
   150f4:	00050713          	mv	a4,a0
   150f8:	02f05e63          	blez	a5,15134 <__ratio+0x9c>
   150fc:	01479793          	sll	a5,a5,0x14
   15100:	00878433          	add	s0,a5,s0
   15104:	00058693          	mv	a3,a1
   15108:	00048513          	mv	a0,s1
   1510c:	00040593          	mv	a1,s0
   15110:	00070613          	mv	a2,a4
   15114:	0dc080ef          	jal	1d1f0 <__divdf3>
   15118:	02c12083          	lw	ra,44(sp)
   1511c:	02812403          	lw	s0,40(sp)
   15120:	02412483          	lw	s1,36(sp)
   15124:	02012903          	lw	s2,32(sp)
   15128:	01c12983          	lw	s3,28(sp)
   1512c:	03010113          	add	sp,sp,48
   15130:	00008067          	ret
   15134:	01479793          	sll	a5,a5,0x14
   15138:	40f585b3          	sub	a1,a1,a5
   1513c:	fc9ff06f          	j	15104 <__ratio+0x6c>

00015140 <_mprec_log10>:
   15140:	ff010113          	add	sp,sp,-16
   15144:	01212023          	sw	s2,0(sp)
   15148:	00112623          	sw	ra,12(sp)
   1514c:	01700793          	li	a5,23
   15150:	00050913          	mv	s2,a0
   15154:	06a7d263          	bge	a5,a0,151b8 <_mprec_log10+0x78>
   15158:	0000f717          	auipc	a4,0xf
   1515c:	e7870713          	add	a4,a4,-392 # 23fd0 <_global_impure_ptr+0x8>
   15160:	00072783          	lw	a5,0(a4)
   15164:	00472583          	lw	a1,4(a4)
   15168:	0000f717          	auipc	a4,0xf
   1516c:	e7070713          	add	a4,a4,-400 # 23fd8 <_global_impure_ptr+0x10>
   15170:	00812423          	sw	s0,8(sp)
   15174:	00912223          	sw	s1,4(sp)
   15178:	00072403          	lw	s0,0(a4)
   1517c:	00472483          	lw	s1,4(a4)
   15180:	00078513          	mv	a0,a5
   15184:	00040613          	mv	a2,s0
   15188:	00048693          	mv	a3,s1
   1518c:	10d080ef          	jal	1da98 <__muldf3>
   15190:	fff90913          	add	s2,s2,-1
   15194:	00050793          	mv	a5,a0
   15198:	fe0914e3          	bnez	s2,15180 <_mprec_log10+0x40>
   1519c:	00812403          	lw	s0,8(sp)
   151a0:	00c12083          	lw	ra,12(sp)
   151a4:	00412483          	lw	s1,4(sp)
   151a8:	00012903          	lw	s2,0(sp)
   151ac:	00078513          	mv	a0,a5
   151b0:	01010113          	add	sp,sp,16
   151b4:	00008067          	ret
   151b8:	00351913          	sll	s2,a0,0x3
   151bc:	0000e717          	auipc	a4,0xe
   151c0:	4ec70713          	add	a4,a4,1260 # 236a8 <p05.0>
   151c4:	01270733          	add	a4,a4,s2
   151c8:	01072783          	lw	a5,16(a4)
   151cc:	00c12083          	lw	ra,12(sp)
   151d0:	01472583          	lw	a1,20(a4)
   151d4:	00012903          	lw	s2,0(sp)
   151d8:	00078513          	mv	a0,a5
   151dc:	01010113          	add	sp,sp,16
   151e0:	00008067          	ret

000151e4 <__copybits>:
   151e4:	01062683          	lw	a3,16(a2)
   151e8:	fff58593          	add	a1,a1,-1
   151ec:	4055d593          	sra	a1,a1,0x5
   151f0:	00158593          	add	a1,a1,1
   151f4:	01460793          	add	a5,a2,20
   151f8:	00269693          	sll	a3,a3,0x2
   151fc:	00259593          	sll	a1,a1,0x2
   15200:	00d786b3          	add	a3,a5,a3
   15204:	00b505b3          	add	a1,a0,a1
   15208:	02d7f863          	bgeu	a5,a3,15238 <__copybits+0x54>
   1520c:	00050713          	mv	a4,a0
   15210:	0007a803          	lw	a6,0(a5)
   15214:	00478793          	add	a5,a5,4
   15218:	00470713          	add	a4,a4,4
   1521c:	ff072e23          	sw	a6,-4(a4)
   15220:	fed7e8e3          	bltu	a5,a3,15210 <__copybits+0x2c>
   15224:	40c687b3          	sub	a5,a3,a2
   15228:	feb78793          	add	a5,a5,-21
   1522c:	ffc7f793          	and	a5,a5,-4
   15230:	00478793          	add	a5,a5,4
   15234:	00f50533          	add	a0,a0,a5
   15238:	00b57863          	bgeu	a0,a1,15248 <__copybits+0x64>
   1523c:	00450513          	add	a0,a0,4
   15240:	fe052e23          	sw	zero,-4(a0)
   15244:	feb56ce3          	bltu	a0,a1,1523c <__copybits+0x58>
   15248:	00008067          	ret

0001524c <__any_on>:
   1524c:	01052703          	lw	a4,16(a0)
   15250:	4055d613          	sra	a2,a1,0x5
   15254:	01450693          	add	a3,a0,20
   15258:	02c75263          	bge	a4,a2,1527c <__any_on+0x30>
   1525c:	00271713          	sll	a4,a4,0x2
   15260:	00e687b3          	add	a5,a3,a4
   15264:	04f6f263          	bgeu	a3,a5,152a8 <__any_on+0x5c>
   15268:	ffc7a703          	lw	a4,-4(a5)
   1526c:	ffc78793          	add	a5,a5,-4
   15270:	fe070ae3          	beqz	a4,15264 <__any_on+0x18>
   15274:	00100513          	li	a0,1
   15278:	00008067          	ret
   1527c:	00261793          	sll	a5,a2,0x2
   15280:	00f687b3          	add	a5,a3,a5
   15284:	fee650e3          	bge	a2,a4,15264 <__any_on+0x18>
   15288:	01f5f593          	and	a1,a1,31
   1528c:	fc058ce3          	beqz	a1,15264 <__any_on+0x18>
   15290:	0007a603          	lw	a2,0(a5)
   15294:	00100513          	li	a0,1
   15298:	00b65733          	srl	a4,a2,a1
   1529c:	00b71733          	sll	a4,a4,a1
   152a0:	fce602e3          	beq	a2,a4,15264 <__any_on+0x18>
   152a4:	00008067          	ret
   152a8:	00000513          	li	a0,0
   152ac:	00008067          	ret

000152b0 <_open_r>:
   152b0:	ff010113          	add	sp,sp,-16
   152b4:	00058713          	mv	a4,a1
   152b8:	00812423          	sw	s0,8(sp)
   152bc:	00060593          	mv	a1,a2
   152c0:	00050413          	mv	s0,a0
   152c4:	00068613          	mv	a2,a3
   152c8:	00070513          	mv	a0,a4
   152cc:	00012797          	auipc	a5,0x12
   152d0:	5807aa23          	sw	zero,1428(a5) # 27860 <errno>
   152d4:	00112623          	sw	ra,12(sp)
   152d8:	0e00d0ef          	jal	223b8 <_open>
   152dc:	fff00793          	li	a5,-1
   152e0:	00f50a63          	beq	a0,a5,152f4 <_open_r+0x44>
   152e4:	00c12083          	lw	ra,12(sp)
   152e8:	00812403          	lw	s0,8(sp)
   152ec:	01010113          	add	sp,sp,16
   152f0:	00008067          	ret
   152f4:	00012797          	auipc	a5,0x12
   152f8:	56c7a783          	lw	a5,1388(a5) # 27860 <errno>
   152fc:	fe0784e3          	beqz	a5,152e4 <_open_r+0x34>
   15300:	00c12083          	lw	ra,12(sp)
   15304:	00f42023          	sw	a5,0(s0)
   15308:	00812403          	lw	s0,8(sp)
   1530c:	01010113          	add	sp,sp,16
   15310:	00008067          	ret

00015314 <_realloc_r>:
   15314:	fd010113          	add	sp,sp,-48
   15318:	02912223          	sw	s1,36(sp)
   1531c:	02112623          	sw	ra,44(sp)
   15320:	00060493          	mv	s1,a2
   15324:	1e058863          	beqz	a1,15514 <_realloc_r+0x200>
   15328:	02812423          	sw	s0,40(sp)
   1532c:	03212023          	sw	s2,32(sp)
   15330:	00058413          	mv	s0,a1
   15334:	01312e23          	sw	s3,28(sp)
   15338:	01512a23          	sw	s5,20(sp)
   1533c:	01412c23          	sw	s4,24(sp)
   15340:	00050913          	mv	s2,a0
   15344:	fc0eb0ef          	jal	b04 <__malloc_lock>
   15348:	ffc42703          	lw	a4,-4(s0)
   1534c:	00b48793          	add	a5,s1,11
   15350:	01600693          	li	a3,22
   15354:	ff840a93          	add	s5,s0,-8
   15358:	ffc77993          	and	s3,a4,-4
   1535c:	10f6f263          	bgeu	a3,a5,15460 <_realloc_r+0x14c>
   15360:	ff87fa13          	and	s4,a5,-8
   15364:	1007c263          	bltz	a5,15468 <_realloc_r+0x154>
   15368:	109a6063          	bltu	s4,s1,15468 <_realloc_r+0x154>
   1536c:	1349d263          	bge	s3,s4,15490 <_realloc_r+0x17c>
   15370:	01812423          	sw	s8,8(sp)
   15374:	00010c17          	auipc	s8,0x10
   15378:	2b4c0c13          	add	s8,s8,692 # 25628 <__malloc_av_>
   1537c:	008c2603          	lw	a2,8(s8)
   15380:	013a86b3          	add	a3,s5,s3
   15384:	0046a783          	lw	a5,4(a3)
   15388:	1cd60863          	beq	a2,a3,15558 <_realloc_r+0x244>
   1538c:	ffe7f613          	and	a2,a5,-2
   15390:	00c68633          	add	a2,a3,a2
   15394:	00462603          	lw	a2,4(a2)
   15398:	00167613          	and	a2,a2,1
   1539c:	14061a63          	bnez	a2,154f0 <_realloc_r+0x1dc>
   153a0:	ffc7f793          	and	a5,a5,-4
   153a4:	00f98633          	add	a2,s3,a5
   153a8:	0d465863          	bge	a2,s4,15478 <_realloc_r+0x164>
   153ac:	00177713          	and	a4,a4,1
   153b0:	02071c63          	bnez	a4,153e8 <_realloc_r+0xd4>
   153b4:	01712623          	sw	s7,12(sp)
   153b8:	ff842b83          	lw	s7,-8(s0)
   153bc:	01612823          	sw	s6,16(sp)
   153c0:	417a8bb3          	sub	s7,s5,s7
   153c4:	004ba703          	lw	a4,4(s7)
   153c8:	ffc77713          	and	a4,a4,-4
   153cc:	00e787b3          	add	a5,a5,a4
   153d0:	01378b33          	add	s6,a5,s3
   153d4:	334b5c63          	bge	s6,s4,1570c <_realloc_r+0x3f8>
   153d8:	00e98b33          	add	s6,s3,a4
   153dc:	294b5863          	bge	s6,s4,1566c <_realloc_r+0x358>
   153e0:	01012b03          	lw	s6,16(sp)
   153e4:	00c12b83          	lw	s7,12(sp)
   153e8:	00048593          	mv	a1,s1
   153ec:	00090513          	mv	a0,s2
   153f0:	a20fe0ef          	jal	13610 <_malloc_r>
   153f4:	00050493          	mv	s1,a0
   153f8:	40050863          	beqz	a0,15808 <_realloc_r+0x4f4>
   153fc:	ffc42783          	lw	a5,-4(s0)
   15400:	ff850713          	add	a4,a0,-8
   15404:	ffe7f793          	and	a5,a5,-2
   15408:	00fa87b3          	add	a5,s5,a5
   1540c:	24e78663          	beq	a5,a4,15658 <_realloc_r+0x344>
   15410:	ffc98613          	add	a2,s3,-4
   15414:	02400793          	li	a5,36
   15418:	2ec7e463          	bltu	a5,a2,15700 <_realloc_r+0x3ec>
   1541c:	01300713          	li	a4,19
   15420:	20c76a63          	bltu	a4,a2,15634 <_realloc_r+0x320>
   15424:	00050793          	mv	a5,a0
   15428:	00040713          	mv	a4,s0
   1542c:	00072683          	lw	a3,0(a4)
   15430:	00d7a023          	sw	a3,0(a5)
   15434:	00472683          	lw	a3,4(a4)
   15438:	00d7a223          	sw	a3,4(a5)
   1543c:	00872703          	lw	a4,8(a4)
   15440:	00e7a423          	sw	a4,8(a5)
   15444:	00040593          	mv	a1,s0
   15448:	00090513          	mv	a0,s2
   1544c:	811fa0ef          	jal	fc5c <_free_r>
   15450:	00090513          	mv	a0,s2
   15454:	fe4eb0ef          	jal	c38 <__malloc_unlock>
   15458:	00812c03          	lw	s8,8(sp)
   1545c:	06c0006f          	j	154c8 <_realloc_r+0x1b4>
   15460:	01000a13          	li	s4,16
   15464:	f09a74e3          	bgeu	s4,s1,1536c <_realloc_r+0x58>
   15468:	00c00793          	li	a5,12
   1546c:	00f92023          	sw	a5,0(s2)
   15470:	00000493          	li	s1,0
   15474:	0540006f          	j	154c8 <_realloc_r+0x1b4>
   15478:	00c6a783          	lw	a5,12(a3)
   1547c:	0086a703          	lw	a4,8(a3)
   15480:	00812c03          	lw	s8,8(sp)
   15484:	00060993          	mv	s3,a2
   15488:	00f72623          	sw	a5,12(a4)
   1548c:	00e7a423          	sw	a4,8(a5)
   15490:	004aa783          	lw	a5,4(s5)
   15494:	414986b3          	sub	a3,s3,s4
   15498:	00f00613          	li	a2,15
   1549c:	0017f793          	and	a5,a5,1
   154a0:	013a8733          	add	a4,s5,s3
   154a4:	08d66263          	bltu	a2,a3,15528 <_realloc_r+0x214>
   154a8:	0137e7b3          	or	a5,a5,s3
   154ac:	00faa223          	sw	a5,4(s5)
   154b0:	00472783          	lw	a5,4(a4)
   154b4:	0017e793          	or	a5,a5,1
   154b8:	00f72223          	sw	a5,4(a4)
   154bc:	00090513          	mv	a0,s2
   154c0:	f78eb0ef          	jal	c38 <__malloc_unlock>
   154c4:	00040493          	mv	s1,s0
   154c8:	02812403          	lw	s0,40(sp)
   154cc:	02c12083          	lw	ra,44(sp)
   154d0:	02012903          	lw	s2,32(sp)
   154d4:	01c12983          	lw	s3,28(sp)
   154d8:	01812a03          	lw	s4,24(sp)
   154dc:	01412a83          	lw	s5,20(sp)
   154e0:	00048513          	mv	a0,s1
   154e4:	02412483          	lw	s1,36(sp)
   154e8:	03010113          	add	sp,sp,48
   154ec:	00008067          	ret
   154f0:	00177713          	and	a4,a4,1
   154f4:	ee071ae3          	bnez	a4,153e8 <_realloc_r+0xd4>
   154f8:	01712623          	sw	s7,12(sp)
   154fc:	ff842b83          	lw	s7,-8(s0)
   15500:	01612823          	sw	s6,16(sp)
   15504:	417a8bb3          	sub	s7,s5,s7
   15508:	004ba703          	lw	a4,4(s7)
   1550c:	ffc77713          	and	a4,a4,-4
   15510:	ec9ff06f          	j	153d8 <_realloc_r+0xc4>
   15514:	02c12083          	lw	ra,44(sp)
   15518:	02412483          	lw	s1,36(sp)
   1551c:	00060593          	mv	a1,a2
   15520:	03010113          	add	sp,sp,48
   15524:	8ecfe06f          	j	13610 <_malloc_r>
   15528:	0147e7b3          	or	a5,a5,s4
   1552c:	00faa223          	sw	a5,4(s5)
   15530:	014a85b3          	add	a1,s5,s4
   15534:	0016e693          	or	a3,a3,1
   15538:	00d5a223          	sw	a3,4(a1)
   1553c:	00472783          	lw	a5,4(a4)
   15540:	00858593          	add	a1,a1,8
   15544:	00090513          	mv	a0,s2
   15548:	0017e793          	or	a5,a5,1
   1554c:	00f72223          	sw	a5,4(a4)
   15550:	f0cfa0ef          	jal	fc5c <_free_r>
   15554:	f69ff06f          	j	154bc <_realloc_r+0x1a8>
   15558:	ffc7f793          	and	a5,a5,-4
   1555c:	013786b3          	add	a3,a5,s3
   15560:	010a0613          	add	a2,s4,16
   15564:	26c6d063          	bge	a3,a2,157c4 <_realloc_r+0x4b0>
   15568:	00177713          	and	a4,a4,1
   1556c:	e6071ee3          	bnez	a4,153e8 <_realloc_r+0xd4>
   15570:	01712623          	sw	s7,12(sp)
   15574:	ff842b83          	lw	s7,-8(s0)
   15578:	01612823          	sw	s6,16(sp)
   1557c:	417a8bb3          	sub	s7,s5,s7
   15580:	004ba703          	lw	a4,4(s7)
   15584:	ffc77713          	and	a4,a4,-4
   15588:	00e787b3          	add	a5,a5,a4
   1558c:	01378b33          	add	s6,a5,s3
   15590:	e4cb44e3          	blt	s6,a2,153d8 <_realloc_r+0xc4>
   15594:	00cba783          	lw	a5,12(s7)
   15598:	008ba703          	lw	a4,8(s7)
   1559c:	ffc98613          	add	a2,s3,-4
   155a0:	02400693          	li	a3,36
   155a4:	00f72623          	sw	a5,12(a4)
   155a8:	00e7a423          	sw	a4,8(a5)
   155ac:	008b8493          	add	s1,s7,8
   155b0:	28c6e463          	bltu	a3,a2,15838 <_realloc_r+0x524>
   155b4:	01300713          	li	a4,19
   155b8:	00048793          	mv	a5,s1
   155bc:	02c77263          	bgeu	a4,a2,155e0 <_realloc_r+0x2cc>
   155c0:	00042703          	lw	a4,0(s0)
   155c4:	01b00793          	li	a5,27
   155c8:	00eba423          	sw	a4,8(s7)
   155cc:	00442703          	lw	a4,4(s0)
   155d0:	00eba623          	sw	a4,12(s7)
   155d4:	26c7ea63          	bltu	a5,a2,15848 <_realloc_r+0x534>
   155d8:	00840413          	add	s0,s0,8
   155dc:	010b8793          	add	a5,s7,16
   155e0:	00042703          	lw	a4,0(s0)
   155e4:	00e7a023          	sw	a4,0(a5)
   155e8:	00442703          	lw	a4,4(s0)
   155ec:	00e7a223          	sw	a4,4(a5)
   155f0:	00842703          	lw	a4,8(s0)
   155f4:	00e7a423          	sw	a4,8(a5)
   155f8:	014b8733          	add	a4,s7,s4
   155fc:	414b07b3          	sub	a5,s6,s4
   15600:	00ec2423          	sw	a4,8(s8)
   15604:	0017e793          	or	a5,a5,1
   15608:	00f72223          	sw	a5,4(a4)
   1560c:	004ba783          	lw	a5,4(s7)
   15610:	00090513          	mv	a0,s2
   15614:	0017f793          	and	a5,a5,1
   15618:	0147e7b3          	or	a5,a5,s4
   1561c:	00fba223          	sw	a5,4(s7)
   15620:	e18eb0ef          	jal	c38 <__malloc_unlock>
   15624:	01012b03          	lw	s6,16(sp)
   15628:	00c12b83          	lw	s7,12(sp)
   1562c:	00812c03          	lw	s8,8(sp)
   15630:	e99ff06f          	j	154c8 <_realloc_r+0x1b4>
   15634:	00042683          	lw	a3,0(s0)
   15638:	01b00713          	li	a4,27
   1563c:	00d52023          	sw	a3,0(a0)
   15640:	00442683          	lw	a3,4(s0)
   15644:	00d52223          	sw	a3,4(a0)
   15648:	14c76e63          	bltu	a4,a2,157a4 <_realloc_r+0x490>
   1564c:	00840713          	add	a4,s0,8
   15650:	00850793          	add	a5,a0,8
   15654:	dd9ff06f          	j	1542c <_realloc_r+0x118>
   15658:	ffc52783          	lw	a5,-4(a0)
   1565c:	00812c03          	lw	s8,8(sp)
   15660:	ffc7f793          	and	a5,a5,-4
   15664:	00f989b3          	add	s3,s3,a5
   15668:	e29ff06f          	j	15490 <_realloc_r+0x17c>
   1566c:	00cba783          	lw	a5,12(s7)
   15670:	008ba703          	lw	a4,8(s7)
   15674:	ffc98613          	add	a2,s3,-4
   15678:	02400693          	li	a3,36
   1567c:	00f72623          	sw	a5,12(a4)
   15680:	00e7a423          	sw	a4,8(a5)
   15684:	008b8493          	add	s1,s7,8
   15688:	10c6e663          	bltu	a3,a2,15794 <_realloc_r+0x480>
   1568c:	01300713          	li	a4,19
   15690:	00048793          	mv	a5,s1
   15694:	02c77c63          	bgeu	a4,a2,156cc <_realloc_r+0x3b8>
   15698:	00042703          	lw	a4,0(s0)
   1569c:	01b00793          	li	a5,27
   156a0:	00eba423          	sw	a4,8(s7)
   156a4:	00442703          	lw	a4,4(s0)
   156a8:	00eba623          	sw	a4,12(s7)
   156ac:	14c7f863          	bgeu	a5,a2,157fc <_realloc_r+0x4e8>
   156b0:	00842783          	lw	a5,8(s0)
   156b4:	00fba823          	sw	a5,16(s7)
   156b8:	00c42783          	lw	a5,12(s0)
   156bc:	00fbaa23          	sw	a5,20(s7)
   156c0:	0ad60c63          	beq	a2,a3,15778 <_realloc_r+0x464>
   156c4:	01040413          	add	s0,s0,16
   156c8:	018b8793          	add	a5,s7,24
   156cc:	00042703          	lw	a4,0(s0)
   156d0:	00e7a023          	sw	a4,0(a5)
   156d4:	00442703          	lw	a4,4(s0)
   156d8:	00e7a223          	sw	a4,4(a5)
   156dc:	00842703          	lw	a4,8(s0)
   156e0:	00e7a423          	sw	a4,8(a5)
   156e4:	000b0993          	mv	s3,s6
   156e8:	000b8a93          	mv	s5,s7
   156ec:	01012b03          	lw	s6,16(sp)
   156f0:	00c12b83          	lw	s7,12(sp)
   156f4:	00812c03          	lw	s8,8(sp)
   156f8:	00048413          	mv	s0,s1
   156fc:	d95ff06f          	j	15490 <_realloc_r+0x17c>
   15700:	00040593          	mv	a1,s0
   15704:	facfe0ef          	jal	13eb0 <memmove>
   15708:	d3dff06f          	j	15444 <_realloc_r+0x130>
   1570c:	00c6a783          	lw	a5,12(a3)
   15710:	0086a703          	lw	a4,8(a3)
   15714:	ffc98613          	add	a2,s3,-4
   15718:	02400693          	li	a3,36
   1571c:	00f72623          	sw	a5,12(a4)
   15720:	00e7a423          	sw	a4,8(a5)
   15724:	008ba703          	lw	a4,8(s7)
   15728:	00cba783          	lw	a5,12(s7)
   1572c:	008b8493          	add	s1,s7,8
   15730:	00f72623          	sw	a5,12(a4)
   15734:	00e7a423          	sw	a4,8(a5)
   15738:	04c6ee63          	bltu	a3,a2,15794 <_realloc_r+0x480>
   1573c:	01300713          	li	a4,19
   15740:	00048793          	mv	a5,s1
   15744:	f8c774e3          	bgeu	a4,a2,156cc <_realloc_r+0x3b8>
   15748:	00042703          	lw	a4,0(s0)
   1574c:	01b00793          	li	a5,27
   15750:	00eba423          	sw	a4,8(s7)
   15754:	00442703          	lw	a4,4(s0)
   15758:	00eba623          	sw	a4,12(s7)
   1575c:	0ac7f063          	bgeu	a5,a2,157fc <_realloc_r+0x4e8>
   15760:	00842703          	lw	a4,8(s0)
   15764:	02400793          	li	a5,36
   15768:	00eba823          	sw	a4,16(s7)
   1576c:	00c42703          	lw	a4,12(s0)
   15770:	00ebaa23          	sw	a4,20(s7)
   15774:	f4f618e3          	bne	a2,a5,156c4 <_realloc_r+0x3b0>
   15778:	01042703          	lw	a4,16(s0)
   1577c:	020b8793          	add	a5,s7,32
   15780:	01840413          	add	s0,s0,24
   15784:	00ebac23          	sw	a4,24(s7)
   15788:	ffc42703          	lw	a4,-4(s0)
   1578c:	00ebae23          	sw	a4,28(s7)
   15790:	f3dff06f          	j	156cc <_realloc_r+0x3b8>
   15794:	00040593          	mv	a1,s0
   15798:	00048513          	mv	a0,s1
   1579c:	f14fe0ef          	jal	13eb0 <memmove>
   157a0:	f45ff06f          	j	156e4 <_realloc_r+0x3d0>
   157a4:	00842703          	lw	a4,8(s0)
   157a8:	00e52423          	sw	a4,8(a0)
   157ac:	00c42703          	lw	a4,12(s0)
   157b0:	00e52623          	sw	a4,12(a0)
   157b4:	06f60463          	beq	a2,a5,1581c <_realloc_r+0x508>
   157b8:	01040713          	add	a4,s0,16
   157bc:	01050793          	add	a5,a0,16
   157c0:	c6dff06f          	j	1542c <_realloc_r+0x118>
   157c4:	014a8ab3          	add	s5,s5,s4
   157c8:	414687b3          	sub	a5,a3,s4
   157cc:	015c2423          	sw	s5,8(s8)
   157d0:	0017e793          	or	a5,a5,1
   157d4:	00faa223          	sw	a5,4(s5)
   157d8:	ffc42783          	lw	a5,-4(s0)
   157dc:	00090513          	mv	a0,s2
   157e0:	00040493          	mv	s1,s0
   157e4:	0017f793          	and	a5,a5,1
   157e8:	0147e7b3          	or	a5,a5,s4
   157ec:	fef42e23          	sw	a5,-4(s0)
   157f0:	c48eb0ef          	jal	c38 <__malloc_unlock>
   157f4:	00812c03          	lw	s8,8(sp)
   157f8:	cd1ff06f          	j	154c8 <_realloc_r+0x1b4>
   157fc:	00840413          	add	s0,s0,8
   15800:	010b8793          	add	a5,s7,16
   15804:	ec9ff06f          	j	156cc <_realloc_r+0x3b8>
   15808:	00090513          	mv	a0,s2
   1580c:	c2ceb0ef          	jal	c38 <__malloc_unlock>
   15810:	00000493          	li	s1,0
   15814:	00812c03          	lw	s8,8(sp)
   15818:	cb1ff06f          	j	154c8 <_realloc_r+0x1b4>
   1581c:	01042683          	lw	a3,16(s0)
   15820:	01840713          	add	a4,s0,24
   15824:	01850793          	add	a5,a0,24
   15828:	00d52823          	sw	a3,16(a0)
   1582c:	01442683          	lw	a3,20(s0)
   15830:	00d52a23          	sw	a3,20(a0)
   15834:	bf9ff06f          	j	1542c <_realloc_r+0x118>
   15838:	00040593          	mv	a1,s0
   1583c:	00048513          	mv	a0,s1
   15840:	e70fe0ef          	jal	13eb0 <memmove>
   15844:	db5ff06f          	j	155f8 <_realloc_r+0x2e4>
   15848:	00842783          	lw	a5,8(s0)
   1584c:	00fba823          	sw	a5,16(s7)
   15850:	00c42783          	lw	a5,12(s0)
   15854:	00fbaa23          	sw	a5,20(s7)
   15858:	00d60863          	beq	a2,a3,15868 <_realloc_r+0x554>
   1585c:	01040413          	add	s0,s0,16
   15860:	018b8793          	add	a5,s7,24
   15864:	d7dff06f          	j	155e0 <_realloc_r+0x2cc>
   15868:	01042703          	lw	a4,16(s0)
   1586c:	020b8793          	add	a5,s7,32
   15870:	01840413          	add	s0,s0,24
   15874:	00ebac23          	sw	a4,24(s7)
   15878:	ffc42703          	lw	a4,-4(s0)
   1587c:	00ebae23          	sw	a4,28(s7)
   15880:	d61ff06f          	j	155e0 <_realloc_r+0x2cc>

00015884 <frexp>:
   15884:	ff010113          	add	sp,sp,-16
   15888:	00912223          	sw	s1,4(sp)
   1588c:	800004b7          	lui	s1,0x80000
   15890:	00812423          	sw	s0,8(sp)
   15894:	00112623          	sw	ra,12(sp)
   15898:	fff48493          	add	s1,s1,-1 # 7fffffff <__alt_data_end+0x7ffb6c1f>
   1589c:	00060413          	mv	s0,a2
   158a0:	00062023          	sw	zero,0(a2)
   158a4:	00b4f6b3          	and	a3,s1,a1
   158a8:	7ff00637          	lui	a2,0x7ff00
   158ac:	00058793          	mv	a5,a1
   158b0:	00050713          	mv	a4,a0
   158b4:	04c6f063          	bgeu	a3,a2,158f4 <frexp+0x70>
   158b8:	00a6e633          	or	a2,a3,a0
   158bc:	02060c63          	beqz	a2,158f4 <frexp+0x70>
   158c0:	0145d613          	srl	a2,a1,0x14
   158c4:	7ff67613          	and	a2,a2,2047
   158c8:	04060463          	beqz	a2,15910 <frexp+0x8c>
   158cc:	00000593          	li	a1,0
   158d0:	80100637          	lui	a2,0x80100
   158d4:	4146d693          	sra	a3,a3,0x14
   158d8:	fff60613          	add	a2,a2,-1 # 800fffff <__alt_data_end+0x800b6c1f>
   158dc:	c0268693          	add	a3,a3,-1022
   158e0:	00c7f7b3          	and	a5,a5,a2
   158e4:	00b686b3          	add	a3,a3,a1
   158e8:	3fe00637          	lui	a2,0x3fe00
   158ec:	00c7e7b3          	or	a5,a5,a2
   158f0:	00d42023          	sw	a3,0(s0)
   158f4:	00c12083          	lw	ra,12(sp)
   158f8:	00812403          	lw	s0,8(sp)
   158fc:	00412483          	lw	s1,4(sp)
   15900:	00070513          	mv	a0,a4
   15904:	00078593          	mv	a1,a5
   15908:	01010113          	add	sp,sp,16
   1590c:	00008067          	ret
   15910:	0000e797          	auipc	a5,0xe
   15914:	6d078793          	add	a5,a5,1744 # 23fe0 <_global_impure_ptr+0x18>
   15918:	0047a683          	lw	a3,4(a5)
   1591c:	0007a603          	lw	a2,0(a5)
   15920:	178080ef          	jal	1da98 <__muldf3>
   15924:	00058793          	mv	a5,a1
   15928:	00b4f6b3          	and	a3,s1,a1
   1592c:	00050713          	mv	a4,a0
   15930:	fca00593          	li	a1,-54
   15934:	f9dff06f          	j	158d0 <frexp+0x4c>

00015938 <_sbrk_r>:
   15938:	ff010113          	add	sp,sp,-16
   1593c:	00812423          	sw	s0,8(sp)
   15940:	00050413          	mv	s0,a0
   15944:	00058513          	mv	a0,a1
   15948:	00012797          	auipc	a5,0x12
   1594c:	f007ac23          	sw	zero,-232(a5) # 27860 <errno>
   15950:	00112623          	sw	ra,12(sp)
   15954:	5150c0ef          	jal	22668 <_sbrk>
   15958:	fff00793          	li	a5,-1
   1595c:	00f50a63          	beq	a0,a5,15970 <_sbrk_r+0x38>
   15960:	00c12083          	lw	ra,12(sp)
   15964:	00812403          	lw	s0,8(sp)
   15968:	01010113          	add	sp,sp,16
   1596c:	00008067          	ret
   15970:	00012797          	auipc	a5,0x12
   15974:	ef07a783          	lw	a5,-272(a5) # 27860 <errno>
   15978:	fe0784e3          	beqz	a5,15960 <_sbrk_r+0x28>
   1597c:	00c12083          	lw	ra,12(sp)
   15980:	00f42023          	sw	a5,0(s0)
   15984:	00812403          	lw	s0,8(sp)
   15988:	01010113          	add	sp,sp,16
   1598c:	00008067          	ret

00015990 <_sprintf_r>:
   15990:	f6010113          	add	sp,sp,-160
   15994:	08c10f13          	add	t5,sp,140
   15998:	ffff0eb7          	lui	t4,0xffff0
   1599c:	80000337          	lui	t1,0x80000
   159a0:	00058e13          	mv	t3,a1
   159a4:	fff30313          	add	t1,t1,-1 # 7fffffff <__alt_data_end+0x7ffb6c1f>
   159a8:	08d12623          	sw	a3,140(sp)
   159ac:	208e8e93          	add	t4,t4,520 # ffff0208 <__alt_data_end+0xfffa6e28>
   159b0:	00810593          	add	a1,sp,8
   159b4:	000f0693          	mv	a3,t5
   159b8:	06112e23          	sw	ra,124(sp)
   159bc:	08f12a23          	sw	a5,148(sp)
   159c0:	08e12823          	sw	a4,144(sp)
   159c4:	09012c23          	sw	a6,152(sp)
   159c8:	09112e23          	sw	a7,156(sp)
   159cc:	01c12423          	sw	t3,8(sp)
   159d0:	01c12c23          	sw	t3,24(sp)
   159d4:	00612823          	sw	t1,16(sp)
   159d8:	00612e23          	sw	t1,28(sp)
   159dc:	01d12a23          	sw	t4,20(sp)
   159e0:	01e12223          	sw	t5,4(sp)
   159e4:	358000ef          	jal	15d3c <_svfprintf_r>
   159e8:	00812783          	lw	a5,8(sp)
   159ec:	00078023          	sb	zero,0(a5)
   159f0:	07c12083          	lw	ra,124(sp)
   159f4:	0a010113          	add	sp,sp,160
   159f8:	00008067          	ret

000159fc <sprintf>:
   159fc:	f6010113          	add	sp,sp,-160
   15a00:	08810f13          	add	t5,sp,136
   15a04:	ffff0eb7          	lui	t4,0xffff0
   15a08:	80000337          	lui	t1,0x80000
   15a0c:	00050e13          	mv	t3,a0
   15a10:	fff30313          	add	t1,t1,-1 # 7fffffff <__alt_data_end+0x7ffb6c1f>
   15a14:	08c12423          	sw	a2,136(sp)
   15a18:	08d12623          	sw	a3,140(sp)
   15a1c:	208e8e93          	add	t4,t4,520 # ffff0208 <__alt_data_end+0xfffa6e28>
   15a20:	00058613          	mv	a2,a1
   15a24:	000f0693          	mv	a3,t5
   15a28:	00810593          	add	a1,sp,8
   15a2c:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
   15a30:	06112e23          	sw	ra,124(sp)
   15a34:	08f12a23          	sw	a5,148(sp)
   15a38:	08e12823          	sw	a4,144(sp)
   15a3c:	09012c23          	sw	a6,152(sp)
   15a40:	09112e23          	sw	a7,156(sp)
   15a44:	01c12423          	sw	t3,8(sp)
   15a48:	01c12c23          	sw	t3,24(sp)
   15a4c:	00612823          	sw	t1,16(sp)
   15a50:	00612e23          	sw	t1,28(sp)
   15a54:	01d12a23          	sw	t4,20(sp)
   15a58:	01e12223          	sw	t5,4(sp)
   15a5c:	2e0000ef          	jal	15d3c <_svfprintf_r>
   15a60:	00812783          	lw	a5,8(sp)
   15a64:	00078023          	sb	zero,0(a5)
   15a68:	07c12083          	lw	ra,124(sp)
   15a6c:	0a010113          	add	sp,sp,160
   15a70:	00008067          	ret

00015a74 <__sread>:
   15a74:	ff010113          	add	sp,sp,-16
   15a78:	00812423          	sw	s0,8(sp)
   15a7c:	00058413          	mv	s0,a1
   15a80:	00e59583          	lh	a1,14(a1)
   15a84:	00112623          	sw	ra,12(sp)
   15a88:	4f5040ef          	jal	1a77c <_read_r>
   15a8c:	02054063          	bltz	a0,15aac <__sread+0x38>
   15a90:	05042783          	lw	a5,80(s0)
   15a94:	00c12083          	lw	ra,12(sp)
   15a98:	00a787b3          	add	a5,a5,a0
   15a9c:	04f42823          	sw	a5,80(s0)
   15aa0:	00812403          	lw	s0,8(sp)
   15aa4:	01010113          	add	sp,sp,16
   15aa8:	00008067          	ret
   15aac:	00c45783          	lhu	a5,12(s0)
   15ab0:	fffff737          	lui	a4,0xfffff
   15ab4:	fff70713          	add	a4,a4,-1 # ffffefff <__alt_data_end+0xfffb5c1f>
   15ab8:	00e7f7b3          	and	a5,a5,a4
   15abc:	00c12083          	lw	ra,12(sp)
   15ac0:	00f41623          	sh	a5,12(s0)
   15ac4:	00812403          	lw	s0,8(sp)
   15ac8:	01010113          	add	sp,sp,16
   15acc:	00008067          	ret

00015ad0 <__seofread>:
   15ad0:	00000513          	li	a0,0
   15ad4:	00008067          	ret

00015ad8 <__swrite>:
   15ad8:	00c59783          	lh	a5,12(a1)
   15adc:	fe010113          	add	sp,sp,-32
   15ae0:	00812c23          	sw	s0,24(sp)
   15ae4:	00912a23          	sw	s1,20(sp)
   15ae8:	01212823          	sw	s2,16(sp)
   15aec:	01312623          	sw	s3,12(sp)
   15af0:	00112e23          	sw	ra,28(sp)
   15af4:	1007f713          	and	a4,a5,256
   15af8:	00058413          	mv	s0,a1
   15afc:	00050493          	mv	s1,a0
   15b00:	00060913          	mv	s2,a2
   15b04:	00068993          	mv	s3,a3
   15b08:	04071063          	bnez	a4,15b48 <__swrite+0x70>
   15b0c:	fffff737          	lui	a4,0xfffff
   15b10:	fff70713          	add	a4,a4,-1 # ffffefff <__alt_data_end+0xfffb5c1f>
   15b14:	00e7f7b3          	and	a5,a5,a4
   15b18:	00e41583          	lh	a1,14(s0)
   15b1c:	00f41623          	sh	a5,12(s0)
   15b20:	01812403          	lw	s0,24(sp)
   15b24:	01c12083          	lw	ra,28(sp)
   15b28:	00098693          	mv	a3,s3
   15b2c:	00090613          	mv	a2,s2
   15b30:	00c12983          	lw	s3,12(sp)
   15b34:	01012903          	lw	s2,16(sp)
   15b38:	00048513          	mv	a0,s1
   15b3c:	01412483          	lw	s1,20(sp)
   15b40:	02010113          	add	sp,sp,32
   15b44:	2580406f          	j	19d9c <_write_r>
   15b48:	00e59583          	lh	a1,14(a1)
   15b4c:	00200693          	li	a3,2
   15b50:	00000613          	li	a2,0
   15b54:	351040ef          	jal	1a6a4 <_lseek_r>
   15b58:	00c41783          	lh	a5,12(s0)
   15b5c:	fb1ff06f          	j	15b0c <__swrite+0x34>

00015b60 <__sseek>:
   15b60:	ff010113          	add	sp,sp,-16
   15b64:	00812423          	sw	s0,8(sp)
   15b68:	00058413          	mv	s0,a1
   15b6c:	00e59583          	lh	a1,14(a1)
   15b70:	00112623          	sw	ra,12(sp)
   15b74:	331040ef          	jal	1a6a4 <_lseek_r>
   15b78:	fff00793          	li	a5,-1
   15b7c:	02f50863          	beq	a0,a5,15bac <__sseek+0x4c>
   15b80:	00c45783          	lhu	a5,12(s0)
   15b84:	00001737          	lui	a4,0x1
   15b88:	00c12083          	lw	ra,12(sp)
   15b8c:	00e7e7b3          	or	a5,a5,a4
   15b90:	01079793          	sll	a5,a5,0x10
   15b94:	4107d793          	sra	a5,a5,0x10
   15b98:	04a42823          	sw	a0,80(s0)
   15b9c:	00f41623          	sh	a5,12(s0)
   15ba0:	00812403          	lw	s0,8(sp)
   15ba4:	01010113          	add	sp,sp,16
   15ba8:	00008067          	ret
   15bac:	00c45783          	lhu	a5,12(s0)
   15bb0:	fffff737          	lui	a4,0xfffff
   15bb4:	fff70713          	add	a4,a4,-1 # ffffefff <__alt_data_end+0xfffb5c1f>
   15bb8:	00e7f7b3          	and	a5,a5,a4
   15bbc:	01079793          	sll	a5,a5,0x10
   15bc0:	4107d793          	sra	a5,a5,0x10
   15bc4:	00c12083          	lw	ra,12(sp)
   15bc8:	00f41623          	sh	a5,12(s0)
   15bcc:	00812403          	lw	s0,8(sp)
   15bd0:	01010113          	add	sp,sp,16
   15bd4:	00008067          	ret

00015bd8 <__sclose>:
   15bd8:	00e59583          	lh	a1,14(a1)
   15bdc:	de4f906f          	j	f1c0 <_close_r>

00015be0 <strcpy>:
   15be0:	00b567b3          	or	a5,a0,a1
   15be4:	0037f793          	and	a5,a5,3
   15be8:	08079263          	bnez	a5,15c6c <strcpy+0x8c>
   15bec:	0005a703          	lw	a4,0(a1)
   15bf0:	7f7f86b7          	lui	a3,0x7f7f8
   15bf4:	f7f68693          	add	a3,a3,-129 # 7f7f7f7f <__alt_data_end+0x7f7aeb9f>
   15bf8:	00d777b3          	and	a5,a4,a3
   15bfc:	00d787b3          	add	a5,a5,a3
   15c00:	00e7e7b3          	or	a5,a5,a4
   15c04:	00d7e7b3          	or	a5,a5,a3
   15c08:	fff00613          	li	a2,-1
   15c0c:	06c79e63          	bne	a5,a2,15c88 <strcpy+0xa8>
   15c10:	00050613          	mv	a2,a0
   15c14:	fff00813          	li	a6,-1
   15c18:	00e62023          	sw	a4,0(a2) # 3fe00000 <__alt_data_end+0x3fdb6c20>
   15c1c:	0045a703          	lw	a4,4(a1)
   15c20:	00458593          	add	a1,a1,4
   15c24:	00460613          	add	a2,a2,4
   15c28:	00d777b3          	and	a5,a4,a3
   15c2c:	00d787b3          	add	a5,a5,a3
   15c30:	00e7e7b3          	or	a5,a5,a4
   15c34:	00d7e7b3          	or	a5,a5,a3
   15c38:	ff0780e3          	beq	a5,a6,15c18 <strcpy+0x38>
   15c3c:	0005c783          	lbu	a5,0(a1)
   15c40:	0015c703          	lbu	a4,1(a1)
   15c44:	0025c683          	lbu	a3,2(a1)
   15c48:	00f60023          	sb	a5,0(a2)
   15c4c:	00078a63          	beqz	a5,15c60 <strcpy+0x80>
   15c50:	00e600a3          	sb	a4,1(a2)
   15c54:	00070663          	beqz	a4,15c60 <strcpy+0x80>
   15c58:	00d60123          	sb	a3,2(a2)
   15c5c:	00069463          	bnez	a3,15c64 <strcpy+0x84>
   15c60:	00008067          	ret
   15c64:	000601a3          	sb	zero,3(a2)
   15c68:	00008067          	ret
   15c6c:	00050793          	mv	a5,a0
   15c70:	0005c703          	lbu	a4,0(a1)
   15c74:	00178793          	add	a5,a5,1
   15c78:	00158593          	add	a1,a1,1
   15c7c:	fee78fa3          	sb	a4,-1(a5)
   15c80:	fe0718e3          	bnez	a4,15c70 <strcpy+0x90>
   15c84:	00008067          	ret
   15c88:	00050613          	mv	a2,a0
   15c8c:	fb1ff06f          	j	15c3c <strcpy+0x5c>

00015c90 <strncpy>:
   15c90:	00a5e7b3          	or	a5,a1,a0
   15c94:	0037f793          	and	a5,a5,3
   15c98:	00079663          	bnez	a5,15ca4 <strncpy+0x14>
   15c9c:	00300793          	li	a5,3
   15ca0:	04c7e663          	bltu	a5,a2,15cec <strncpy+0x5c>
   15ca4:	00050713          	mv	a4,a0
   15ca8:	01c0006f          	j	15cc4 <strncpy+0x34>
   15cac:	fff5c683          	lbu	a3,-1(a1)
   15cb0:	fff60813          	add	a6,a2,-1
   15cb4:	fed78fa3          	sb	a3,-1(a5)
   15cb8:	00068e63          	beqz	a3,15cd4 <strncpy+0x44>
   15cbc:	00078713          	mv	a4,a5
   15cc0:	00080613          	mv	a2,a6
   15cc4:	00158593          	add	a1,a1,1
   15cc8:	00170793          	add	a5,a4,1
   15ccc:	fe0610e3          	bnez	a2,15cac <strncpy+0x1c>
   15cd0:	00008067          	ret
   15cd4:	00c70733          	add	a4,a4,a2
   15cd8:	06080063          	beqz	a6,15d38 <strncpy+0xa8>
   15cdc:	00178793          	add	a5,a5,1
   15ce0:	fe078fa3          	sb	zero,-1(a5)
   15ce4:	fee79ce3          	bne	a5,a4,15cdc <strncpy+0x4c>
   15ce8:	00008067          	ret
   15cec:	feff0337          	lui	t1,0xfeff0
   15cf0:	808088b7          	lui	a7,0x80808
   15cf4:	00050713          	mv	a4,a0
   15cf8:	eff30313          	add	t1,t1,-257 # fefefeff <__alt_data_end+0xfefa6b1f>
   15cfc:	08088893          	add	a7,a7,128 # 80808080 <__alt_data_end+0x807beca0>
   15d00:	00300e13          	li	t3,3
   15d04:	0180006f          	j	15d1c <strncpy+0x8c>
   15d08:	00d72023          	sw	a3,0(a4)
   15d0c:	ffc60613          	add	a2,a2,-4
   15d10:	00470713          	add	a4,a4,4
   15d14:	00458593          	add	a1,a1,4
   15d18:	face76e3          	bgeu	t3,a2,15cc4 <strncpy+0x34>
   15d1c:	0005a683          	lw	a3,0(a1)
   15d20:	006687b3          	add	a5,a3,t1
   15d24:	fff6c813          	not	a6,a3
   15d28:	0107f7b3          	and	a5,a5,a6
   15d2c:	0117f7b3          	and	a5,a5,a7
   15d30:	fc078ce3          	beqz	a5,15d08 <strncpy+0x78>
   15d34:	f91ff06f          	j	15cc4 <strncpy+0x34>
   15d38:	00008067          	ret

00015d3c <_svfprintf_r>:
   15d3c:	e3010113          	add	sp,sp,-464
   15d40:	1c112623          	sw	ra,460(sp)
   15d44:	1c812423          	sw	s0,456(sp)
   15d48:	1b812423          	sw	s8,424(sp)
   15d4c:	00058413          	mv	s0,a1
   15d50:	00b12023          	sw	a1,0(sp)
   15d54:	00060c13          	mv	s8,a2
   15d58:	00d12623          	sw	a3,12(sp)
   15d5c:	00a12e23          	sw	a0,28(sp)
   15d60:	decfd0ef          	jal	1334c <_localeconv_r>
   15d64:	00052703          	lw	a4,0(a0)
   15d68:	00070513          	mv	a0,a4
   15d6c:	02e12223          	sw	a4,36(sp)
   15d70:	dccf60ef          	jal	c33c <strlen>
   15d74:	00c45703          	lhu	a4,12(s0)
   15d78:	0c012823          	sw	zero,208(sp)
   15d7c:	0c012a23          	sw	zero,212(sp)
   15d80:	0c012c23          	sw	zero,216(sp)
   15d84:	0c012e23          	sw	zero,220(sp)
   15d88:	08077713          	and	a4,a4,128
   15d8c:	02a12023          	sw	a0,32(sp)
   15d90:	00070863          	beqz	a4,15da0 <_svfprintf_r+0x64>
   15d94:	01042703          	lw	a4,16(s0)
   15d98:	00071463          	bnez	a4,15da0 <_svfprintf_r+0x64>
   15d9c:	4d00106f          	j	1726c <_svfprintf_r+0x1530>
   15da0:	1c912223          	sw	s1,452(sp)
   15da4:	1d212023          	sw	s2,448(sp)
   15da8:	1b312e23          	sw	s3,444(sp)
   15dac:	1b412c23          	sw	s4,440(sp)
   15db0:	1b512a23          	sw	s5,436(sp)
   15db4:	1b612823          	sw	s6,432(sp)
   15db8:	1b712623          	sw	s7,428(sp)
   15dbc:	1b912223          	sw	s9,420(sp)
   15dc0:	1ba12023          	sw	s10,416(sp)
   15dc4:	19b12e23          	sw	s11,412(sp)
   15dc8:	000c0d13          	mv	s10,s8
   15dcc:	000d4703          	lbu	a4,0(s10)
   15dd0:	0ec10913          	add	s2,sp,236
   15dd4:	0d212223          	sw	s2,196(sp)
   15dd8:	0c012623          	sw	zero,204(sp)
   15ddc:	0c012423          	sw	zero,200(sp)
   15de0:	00012823          	sw	zero,16(sp)
   15de4:	02012423          	sw	zero,40(sp)
   15de8:	02012c23          	sw	zero,56(sp)
   15dec:	02012a23          	sw	zero,52(sp)
   15df0:	04012023          	sw	zero,64(sp)
   15df4:	02012e23          	sw	zero,60(sp)
   15df8:	00012223          	sw	zero,4(sp)
   15dfc:	01c12a83          	lw	s5,28(sp)
   15e00:	01000413          	li	s0,16
   15e04:	00090493          	mv	s1,s2
   15e08:	22070663          	beqz	a4,16034 <_svfprintf_r+0x2f8>
   15e0c:	000d0993          	mv	s3,s10
   15e10:	02500693          	li	a3,37
   15e14:	2cd70863          	beq	a4,a3,160e4 <_svfprintf_r+0x3a8>
   15e18:	0019c703          	lbu	a4,1(s3)
   15e1c:	00198993          	add	s3,s3,1
   15e20:	fe071ae3          	bnez	a4,15e14 <_svfprintf_r+0xd8>
   15e24:	41a98a33          	sub	s4,s3,s10
   15e28:	21a98663          	beq	s3,s10,16034 <_svfprintf_r+0x2f8>
   15e2c:	0cc12683          	lw	a3,204(sp)
   15e30:	0c812703          	lw	a4,200(sp)
   15e34:	01a4a023          	sw	s10,0(s1)
   15e38:	014686b3          	add	a3,a3,s4
   15e3c:	00170713          	add	a4,a4,1
   15e40:	0144a223          	sw	s4,4(s1)
   15e44:	0cd12623          	sw	a3,204(sp)
   15e48:	0ce12423          	sw	a4,200(sp)
   15e4c:	00700693          	li	a3,7
   15e50:	00848493          	add	s1,s1,8
   15e54:	2ae6c063          	blt	a3,a4,160f4 <_svfprintf_r+0x3b8>
   15e58:	00412783          	lw	a5,4(sp)
   15e5c:	0009c703          	lbu	a4,0(s3)
   15e60:	014787b3          	add	a5,a5,s4
   15e64:	00f12223          	sw	a5,4(sp)
   15e68:	1c070663          	beqz	a4,16034 <_svfprintf_r+0x2f8>
   15e6c:	00000313          	li	t1,0
   15e70:	0019c883          	lbu	a7,1(s3)
   15e74:	0a0103a3          	sb	zero,167(sp)
   15e78:	00198993          	add	s3,s3,1
   15e7c:	fff00a13          	li	s4,-1
   15e80:	00000d93          	li	s11,0
   15e84:	05a00c13          	li	s8,90
   15e88:	00030b13          	mv	s6,t1
   15e8c:	00198993          	add	s3,s3,1
   15e90:	fe088793          	add	a5,a7,-32
   15e94:	04fc6a63          	bltu	s8,a5,15ee8 <_svfprintf_r+0x1ac>
   15e98:	0000e717          	auipc	a4,0xe
   15e9c:	93870713          	add	a4,a4,-1736 # 237d0 <__mprec_bigtens+0x28>
   15ea0:	00279793          	sll	a5,a5,0x2
   15ea4:	00e787b3          	add	a5,a5,a4
   15ea8:	0007a783          	lw	a5,0(a5)
   15eac:	00e787b3          	add	a5,a5,a4
   15eb0:	00078067          	jr	a5
   15eb4:	00000b13          	li	s6,0
   15eb8:	fd088793          	add	a5,a7,-48
   15ebc:	00900693          	li	a3,9
   15ec0:	0009c883          	lbu	a7,0(s3)
   15ec4:	002b1713          	sll	a4,s6,0x2
   15ec8:	01670333          	add	t1,a4,s6
   15ecc:	00131313          	sll	t1,t1,0x1
   15ed0:	00678b33          	add	s6,a5,t1
   15ed4:	fd088793          	add	a5,a7,-48
   15ed8:	00198993          	add	s3,s3,1
   15edc:	fef6f2e3          	bgeu	a3,a5,15ec0 <_svfprintf_r+0x184>
   15ee0:	fe088793          	add	a5,a7,-32
   15ee4:	fafc7ae3          	bgeu	s8,a5,15e98 <_svfprintf_r+0x15c>
   15ee8:	000b0313          	mv	t1,s6
   15eec:	14088463          	beqz	a7,16034 <_svfprintf_r+0x2f8>
   15ef0:	13110623          	sb	a7,300(sp)
   15ef4:	0a0103a3          	sb	zero,167(sp)
   15ef8:	00100c93          	li	s9,1
   15efc:	00100c13          	li	s8,1
   15f00:	12c10d13          	add	s10,sp,300
   15f04:	00012423          	sw	zero,8(sp)
   15f08:	00000a13          	li	s4,0
   15f0c:	00012c23          	sw	zero,24(sp)
   15f10:	00012a23          	sw	zero,20(sp)
   15f14:	00000b13          	li	s6,0
   15f18:	002df293          	and	t0,s11,2
   15f1c:	00028463          	beqz	t0,15f24 <_svfprintf_r+0x1e8>
   15f20:	002c8c93          	add	s9,s9,2
   15f24:	084dff93          	and	t6,s11,132
   15f28:	0cc12603          	lw	a2,204(sp)
   15f2c:	000f9663          	bnez	t6,15f38 <_svfprintf_r+0x1fc>
   15f30:	41930733          	sub	a4,t1,s9
   15f34:	4ce040e3          	bgtz	a4,16bf4 <_svfprintf_r+0xeb8>
   15f38:	0a714703          	lbu	a4,167(sp)
   15f3c:	02070a63          	beqz	a4,15f70 <_svfprintf_r+0x234>
   15f40:	0c812703          	lw	a4,200(sp)
   15f44:	0a710593          	add	a1,sp,167
   15f48:	00b4a023          	sw	a1,0(s1)
   15f4c:	00160613          	add	a2,a2,1
   15f50:	00100593          	li	a1,1
   15f54:	00170713          	add	a4,a4,1
   15f58:	00b4a223          	sw	a1,4(s1)
   15f5c:	0cc12623          	sw	a2,204(sp)
   15f60:	0ce12423          	sw	a4,200(sp)
   15f64:	00700593          	li	a1,7
   15f68:	00848493          	add	s1,s1,8
   15f6c:	2ce5cc63          	blt	a1,a4,16244 <_svfprintf_r+0x508>
   15f70:	02028a63          	beqz	t0,15fa4 <_svfprintf_r+0x268>
   15f74:	0c812703          	lw	a4,200(sp)
   15f78:	00200593          	li	a1,2
   15f7c:	00260613          	add	a2,a2,2
   15f80:	00170713          	add	a4,a4,1
   15f84:	0a810793          	add	a5,sp,168
   15f88:	00b4a223          	sw	a1,4(s1)
   15f8c:	00f4a023          	sw	a5,0(s1)
   15f90:	0cc12623          	sw	a2,204(sp)
   15f94:	0ce12423          	sw	a4,200(sp)
   15f98:	00700593          	li	a1,7
   15f9c:	00848493          	add	s1,s1,8
   15fa0:	58e5c0e3          	blt	a1,a4,16d20 <_svfprintf_r+0xfe4>
   15fa4:	08000713          	li	a4,128
   15fa8:	20ef8ee3          	beq	t6,a4,169c4 <_svfprintf_r+0xc88>
   15fac:	418a0a33          	sub	s4,s4,s8
   15fb0:	334046e3          	bgtz	s4,16adc <_svfprintf_r+0xda0>
   15fb4:	100df713          	and	a4,s11,256
   15fb8:	7e071c63          	bnez	a4,167b0 <_svfprintf_r+0xa74>
   15fbc:	0c812783          	lw	a5,200(sp)
   15fc0:	01860633          	add	a2,a2,s8
   15fc4:	01a4a023          	sw	s10,0(s1)
   15fc8:	00178793          	add	a5,a5,1
   15fcc:	0184a223          	sw	s8,4(s1)
   15fd0:	0cc12623          	sw	a2,204(sp)
   15fd4:	0cf12423          	sw	a5,200(sp)
   15fd8:	00700713          	li	a4,7
   15fdc:	3af74863          	blt	a4,a5,1638c <_svfprintf_r+0x650>
   15fe0:	00848493          	add	s1,s1,8
   15fe4:	004dfe13          	and	t3,s11,4
   15fe8:	000e0663          	beqz	t3,15ff4 <_svfprintf_r+0x2b8>
   15fec:	41930a33          	sub	s4,t1,s9
   15ff0:	3d404263          	bgtz	s4,163b4 <_svfprintf_r+0x678>
   15ff4:	01935463          	bge	t1,s9,15ffc <_svfprintf_r+0x2c0>
   15ff8:	000c8313          	mv	t1,s9
   15ffc:	00412783          	lw	a5,4(sp)
   16000:	006787b3          	add	a5,a5,t1
   16004:	00f12223          	sw	a5,4(sp)
   16008:	3c0610e3          	bnez	a2,16bc8 <_svfprintf_r+0xe8c>
   1600c:	00812783          	lw	a5,8(sp)
   16010:	0c012423          	sw	zero,200(sp)
   16014:	00078863          	beqz	a5,16024 <_svfprintf_r+0x2e8>
   16018:	00812583          	lw	a1,8(sp)
   1601c:	000a8513          	mv	a0,s5
   16020:	c3df90ef          	jal	fc5c <_free_r>
   16024:	00090493          	mv	s1,s2
   16028:	00098d13          	mv	s10,s3
   1602c:	000d4703          	lbu	a4,0(s10)
   16030:	dc071ee3          	bnez	a4,15e0c <_svfprintf_r+0xd0>
   16034:	0cc12783          	lw	a5,204(sp)
   16038:	00078463          	beqz	a5,16040 <_svfprintf_r+0x304>
   1603c:	5090106f          	j	17d44 <_svfprintf_r+0x2008>
   16040:	00012783          	lw	a5,0(sp)
   16044:	1c412483          	lw	s1,452(sp)
   16048:	1c012903          	lw	s2,448(sp)
   1604c:	00c7d783          	lhu	a5,12(a5)
   16050:	1bc12983          	lw	s3,444(sp)
   16054:	1b812a03          	lw	s4,440(sp)
   16058:	0407f793          	and	a5,a5,64
   1605c:	1b412a83          	lw	s5,436(sp)
   16060:	1b012b03          	lw	s6,432(sp)
   16064:	1ac12b83          	lw	s7,428(sp)
   16068:	1a412c83          	lw	s9,420(sp)
   1606c:	1a012d03          	lw	s10,416(sp)
   16070:	19c12d83          	lw	s11,412(sp)
   16074:	00078463          	beqz	a5,1607c <_svfprintf_r+0x340>
   16078:	5200206f          	j	18598 <_svfprintf_r+0x285c>
   1607c:	1cc12083          	lw	ra,460(sp)
   16080:	1c812403          	lw	s0,456(sp)
   16084:	00412503          	lw	a0,4(sp)
   16088:	1a812c03          	lw	s8,424(sp)
   1608c:	1d010113          	add	sp,sp,464
   16090:	00008067          	ret
   16094:	000a8513          	mv	a0,s5
   16098:	ab4fd0ef          	jal	1334c <_localeconv_r>
   1609c:	00452783          	lw	a5,4(a0)
   160a0:	00078513          	mv	a0,a5
   160a4:	02f12e23          	sw	a5,60(sp)
   160a8:	a94f60ef          	jal	c33c <strlen>
   160ac:	00050793          	mv	a5,a0
   160b0:	000a8513          	mv	a0,s5
   160b4:	00078b93          	mv	s7,a5
   160b8:	04f12023          	sw	a5,64(sp)
   160bc:	a90fd0ef          	jal	1334c <_localeconv_r>
   160c0:	00852703          	lw	a4,8(a0)
   160c4:	02e12a23          	sw	a4,52(sp)
   160c8:	000b8463          	beqz	s7,160d0 <_svfprintf_r+0x394>
   160cc:	0800106f          	j	1714c <_svfprintf_r+0x1410>
   160d0:	0009c883          	lbu	a7,0(s3)
   160d4:	db9ff06f          	j	15e8c <_svfprintf_r+0x150>
   160d8:	0009c883          	lbu	a7,0(s3)
   160dc:	020ded93          	or	s11,s11,32
   160e0:	dadff06f          	j	15e8c <_svfprintf_r+0x150>
   160e4:	41a98a33          	sub	s4,s3,s10
   160e8:	d5a992e3          	bne	s3,s10,15e2c <_svfprintf_r+0xf0>
   160ec:	0009c703          	lbu	a4,0(s3)
   160f0:	d79ff06f          	j	15e68 <_svfprintf_r+0x12c>
   160f4:	00012583          	lw	a1,0(sp)
   160f8:	0c410613          	add	a2,sp,196
   160fc:	000a8513          	mv	a0,s5
   16100:	05d040ef          	jal	1a95c <__ssprint_r>
   16104:	f2051ee3          	bnez	a0,16040 <_svfprintf_r+0x304>
   16108:	00090493          	mv	s1,s2
   1610c:	d4dff06f          	j	15e58 <_svfprintf_r+0x11c>
   16110:	008df713          	and	a4,s11,8
   16114:	000b0313          	mv	t1,s6
   16118:	00070463          	beqz	a4,16120 <_svfprintf_r+0x3e4>
   1611c:	7e10006f          	j	170fc <_svfprintf_r+0x13c0>
   16120:	00c12783          	lw	a5,12(sp)
   16124:	09010513          	add	a0,sp,144
   16128:	01112423          	sw	a7,8(sp)
   1612c:	00778b93          	add	s7,a5,7
   16130:	ff8bfb93          	and	s7,s7,-8
   16134:	000ba583          	lw	a1,0(s7)
   16138:	004ba603          	lw	a2,4(s7)
   1613c:	008b8793          	add	a5,s7,8
   16140:	01612a23          	sw	s6,20(sp)
   16144:	00f12623          	sw	a5,12(sp)
   16148:	3c80b0ef          	jal	21510 <__extenddftf2>
   1614c:	09012583          	lw	a1,144(sp)
   16150:	09412603          	lw	a2,148(sp)
   16154:	09812683          	lw	a3,152(sp)
   16158:	09c12703          	lw	a4,156(sp)
   1615c:	01412303          	lw	t1,20(sp)
   16160:	00812883          	lw	a7,8(sp)
   16164:	0d010513          	add	a0,sp,208
   16168:	00612a23          	sw	t1,20(sp)
   1616c:	01112423          	sw	a7,8(sp)
   16170:	0ce12e23          	sw	a4,220(sp)
   16174:	0cb12823          	sw	a1,208(sp)
   16178:	0cc12a23          	sw	a2,212(sp)
   1617c:	0cd12c23          	sw	a3,216(sp)
   16180:	94cfd0ef          	jal	132cc <_ldcheck>
   16184:	0aa12623          	sw	a0,172(sp)
   16188:	00200713          	li	a4,2
   1618c:	00812883          	lw	a7,8(sp)
   16190:	01412303          	lw	t1,20(sp)
   16194:	00e51463          	bne	a0,a4,1619c <_svfprintf_r+0x460>
   16198:	6ac0106f          	j	17844 <_svfprintf_r+0x1b08>
   1619c:	00100713          	li	a4,1
   161a0:	00e51463          	bne	a0,a4,161a8 <_svfprintf_r+0x46c>
   161a4:	2510106f          	j	17bf4 <_svfprintf_r+0x1eb8>
   161a8:	06100713          	li	a4,97
   161ac:	00e89463          	bne	a7,a4,161b4 <_svfprintf_r+0x478>
   161b0:	0210106f          	j	179d0 <_svfprintf_r+0x1c94>
   161b4:	04100713          	li	a4,65
   161b8:	05800793          	li	a5,88
   161bc:	00e89463          	bne	a7,a4,161c4 <_svfprintf_r+0x488>
   161c0:	0150106f          	j	179d4 <_svfprintf_r+0x1c98>
   161c4:	fff00713          	li	a4,-1
   161c8:	00ea1463          	bne	s4,a4,161d0 <_svfprintf_r+0x494>
   161cc:	4750106f          	j	17e40 <_svfprintf_r+0x2104>
   161d0:	fdf8f713          	and	a4,a7,-33
   161d4:	04700693          	li	a3,71
   161d8:	00012423          	sw	zero,8(sp)
   161dc:	00d71663          	bne	a4,a3,161e8 <_svfprintf_r+0x4ac>
   161e0:	000a1463          	bnez	s4,161e8 <_svfprintf_r+0x4ac>
   161e4:	00100a13          	li	s4,1
   161e8:	0dc12e83          	lw	t4,220(sp)
   161ec:	100de793          	or	a5,s11,256
   161f0:	02012623          	sw	zero,44(sp)
   161f4:	0d012283          	lw	t0,208(sp)
   161f8:	0d412f83          	lw	t6,212(sp)
   161fc:	0d812f03          	lw	t5,216(sp)
   16200:	00078b93          	mv	s7,a5
   16204:	000eda63          	bgez	t4,16218 <_svfprintf_r+0x4dc>
   16208:	80000737          	lui	a4,0x80000
   1620c:	02d00793          	li	a5,45
   16210:	01d74eb3          	xor	t4,a4,t4
   16214:	02f12623          	sw	a5,44(sp)
   16218:	fbf88713          	add	a4,a7,-65
   1621c:	02500693          	li	a3,37
   16220:	00e6f463          	bgeu	a3,a4,16228 <_svfprintf_r+0x4ec>
   16224:	0010106f          	j	17a24 <_svfprintf_r+0x1ce8>
   16228:	0000d697          	auipc	a3,0xd
   1622c:	71468693          	add	a3,a3,1812 # 2393c <__mprec_bigtens+0x194>
   16230:	00271713          	sll	a4,a4,0x2
   16234:	00d70733          	add	a4,a4,a3
   16238:	00072703          	lw	a4,0(a4) # 80000000 <__alt_data_end+0x7ffb6c20>
   1623c:	00d70733          	add	a4,a4,a3
   16240:	00070067          	jr	a4
   16244:	00012583          	lw	a1,0(sp)
   16248:	0c410613          	add	a2,sp,196
   1624c:	000a8513          	mv	a0,s5
   16250:	04612423          	sw	t1,72(sp)
   16254:	05112223          	sw	a7,68(sp)
   16258:	03f12823          	sw	t6,48(sp)
   1625c:	02512623          	sw	t0,44(sp)
   16260:	6fc040ef          	jal	1a95c <__ssprint_r>
   16264:	16051ce3          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16268:	0cc12603          	lw	a2,204(sp)
   1626c:	04812303          	lw	t1,72(sp)
   16270:	04412883          	lw	a7,68(sp)
   16274:	03012f83          	lw	t6,48(sp)
   16278:	02c12283          	lw	t0,44(sp)
   1627c:	00090493          	mv	s1,s2
   16280:	cf1ff06f          	j	15f70 <_svfprintf_r+0x234>
   16284:	0c812a03          	lw	s4,200(sp)
   16288:	01012783          	lw	a5,16(sp)
   1628c:	00100713          	li	a4,1
   16290:	01a4a023          	sw	s10,0(s1)
   16294:	00160b93          	add	s7,a2,1
   16298:	001a0a13          	add	s4,s4,1
   1629c:	00848c13          	add	s8,s1,8
   162a0:	3ef75ee3          	bge	a4,a5,16e9c <_svfprintf_r+0x1160>
   162a4:	00100713          	li	a4,1
   162a8:	00e4a223          	sw	a4,4(s1)
   162ac:	0d712623          	sw	s7,204(sp)
   162b0:	0d412423          	sw	s4,200(sp)
   162b4:	00700713          	li	a4,7
   162b8:	57474ae3          	blt	a4,s4,1702c <_svfprintf_r+0x12f0>
   162bc:	02012783          	lw	a5,32(sp)
   162c0:	02412703          	lw	a4,36(sp)
   162c4:	001a0a13          	add	s4,s4,1
   162c8:	00fb8bb3          	add	s7,s7,a5
   162cc:	00ec2023          	sw	a4,0(s8)
   162d0:	00fc2223          	sw	a5,4(s8)
   162d4:	0d712623          	sw	s7,204(sp)
   162d8:	0d412423          	sw	s4,200(sp)
   162dc:	00700713          	li	a4,7
   162e0:	008c0c13          	add	s8,s8,8
   162e4:	57474ae3          	blt	a4,s4,17058 <_svfprintf_r+0x131c>
   162e8:	0d012703          	lw	a4,208(sp)
   162ec:	01012783          	lw	a5,16(sp)
   162f0:	08010593          	add	a1,sp,128
   162f4:	08e12823          	sw	a4,144(sp)
   162f8:	0d412703          	lw	a4,212(sp)
   162fc:	09010513          	add	a0,sp,144
   16300:	00612a23          	sw	t1,20(sp)
   16304:	08e12a23          	sw	a4,148(sp)
   16308:	0d812703          	lw	a4,216(sp)
   1630c:	08012023          	sw	zero,128(sp)
   16310:	08012223          	sw	zero,132(sp)
   16314:	08e12c23          	sw	a4,152(sp)
   16318:	0dc12703          	lw	a4,220(sp)
   1631c:	08012423          	sw	zero,136(sp)
   16320:	08012623          	sw	zero,140(sp)
   16324:	08e12e23          	sw	a4,156(sp)
   16328:	fff78493          	add	s1,a5,-1
   1632c:	6fd070ef          	jal	1e228 <__eqtf2>
   16330:	01412303          	lw	t1,20(sp)
   16334:	3a0508e3          	beqz	a0,16ee4 <_svfprintf_r+0x11a8>
   16338:	001d0793          	add	a5,s10,1
   1633c:	001a0a13          	add	s4,s4,1
   16340:	009b8bb3          	add	s7,s7,s1
   16344:	00fc2023          	sw	a5,0(s8)
   16348:	009c2223          	sw	s1,4(s8)
   1634c:	0d712623          	sw	s7,204(sp)
   16350:	0d412423          	sw	s4,200(sp)
   16354:	00700793          	li	a5,7
   16358:	008c0c13          	add	s8,s8,8
   1635c:	3547cee3          	blt	a5,s4,16eb8 <_svfprintf_r+0x117c>
   16360:	03812683          	lw	a3,56(sp)
   16364:	0b410713          	add	a4,sp,180
   16368:	001a0793          	add	a5,s4,1
   1636c:	01768633          	add	a2,a3,s7
   16370:	00ec2023          	sw	a4,0(s8)
   16374:	00dc2223          	sw	a3,4(s8)
   16378:	0cc12623          	sw	a2,204(sp)
   1637c:	0cf12423          	sw	a5,200(sp)
   16380:	00700713          	li	a4,7
   16384:	008c0493          	add	s1,s8,8
   16388:	c4f75ee3          	bge	a4,a5,15fe4 <_svfprintf_r+0x2a8>
   1638c:	00012583          	lw	a1,0(sp)
   16390:	0c410613          	add	a2,sp,196
   16394:	000a8513          	mv	a0,s5
   16398:	00612a23          	sw	t1,20(sp)
   1639c:	5c0040ef          	jal	1a95c <__ssprint_r>
   163a0:	02051ee3          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   163a4:	0cc12603          	lw	a2,204(sp)
   163a8:	01412303          	lw	t1,20(sp)
   163ac:	00090493          	mv	s1,s2
   163b0:	c35ff06f          	j	15fe4 <_svfprintf_r+0x2a8>
   163b4:	01000713          	li	a4,16
   163b8:	0c812783          	lw	a5,200(sp)
   163bc:	0000db97          	auipc	s7,0xd
   163c0:	618b8b93          	add	s7,s7,1560 # 239d4 <blanks.1>
   163c4:	07475663          	bge	a4,s4,16430 <_svfprintf_r+0x6f4>
   163c8:	00012b03          	lw	s6,0(sp)
   163cc:	01000c13          	li	s8,16
   163d0:	00700d13          	li	s10,7
   163d4:	00030d93          	mv	s11,t1
   163d8:	00c0006f          	j	163e4 <_svfprintf_r+0x6a8>
   163dc:	ff0a0a13          	add	s4,s4,-16
   163e0:	054c5663          	bge	s8,s4,1642c <_svfprintf_r+0x6f0>
   163e4:	01060613          	add	a2,a2,16
   163e8:	00178793          	add	a5,a5,1
   163ec:	0174a023          	sw	s7,0(s1)
   163f0:	0184a223          	sw	s8,4(s1)
   163f4:	0cc12623          	sw	a2,204(sp)
   163f8:	0cf12423          	sw	a5,200(sp)
   163fc:	00848493          	add	s1,s1,8
   16400:	fcfd5ee3          	bge	s10,a5,163dc <_svfprintf_r+0x6a0>
   16404:	0c410613          	add	a2,sp,196
   16408:	000b0593          	mv	a1,s6
   1640c:	000a8513          	mv	a0,s5
   16410:	54c040ef          	jal	1a95c <__ssprint_r>
   16414:	7c051463          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16418:	ff0a0a13          	add	s4,s4,-16
   1641c:	0cc12603          	lw	a2,204(sp)
   16420:	0c812783          	lw	a5,200(sp)
   16424:	00090493          	mv	s1,s2
   16428:	fb4c4ee3          	blt	s8,s4,163e4 <_svfprintf_r+0x6a8>
   1642c:	000d8313          	mv	t1,s11
   16430:	01460633          	add	a2,a2,s4
   16434:	00178793          	add	a5,a5,1
   16438:	0174a023          	sw	s7,0(s1)
   1643c:	0144a223          	sw	s4,4(s1)
   16440:	0cc12623          	sw	a2,204(sp)
   16444:	0cf12423          	sw	a5,200(sp)
   16448:	00700713          	li	a4,7
   1644c:	baf754e3          	bge	a4,a5,15ff4 <_svfprintf_r+0x2b8>
   16450:	00012583          	lw	a1,0(sp)
   16454:	0c410613          	add	a2,sp,196
   16458:	000a8513          	mv	a0,s5
   1645c:	00612a23          	sw	t1,20(sp)
   16460:	4fc040ef          	jal	1a95c <__ssprint_r>
   16464:	76051c63          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16468:	0cc12603          	lw	a2,204(sp)
   1646c:	01412303          	lw	t1,20(sp)
   16470:	b85ff06f          	j	15ff4 <_svfprintf_r+0x2b8>
   16474:	00c12783          	lw	a5,12(sp)
   16478:	0a0103a3          	sb	zero,167(sp)
   1647c:	000b0313          	mv	t1,s6
   16480:	0007ad03          	lw	s10,0(a5)
   16484:	00478b93          	add	s7,a5,4
   16488:	000d1463          	bnez	s10,16490 <_svfprintf_r+0x754>
   1648c:	45c0106f          	j	178e8 <_svfprintf_r+0x1bac>
   16490:	6a0a4ae3          	bltz	s4,17344 <_svfprintf_r+0x1608>
   16494:	000a0613          	mv	a2,s4
   16498:	00000593          	li	a1,0
   1649c:	000d0513          	mv	a0,s10
   164a0:	01112623          	sw	a7,12(sp)
   164a4:	01612a23          	sw	s6,20(sp)
   164a8:	945fd0ef          	jal	13dec <memchr>
   164ac:	00a12423          	sw	a0,8(sp)
   164b0:	00c12883          	lw	a7,12(sp)
   164b4:	01412303          	lw	t1,20(sp)
   164b8:	00051463          	bnez	a0,164c0 <_svfprintf_r+0x784>
   164bc:	6d90106f          	j	18394 <_svfprintf_r+0x2658>
   164c0:	00812783          	lw	a5,8(sp)
   164c4:	0a714703          	lbu	a4,167(sp)
   164c8:	01712623          	sw	s7,12(sp)
   164cc:	41a78c33          	sub	s8,a5,s10
   164d0:	fffc4693          	not	a3,s8
   164d4:	41f6d693          	sra	a3,a3,0x1f
   164d8:	00012423          	sw	zero,8(sp)
   164dc:	00012c23          	sw	zero,24(sp)
   164e0:	00012a23          	sw	zero,20(sp)
   164e4:	00dc7cb3          	and	s9,s8,a3
   164e8:	00000a13          	li	s4,0
   164ec:	00000b13          	li	s6,0
   164f0:	a20704e3          	beqz	a4,15f18 <_svfprintf_r+0x1dc>
   164f4:	001c8c93          	add	s9,s9,1
   164f8:	a21ff06f          	j	15f18 <_svfprintf_r+0x1dc>
   164fc:	00c12703          	lw	a4,12(sp)
   16500:	000b0313          	mv	t1,s6
   16504:	0a0103a3          	sb	zero,167(sp)
   16508:	00072783          	lw	a5,0(a4)
   1650c:	00470713          	add	a4,a4,4
   16510:	00e12623          	sw	a4,12(sp)
   16514:	12f10623          	sb	a5,300(sp)
   16518:	00100c93          	li	s9,1
   1651c:	00100c13          	li	s8,1
   16520:	12c10d13          	add	s10,sp,300
   16524:	9e1ff06f          	j	15f04 <_svfprintf_r+0x1c8>
   16528:	00c12783          	lw	a5,12(sp)
   1652c:	0007ab03          	lw	s6,0(a5)
   16530:	00478793          	add	a5,a5,4
   16534:	360b54e3          	bgez	s6,1709c <_svfprintf_r+0x1360>
   16538:	41600b33          	neg	s6,s6
   1653c:	00f12623          	sw	a5,12(sp)
   16540:	0009c883          	lbu	a7,0(s3)
   16544:	004ded93          	or	s11,s11,4
   16548:	945ff06f          	j	15e8c <_svfprintf_r+0x150>
   1654c:	02b00793          	li	a5,43
   16550:	0009c883          	lbu	a7,0(s3)
   16554:	0af103a3          	sb	a5,167(sp)
   16558:	935ff06f          	j	15e8c <_svfprintf_r+0x150>
   1655c:	0009c883          	lbu	a7,0(s3)
   16560:	080ded93          	or	s11,s11,128
   16564:	929ff06f          	j	15e8c <_svfprintf_r+0x150>
   16568:	0009c883          	lbu	a7,0(s3)
   1656c:	02a00793          	li	a5,42
   16570:	00198693          	add	a3,s3,1
   16574:	00f89463          	bne	a7,a5,1657c <_svfprintf_r+0x840>
   16578:	15c0206f          	j	186d4 <_svfprintf_r+0x2998>
   1657c:	fd088793          	add	a5,a7,-48
   16580:	00900713          	li	a4,9
   16584:	00000a13          	li	s4,0
   16588:	00900613          	li	a2,9
   1658c:	02f76463          	bltu	a4,a5,165b4 <_svfprintf_r+0x878>
   16590:	0006c883          	lbu	a7,0(a3)
   16594:	002a1713          	sll	a4,s4,0x2
   16598:	01470a33          	add	s4,a4,s4
   1659c:	001a1a13          	sll	s4,s4,0x1
   165a0:	00fa0a33          	add	s4,s4,a5
   165a4:	fd088793          	add	a5,a7,-48
   165a8:	00168693          	add	a3,a3,1
   165ac:	fef672e3          	bgeu	a2,a5,16590 <_svfprintf_r+0x854>
   165b0:	3c0a46e3          	bltz	s4,1717c <_svfprintf_r+0x1440>
   165b4:	00068993          	mv	s3,a3
   165b8:	8d9ff06f          	j	15e90 <_svfprintf_r+0x154>
   165bc:	0009c883          	lbu	a7,0(s3)
   165c0:	001ded93          	or	s11,s11,1
   165c4:	8c9ff06f          	j	15e8c <_svfprintf_r+0x150>
   165c8:	0a714783          	lbu	a5,167(sp)
   165cc:	0009c883          	lbu	a7,0(s3)
   165d0:	8a079ee3          	bnez	a5,15e8c <_svfprintf_r+0x150>
   165d4:	02000793          	li	a5,32
   165d8:	0af103a3          	sb	a5,167(sp)
   165dc:	8b1ff06f          	j	15e8c <_svfprintf_r+0x150>
   165e0:	000b0313          	mv	t1,s6
   165e4:	010ded93          	or	s11,s11,16
   165e8:	020df793          	and	a5,s11,32
   165ec:	16078ee3          	beqz	a5,16f68 <_svfprintf_r+0x122c>
   165f0:	00c12783          	lw	a5,12(sp)
   165f4:	00778b93          	add	s7,a5,7
   165f8:	ff8bfb93          	and	s7,s7,-8
   165fc:	000bac03          	lw	s8,0(s7)
   16600:	004ba803          	lw	a6,4(s7)
   16604:	008b8793          	add	a5,s7,8
   16608:	00f12623          	sw	a5,12(sp)
   1660c:	bffdf613          	and	a2,s11,-1025
   16610:	00000793          	li	a5,0
   16614:	00000693          	li	a3,0
   16618:	0ad103a3          	sb	a3,167(sp)
   1661c:	2e0a4063          	bltz	s4,168fc <_svfprintf_r+0xbc0>
   16620:	010c66b3          	or	a3,s8,a6
   16624:	f7f67d93          	and	s11,a2,-129
   16628:	2c069863          	bnez	a3,168f8 <_svfprintf_r+0xbbc>
   1662c:	320a1e63          	bnez	s4,16968 <_svfprintf_r+0xc2c>
   16630:	1e0798e3          	bnez	a5,17020 <_svfprintf_r+0x12e4>
   16634:	00167c13          	and	s8,a2,1
   16638:	19010d13          	add	s10,sp,400
   1663c:	260c16e3          	bnez	s8,170a8 <_svfprintf_r+0x136c>
   16640:	0a714703          	lbu	a4,167(sp)
   16644:	000a0c93          	mv	s9,s4
   16648:	018a5463          	bge	s4,s8,16650 <_svfprintf_r+0x914>
   1664c:	000c0c93          	mv	s9,s8
   16650:	00012423          	sw	zero,8(sp)
   16654:	00012c23          	sw	zero,24(sp)
   16658:	00012a23          	sw	zero,20(sp)
   1665c:	00000b13          	li	s6,0
   16660:	e8071ae3          	bnez	a4,164f4 <_svfprintf_r+0x7b8>
   16664:	8b5ff06f          	j	15f18 <_svfprintf_r+0x1dc>
   16668:	000b0313          	mv	t1,s6
   1666c:	010de613          	or	a2,s11,16
   16670:	02067793          	and	a5,a2,32
   16674:	16078ce3          	beqz	a5,16fec <_svfprintf_r+0x12b0>
   16678:	00c12783          	lw	a5,12(sp)
   1667c:	00778b93          	add	s7,a5,7
   16680:	ff8bfb93          	and	s7,s7,-8
   16684:	008b8793          	add	a5,s7,8
   16688:	00f12623          	sw	a5,12(sp)
   1668c:	000bac03          	lw	s8,0(s7)
   16690:	004ba803          	lw	a6,4(s7)
   16694:	00100793          	li	a5,1
   16698:	f7dff06f          	j	16614 <_svfprintf_r+0x8d8>
   1669c:	0009c883          	lbu	a7,0(s3)
   166a0:	008ded93          	or	s11,s11,8
   166a4:	fe8ff06f          	j	15e8c <_svfprintf_r+0x150>
   166a8:	000b0313          	mv	t1,s6
   166ac:	010ded93          	or	s11,s11,16
   166b0:	020df793          	and	a5,s11,32
   166b4:	0e0782e3          	beqz	a5,16f98 <_svfprintf_r+0x125c>
   166b8:	00c12783          	lw	a5,12(sp)
   166bc:	00778b93          	add	s7,a5,7
   166c0:	ff8bfb93          	and	s7,s7,-8
   166c4:	004ba783          	lw	a5,4(s7)
   166c8:	000bac03          	lw	s8,0(s7)
   166cc:	008b8713          	add	a4,s7,8
   166d0:	00e12623          	sw	a4,12(sp)
   166d4:	00078813          	mv	a6,a5
   166d8:	0e07cae3          	bltz	a5,16fcc <_svfprintf_r+0x1290>
   166dc:	000d8613          	mv	a2,s11
   166e0:	000a4863          	bltz	s4,166f0 <_svfprintf_r+0x9b4>
   166e4:	010c67b3          	or	a5,s8,a6
   166e8:	f7fdf613          	and	a2,s11,-129
   166ec:	28078ee3          	beqz	a5,17188 <_svfprintf_r+0x144c>
   166f0:	720818e3          	bnez	a6,17620 <_svfprintf_r+0x18e4>
   166f4:	00900793          	li	a5,9
   166f8:	7387e4e3          	bltu	a5,s8,17620 <_svfprintf_r+0x18e4>
   166fc:	030c0713          	add	a4,s8,48
   16700:	18e107a3          	sb	a4,399(sp)
   16704:	00060d93          	mv	s11,a2
   16708:	00100c13          	li	s8,1
   1670c:	18f10d13          	add	s10,sp,399
   16710:	f31ff06f          	j	16640 <_svfprintf_r+0x904>
   16714:	0009c883          	lbu	a7,0(s3)
   16718:	06800793          	li	a5,104
   1671c:	34f880e3          	beq	a7,a5,1725c <_svfprintf_r+0x1520>
   16720:	040ded93          	or	s11,s11,64
   16724:	f68ff06f          	j	15e8c <_svfprintf_r+0x150>
   16728:	020df793          	and	a5,s11,32
   1672c:	1e078ae3          	beqz	a5,17120 <_svfprintf_r+0x13e4>
   16730:	00c12783          	lw	a5,12(sp)
   16734:	00412683          	lw	a3,4(sp)
   16738:	0007a783          	lw	a5,0(a5)
   1673c:	41f6d713          	sra	a4,a3,0x1f
   16740:	00d7a023          	sw	a3,0(a5)
   16744:	00e7a223          	sw	a4,4(a5)
   16748:	00c12783          	lw	a5,12(sp)
   1674c:	00098d13          	mv	s10,s3
   16750:	00478793          	add	a5,a5,4
   16754:	00f12623          	sw	a5,12(sp)
   16758:	8d5ff06f          	j	1602c <_svfprintf_r+0x2f0>
   1675c:	0009c883          	lbu	a7,0(s3)
   16760:	06c00793          	li	a5,108
   16764:	2ef884e3          	beq	a7,a5,1724c <_svfprintf_r+0x1510>
   16768:	010ded93          	or	s11,s11,16
   1676c:	f20ff06f          	j	15e8c <_svfprintf_r+0x150>
   16770:	00c12703          	lw	a4,12(sp)
   16774:	000087b7          	lui	a5,0x8
   16778:	83078793          	add	a5,a5,-2000 # 7830 <OSSemPend+0x24>
   1677c:	0af11423          	sh	a5,168(sp)
   16780:	00470793          	add	a5,a4,4
   16784:	00f12623          	sw	a5,12(sp)
   16788:	0000d797          	auipc	a5,0xd
   1678c:	94878793          	add	a5,a5,-1720 # 230d0 <OSUnMapTbl+0x16c>
   16790:	02f12423          	sw	a5,40(sp)
   16794:	00072c03          	lw	s8,0(a4)
   16798:	000b0313          	mv	t1,s6
   1679c:	00000813          	li	a6,0
   167a0:	002de613          	or	a2,s11,2
   167a4:	00200793          	li	a5,2
   167a8:	07800893          	li	a7,120
   167ac:	e69ff06f          	j	16614 <_svfprintf_r+0x8d8>
   167b0:	06500713          	li	a4,101
   167b4:	ad1758e3          	bge	a4,a7,16284 <_svfprintf_r+0x548>
   167b8:	0d012703          	lw	a4,208(sp)
   167bc:	08010593          	add	a1,sp,128
   167c0:	09010513          	add	a0,sp,144
   167c4:	08e12823          	sw	a4,144(sp)
   167c8:	0d412703          	lw	a4,212(sp)
   167cc:	02c12823          	sw	a2,48(sp)
   167d0:	02612623          	sw	t1,44(sp)
   167d4:	08e12a23          	sw	a4,148(sp)
   167d8:	0d812703          	lw	a4,216(sp)
   167dc:	08012023          	sw	zero,128(sp)
   167e0:	08012223          	sw	zero,132(sp)
   167e4:	08e12c23          	sw	a4,152(sp)
   167e8:	0dc12703          	lw	a4,220(sp)
   167ec:	08012423          	sw	zero,136(sp)
   167f0:	08012623          	sw	zero,140(sp)
   167f4:	08e12e23          	sw	a4,156(sp)
   167f8:	231070ef          	jal	1e228 <__eqtf2>
   167fc:	02c12303          	lw	t1,44(sp)
   16800:	03012603          	lw	a2,48(sp)
   16804:	54051a63          	bnez	a0,16d58 <_svfprintf_r+0x101c>
   16808:	0c812783          	lw	a5,200(sp)
   1680c:	0000d717          	auipc	a4,0xd
   16810:	8f470713          	add	a4,a4,-1804 # 23100 <OSUnMapTbl+0x19c>
   16814:	00e4a023          	sw	a4,0(s1)
   16818:	00160613          	add	a2,a2,1
   1681c:	00100713          	li	a4,1
   16820:	00178793          	add	a5,a5,1
   16824:	00e4a223          	sw	a4,4(s1)
   16828:	0cc12623          	sw	a2,204(sp)
   1682c:	0cf12423          	sw	a5,200(sp)
   16830:	00700713          	li	a4,7
   16834:	00848493          	add	s1,s1,8
   16838:	78f744e3          	blt	a4,a5,177c0 <_svfprintf_r+0x1a84>
   1683c:	0ac12783          	lw	a5,172(sp)
   16840:	01012703          	lw	a4,16(sp)
   16844:	04e7d0e3          	bge	a5,a4,17084 <_svfprintf_r+0x1348>
   16848:	02412783          	lw	a5,36(sp)
   1684c:	02012703          	lw	a4,32(sp)
   16850:	00848493          	add	s1,s1,8
   16854:	fef4ac23          	sw	a5,-8(s1)
   16858:	0c812783          	lw	a5,200(sp)
   1685c:	00e60633          	add	a2,a2,a4
   16860:	fee4ae23          	sw	a4,-4(s1)
   16864:	00178793          	add	a5,a5,1
   16868:	0cc12623          	sw	a2,204(sp)
   1686c:	0cf12423          	sw	a5,200(sp)
   16870:	00700713          	li	a4,7
   16874:	1af748e3          	blt	a4,a5,17224 <_svfprintf_r+0x14e8>
   16878:	01012783          	lw	a5,16(sp)
   1687c:	fff78a13          	add	s4,a5,-1
   16880:	f7405263          	blez	s4,15fe4 <_svfprintf_r+0x2a8>
   16884:	01000713          	li	a4,16
   16888:	0c812783          	lw	a5,200(sp)
   1688c:	0000d817          	auipc	a6,0xd
   16890:	15880813          	add	a6,a6,344 # 239e4 <zeroes.0>
   16894:	75475ee3          	bge	a4,s4,177f0 <_svfprintf_r+0x1ab4>
   16898:	01000c13          	li	s8,16
   1689c:	00700b93          	li	s7,7
   168a0:	00030d13          	mv	s10,t1
   168a4:	00080b13          	mv	s6,a6
   168a8:	00c0006f          	j	168b4 <_svfprintf_r+0xb78>
   168ac:	ff0a0a13          	add	s4,s4,-16
   168b0:	734c5ce3          	bge	s8,s4,177e8 <_svfprintf_r+0x1aac>
   168b4:	01060613          	add	a2,a2,16
   168b8:	00178793          	add	a5,a5,1
   168bc:	0164a023          	sw	s6,0(s1)
   168c0:	0184a223          	sw	s8,4(s1)
   168c4:	0cc12623          	sw	a2,204(sp)
   168c8:	0cf12423          	sw	a5,200(sp)
   168cc:	00848493          	add	s1,s1,8
   168d0:	fcfbdee3          	bge	s7,a5,168ac <_svfprintf_r+0xb70>
   168d4:	00012583          	lw	a1,0(sp)
   168d8:	0c410613          	add	a2,sp,196
   168dc:	000a8513          	mv	a0,s5
   168e0:	07c040ef          	jal	1a95c <__ssprint_r>
   168e4:	2e051c63          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   168e8:	0cc12603          	lw	a2,204(sp)
   168ec:	0c812783          	lw	a5,200(sp)
   168f0:	00090493          	mv	s1,s2
   168f4:	fb9ff06f          	j	168ac <_svfprintf_r+0xb70>
   168f8:	000d8613          	mv	a2,s11
   168fc:	00100693          	li	a3,1
   16900:	ded788e3          	beq	a5,a3,166f0 <_svfprintf_r+0x9b4>
   16904:	00200693          	li	a3,2
   16908:	06d78c63          	beq	a5,a3,16980 <_svfprintf_r+0xc44>
   1690c:	19010d13          	add	s10,sp,400
   16910:	01d81793          	sll	a5,a6,0x1d
   16914:	007c7693          	and	a3,s8,7
   16918:	003c5c13          	srl	s8,s8,0x3
   1691c:	03068693          	add	a3,a3,48
   16920:	0187ec33          	or	s8,a5,s8
   16924:	00385813          	srl	a6,a6,0x3
   16928:	fedd0fa3          	sb	a3,-1(s10)
   1692c:	010c67b3          	or	a5,s8,a6
   16930:	000d0513          	mv	a0,s10
   16934:	fffd0d13          	add	s10,s10,-1
   16938:	fc079ce3          	bnez	a5,16910 <_svfprintf_r+0xbd4>
   1693c:	00167713          	and	a4,a2,1
   16940:	06070a63          	beqz	a4,169b4 <_svfprintf_r+0xc78>
   16944:	03000713          	li	a4,48
   16948:	06e68663          	beq	a3,a4,169b4 <_svfprintf_r+0xc78>
   1694c:	ffe50513          	add	a0,a0,-2
   16950:	19010793          	add	a5,sp,400
   16954:	feed0fa3          	sb	a4,-1(s10)
   16958:	40a78c33          	sub	s8,a5,a0
   1695c:	00060d93          	mv	s11,a2
   16960:	00050d13          	mv	s10,a0
   16964:	cddff06f          	j	16640 <_svfprintf_r+0x904>
   16968:	00100693          	li	a3,1
   1696c:	00d79463          	bne	a5,a3,16974 <_svfprintf_r+0xc38>
   16970:	2950106f          	j	18404 <_svfprintf_r+0x26c8>
   16974:	00200693          	li	a3,2
   16978:	000d8613          	mv	a2,s11
   1697c:	f8d798e3          	bne	a5,a3,1690c <_svfprintf_r+0xbd0>
   16980:	02812683          	lw	a3,40(sp)
   16984:	19010d13          	add	s10,sp,400
   16988:	00fc7793          	and	a5,s8,15
   1698c:	00f687b3          	add	a5,a3,a5
   16990:	0007c703          	lbu	a4,0(a5)
   16994:	004c5c13          	srl	s8,s8,0x4
   16998:	01c81793          	sll	a5,a6,0x1c
   1699c:	0187ec33          	or	s8,a5,s8
   169a0:	00485813          	srl	a6,a6,0x4
   169a4:	feed0fa3          	sb	a4,-1(s10)
   169a8:	010c67b3          	or	a5,s8,a6
   169ac:	fffd0d13          	add	s10,s10,-1
   169b0:	fc079ce3          	bnez	a5,16988 <_svfprintf_r+0xc4c>
   169b4:	19010793          	add	a5,sp,400
   169b8:	41a78c33          	sub	s8,a5,s10
   169bc:	00060d93          	mv	s11,a2
   169c0:	c81ff06f          	j	16640 <_svfprintf_r+0x904>
   169c4:	41930bb3          	sub	s7,t1,s9
   169c8:	df705263          	blez	s7,15fac <_svfprintf_r+0x270>
   169cc:	01000513          	li	a0,16
   169d0:	0c812583          	lw	a1,200(sp)
   169d4:	0000d817          	auipc	a6,0xd
   169d8:	01080813          	add	a6,a6,16 # 239e4 <zeroes.0>
   169dc:	0b755463          	bge	a0,s7,16a84 <_svfprintf_r+0xd48>
   169e0:	03312623          	sw	s3,44(sp)
   169e4:	00048793          	mv	a5,s1
   169e8:	01000e93          	li	t4,16
   169ec:	000b8493          	mv	s1,s7
   169f0:	00700f93          	li	t6,7
   169f4:	000b0b93          	mv	s7,s6
   169f8:	03112823          	sw	a7,48(sp)
   169fc:	000a0b13          	mv	s6,s4
   16a00:	00080993          	mv	s3,a6
   16a04:	00030a13          	mv	s4,t1
   16a08:	00c0006f          	j	16a14 <_svfprintf_r+0xcd8>
   16a0c:	ff048493          	add	s1,s1,-16
   16a10:	049eda63          	bge	t4,s1,16a64 <_svfprintf_r+0xd28>
   16a14:	01060613          	add	a2,a2,16
   16a18:	00158593          	add	a1,a1,1
   16a1c:	0137a023          	sw	s3,0(a5)
   16a20:	01d7a223          	sw	t4,4(a5)
   16a24:	0cc12623          	sw	a2,204(sp)
   16a28:	0cb12423          	sw	a1,200(sp)
   16a2c:	00878793          	add	a5,a5,8
   16a30:	fcbfdee3          	bge	t6,a1,16a0c <_svfprintf_r+0xcd0>
   16a34:	00012583          	lw	a1,0(sp)
   16a38:	0c410613          	add	a2,sp,196
   16a3c:	000a8513          	mv	a0,s5
   16a40:	71d030ef          	jal	1a95c <__ssprint_r>
   16a44:	18051c63          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16a48:	01000e93          	li	t4,16
   16a4c:	ff048493          	add	s1,s1,-16
   16a50:	0cc12603          	lw	a2,204(sp)
   16a54:	0c812583          	lw	a1,200(sp)
   16a58:	00090793          	mv	a5,s2
   16a5c:	00700f93          	li	t6,7
   16a60:	fa9ecae3          	blt	t4,s1,16a14 <_svfprintf_r+0xcd8>
   16a64:	00098813          	mv	a6,s3
   16a68:	03012883          	lw	a7,48(sp)
   16a6c:	02c12983          	lw	s3,44(sp)
   16a70:	000a0313          	mv	t1,s4
   16a74:	000b0a13          	mv	s4,s6
   16a78:	000b8b13          	mv	s6,s7
   16a7c:	00048b93          	mv	s7,s1
   16a80:	00078493          	mv	s1,a5
   16a84:	01760633          	add	a2,a2,s7
   16a88:	00158593          	add	a1,a1,1
   16a8c:	0104a023          	sw	a6,0(s1)
   16a90:	0174a223          	sw	s7,4(s1)
   16a94:	0cc12623          	sw	a2,204(sp)
   16a98:	0cb12423          	sw	a1,200(sp)
   16a9c:	00700713          	li	a4,7
   16aa0:	00848493          	add	s1,s1,8
   16aa4:	d0b75463          	bge	a4,a1,15fac <_svfprintf_r+0x270>
   16aa8:	00012583          	lw	a1,0(sp)
   16aac:	0c410613          	add	a2,sp,196
   16ab0:	000a8513          	mv	a0,s5
   16ab4:	02612823          	sw	t1,48(sp)
   16ab8:	03112623          	sw	a7,44(sp)
   16abc:	6a1030ef          	jal	1a95c <__ssprint_r>
   16ac0:	10051e63          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16ac4:	418a0a33          	sub	s4,s4,s8
   16ac8:	0cc12603          	lw	a2,204(sp)
   16acc:	03012303          	lw	t1,48(sp)
   16ad0:	02c12883          	lw	a7,44(sp)
   16ad4:	00090493          	mv	s1,s2
   16ad8:	cd405e63          	blez	s4,15fb4 <_svfprintf_r+0x278>
   16adc:	0c812583          	lw	a1,200(sp)
   16ae0:	0000d817          	auipc	a6,0xd
   16ae4:	f0480813          	add	a6,a6,-252 # 239e4 <zeroes.0>
   16ae8:	09445663          	bge	s0,s4,16b74 <_svfprintf_r+0xe38>
   16aec:	00048793          	mv	a5,s1
   16af0:	00700b93          	li	s7,7
   16af4:	000a0493          	mv	s1,s4
   16af8:	03112623          	sw	a7,44(sp)
   16afc:	02612823          	sw	t1,48(sp)
   16b00:	00080a13          	mv	s4,a6
   16b04:	00c0006f          	j	16b10 <_svfprintf_r+0xdd4>
   16b08:	ff048493          	add	s1,s1,-16
   16b0c:	04945a63          	bge	s0,s1,16b60 <_svfprintf_r+0xe24>
   16b10:	01060613          	add	a2,a2,16
   16b14:	00158593          	add	a1,a1,1
   16b18:	0000d717          	auipc	a4,0xd
   16b1c:	ecc70713          	add	a4,a4,-308 # 239e4 <zeroes.0>
   16b20:	00e7a023          	sw	a4,0(a5)
   16b24:	0087a223          	sw	s0,4(a5)
   16b28:	0cc12623          	sw	a2,204(sp)
   16b2c:	0cb12423          	sw	a1,200(sp)
   16b30:	00878793          	add	a5,a5,8
   16b34:	fcbbdae3          	bge	s7,a1,16b08 <_svfprintf_r+0xdcc>
   16b38:	00012583          	lw	a1,0(sp)
   16b3c:	0c410613          	add	a2,sp,196
   16b40:	000a8513          	mv	a0,s5
   16b44:	619030ef          	jal	1a95c <__ssprint_r>
   16b48:	08051a63          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16b4c:	ff048493          	add	s1,s1,-16
   16b50:	0cc12603          	lw	a2,204(sp)
   16b54:	0c812583          	lw	a1,200(sp)
   16b58:	00090793          	mv	a5,s2
   16b5c:	fa944ae3          	blt	s0,s1,16b10 <_svfprintf_r+0xdd4>
   16b60:	02c12883          	lw	a7,44(sp)
   16b64:	03012303          	lw	t1,48(sp)
   16b68:	000a0813          	mv	a6,s4
   16b6c:	00048a13          	mv	s4,s1
   16b70:	00078493          	mv	s1,a5
   16b74:	01460633          	add	a2,a2,s4
   16b78:	00158593          	add	a1,a1,1
   16b7c:	0104a023          	sw	a6,0(s1)
   16b80:	0144a223          	sw	s4,4(s1)
   16b84:	0cc12623          	sw	a2,204(sp)
   16b88:	0cb12423          	sw	a1,200(sp)
   16b8c:	00700713          	li	a4,7
   16b90:	00848493          	add	s1,s1,8
   16b94:	c2b75063          	bge	a4,a1,15fb4 <_svfprintf_r+0x278>
   16b98:	00012583          	lw	a1,0(sp)
   16b9c:	0c410613          	add	a2,sp,196
   16ba0:	000a8513          	mv	a0,s5
   16ba4:	02612823          	sw	t1,48(sp)
   16ba8:	03112623          	sw	a7,44(sp)
   16bac:	5b1030ef          	jal	1a95c <__ssprint_r>
   16bb0:	02051663          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16bb4:	0cc12603          	lw	a2,204(sp)
   16bb8:	03012303          	lw	t1,48(sp)
   16bbc:	02c12883          	lw	a7,44(sp)
   16bc0:	00090493          	mv	s1,s2
   16bc4:	bf0ff06f          	j	15fb4 <_svfprintf_r+0x278>
   16bc8:	00012583          	lw	a1,0(sp)
   16bcc:	0c410613          	add	a2,sp,196
   16bd0:	000a8513          	mv	a0,s5
   16bd4:	589030ef          	jal	1a95c <__ssprint_r>
   16bd8:	c2050a63          	beqz	a0,1600c <_svfprintf_r+0x2d0>
   16bdc:	00812383          	lw	t2,8(sp)
   16be0:	c6038063          	beqz	t2,16040 <_svfprintf_r+0x304>
   16be4:	01c12503          	lw	a0,28(sp)
   16be8:	00038593          	mv	a1,t2
   16bec:	870f90ef          	jal	fc5c <_free_r>
   16bf0:	c50ff06f          	j	16040 <_svfprintf_r+0x304>
   16bf4:	01000513          	li	a0,16
   16bf8:	0c812583          	lw	a1,200(sp)
   16bfc:	0000db97          	auipc	s7,0xd
   16c00:	dd8b8b93          	add	s7,s7,-552 # 239d4 <blanks.1>
   16c04:	0ae55c63          	bge	a0,a4,16cbc <_svfprintf_r+0xf80>
   16c08:	03312623          	sw	s3,44(sp)
   16c0c:	00048793          	mv	a5,s1
   16c10:	000b8993          	mv	s3,s7
   16c14:	01000813          	li	a6,16
   16c18:	000b0b93          	mv	s7,s6
   16c1c:	00700393          	li	t2,7
   16c20:	000a0b13          	mv	s6,s4
   16c24:	02512823          	sw	t0,48(sp)
   16c28:	05f12223          	sw	t6,68(sp)
   16c2c:	05112423          	sw	a7,72(sp)
   16c30:	00070493          	mv	s1,a4
   16c34:	00030a13          	mv	s4,t1
   16c38:	00c0006f          	j	16c44 <_svfprintf_r+0xf08>
   16c3c:	ff048493          	add	s1,s1,-16
   16c40:	04985a63          	bge	a6,s1,16c94 <_svfprintf_r+0xf58>
   16c44:	01060613          	add	a2,a2,16
   16c48:	00158593          	add	a1,a1,1
   16c4c:	0137a023          	sw	s3,0(a5)
   16c50:	0107a223          	sw	a6,4(a5)
   16c54:	0cc12623          	sw	a2,204(sp)
   16c58:	0cb12423          	sw	a1,200(sp)
   16c5c:	00878793          	add	a5,a5,8
   16c60:	fcb3dee3          	bge	t2,a1,16c3c <_svfprintf_r+0xf00>
   16c64:	00012583          	lw	a1,0(sp)
   16c68:	0c410613          	add	a2,sp,196
   16c6c:	000a8513          	mv	a0,s5
   16c70:	4ed030ef          	jal	1a95c <__ssprint_r>
   16c74:	f60514e3          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16c78:	01000813          	li	a6,16
   16c7c:	ff048493          	add	s1,s1,-16
   16c80:	0cc12603          	lw	a2,204(sp)
   16c84:	0c812583          	lw	a1,200(sp)
   16c88:	00090793          	mv	a5,s2
   16c8c:	00700393          	li	t2,7
   16c90:	fa984ae3          	blt	a6,s1,16c44 <_svfprintf_r+0xf08>
   16c94:	000a0313          	mv	t1,s4
   16c98:	03012283          	lw	t0,48(sp)
   16c9c:	000b0a13          	mv	s4,s6
   16ca0:	04412f83          	lw	t6,68(sp)
   16ca4:	000b8b13          	mv	s6,s7
   16ca8:	04812883          	lw	a7,72(sp)
   16cac:	00098b93          	mv	s7,s3
   16cb0:	02c12983          	lw	s3,44(sp)
   16cb4:	00048713          	mv	a4,s1
   16cb8:	00078493          	mv	s1,a5
   16cbc:	00e60633          	add	a2,a2,a4
   16cc0:	00158593          	add	a1,a1,1
   16cc4:	00e4a223          	sw	a4,4(s1)
   16cc8:	0174a023          	sw	s7,0(s1)
   16ccc:	0cc12623          	sw	a2,204(sp)
   16cd0:	0cb12423          	sw	a1,200(sp)
   16cd4:	00700713          	li	a4,7
   16cd8:	00848493          	add	s1,s1,8
   16cdc:	a4b75e63          	bge	a4,a1,15f38 <_svfprintf_r+0x1fc>
   16ce0:	00012583          	lw	a1,0(sp)
   16ce4:	0c410613          	add	a2,sp,196
   16ce8:	000a8513          	mv	a0,s5
   16cec:	04612423          	sw	t1,72(sp)
   16cf0:	05112223          	sw	a7,68(sp)
   16cf4:	03f12823          	sw	t6,48(sp)
   16cf8:	02512623          	sw	t0,44(sp)
   16cfc:	461030ef          	jal	1a95c <__ssprint_r>
   16d00:	ec051ee3          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16d04:	0cc12603          	lw	a2,204(sp)
   16d08:	04812303          	lw	t1,72(sp)
   16d0c:	04412883          	lw	a7,68(sp)
   16d10:	03012f83          	lw	t6,48(sp)
   16d14:	02c12283          	lw	t0,44(sp)
   16d18:	00090493          	mv	s1,s2
   16d1c:	a1cff06f          	j	15f38 <_svfprintf_r+0x1fc>
   16d20:	00012583          	lw	a1,0(sp)
   16d24:	0c410613          	add	a2,sp,196
   16d28:	000a8513          	mv	a0,s5
   16d2c:	04612223          	sw	t1,68(sp)
   16d30:	03112823          	sw	a7,48(sp)
   16d34:	03f12623          	sw	t6,44(sp)
   16d38:	425030ef          	jal	1a95c <__ssprint_r>
   16d3c:	ea0510e3          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16d40:	0cc12603          	lw	a2,204(sp)
   16d44:	04412303          	lw	t1,68(sp)
   16d48:	03012883          	lw	a7,48(sp)
   16d4c:	02c12f83          	lw	t6,44(sp)
   16d50:	00090493          	mv	s1,s2
   16d54:	a50ff06f          	j	15fa4 <_svfprintf_r+0x268>
   16d58:	0ac12583          	lw	a1,172(sp)
   16d5c:	18b058e3          	blez	a1,176ec <_svfprintf_r+0x19b0>
   16d60:	01012783          	lw	a5,16(sp)
   16d64:	000b0a13          	mv	s4,s6
   16d68:	4167c463          	blt	a5,s6,17170 <_svfprintf_r+0x1434>
   16d6c:	03405663          	blez	s4,16d98 <_svfprintf_r+0x105c>
   16d70:	0c812703          	lw	a4,200(sp)
   16d74:	01460633          	add	a2,a2,s4
   16d78:	01a4a023          	sw	s10,0(s1)
   16d7c:	00170713          	add	a4,a4,1
   16d80:	0144a223          	sw	s4,4(s1)
   16d84:	0cc12623          	sw	a2,204(sp)
   16d88:	0ce12423          	sw	a4,200(sp)
   16d8c:	00700593          	li	a1,7
   16d90:	00848493          	add	s1,s1,8
   16d94:	72e5c6e3          	blt	a1,a4,17cc0 <_svfprintf_r+0x1f84>
   16d98:	fffa4713          	not	a4,s4
   16d9c:	41f75713          	sra	a4,a4,0x1f
   16da0:	00ea7a33          	and	s4,s4,a4
   16da4:	414b0a33          	sub	s4,s6,s4
   16da8:	51404e63          	bgtz	s4,172c4 <_svfprintf_r+0x1588>
   16dac:	400df713          	and	a4,s11,1024
   16db0:	016d0bb3          	add	s7,s10,s6
   16db4:	5c071e63          	bnez	a4,17390 <_svfprintf_r+0x1654>
   16db8:	0ac12583          	lw	a1,172(sp)
   16dbc:	01012783          	lw	a5,16(sp)
   16dc0:	78f5cc63          	blt	a1,a5,17558 <_svfprintf_r+0x181c>
   16dc4:	001df713          	and	a4,s11,1
   16dc8:	78071863          	bnez	a4,17558 <_svfprintf_r+0x181c>
   16dcc:	01012703          	lw	a4,16(sp)
   16dd0:	00ed07b3          	add	a5,s10,a4
   16dd4:	40b705b3          	sub	a1,a4,a1
   16dd8:	41778c33          	sub	s8,a5,s7
   16ddc:	0185d463          	bge	a1,s8,16de4 <_svfprintf_r+0x10a8>
   16de0:	00058c13          	mv	s8,a1
   16de4:	03805863          	blez	s8,16e14 <_svfprintf_r+0x10d8>
   16de8:	0c812703          	lw	a4,200(sp)
   16dec:	01860633          	add	a2,a2,s8
   16df0:	0174a023          	sw	s7,0(s1)
   16df4:	00170713          	add	a4,a4,1
   16df8:	0184a223          	sw	s8,4(s1)
   16dfc:	0cc12623          	sw	a2,204(sp)
   16e00:	0ce12423          	sw	a4,200(sp)
   16e04:	00700793          	li	a5,7
   16e08:	00848493          	add	s1,s1,8
   16e0c:	00e7d463          	bge	a5,a4,16e14 <_svfprintf_r+0x10d8>
   16e10:	5bc0106f          	j	183cc <_svfprintf_r+0x2690>
   16e14:	fffc4713          	not	a4,s8
   16e18:	41f75713          	sra	a4,a4,0x1f
   16e1c:	00ec77b3          	and	a5,s8,a4
   16e20:	40f58a33          	sub	s4,a1,a5
   16e24:	9d405063          	blez	s4,15fe4 <_svfprintf_r+0x2a8>
   16e28:	01000713          	li	a4,16
   16e2c:	0c812783          	lw	a5,200(sp)
   16e30:	0000d817          	auipc	a6,0xd
   16e34:	bb480813          	add	a6,a6,-1100 # 239e4 <zeroes.0>
   16e38:	1b475ce3          	bge	a4,s4,177f0 <_svfprintf_r+0x1ab4>
   16e3c:	01000c13          	li	s8,16
   16e40:	00700b93          	li	s7,7
   16e44:	00030d13          	mv	s10,t1
   16e48:	00080b13          	mv	s6,a6
   16e4c:	00c0006f          	j	16e58 <_svfprintf_r+0x111c>
   16e50:	ff0a0a13          	add	s4,s4,-16
   16e54:	194c5ae3          	bge	s8,s4,177e8 <_svfprintf_r+0x1aac>
   16e58:	01060613          	add	a2,a2,16
   16e5c:	00178793          	add	a5,a5,1
   16e60:	0164a023          	sw	s6,0(s1)
   16e64:	0184a223          	sw	s8,4(s1)
   16e68:	0cc12623          	sw	a2,204(sp)
   16e6c:	0cf12423          	sw	a5,200(sp)
   16e70:	00848493          	add	s1,s1,8
   16e74:	fcfbdee3          	bge	s7,a5,16e50 <_svfprintf_r+0x1114>
   16e78:	00012583          	lw	a1,0(sp)
   16e7c:	0c410613          	add	a2,sp,196
   16e80:	000a8513          	mv	a0,s5
   16e84:	2d9030ef          	jal	1a95c <__ssprint_r>
   16e88:	d4051ae3          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16e8c:	0cc12603          	lw	a2,204(sp)
   16e90:	0c812783          	lw	a5,200(sp)
   16e94:	00090493          	mv	s1,s2
   16e98:	fb9ff06f          	j	16e50 <_svfprintf_r+0x1114>
   16e9c:	001df593          	and	a1,s11,1
   16ea0:	c0059263          	bnez	a1,162a4 <_svfprintf_r+0x568>
   16ea4:	00e4a223          	sw	a4,4(s1)
   16ea8:	0d712623          	sw	s7,204(sp)
   16eac:	0d412423          	sw	s4,200(sp)
   16eb0:	00700793          	li	a5,7
   16eb4:	cb47d663          	bge	a5,s4,16360 <_svfprintf_r+0x624>
   16eb8:	00012583          	lw	a1,0(sp)
   16ebc:	0c410613          	add	a2,sp,196
   16ec0:	000a8513          	mv	a0,s5
   16ec4:	00612a23          	sw	t1,20(sp)
   16ec8:	295030ef          	jal	1a95c <__ssprint_r>
   16ecc:	d00518e3          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16ed0:	0cc12b83          	lw	s7,204(sp)
   16ed4:	0c812a03          	lw	s4,200(sp)
   16ed8:	01412303          	lw	t1,20(sp)
   16edc:	00090c13          	mv	s8,s2
   16ee0:	c80ff06f          	j	16360 <_svfprintf_r+0x624>
   16ee4:	01012703          	lw	a4,16(sp)
   16ee8:	00100793          	li	a5,1
   16eec:	c6e7da63          	bge	a5,a4,16360 <_svfprintf_r+0x624>
   16ef0:	01100793          	li	a5,17
   16ef4:	0000d817          	auipc	a6,0xd
   16ef8:	af080813          	add	a6,a6,-1296 # 239e4 <zeroes.0>
   16efc:	2ce7d2e3          	bge	a5,a4,179c0 <_svfprintf_r+0x1c84>
   16f00:	00048b13          	mv	s6,s1
   16f04:	01000793          	li	a5,16
   16f08:	00700d13          	li	s10,7
   16f0c:	00612a23          	sw	t1,20(sp)
   16f10:	00080493          	mv	s1,a6
   16f14:	00c0006f          	j	16f20 <_svfprintf_r+0x11e4>
   16f18:	ff0b0b13          	add	s6,s6,-16
   16f1c:	2967dce3          	bge	a5,s6,179b4 <_svfprintf_r+0x1c78>
   16f20:	010b8b93          	add	s7,s7,16
   16f24:	001a0a13          	add	s4,s4,1
   16f28:	009c2023          	sw	s1,0(s8)
   16f2c:	00fc2223          	sw	a5,4(s8)
   16f30:	0d712623          	sw	s7,204(sp)
   16f34:	0d412423          	sw	s4,200(sp)
   16f38:	008c0c13          	add	s8,s8,8
   16f3c:	fd4d5ee3          	bge	s10,s4,16f18 <_svfprintf_r+0x11dc>
   16f40:	00012583          	lw	a1,0(sp)
   16f44:	0c410613          	add	a2,sp,196
   16f48:	000a8513          	mv	a0,s5
   16f4c:	211030ef          	jal	1a95c <__ssprint_r>
   16f50:	c80516e3          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   16f54:	0cc12b83          	lw	s7,204(sp)
   16f58:	0c812a03          	lw	s4,200(sp)
   16f5c:	00090c13          	mv	s8,s2
   16f60:	01000793          	li	a5,16
   16f64:	fb5ff06f          	j	16f18 <_svfprintf_r+0x11dc>
   16f68:	00c12683          	lw	a3,12(sp)
   16f6c:	010df793          	and	a5,s11,16
   16f70:	0006a703          	lw	a4,0(a3)
   16f74:	00468693          	add	a3,a3,4
   16f78:	00d12623          	sw	a3,12(sp)
   16f7c:	16079a63          	bnez	a5,170f0 <_svfprintf_r+0x13b4>
   16f80:	040df793          	and	a5,s11,64
   16f84:	16078263          	beqz	a5,170e8 <_svfprintf_r+0x13ac>
   16f88:	01071c13          	sll	s8,a4,0x10
   16f8c:	010c5c13          	srl	s8,s8,0x10
   16f90:	00000813          	li	a6,0
   16f94:	e78ff06f          	j	1660c <_svfprintf_r+0x8d0>
   16f98:	00c12683          	lw	a3,12(sp)
   16f9c:	010df793          	and	a5,s11,16
   16fa0:	0006a703          	lw	a4,0(a3)
   16fa4:	00468693          	add	a3,a3,4
   16fa8:	00d12623          	sw	a3,12(sp)
   16fac:	12079663          	bnez	a5,170d8 <_svfprintf_r+0x139c>
   16fb0:	040df793          	and	a5,s11,64
   16fb4:	10078e63          	beqz	a5,170d0 <_svfprintf_r+0x1394>
   16fb8:	01071c13          	sll	s8,a4,0x10
   16fbc:	410c5c13          	sra	s8,s8,0x10
   16fc0:	41fc5813          	sra	a6,s8,0x1f
   16fc4:	00080793          	mv	a5,a6
   16fc8:	f007da63          	bgez	a5,166dc <_svfprintf_r+0x9a0>
   16fcc:	018037b3          	snez	a5,s8
   16fd0:	41000833          	neg	a6,a6
   16fd4:	40f80833          	sub	a6,a6,a5
   16fd8:	41800c33          	neg	s8,s8
   16fdc:	000d8613          	mv	a2,s11
   16fe0:	02d00693          	li	a3,45
   16fe4:	00100793          	li	a5,1
   16fe8:	e30ff06f          	j	16618 <_svfprintf_r+0x8dc>
   16fec:	00c12683          	lw	a3,12(sp)
   16ff0:	01067793          	and	a5,a2,16
   16ff4:	0006a703          	lw	a4,0(a3)
   16ff8:	00468693          	add	a3,a3,4
   16ffc:	00d12623          	sw	a3,12(sp)
   17000:	0c079063          	bnez	a5,170c0 <_svfprintf_r+0x1384>
   17004:	04067793          	and	a5,a2,64
   17008:	0a078863          	beqz	a5,170b8 <_svfprintf_r+0x137c>
   1700c:	01071c13          	sll	s8,a4,0x10
   17010:	010c5c13          	srl	s8,s8,0x10
   17014:	00000813          	li	a6,0
   17018:	00100793          	li	a5,1
   1701c:	df8ff06f          	j	16614 <_svfprintf_r+0x8d8>
   17020:	00000c13          	li	s8,0
   17024:	19010d13          	add	s10,sp,400
   17028:	e18ff06f          	j	16640 <_svfprintf_r+0x904>
   1702c:	00012583          	lw	a1,0(sp)
   17030:	0c410613          	add	a2,sp,196
   17034:	000a8513          	mv	a0,s5
   17038:	00612a23          	sw	t1,20(sp)
   1703c:	121030ef          	jal	1a95c <__ssprint_r>
   17040:	b8051ee3          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   17044:	0cc12b83          	lw	s7,204(sp)
   17048:	0c812a03          	lw	s4,200(sp)
   1704c:	01412303          	lw	t1,20(sp)
   17050:	00090c13          	mv	s8,s2
   17054:	a68ff06f          	j	162bc <_svfprintf_r+0x580>
   17058:	00012583          	lw	a1,0(sp)
   1705c:	0c410613          	add	a2,sp,196
   17060:	000a8513          	mv	a0,s5
   17064:	00612a23          	sw	t1,20(sp)
   17068:	0f5030ef          	jal	1a95c <__ssprint_r>
   1706c:	b60518e3          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   17070:	0cc12b83          	lw	s7,204(sp)
   17074:	0c812a03          	lw	s4,200(sp)
   17078:	01412303          	lw	t1,20(sp)
   1707c:	00090c13          	mv	s8,s2
   17080:	a68ff06f          	j	162e8 <_svfprintf_r+0x5ac>
   17084:	001df793          	and	a5,s11,1
   17088:	00079463          	bnez	a5,17090 <_svfprintf_r+0x1354>
   1708c:	f59fe06f          	j	15fe4 <_svfprintf_r+0x2a8>
   17090:	fb8ff06f          	j	16848 <_svfprintf_r+0xb0c>
   17094:	000b0313          	mv	t1,s6
   17098:	e18ff06f          	j	166b0 <_svfprintf_r+0x974>
   1709c:	0009c883          	lbu	a7,0(s3)
   170a0:	00f12623          	sw	a5,12(sp)
   170a4:	de9fe06f          	j	15e8c <_svfprintf_r+0x150>
   170a8:	03000793          	li	a5,48
   170ac:	18f107a3          	sb	a5,399(sp)
   170b0:	18f10d13          	add	s10,sp,399
   170b4:	d8cff06f          	j	16640 <_svfprintf_r+0x904>
   170b8:	20067793          	and	a5,a2,512
   170bc:	44079ce3          	bnez	a5,17d14 <_svfprintf_r+0x1fd8>
   170c0:	00070c13          	mv	s8,a4
   170c4:	00000813          	li	a6,0
   170c8:	00100793          	li	a5,1
   170cc:	d48ff06f          	j	16614 <_svfprintf_r+0x8d8>
   170d0:	200df793          	and	a5,s11,512
   170d4:	440798e3          	bnez	a5,17d24 <_svfprintf_r+0x1fe8>
   170d8:	41f75813          	sra	a6,a4,0x1f
   170dc:	00070c13          	mv	s8,a4
   170e0:	00080793          	mv	a5,a6
   170e4:	df4ff06f          	j	166d8 <_svfprintf_r+0x99c>
   170e8:	200df793          	and	a5,s11,512
   170ec:	440796e3          	bnez	a5,17d38 <_svfprintf_r+0x1ffc>
   170f0:	00070c13          	mv	s8,a4
   170f4:	00000813          	li	a6,0
   170f8:	d14ff06f          	j	1660c <_svfprintf_r+0x8d0>
   170fc:	00c12783          	lw	a5,12(sp)
   17100:	0007a703          	lw	a4,0(a5)
   17104:	00478793          	add	a5,a5,4
   17108:	00f12623          	sw	a5,12(sp)
   1710c:	00072583          	lw	a1,0(a4)
   17110:	00472603          	lw	a2,4(a4)
   17114:	00872683          	lw	a3,8(a4)
   17118:	00c72703          	lw	a4,12(a4)
   1711c:	848ff06f          	j	16164 <_svfprintf_r+0x428>
   17120:	010df793          	and	a5,s11,16
   17124:	7a079863          	bnez	a5,178d4 <_svfprintf_r+0x1b98>
   17128:	040df793          	and	a5,s11,64
   1712c:	3c0794e3          	bnez	a5,17cf4 <_svfprintf_r+0x1fb8>
   17130:	200dfe13          	and	t3,s11,512
   17134:	7a0e0063          	beqz	t3,178d4 <_svfprintf_r+0x1b98>
   17138:	00c12783          	lw	a5,12(sp)
   1713c:	00412703          	lw	a4,4(sp)
   17140:	0007a783          	lw	a5,0(a5)
   17144:	00e78023          	sb	a4,0(a5)
   17148:	e00ff06f          	j	16748 <_svfprintf_r+0xa0c>
   1714c:	03412783          	lw	a5,52(sp)
   17150:	0009c883          	lbu	a7,0(s3)
   17154:	00079463          	bnez	a5,1715c <_svfprintf_r+0x1420>
   17158:	d35fe06f          	j	15e8c <_svfprintf_r+0x150>
   1715c:	0007c783          	lbu	a5,0(a5)
   17160:	00079463          	bnez	a5,17168 <_svfprintf_r+0x142c>
   17164:	d29fe06f          	j	15e8c <_svfprintf_r+0x150>
   17168:	400ded93          	or	s11,s11,1024
   1716c:	d21fe06f          	j	15e8c <_svfprintf_r+0x150>
   17170:	00078a13          	mv	s4,a5
   17174:	bf404ee3          	bgtz	s4,16d70 <_svfprintf_r+0x1034>
   17178:	c21ff06f          	j	16d98 <_svfprintf_r+0x105c>
   1717c:	fff00a13          	li	s4,-1
   17180:	00068993          	mv	s3,a3
   17184:	d0dfe06f          	j	15e90 <_svfprintf_r+0x154>
   17188:	d60a1a63          	bnez	s4,166fc <_svfprintf_r+0x9c0>
   1718c:	00000c13          	li	s8,0
   17190:	00060d93          	mv	s11,a2
   17194:	19010d13          	add	s10,sp,400
   17198:	ca8ff06f          	j	16640 <_svfprintf_r+0x904>
   1719c:	0000c797          	auipc	a5,0xc
   171a0:	f4878793          	add	a5,a5,-184 # 230e4 <OSUnMapTbl+0x180>
   171a4:	000b0313          	mv	t1,s6
   171a8:	02f12423          	sw	a5,40(sp)
   171ac:	020df793          	and	a5,s11,32
   171b0:	40078263          	beqz	a5,175b4 <_svfprintf_r+0x1878>
   171b4:	00c12783          	lw	a5,12(sp)
   171b8:	00778b93          	add	s7,a5,7
   171bc:	ff8bfb93          	and	s7,s7,-8
   171c0:	000bac03          	lw	s8,0(s7)
   171c4:	004ba803          	lw	a6,4(s7)
   171c8:	008b8793          	add	a5,s7,8
   171cc:	00f12623          	sw	a5,12(sp)
   171d0:	001df793          	and	a5,s11,1
   171d4:	00078e63          	beqz	a5,171f0 <_svfprintf_r+0x14b4>
   171d8:	010c67b3          	or	a5,s8,a6
   171dc:	00078a63          	beqz	a5,171f0 <_svfprintf_r+0x14b4>
   171e0:	03000793          	li	a5,48
   171e4:	0af10423          	sb	a5,168(sp)
   171e8:	0b1104a3          	sb	a7,169(sp)
   171ec:	002ded93          	or	s11,s11,2
   171f0:	bffdf613          	and	a2,s11,-1025
   171f4:	00200793          	li	a5,2
   171f8:	c1cff06f          	j	16614 <_svfprintf_r+0x8d8>
   171fc:	000b0313          	mv	t1,s6
   17200:	000d8613          	mv	a2,s11
   17204:	c6cff06f          	j	16670 <_svfprintf_r+0x934>
   17208:	0000c797          	auipc	a5,0xc
   1720c:	ec878793          	add	a5,a5,-312 # 230d0 <OSUnMapTbl+0x16c>
   17210:	000b0313          	mv	t1,s6
   17214:	02f12423          	sw	a5,40(sp)
   17218:	f95ff06f          	j	171ac <_svfprintf_r+0x1470>
   1721c:	000b0313          	mv	t1,s6
   17220:	bc8ff06f          	j	165e8 <_svfprintf_r+0x8ac>
   17224:	00012583          	lw	a1,0(sp)
   17228:	0c410613          	add	a2,sp,196
   1722c:	000a8513          	mv	a0,s5
   17230:	00612a23          	sw	t1,20(sp)
   17234:	728030ef          	jal	1a95c <__ssprint_r>
   17238:	9a0512e3          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   1723c:	0cc12603          	lw	a2,204(sp)
   17240:	01412303          	lw	t1,20(sp)
   17244:	00090493          	mv	s1,s2
   17248:	e30ff06f          	j	16878 <_svfprintf_r+0xb3c>
   1724c:	0019c883          	lbu	a7,1(s3)
   17250:	020ded93          	or	s11,s11,32
   17254:	00198993          	add	s3,s3,1
   17258:	c35fe06f          	j	15e8c <_svfprintf_r+0x150>
   1725c:	0019c883          	lbu	a7,1(s3)
   17260:	200ded93          	or	s11,s11,512
   17264:	00198993          	add	s3,s3,1
   17268:	c25fe06f          	j	15e8c <_svfprintf_r+0x150>
   1726c:	01c12503          	lw	a0,28(sp)
   17270:	04000593          	li	a1,64
   17274:	b9cfc0ef          	jal	13610 <_malloc_r>
   17278:	00012783          	lw	a5,0(sp)
   1727c:	00a7a023          	sw	a0,0(a5)
   17280:	00a7a823          	sw	a0,16(a5)
   17284:	00051463          	bnez	a0,1728c <_svfprintf_r+0x1550>
   17288:	3040106f          	j	1858c <_svfprintf_r+0x2850>
   1728c:	00012783          	lw	a5,0(sp)
   17290:	1c912223          	sw	s1,452(sp)
   17294:	1d212023          	sw	s2,448(sp)
   17298:	1b312e23          	sw	s3,444(sp)
   1729c:	1b412c23          	sw	s4,440(sp)
   172a0:	1b512a23          	sw	s5,436(sp)
   172a4:	1b612823          	sw	s6,432(sp)
   172a8:	1b712623          	sw	s7,428(sp)
   172ac:	1b912223          	sw	s9,420(sp)
   172b0:	1ba12023          	sw	s10,416(sp)
   172b4:	19b12e23          	sw	s11,412(sp)
   172b8:	04000713          	li	a4,64
   172bc:	00e7aa23          	sw	a4,20(a5)
   172c0:	b09fe06f          	j	15dc8 <_svfprintf_r+0x8c>
   172c4:	01000593          	li	a1,16
   172c8:	0c812703          	lw	a4,200(sp)
   172cc:	0000c817          	auipc	a6,0xc
   172d0:	71880813          	add	a6,a6,1816 # 239e4 <zeroes.0>
   172d4:	1545dee3          	bge	a1,s4,17c30 <_svfprintf_r+0x1ef4>
   172d8:	03312623          	sw	s3,44(sp)
   172dc:	00048793          	mv	a5,s1
   172e0:	01000c13          	li	s8,16
   172e4:	000a0493          	mv	s1,s4
   172e8:	00700b93          	li	s7,7
   172ec:	00030a13          	mv	s4,t1
   172f0:	00080993          	mv	s3,a6
   172f4:	00c0006f          	j	17300 <_svfprintf_r+0x15c4>
   172f8:	ff048493          	add	s1,s1,-16
   172fc:	129c50e3          	bge	s8,s1,17c1c <_svfprintf_r+0x1ee0>
   17300:	01060613          	add	a2,a2,16
   17304:	00170713          	add	a4,a4,1
   17308:	0137a023          	sw	s3,0(a5)
   1730c:	0187a223          	sw	s8,4(a5)
   17310:	0cc12623          	sw	a2,204(sp)
   17314:	0ce12423          	sw	a4,200(sp)
   17318:	00878793          	add	a5,a5,8
   1731c:	fcebdee3          	bge	s7,a4,172f8 <_svfprintf_r+0x15bc>
   17320:	00012583          	lw	a1,0(sp)
   17324:	0c410613          	add	a2,sp,196
   17328:	000a8513          	mv	a0,s5
   1732c:	630030ef          	jal	1a95c <__ssprint_r>
   17330:	8a0516e3          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   17334:	0cc12603          	lw	a2,204(sp)
   17338:	0c812703          	lw	a4,200(sp)
   1733c:	00090793          	mv	a5,s2
   17340:	fb9ff06f          	j	172f8 <_svfprintf_r+0x15bc>
   17344:	000d0513          	mv	a0,s10
   17348:	03612823          	sw	s6,48(sp)
   1734c:	03112623          	sw	a7,44(sp)
   17350:	fedf40ef          	jal	c33c <strlen>
   17354:	0a714703          	lbu	a4,167(sp)
   17358:	fff54693          	not	a3,a0
   1735c:	41f6d693          	sra	a3,a3,0x1f
   17360:	01712623          	sw	s7,12(sp)
   17364:	00012423          	sw	zero,8(sp)
   17368:	00012c23          	sw	zero,24(sp)
   1736c:	00012a23          	sw	zero,20(sp)
   17370:	02c12883          	lw	a7,44(sp)
   17374:	03012303          	lw	t1,48(sp)
   17378:	00050c13          	mv	s8,a0
   1737c:	00d57cb3          	and	s9,a0,a3
   17380:	00000a13          	li	s4,0
   17384:	00000b13          	li	s6,0
   17388:	96071663          	bnez	a4,164f4 <_svfprintf_r+0x7b8>
   1738c:	b8dfe06f          	j	15f18 <_svfprintf_r+0x1dc>
   17390:	01012783          	lw	a5,16(sp)
   17394:	00048593          	mv	a1,s1
   17398:	01412483          	lw	s1,20(sp)
   1739c:	03b12823          	sw	s11,48(sp)
   173a0:	05a12423          	sw	s10,72(sp)
   173a4:	01812d83          	lw	s11,24(sp)
   173a8:	03312623          	sw	s3,44(sp)
   173ac:	01912c23          	sw	s9,24(sp)
   173b0:	04612223          	sw	t1,68(sp)
   173b4:	00fd0b33          	add	s6,s10,a5
   173b8:	04012c83          	lw	s9,64(sp)
   173bc:	000b8d13          	mv	s10,s7
   173c0:	00012c03          	lw	s8,0(sp)
   173c4:	03412b83          	lw	s7,52(sp)
   173c8:	00700813          	li	a6,7
   173cc:	01000713          	li	a4,16
   173d0:	0000ca17          	auipc	s4,0xc
   173d4:	614a0a13          	add	s4,s4,1556 # 239e4 <zeroes.0>
   173d8:	08905663          	blez	s1,17464 <_svfprintf_r+0x1728>
   173dc:	17b05863          	blez	s11,1754c <_svfprintf_r+0x1810>
   173e0:	fffd8d93          	add	s11,s11,-1
   173e4:	03c12783          	lw	a5,60(sp)
   173e8:	01960633          	add	a2,a2,s9
   173ec:	0195a223          	sw	s9,4(a1)
   173f0:	00f5a023          	sw	a5,0(a1)
   173f4:	0c812783          	lw	a5,200(sp)
   173f8:	0cc12623          	sw	a2,204(sp)
   173fc:	00858593          	add	a1,a1,8
   17400:	00178793          	add	a5,a5,1
   17404:	0cf12423          	sw	a5,200(sp)
   17408:	1ef84863          	blt	a6,a5,175f8 <_svfprintf_r+0x18bc>
   1740c:	000bc683          	lbu	a3,0(s7)
   17410:	41ab09b3          	sub	s3,s6,s10
   17414:	0136d463          	bge	a3,s3,1741c <_svfprintf_r+0x16e0>
   17418:	00068993          	mv	s3,a3
   1741c:	03305663          	blez	s3,17448 <_svfprintf_r+0x170c>
   17420:	0c812683          	lw	a3,200(sp)
   17424:	01360633          	add	a2,a2,s3
   17428:	01a5a023          	sw	s10,0(a1)
   1742c:	00168693          	add	a3,a3,1
   17430:	0135a223          	sw	s3,4(a1)
   17434:	0cc12623          	sw	a2,204(sp)
   17438:	0cd12423          	sw	a3,200(sp)
   1743c:	3cd84e63          	blt	a6,a3,17818 <_svfprintf_r+0x1adc>
   17440:	000bc683          	lbu	a3,0(s7)
   17444:	00858593          	add	a1,a1,8
   17448:	fff9c513          	not	a0,s3
   1744c:	41f55513          	sra	a0,a0,0x1f
   17450:	00a9f7b3          	and	a5,s3,a0
   17454:	40f689b3          	sub	s3,a3,a5
   17458:	05304263          	bgtz	s3,1749c <_svfprintf_r+0x1760>
   1745c:	00dd0d33          	add	s10,s10,a3
   17460:	f6904ee3          	bgtz	s1,173dc <_svfprintf_r+0x16a0>
   17464:	f7b04ee3          	bgtz	s11,173e0 <_svfprintf_r+0x16a4>
   17468:	01012783          	lw	a5,16(sp)
   1746c:	03712a23          	sw	s7,52(sp)
   17470:	000d0b93          	mv	s7,s10
   17474:	04812d03          	lw	s10,72(sp)
   17478:	02c12983          	lw	s3,44(sp)
   1747c:	03012d83          	lw	s11,48(sp)
   17480:	00fd0733          	add	a4,s10,a5
   17484:	04412303          	lw	t1,68(sp)
   17488:	01812c83          	lw	s9,24(sp)
   1748c:	00058493          	mv	s1,a1
   17490:	937774e3          	bgeu	a4,s7,16db8 <_svfprintf_r+0x107c>
   17494:	00070b93          	mv	s7,a4
   17498:	921ff06f          	j	16db8 <_svfprintf_r+0x107c>
   1749c:	0c812683          	lw	a3,200(sp)
   174a0:	0000cf17          	auipc	t5,0xc
   174a4:	544f0f13          	add	t5,t5,1348 # 239e4 <zeroes.0>
   174a8:	07375c63          	bge	a4,s3,17520 <_svfprintf_r+0x17e4>
   174ac:	00912a23          	sw	s1,20(sp)
   174b0:	00098493          	mv	s1,s3
   174b4:	000a0993          	mv	s3,s4
   174b8:	00c0006f          	j	174c4 <_svfprintf_r+0x1788>
   174bc:	ff048493          	add	s1,s1,-16
   174c0:	04975a63          	bge	a4,s1,17514 <_svfprintf_r+0x17d8>
   174c4:	01060613          	add	a2,a2,16
   174c8:	00168693          	add	a3,a3,1
   174cc:	0145a023          	sw	s4,0(a1)
   174d0:	00e5a223          	sw	a4,4(a1)
   174d4:	0cc12623          	sw	a2,204(sp)
   174d8:	0cd12423          	sw	a3,200(sp)
   174dc:	00858593          	add	a1,a1,8
   174e0:	fcd85ee3          	bge	a6,a3,174bc <_svfprintf_r+0x1780>
   174e4:	0c410613          	add	a2,sp,196
   174e8:	000c0593          	mv	a1,s8
   174ec:	000a8513          	mv	a0,s5
   174f0:	46c030ef          	jal	1a95c <__ssprint_r>
   174f4:	ee051463          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   174f8:	01000713          	li	a4,16
   174fc:	ff048493          	add	s1,s1,-16
   17500:	0cc12603          	lw	a2,204(sp)
   17504:	0c812683          	lw	a3,200(sp)
   17508:	00090593          	mv	a1,s2
   1750c:	00700813          	li	a6,7
   17510:	fa974ae3          	blt	a4,s1,174c4 <_svfprintf_r+0x1788>
   17514:	00098f13          	mv	t5,s3
   17518:	00048993          	mv	s3,s1
   1751c:	01412483          	lw	s1,20(sp)
   17520:	01360633          	add	a2,a2,s3
   17524:	00168693          	add	a3,a3,1
   17528:	01e5a023          	sw	t5,0(a1)
   1752c:	0135a223          	sw	s3,4(a1)
   17530:	0cc12623          	sw	a2,204(sp)
   17534:	0cd12423          	sw	a3,200(sp)
   17538:	60d846e3          	blt	a6,a3,18344 <_svfprintf_r+0x2608>
   1753c:	000bc683          	lbu	a3,0(s7)
   17540:	00858593          	add	a1,a1,8
   17544:	00dd0d33          	add	s10,s10,a3
   17548:	f19ff06f          	j	17460 <_svfprintf_r+0x1724>
   1754c:	fffb8b93          	add	s7,s7,-1
   17550:	fff48493          	add	s1,s1,-1
   17554:	e91ff06f          	j	173e4 <_svfprintf_r+0x16a8>
   17558:	02412703          	lw	a4,36(sp)
   1755c:	02012783          	lw	a5,32(sp)
   17560:	00700513          	li	a0,7
   17564:	00e4a023          	sw	a4,0(s1)
   17568:	0c812703          	lw	a4,200(sp)
   1756c:	00f60633          	add	a2,a2,a5
   17570:	00f4a223          	sw	a5,4(s1)
   17574:	00170713          	add	a4,a4,1
   17578:	0cc12623          	sw	a2,204(sp)
   1757c:	0ce12423          	sw	a4,200(sp)
   17580:	00848493          	add	s1,s1,8
   17584:	84e554e3          	bge	a0,a4,16dcc <_svfprintf_r+0x1090>
   17588:	00012583          	lw	a1,0(sp)
   1758c:	0c410613          	add	a2,sp,196
   17590:	000a8513          	mv	a0,s5
   17594:	00612a23          	sw	t1,20(sp)
   17598:	3c4030ef          	jal	1a95c <__ssprint_r>
   1759c:	e4051063          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   175a0:	0ac12583          	lw	a1,172(sp)
   175a4:	0cc12603          	lw	a2,204(sp)
   175a8:	01412303          	lw	t1,20(sp)
   175ac:	00090493          	mv	s1,s2
   175b0:	81dff06f          	j	16dcc <_svfprintf_r+0x1090>
   175b4:	00c12683          	lw	a3,12(sp)
   175b8:	010df793          	and	a5,s11,16
   175bc:	0006a703          	lw	a4,0(a3)
   175c0:	00468693          	add	a3,a3,4
   175c4:	00d12623          	sw	a3,12(sp)
   175c8:	02079263          	bnez	a5,175ec <_svfprintf_r+0x18b0>
   175cc:	040df793          	and	a5,s11,64
   175d0:	00078a63          	beqz	a5,175e4 <_svfprintf_r+0x18a8>
   175d4:	01071c13          	sll	s8,a4,0x10
   175d8:	010c5c13          	srl	s8,s8,0x10
   175dc:	00000813          	li	a6,0
   175e0:	bf1ff06f          	j	171d0 <_svfprintf_r+0x1494>
   175e4:	200df793          	and	a5,s11,512
   175e8:	72079063          	bnez	a5,17d08 <_svfprintf_r+0x1fcc>
   175ec:	00070c13          	mv	s8,a4
   175f0:	00000813          	li	a6,0
   175f4:	bddff06f          	j	171d0 <_svfprintf_r+0x1494>
   175f8:	0c410613          	add	a2,sp,196
   175fc:	000c0593          	mv	a1,s8
   17600:	000a8513          	mv	a0,s5
   17604:	358030ef          	jal	1a95c <__ssprint_r>
   17608:	dc051a63          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   1760c:	0cc12603          	lw	a2,204(sp)
   17610:	00090593          	mv	a1,s2
   17614:	01000713          	li	a4,16
   17618:	00700813          	li	a6,7
   1761c:	df1ff06f          	j	1740c <_svfprintf_r+0x16d0>
   17620:	19010c93          	add	s9,sp,400
   17624:	01312423          	sw	s3,8(sp)
   17628:	01412c23          	sw	s4,24(sp)
   1762c:	02912623          	sw	s1,44(sp)
   17630:	000c8a13          	mv	s4,s9
   17634:	03412483          	lw	s1,52(sp)
   17638:	40067d93          	and	s11,a2,1024
   1763c:	00000b93          	li	s7,0
   17640:	0ff00b13          	li	s6,255
   17644:	01112823          	sw	a7,16(sp)
   17648:	00612a23          	sw	t1,20(sp)
   1764c:	00060c93          	mv	s9,a2
   17650:	00080993          	mv	s3,a6
   17654:	0280006f          	j	1767c <_svfprintf_r+0x1940>
   17658:	00a00613          	li	a2,10
   1765c:	00000693          	li	a3,0
   17660:	000c0513          	mv	a0,s8
   17664:	00098593          	mv	a1,s3
   17668:	6e5040ef          	jal	1c54c <__udivdi3>
   1766c:	500986e3          	beqz	s3,18378 <_svfprintf_r+0x263c>
   17670:	00050c13          	mv	s8,a0
   17674:	00058993          	mv	s3,a1
   17678:	000d0a13          	mv	s4,s10
   1767c:	00a00613          	li	a2,10
   17680:	00000693          	li	a3,0
   17684:	000c0513          	mv	a0,s8
   17688:	00098593          	mv	a1,s3
   1768c:	54c050ef          	jal	1cbd8 <__umoddi3>
   17690:	03050513          	add	a0,a0,48
   17694:	feaa0fa3          	sb	a0,-1(s4)
   17698:	fffa0d13          	add	s10,s4,-1
   1769c:	001b8b93          	add	s7,s7,1
   176a0:	fa0d8ce3          	beqz	s11,17658 <_svfprintf_r+0x191c>
   176a4:	0004c783          	lbu	a5,0(s1)
   176a8:	fafb98e3          	bne	s7,a5,17658 <_svfprintf_r+0x191c>
   176ac:	fb6b86e3          	beq	s7,s6,17658 <_svfprintf_r+0x191c>
   176b0:	5c099863          	bnez	s3,17c80 <_svfprintf_r+0x1f44>
   176b4:	00900793          	li	a5,9
   176b8:	5d87e463          	bltu	a5,s8,17c80 <_svfprintf_r+0x1f44>
   176bc:	000c8613          	mv	a2,s9
   176c0:	19010793          	add	a5,sp,400
   176c4:	01012883          	lw	a7,16(sp)
   176c8:	02912a23          	sw	s1,52(sp)
   176cc:	00812983          	lw	s3,8(sp)
   176d0:	01412303          	lw	t1,20(sp)
   176d4:	01812a03          	lw	s4,24(sp)
   176d8:	02c12483          	lw	s1,44(sp)
   176dc:	01712823          	sw	s7,16(sp)
   176e0:	41a78c33          	sub	s8,a5,s10
   176e4:	00060d93          	mv	s11,a2
   176e8:	f59fe06f          	j	16640 <_svfprintf_r+0x904>
   176ec:	0c812703          	lw	a4,200(sp)
   176f0:	0000c517          	auipc	a0,0xc
   176f4:	a1050513          	add	a0,a0,-1520 # 23100 <OSUnMapTbl+0x19c>
   176f8:	00a4a023          	sw	a0,0(s1)
   176fc:	00160613          	add	a2,a2,1
   17700:	00100513          	li	a0,1
   17704:	00170713          	add	a4,a4,1
   17708:	00a4a223          	sw	a0,4(s1)
   1770c:	0cc12623          	sw	a2,204(sp)
   17710:	0ce12423          	sw	a4,200(sp)
   17714:	00700513          	li	a0,7
   17718:	00848493          	add	s1,s1,8
   1771c:	06e54c63          	blt	a0,a4,17794 <_svfprintf_r+0x1a58>
   17720:	1e059463          	bnez	a1,17908 <_svfprintf_r+0x1bcc>
   17724:	01012783          	lw	a5,16(sp)
   17728:	001df713          	and	a4,s11,1
   1772c:	00f76733          	or	a4,a4,a5
   17730:	00071463          	bnez	a4,17738 <_svfprintf_r+0x19fc>
   17734:	8b1fe06f          	j	15fe4 <_svfprintf_r+0x2a8>
   17738:	02412703          	lw	a4,36(sp)
   1773c:	02012783          	lw	a5,32(sp)
   17740:	00700593          	li	a1,7
   17744:	00e4a023          	sw	a4,0(s1)
   17748:	0c812703          	lw	a4,200(sp)
   1774c:	00c78633          	add	a2,a5,a2
   17750:	00f4a223          	sw	a5,4(s1)
   17754:	00170713          	add	a4,a4,1
   17758:	0cc12623          	sw	a2,204(sp)
   1775c:	0ce12423          	sw	a4,200(sp)
   17760:	60e5c463          	blt	a1,a4,17d68 <_svfprintf_r+0x202c>
   17764:	00848493          	add	s1,s1,8
   17768:	01012783          	lw	a5,16(sp)
   1776c:	00170713          	add	a4,a4,1
   17770:	01a4a023          	sw	s10,0(s1)
   17774:	00c78633          	add	a2,a5,a2
   17778:	00f4a223          	sw	a5,4(s1)
   1777c:	0cc12623          	sw	a2,204(sp)
   17780:	0ce12423          	sw	a4,200(sp)
   17784:	00700793          	li	a5,7
   17788:	00e7c463          	blt	a5,a4,17790 <_svfprintf_r+0x1a54>
   1778c:	855fe06f          	j	15fe0 <_svfprintf_r+0x2a4>
   17790:	bfdfe06f          	j	1638c <_svfprintf_r+0x650>
   17794:	00012583          	lw	a1,0(sp)
   17798:	0c410613          	add	a2,sp,196
   1779c:	000a8513          	mv	a0,s5
   177a0:	00612a23          	sw	t1,20(sp)
   177a4:	1b8030ef          	jal	1a95c <__ssprint_r>
   177a8:	c2051a63          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   177ac:	0ac12583          	lw	a1,172(sp)
   177b0:	0cc12603          	lw	a2,204(sp)
   177b4:	01412303          	lw	t1,20(sp)
   177b8:	00090493          	mv	s1,s2
   177bc:	f65ff06f          	j	17720 <_svfprintf_r+0x19e4>
   177c0:	00012583          	lw	a1,0(sp)
   177c4:	0c410613          	add	a2,sp,196
   177c8:	000a8513          	mv	a0,s5
   177cc:	00612a23          	sw	t1,20(sp)
   177d0:	18c030ef          	jal	1a95c <__ssprint_r>
   177d4:	c0051463          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   177d8:	0cc12603          	lw	a2,204(sp)
   177dc:	01412303          	lw	t1,20(sp)
   177e0:	00090493          	mv	s1,s2
   177e4:	858ff06f          	j	1683c <_svfprintf_r+0xb00>
   177e8:	000d0313          	mv	t1,s10
   177ec:	000b0813          	mv	a6,s6
   177f0:	0104a023          	sw	a6,0(s1)
   177f4:	0144a223          	sw	s4,4(s1)
   177f8:	01460633          	add	a2,a2,s4
   177fc:	00178793          	add	a5,a5,1
   17800:	0cc12623          	sw	a2,204(sp)
   17804:	0cf12423          	sw	a5,200(sp)
   17808:	00700713          	li	a4,7
   1780c:	00f74463          	blt	a4,a5,17814 <_svfprintf_r+0x1ad8>
   17810:	fd0fe06f          	j	15fe0 <_svfprintf_r+0x2a4>
   17814:	b79fe06f          	j	1638c <_svfprintf_r+0x650>
   17818:	0c410613          	add	a2,sp,196
   1781c:	000c0593          	mv	a1,s8
   17820:	000a8513          	mv	a0,s5
   17824:	138030ef          	jal	1a95c <__ssprint_r>
   17828:	ba051a63          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   1782c:	000bc683          	lbu	a3,0(s7)
   17830:	0cc12603          	lw	a2,204(sp)
   17834:	00090593          	mv	a1,s2
   17838:	01000713          	li	a4,16
   1783c:	00700813          	li	a6,7
   17840:	c09ff06f          	j	17448 <_svfprintf_r+0x170c>
   17844:	0d012783          	lw	a5,208(sp)
   17848:	08010593          	add	a1,sp,128
   1784c:	09010513          	add	a0,sp,144
   17850:	08f12823          	sw	a5,144(sp)
   17854:	0d412783          	lw	a5,212(sp)
   17858:	08012023          	sw	zero,128(sp)
   1785c:	08012223          	sw	zero,132(sp)
   17860:	08f12a23          	sw	a5,148(sp)
   17864:	0d812783          	lw	a5,216(sp)
   17868:	08012423          	sw	zero,136(sp)
   1786c:	08012623          	sw	zero,140(sp)
   17870:	08f12c23          	sw	a5,152(sp)
   17874:	0dc12783          	lw	a5,220(sp)
   17878:	08f12e23          	sw	a5,156(sp)
   1787c:	3dd060ef          	jal	1e458 <__letf2>
   17880:	00812883          	lw	a7,8(sp)
   17884:	01412303          	lw	t1,20(sp)
   17888:	2e054ee3          	bltz	a0,18384 <_svfprintf_r+0x2648>
   1788c:	0a714703          	lbu	a4,167(sp)
   17890:	04700693          	li	a3,71
   17894:	0000cd17          	auipc	s10,0xc
   17898:	830d0d13          	add	s10,s10,-2000 # 230c4 <OSUnMapTbl+0x160>
   1789c:	0116c663          	blt	a3,a7,178a8 <_svfprintf_r+0x1b6c>
   178a0:	0000cd17          	auipc	s10,0xc
   178a4:	820d0d13          	add	s10,s10,-2016 # 230c0 <OSUnMapTbl+0x15c>
   178a8:	00012423          	sw	zero,8(sp)
   178ac:	00012c23          	sw	zero,24(sp)
   178b0:	00012a23          	sw	zero,20(sp)
   178b4:	f7fdfd93          	and	s11,s11,-129
   178b8:	00300c93          	li	s9,3
   178bc:	00300c13          	li	s8,3
   178c0:	00000a13          	li	s4,0
   178c4:	00000b13          	li	s6,0
   178c8:	00070463          	beqz	a4,178d0 <_svfprintf_r+0x1b94>
   178cc:	c29fe06f          	j	164f4 <_svfprintf_r+0x7b8>
   178d0:	e48fe06f          	j	15f18 <_svfprintf_r+0x1dc>
   178d4:	00c12783          	lw	a5,12(sp)
   178d8:	00412703          	lw	a4,4(sp)
   178dc:	0007a783          	lw	a5,0(a5)
   178e0:	00e7a023          	sw	a4,0(a5)
   178e4:	e65fe06f          	j	16748 <_svfprintf_r+0xa0c>
   178e8:	00600793          	li	a5,6
   178ec:	000a0c13          	mv	s8,s4
   178f0:	3f47ee63          	bltu	a5,s4,17cec <_svfprintf_r+0x1fb0>
   178f4:	000c0c93          	mv	s9,s8
   178f8:	01712623          	sw	s7,12(sp)
   178fc:	0000bd17          	auipc	s10,0xb
   17900:	7fcd0d13          	add	s10,s10,2044 # 230f8 <OSUnMapTbl+0x194>
   17904:	e00fe06f          	j	15f04 <_svfprintf_r+0x1c8>
   17908:	02412703          	lw	a4,36(sp)
   1790c:	02012783          	lw	a5,32(sp)
   17910:	00700513          	li	a0,7
   17914:	00e4a023          	sw	a4,0(s1)
   17918:	0c812703          	lw	a4,200(sp)
   1791c:	00c78633          	add	a2,a5,a2
   17920:	00f4a223          	sw	a5,4(s1)
   17924:	00170713          	add	a4,a4,1
   17928:	0cc12623          	sw	a2,204(sp)
   1792c:	0ce12423          	sw	a4,200(sp)
   17930:	00848493          	add	s1,s1,8
   17934:	42e54a63          	blt	a0,a4,17d68 <_svfprintf_r+0x202c>
   17938:	e205d8e3          	bgez	a1,17768 <_svfprintf_r+0x1a2c>
   1793c:	ff000513          	li	a0,-16
   17940:	40b00a33          	neg	s4,a1
   17944:	0000c817          	auipc	a6,0xc
   17948:	0a080813          	add	a6,a6,160 # 239e4 <zeroes.0>
   1794c:	3ea5d2e3          	bge	a1,a0,18530 <_svfprintf_r+0x27f4>
   17950:	01312a23          	sw	s3,20(sp)
   17954:	01000c13          	li	s8,16
   17958:	00700b93          	li	s7,7
   1795c:	00030b13          	mv	s6,t1
   17960:	00080993          	mv	s3,a6
   17964:	00c0006f          	j	17970 <_svfprintf_r+0x1c34>
   17968:	ff0a0a13          	add	s4,s4,-16
   1796c:	3b4c5ce3          	bge	s8,s4,18524 <_svfprintf_r+0x27e8>
   17970:	01060613          	add	a2,a2,16
   17974:	00170713          	add	a4,a4,1
   17978:	0134a023          	sw	s3,0(s1)
   1797c:	0184a223          	sw	s8,4(s1)
   17980:	0cc12623          	sw	a2,204(sp)
   17984:	0ce12423          	sw	a4,200(sp)
   17988:	00848493          	add	s1,s1,8
   1798c:	fcebdee3          	bge	s7,a4,17968 <_svfprintf_r+0x1c2c>
   17990:	00012583          	lw	a1,0(sp)
   17994:	0c410613          	add	a2,sp,196
   17998:	000a8513          	mv	a0,s5
   1799c:	7c1020ef          	jal	1a95c <__ssprint_r>
   179a0:	a2051e63          	bnez	a0,16bdc <_svfprintf_r+0xea0>
   179a4:	0cc12603          	lw	a2,204(sp)
   179a8:	0c812703          	lw	a4,200(sp)
   179ac:	00090493          	mv	s1,s2
   179b0:	fb9ff06f          	j	17968 <_svfprintf_r+0x1c2c>
   179b4:	01412303          	lw	t1,20(sp)
   179b8:	00048813          	mv	a6,s1
   179bc:	000b0493          	mv	s1,s6
   179c0:	009b8bb3          	add	s7,s7,s1
   179c4:	001a0a13          	add	s4,s4,1
   179c8:	010c2023          	sw	a6,0(s8)
   179cc:	97dfe06f          	j	16348 <_svfprintf_r+0x60c>
   179d0:	07800793          	li	a5,120
   179d4:	03000713          	li	a4,48
   179d8:	0ae10423          	sb	a4,168(sp)
   179dc:	0af104a3          	sb	a5,169(sp)
   179e0:	06300713          	li	a4,99
   179e4:	00012423          	sw	zero,8(sp)
   179e8:	002ded93          	or	s11,s11,2
   179ec:	12c10d13          	add	s10,sp,300
   179f0:	01474463          	blt	a4,s4,179f8 <_svfprintf_r+0x1cbc>
   179f4:	ff4fe06f          	j	161e8 <_svfprintf_r+0x4ac>
   179f8:	001a0593          	add	a1,s4,1
   179fc:	000a8513          	mv	a0,s5
   17a00:	00612823          	sw	t1,16(sp)
   17a04:	01112423          	sw	a7,8(sp)
   17a08:	c09fb0ef          	jal	13610 <_malloc_r>
   17a0c:	00812883          	lw	a7,8(sp)
   17a10:	01012303          	lw	t1,16(sp)
   17a14:	00050d13          	mv	s10,a0
   17a18:	4e050ce3          	beqz	a0,18710 <_svfprintf_r+0x29d4>
   17a1c:	00a12423          	sw	a0,8(sp)
   17a20:	fc8fe06f          	j	161e8 <_svfprintf_r+0x4ac>
   17a24:	09010c13          	add	s8,sp,144
   17a28:	0ac10713          	add	a4,sp,172
   17a2c:	0bc10813          	add	a6,sp,188
   17a30:	0b010793          	add	a5,sp,176
   17a34:	000a0693          	mv	a3,s4
   17a38:	00200613          	li	a2,2
   17a3c:	000c0593          	mv	a1,s8
   17a40:	000a8513          	mv	a0,s5
   17a44:	04612423          	sw	t1,72(sp)
   17a48:	05112223          	sw	a7,68(sp)
   17a4c:	08512823          	sw	t0,144(sp)
   17a50:	02512823          	sw	t0,48(sp)
   17a54:	09f12a23          	sw	t6,148(sp)
   17a58:	01f12c23          	sw	t6,24(sp)
   17a5c:	09e12c23          	sw	t5,152(sp)
   17a60:	01e12a23          	sw	t5,20(sp)
   17a64:	09d12e23          	sw	t4,156(sp)
   17a68:	01d12823          	sw	t4,16(sp)
   17a6c:	d2cfa0ef          	jal	11f98 <_ldtoa_r>
   17a70:	001df713          	and	a4,s11,1
   17a74:	01012e83          	lw	t4,16(sp)
   17a78:	01412f03          	lw	t5,20(sp)
   17a7c:	01812f83          	lw	t6,24(sp)
   17a80:	03012283          	lw	t0,48(sp)
   17a84:	04412883          	lw	a7,68(sp)
   17a88:	04812303          	lw	t1,72(sp)
   17a8c:	00050d13          	mv	s10,a0
   17a90:	30071863          	bnez	a4,17da0 <_svfprintf_r+0x2064>
   17a94:	0bc12c83          	lw	s9,188(sp)
   17a98:	0ac12b03          	lw	s6,172(sp)
   17a9c:	40ac87b3          	sub	a5,s9,a0
   17aa0:	00f12823          	sw	a5,16(sp)
   17aa4:	ffd00713          	li	a4,-3
   17aa8:	00eb4463          	blt	s6,a4,17ab0 <_svfprintf_r+0x1d74>
   17aac:	056a5ae3          	bge	s4,s6,18300 <_svfprintf_r+0x25c4>
   17ab0:	ffe88893          	add	a7,a7,-2
   17ab4:	fffb0a13          	add	s4,s6,-1
   17ab8:	0b412623          	sw	s4,172(sp)
   17abc:	0ff8f693          	zext.b	a3,a7
   17ac0:	00000613          	li	a2,0
   17ac4:	0ad10a23          	sb	a3,180(sp)
   17ac8:	02b00693          	li	a3,43
   17acc:	000a5863          	bgez	s4,17adc <_svfprintf_r+0x1da0>
   17ad0:	00100713          	li	a4,1
   17ad4:	41670a33          	sub	s4,a4,s6
   17ad8:	02d00693          	li	a3,45
   17adc:	0ad10aa3          	sb	a3,181(sp)
   17ae0:	00900693          	li	a3,9
   17ae4:	2146d8e3          	bge	a3,s4,184f4 <_svfprintf_r+0x27b8>
   17ae8:	000a8793          	mv	a5,s5
   17aec:	0c310b13          	add	s6,sp,195
   17af0:	00048a93          	mv	s5,s1
   17af4:	01312a23          	sw	s3,20(sp)
   17af8:	00088c13          	mv	s8,a7
   17afc:	00612c23          	sw	t1,24(sp)
   17b00:	000b0493          	mv	s1,s6
   17b04:	00078c93          	mv	s9,a5
   17b08:	00a00593          	li	a1,10
   17b0c:	000a0513          	mv	a0,s4
   17b10:	0cc0a0ef          	jal	21bdc <__modsi3>
   17b14:	03050793          	add	a5,a0,48
   17b18:	00048b93          	mv	s7,s1
   17b1c:	fefb8fa3          	sb	a5,-1(s7)
   17b20:	000a0513          	mv	a0,s4
   17b24:	00a00593          	li	a1,10
   17b28:	0300a0ef          	jal	21b58 <__divsi3>
   17b2c:	000a0993          	mv	s3,s4
   17b30:	06300793          	li	a5,99
   17b34:	fff48493          	add	s1,s1,-1
   17b38:	00050a13          	mv	s4,a0
   17b3c:	fd37c6e3          	blt	a5,s3,17b08 <_svfprintf_r+0x1dcc>
   17b40:	000c8793          	mv	a5,s9
   17b44:	03050713          	add	a4,a0,48
   17b48:	00048c93          	mv	s9,s1
   17b4c:	ffeb8693          	add	a3,s7,-2
   17b50:	feec8fa3          	sb	a4,-1(s9)
   17b54:	000a8493          	mv	s1,s5
   17b58:	01412983          	lw	s3,20(sp)
   17b5c:	01812303          	lw	t1,24(sp)
   17b60:	000c0893          	mv	a7,s8
   17b64:	00078a93          	mv	s5,a5
   17b68:	3766f0e3          	bgeu	a3,s6,186c8 <_svfprintf_r+0x298c>
   17b6c:	0b610613          	add	a2,sp,182
   17b70:	0006c783          	lbu	a5,0(a3)
   17b74:	00168693          	add	a3,a3,1
   17b78:	00160613          	add	a2,a2,1
   17b7c:	fef60fa3          	sb	a5,-1(a2)
   17b80:	ff6698e3          	bne	a3,s6,17b70 <_svfprintf_r+0x1e34>
   17b84:	19010793          	add	a5,sp,400
   17b88:	41778733          	sub	a4,a5,s7
   17b8c:	f3770793          	add	a5,a4,-201
   17b90:	02f12c23          	sw	a5,56(sp)
   17b94:	01012783          	lw	a5,16(sp)
   17b98:	03812683          	lw	a3,56(sp)
   17b9c:	00100713          	li	a4,1
   17ba0:	00d78c33          	add	s8,a5,a3
   17ba4:	1cf75ee3          	bge	a4,a5,18580 <_svfprintf_r+0x2844>
   17ba8:	02012783          	lw	a5,32(sp)
   17bac:	00fc0c33          	add	s8,s8,a5
   17bb0:	fffc4693          	not	a3,s8
   17bb4:	bffdfe13          	and	t3,s11,-1025
   17bb8:	41f6d693          	sra	a3,a3,0x1f
   17bbc:	100e6793          	or	a5,t3,256
   17bc0:	00078b93          	mv	s7,a5
   17bc4:	00dc7cb3          	and	s9,s8,a3
   17bc8:	00012c23          	sw	zero,24(sp)
   17bcc:	00012a23          	sw	zero,20(sp)
   17bd0:	00000b13          	li	s6,0
   17bd4:	02c12783          	lw	a5,44(sp)
   17bd8:	70078863          	beqz	a5,182e8 <_svfprintf_r+0x25ac>
   17bdc:	02d00713          	li	a4,45
   17be0:	0ae103a3          	sb	a4,167(sp)
   17be4:	000b8d93          	mv	s11,s7
   17be8:	00000a13          	li	s4,0
   17bec:	001c8c93          	add	s9,s9,1
   17bf0:	b28fe06f          	j	15f18 <_svfprintf_r+0x1dc>
   17bf4:	0dc12783          	lw	a5,220(sp)
   17bf8:	1607c063          	bltz	a5,17d58 <_svfprintf_r+0x201c>
   17bfc:	0a714703          	lbu	a4,167(sp)
   17c00:	04700693          	li	a3,71
   17c04:	0000bd17          	auipc	s10,0xb
   17c08:	4c8d0d13          	add	s10,s10,1224 # 230cc <OSUnMapTbl+0x168>
   17c0c:	c916cee3          	blt	a3,a7,178a8 <_svfprintf_r+0x1b6c>
   17c10:	0000bd17          	auipc	s10,0xb
   17c14:	4b8d0d13          	add	s10,s10,1208 # 230c8 <OSUnMapTbl+0x164>
   17c18:	c91ff06f          	j	178a8 <_svfprintf_r+0x1b6c>
   17c1c:	00098813          	mv	a6,s3
   17c20:	02c12983          	lw	s3,44(sp)
   17c24:	000a0313          	mv	t1,s4
   17c28:	00048a13          	mv	s4,s1
   17c2c:	00078493          	mv	s1,a5
   17c30:	01460633          	add	a2,a2,s4
   17c34:	00170713          	add	a4,a4,1
   17c38:	0104a023          	sw	a6,0(s1)
   17c3c:	0144a223          	sw	s4,4(s1)
   17c40:	0cc12623          	sw	a2,204(sp)
   17c44:	0ce12423          	sw	a4,200(sp)
   17c48:	00700593          	li	a1,7
   17c4c:	00848493          	add	s1,s1,8
   17c50:	94e5de63          	bge	a1,a4,16dac <_svfprintf_r+0x1070>
   17c54:	00012583          	lw	a1,0(sp)
   17c58:	0c410613          	add	a2,sp,196
   17c5c:	000a8513          	mv	a0,s5
   17c60:	02612623          	sw	t1,44(sp)
   17c64:	4f9020ef          	jal	1a95c <__ssprint_r>
   17c68:	00050463          	beqz	a0,17c70 <_svfprintf_r+0x1f34>
   17c6c:	f71fe06f          	j	16bdc <_svfprintf_r+0xea0>
   17c70:	0cc12603          	lw	a2,204(sp)
   17c74:	02c12303          	lw	t1,44(sp)
   17c78:	00090493          	mv	s1,s2
   17c7c:	930ff06f          	j	16dac <_svfprintf_r+0x1070>
   17c80:	04012783          	lw	a5,64(sp)
   17c84:	03c12583          	lw	a1,60(sp)
   17c88:	00000b93          	li	s7,0
   17c8c:	40fd0d33          	sub	s10,s10,a5
   17c90:	00078613          	mv	a2,a5
   17c94:	000d0513          	mv	a0,s10
   17c98:	ff9fd0ef          	jal	15c90 <strncpy>
   17c9c:	0014c783          	lbu	a5,1(s1)
   17ca0:	00a00613          	li	a2,10
   17ca4:	00000693          	li	a3,0
   17ca8:	00f037b3          	snez	a5,a5
   17cac:	000c0513          	mv	a0,s8
   17cb0:	00098593          	mv	a1,s3
   17cb4:	00f484b3          	add	s1,s1,a5
   17cb8:	095040ef          	jal	1c54c <__udivdi3>
   17cbc:	9b5ff06f          	j	17670 <_svfprintf_r+0x1934>
   17cc0:	00012583          	lw	a1,0(sp)
   17cc4:	0c410613          	add	a2,sp,196
   17cc8:	000a8513          	mv	a0,s5
   17ccc:	02612623          	sw	t1,44(sp)
   17cd0:	48d020ef          	jal	1a95c <__ssprint_r>
   17cd4:	00050463          	beqz	a0,17cdc <_svfprintf_r+0x1fa0>
   17cd8:	f05fe06f          	j	16bdc <_svfprintf_r+0xea0>
   17cdc:	0cc12603          	lw	a2,204(sp)
   17ce0:	02c12303          	lw	t1,44(sp)
   17ce4:	00090493          	mv	s1,s2
   17ce8:	8b0ff06f          	j	16d98 <_svfprintf_r+0x105c>
   17cec:	00600c13          	li	s8,6
   17cf0:	c05ff06f          	j	178f4 <_svfprintf_r+0x1bb8>
   17cf4:	00c12783          	lw	a5,12(sp)
   17cf8:	00412703          	lw	a4,4(sp)
   17cfc:	0007a783          	lw	a5,0(a5)
   17d00:	00e79023          	sh	a4,0(a5)
   17d04:	a45fe06f          	j	16748 <_svfprintf_r+0xa0c>
   17d08:	0ff77c13          	zext.b	s8,a4
   17d0c:	00000813          	li	a6,0
   17d10:	cc0ff06f          	j	171d0 <_svfprintf_r+0x1494>
   17d14:	0ff77c13          	zext.b	s8,a4
   17d18:	00000813          	li	a6,0
   17d1c:	00100793          	li	a5,1
   17d20:	8f5fe06f          	j	16614 <_svfprintf_r+0x8d8>
   17d24:	01871c13          	sll	s8,a4,0x18
   17d28:	418c5c13          	sra	s8,s8,0x18
   17d2c:	41fc5813          	sra	a6,s8,0x1f
   17d30:	00080793          	mv	a5,a6
   17d34:	9a5fe06f          	j	166d8 <_svfprintf_r+0x99c>
   17d38:	0ff77c13          	zext.b	s8,a4
   17d3c:	00000813          	li	a6,0
   17d40:	8cdfe06f          	j	1660c <_svfprintf_r+0x8d0>
   17d44:	00012583          	lw	a1,0(sp)
   17d48:	01c12503          	lw	a0,28(sp)
   17d4c:	0c410613          	add	a2,sp,196
   17d50:	40d020ef          	jal	1a95c <__ssprint_r>
   17d54:	aecfe06f          	j	16040 <_svfprintf_r+0x304>
   17d58:	02d00793          	li	a5,45
   17d5c:	0af103a3          	sb	a5,167(sp)
   17d60:	02d00713          	li	a4,45
   17d64:	e9dff06f          	j	17c00 <_svfprintf_r+0x1ec4>
   17d68:	00012583          	lw	a1,0(sp)
   17d6c:	0c410613          	add	a2,sp,196
   17d70:	000a8513          	mv	a0,s5
   17d74:	00612a23          	sw	t1,20(sp)
   17d78:	3e5020ef          	jal	1a95c <__ssprint_r>
   17d7c:	00050463          	beqz	a0,17d84 <_svfprintf_r+0x2048>
   17d80:	e5dfe06f          	j	16bdc <_svfprintf_r+0xea0>
   17d84:	0ac12583          	lw	a1,172(sp)
   17d88:	0cc12603          	lw	a2,204(sp)
   17d8c:	0c812703          	lw	a4,200(sp)
   17d90:	01412303          	lw	t1,20(sp)
   17d94:	00090493          	mv	s1,s2
   17d98:	9c05d8e3          	bgez	a1,17768 <_svfprintf_r+0x1a2c>
   17d9c:	ba1ff06f          	j	1793c <_svfprintf_r+0x1c00>
   17da0:	01450733          	add	a4,a0,s4
   17da4:	04700613          	li	a2,71
   17da8:	08010c93          	add	s9,sp,128
   17dac:	000c8593          	mv	a1,s9
   17db0:	000c0513          	mv	a0,s8
   17db4:	02e12823          	sw	a4,48(sp)
   17db8:	00c12c23          	sw	a2,24(sp)
   17dbc:	00612a23          	sw	t1,20(sp)
   17dc0:	01112823          	sw	a7,16(sp)
   17dc4:	08512823          	sw	t0,144(sp)
   17dc8:	09f12a23          	sw	t6,148(sp)
   17dcc:	09e12c23          	sw	t5,152(sp)
   17dd0:	09d12e23          	sw	t4,156(sp)
   17dd4:	08012023          	sw	zero,128(sp)
   17dd8:	08012223          	sw	zero,132(sp)
   17ddc:	08012423          	sw	zero,136(sp)
   17de0:	08012623          	sw	zero,140(sp)
   17de4:	444060ef          	jal	1e228 <__eqtf2>
   17de8:	01012883          	lw	a7,16(sp)
   17dec:	01412303          	lw	t1,20(sp)
   17df0:	01812603          	lw	a2,24(sp)
   17df4:	03012703          	lw	a4,48(sp)
   17df8:	5c050463          	beqz	a0,183c0 <_svfprintf_r+0x2684>
   17dfc:	0bc12c83          	lw	s9,188(sp)
   17e00:	00ecfe63          	bgeu	s9,a4,17e1c <_svfprintf_r+0x20e0>
   17e04:	03000593          	li	a1,48
   17e08:	001c8793          	add	a5,s9,1
   17e0c:	0af12e23          	sw	a5,188(sp)
   17e10:	00bc8023          	sb	a1,0(s9)
   17e14:	0bc12c83          	lw	s9,188(sp)
   17e18:	feece8e3          	bltu	s9,a4,17e08 <_svfprintf_r+0x20cc>
   17e1c:	0ac12b03          	lw	s6,172(sp)
   17e20:	41ac87b3          	sub	a5,s9,s10
   17e24:	04700713          	li	a4,71
   17e28:	00f12823          	sw	a5,16(sp)
   17e2c:	c6e60ce3          	beq	a2,a4,17aa4 <_svfprintf_r+0x1d68>
   17e30:	04600713          	li	a4,70
   17e34:	66e60263          	beq	a2,a4,18498 <_svfprintf_r+0x275c>
   17e38:	fffb0a13          	add	s4,s6,-1
   17e3c:	c7dff06f          	j	17ab8 <_svfprintf_r+0x1d7c>
   17e40:	00012423          	sw	zero,8(sp)
   17e44:	00600a13          	li	s4,6
   17e48:	ba0fe06f          	j	161e8 <_svfprintf_r+0x4ac>
   17e4c:	001a0693          	add	a3,s4,1
   17e50:	00200613          	li	a2,2
   17e54:	09010c13          	add	s8,sp,144
   17e58:	0ac10713          	add	a4,sp,172
   17e5c:	000c0593          	mv	a1,s8
   17e60:	0bc10813          	add	a6,sp,188
   17e64:	0b010793          	add	a5,sp,176
   17e68:	000a8513          	mv	a0,s5
   17e6c:	04612623          	sw	t1,76(sp)
   17e70:	05112423          	sw	a7,72(sp)
   17e74:	04d12223          	sw	a3,68(sp)
   17e78:	08512823          	sw	t0,144(sp)
   17e7c:	02512823          	sw	t0,48(sp)
   17e80:	09f12a23          	sw	t6,148(sp)
   17e84:	01f12c23          	sw	t6,24(sp)
   17e88:	09e12c23          	sw	t5,152(sp)
   17e8c:	01e12a23          	sw	t5,20(sp)
   17e90:	09d12e23          	sw	t4,156(sp)
   17e94:	01d12823          	sw	t4,16(sp)
   17e98:	900fa0ef          	jal	11f98 <_ldtoa_r>
   17e9c:	04812883          	lw	a7,72(sp)
   17ea0:	04412683          	lw	a3,68(sp)
   17ea4:	04600593          	li	a1,70
   17ea8:	fdf8f613          	and	a2,a7,-33
   17eac:	01012e83          	lw	t4,16(sp)
   17eb0:	01412f03          	lw	t5,20(sp)
   17eb4:	01812f83          	lw	t6,24(sp)
   17eb8:	03012283          	lw	t0,48(sp)
   17ebc:	04c12303          	lw	t1,76(sp)
   17ec0:	00050d13          	mv	s10,a0
   17ec4:	00d50733          	add	a4,a0,a3
   17ec8:	02b618e3          	bne	a2,a1,186f8 <_svfprintf_r+0x29bc>
   17ecc:	000d4503          	lbu	a0,0(s10)
   17ed0:	03000593          	li	a1,48
   17ed4:	52b50c63          	beq	a0,a1,1840c <_svfprintf_r+0x26d0>
   17ed8:	0ac12683          	lw	a3,172(sp)
   17edc:	08010c93          	add	s9,sp,128
   17ee0:	00d70733          	add	a4,a4,a3
   17ee4:	ec9ff06f          	j	17dac <_svfprintf_r+0x2070>
   17ee8:	09010c13          	add	s8,sp,144
   17eec:	000c0513          	mv	a0,s8
   17ef0:	04612223          	sw	t1,68(sp)
   17ef4:	03112c23          	sw	a7,56(sp)
   17ef8:	08512823          	sw	t0,144(sp)
   17efc:	09f12a23          	sw	t6,148(sp)
   17f00:	09e12c23          	sw	t5,152(sp)
   17f04:	09d12e23          	sw	t4,156(sp)
   17f08:	051090ef          	jal	21758 <__trunctfdf2>
   17f0c:	0ac10613          	add	a2,sp,172
   17f10:	975fd0ef          	jal	15884 <frexp>
   17f14:	00058613          	mv	a2,a1
   17f18:	00050593          	mv	a1,a0
   17f1c:	000c0513          	mv	a0,s8
   17f20:	5f0090ef          	jal	21510 <__extenddftf2>
   17f24:	09012503          	lw	a0,144(sp)
   17f28:	0000b717          	auipc	a4,0xb
   17f2c:	4f870713          	add	a4,a4,1272 # 23420 <zeroes.0+0x14>
   17f30:	00072583          	lw	a1,0(a4)
   17f34:	06a12823          	sw	a0,112(sp)
   17f38:	09412503          	lw	a0,148(sp)
   17f3c:	00472603          	lw	a2,4(a4)
   17f40:	00872683          	lw	a3,8(a4)
   17f44:	06a12a23          	sw	a0,116(sp)
   17f48:	09812503          	lw	a0,152(sp)
   17f4c:	00c72703          	lw	a4,12(a4)
   17f50:	08010c93          	add	s9,sp,128
   17f54:	06a12c23          	sw	a0,120(sp)
   17f58:	09c12503          	lw	a0,156(sp)
   17f5c:	06b12023          	sw	a1,96(sp)
   17f60:	06c12223          	sw	a2,100(sp)
   17f64:	06a12e23          	sw	a0,124(sp)
   17f68:	06010613          	add	a2,sp,96
   17f6c:	07010593          	add	a1,sp,112
   17f70:	000c8513          	mv	a0,s9
   17f74:	06d12423          	sw	a3,104(sp)
   17f78:	06e12623          	sw	a4,108(sp)
   17f7c:	63c060ef          	jal	1e5b8 <__multf3>
   17f80:	08012f03          	lw	t5,128(sp)
   17f84:	08412e83          	lw	t4,132(sp)
   17f88:	08812803          	lw	a6,136(sp)
   17f8c:	08c12603          	lw	a2,140(sp)
   17f90:	000c8593          	mv	a1,s9
   17f94:	000c0513          	mv	a0,s8
   17f98:	09e12823          	sw	t5,144(sp)
   17f9c:	03e12823          	sw	t5,48(sp)
   17fa0:	09d12a23          	sw	t4,148(sp)
   17fa4:	01d12c23          	sw	t4,24(sp)
   17fa8:	09012c23          	sw	a6,152(sp)
   17fac:	01012a23          	sw	a6,20(sp)
   17fb0:	08c12e23          	sw	a2,156(sp)
   17fb4:	00c12823          	sw	a2,16(sp)
   17fb8:	08012023          	sw	zero,128(sp)
   17fbc:	08012223          	sw	zero,132(sp)
   17fc0:	08012423          	sw	zero,136(sp)
   17fc4:	08012623          	sw	zero,140(sp)
   17fc8:	260060ef          	jal	1e228 <__eqtf2>
   17fcc:	01012603          	lw	a2,16(sp)
   17fd0:	01412803          	lw	a6,20(sp)
   17fd4:	01812e83          	lw	t4,24(sp)
   17fd8:	03012f03          	lw	t5,48(sp)
   17fdc:	03812883          	lw	a7,56(sp)
   17fe0:	04412303          	lw	t1,68(sp)
   17fe4:	00051663          	bnez	a0,17ff0 <_svfprintf_r+0x22b4>
   17fe8:	00100713          	li	a4,1
   17fec:	0ae12623          	sw	a4,172(sp)
   17ff0:	0000b797          	auipc	a5,0xb
   17ff4:	0f478793          	add	a5,a5,244 # 230e4 <OSUnMapTbl+0x180>
   17ff8:	06100713          	li	a4,97
   17ffc:	00f12823          	sw	a5,16(sp)
   18000:	00e89863          	bne	a7,a4,18010 <_svfprintf_r+0x22d4>
   18004:	0000b797          	auipc	a5,0xb
   18008:	0cc78793          	add	a5,a5,204 # 230d0 <OSUnMapTbl+0x16c>
   1800c:	00f12823          	sw	a5,16(sp)
   18010:	0000b717          	auipc	a4,0xb
   18014:	42070713          	add	a4,a4,1056 # 23430 <zeroes.0+0x24>
   18018:	00072783          	lw	a5,0(a4)
   1801c:	03312c23          	sw	s3,56(sp)
   18020:	05b12423          	sw	s11,72(sp)
   18024:	00f12a23          	sw	a5,20(sp)
   18028:	00472783          	lw	a5,4(a4)
   1802c:	04912823          	sw	s1,80(sp)
   18030:	000d0993          	mv	s3,s10
   18034:	00f12c23          	sw	a5,24(sp)
   18038:	00872783          	lw	a5,8(a4)
   1803c:	05512a23          	sw	s5,84(sp)
   18040:	05a12c23          	sw	s10,88(sp)
   18044:	02f12823          	sw	a5,48(sp)
   18048:	00c72783          	lw	a5,12(a4)
   1804c:	fffa0a13          	add	s4,s4,-1
   18050:	05112223          	sw	a7,68(sp)
   18054:	04612623          	sw	t1,76(sp)
   18058:	00078d13          	mv	s10,a5
   1805c:	000f0d93          	mv	s11,t5
   18060:	000e8493          	mv	s1,t4
   18064:	00080a93          	mv	s5,a6
   18068:	00060b13          	mv	s6,a2
   1806c:	03c0006f          	j	180a8 <_svfprintf_r+0x236c>
   18070:	000c8593          	mv	a1,s9
   18074:	000c0513          	mv	a0,s8
   18078:	09b12823          	sw	s11,144(sp)
   1807c:	08912a23          	sw	s1,148(sp)
   18080:	09512c23          	sw	s5,152(sp)
   18084:	09612e23          	sw	s6,156(sp)
   18088:	08012023          	sw	zero,128(sp)
   1808c:	08012223          	sw	zero,132(sp)
   18090:	08012423          	sw	zero,136(sp)
   18094:	08012623          	sw	zero,140(sp)
   18098:	fffa0b93          	add	s7,s4,-1
   1809c:	18c060ef          	jal	1e228 <__eqtf2>
   180a0:	58050663          	beqz	a0,1862c <_svfprintf_r+0x28f0>
   180a4:	000b8a13          	mv	s4,s7
   180a8:	01412783          	lw	a5,20(sp)
   180ac:	07010613          	add	a2,sp,112
   180b0:	000c8593          	mv	a1,s9
   180b4:	06f12823          	sw	a5,112(sp)
   180b8:	01812783          	lw	a5,24(sp)
   180bc:	000c0513          	mv	a0,s8
   180c0:	09b12023          	sw	s11,128(sp)
   180c4:	06f12a23          	sw	a5,116(sp)
   180c8:	03012783          	lw	a5,48(sp)
   180cc:	08912223          	sw	s1,132(sp)
   180d0:	09512423          	sw	s5,136(sp)
   180d4:	06f12c23          	sw	a5,120(sp)
   180d8:	09612623          	sw	s6,140(sp)
   180dc:	07a12e23          	sw	s10,124(sp)
   180e0:	4d8060ef          	jal	1e5b8 <__multf3>
   180e4:	000c0513          	mv	a0,s8
   180e8:	190090ef          	jal	21278 <__fixtfsi>
   180ec:	00050593          	mv	a1,a0
   180f0:	00050b93          	mv	s7,a0
   180f4:	000c0513          	mv	a0,s8
   180f8:	09012d83          	lw	s11,144(sp)
   180fc:	09412b03          	lw	s6,148(sp)
   18100:	09812a83          	lw	s5,152(sp)
   18104:	09c12483          	lw	s1,156(sp)
   18108:	270090ef          	jal	21378 <__floatsitf>
   1810c:	09012683          	lw	a3,144(sp)
   18110:	06010613          	add	a2,sp,96
   18114:	07010593          	add	a1,sp,112
   18118:	06d12023          	sw	a3,96(sp)
   1811c:	09412683          	lw	a3,148(sp)
   18120:	000c8513          	mv	a0,s9
   18124:	07b12823          	sw	s11,112(sp)
   18128:	06d12223          	sw	a3,100(sp)
   1812c:	09812683          	lw	a3,152(sp)
   18130:	07612a23          	sw	s6,116(sp)
   18134:	07512c23          	sw	s5,120(sp)
   18138:	06d12423          	sw	a3,104(sp)
   1813c:	09c12683          	lw	a3,156(sp)
   18140:	06912e23          	sw	s1,124(sp)
   18144:	06d12623          	sw	a3,108(sp)
   18148:	18d070ef          	jal	1fad4 <__subtf3>
   1814c:	01012783          	lw	a5,16(sp)
   18150:	00098f93          	mv	t6,s3
   18154:	00198993          	add	s3,s3,1
   18158:	017786b3          	add	a3,a5,s7
   1815c:	0006c683          	lbu	a3,0(a3)
   18160:	08012d83          	lw	s11,128(sp)
   18164:	08412483          	lw	s1,132(sp)
   18168:	08812a83          	lw	s5,136(sp)
   1816c:	08c12b03          	lw	s6,140(sp)
   18170:	fff00793          	li	a5,-1
   18174:	fed98fa3          	sb	a3,-1(s3)
   18178:	eefa1ce3          	bne	s4,a5,18070 <_svfprintf_r+0x2334>
   1817c:	0000b597          	auipc	a1,0xb
   18180:	2c458593          	add	a1,a1,708 # 23440 <zeroes.0+0x34>
   18184:	04412883          	lw	a7,68(sp)
   18188:	04c12303          	lw	t1,76(sp)
   1818c:	0045a283          	lw	t0,4(a1)
   18190:	0085a383          	lw	t2,8(a1)
   18194:	00c5a783          	lw	a5,12(a1)
   18198:	0005aa03          	lw	s4,0(a1)
   1819c:	000d8f13          	mv	t5,s11
   181a0:	00048e93          	mv	t4,s1
   181a4:	000a8813          	mv	a6,s5
   181a8:	000c8593          	mv	a1,s9
   181ac:	000c0513          	mv	a0,s8
   181b0:	05812d03          	lw	s10,88(sp)
   181b4:	04812d83          	lw	s11,72(sp)
   181b8:	05012483          	lw	s1,80(sp)
   181bc:	05412a83          	lw	s5,84(sp)
   181c0:	03f12823          	sw	t6,48(sp)
   181c4:	01112c23          	sw	a7,24(sp)
   181c8:	00612a23          	sw	t1,20(sp)
   181cc:	05712e23          	sw	s7,92(sp)
   181d0:	09e12823          	sw	t5,144(sp)
   181d4:	00098b93          	mv	s7,s3
   181d8:	05e12c23          	sw	t5,88(sp)
   181dc:	03812983          	lw	s3,56(sp)
   181e0:	09d12a23          	sw	t4,148(sp)
   181e4:	05d12a23          	sw	t4,84(sp)
   181e8:	09012c23          	sw	a6,152(sp)
   181ec:	05012823          	sw	a6,80(sp)
   181f0:	09612e23          	sw	s6,156(sp)
   181f4:	05612623          	sw	s6,76(sp)
   181f8:	09412023          	sw	s4,128(sp)
   181fc:	08512223          	sw	t0,132(sp)
   18200:	04512423          	sw	t0,72(sp)
   18204:	08712423          	sw	t2,136(sp)
   18208:	04712223          	sw	t2,68(sp)
   1820c:	08f12623          	sw	a5,140(sp)
   18210:	02f12c23          	sw	a5,56(sp)
   18214:	0e4060ef          	jal	1e2f8 <__getf2>
   18218:	01412303          	lw	t1,20(sp)
   1821c:	01812883          	lw	a7,24(sp)
   18220:	03012f83          	lw	t6,48(sp)
   18224:	02a04a63          	bgtz	a0,18258 <_svfprintf_r+0x251c>
   18228:	000c8593          	mv	a1,s9
   1822c:	000c0513          	mv	a0,s8
   18230:	02612823          	sw	t1,48(sp)
   18234:	01f12a23          	sw	t6,20(sp)
   18238:	7f1050ef          	jal	1e228 <__eqtf2>
   1823c:	01812883          	lw	a7,24(sp)
   18240:	03012303          	lw	t1,48(sp)
   18244:	04051e63          	bnez	a0,182a0 <_svfprintf_r+0x2564>
   18248:	05c12703          	lw	a4,92(sp)
   1824c:	01412f83          	lw	t6,20(sp)
   18250:	00177693          	and	a3,a4,1
   18254:	04068663          	beqz	a3,182a0 <_svfprintf_r+0x2564>
   18258:	01012783          	lw	a5,16(sp)
   1825c:	0bf12e23          	sw	t6,188(sp)
   18260:	fffbc603          	lbu	a2,-1(s7)
   18264:	00f7c583          	lbu	a1,15(a5)
   18268:	000b8693          	mv	a3,s7
   1826c:	02b61063          	bne	a2,a1,1828c <_svfprintf_r+0x2550>
   18270:	03000513          	li	a0,48
   18274:	fea68fa3          	sb	a0,-1(a3)
   18278:	0bc12683          	lw	a3,188(sp)
   1827c:	fff68793          	add	a5,a3,-1
   18280:	0af12e23          	sw	a5,188(sp)
   18284:	fff6c603          	lbu	a2,-1(a3)
   18288:	fec586e3          	beq	a1,a2,18274 <_svfprintf_r+0x2538>
   1828c:	00160593          	add	a1,a2,1
   18290:	03900513          	li	a0,57
   18294:	0ff5f593          	zext.b	a1,a1
   18298:	04a60263          	beq	a2,a0,182dc <_svfprintf_r+0x25a0>
   1829c:	feb68fa3          	sb	a1,-1(a3)
   182a0:	0ac12b03          	lw	s6,172(sp)
   182a4:	41ab87b3          	sub	a5,s7,s10
   182a8:	06100613          	li	a2,97
   182ac:	fffb0a13          	add	s4,s6,-1
   182b0:	00f12823          	sw	a5,16(sp)
   182b4:	0b412623          	sw	s4,172(sp)
   182b8:	07000693          	li	a3,112
   182bc:	00c88663          	beq	a7,a2,182c8 <_svfprintf_r+0x258c>
   182c0:	05000693          	li	a3,80
   182c4:	04100893          	li	a7,65
   182c8:	00100613          	li	a2,1
   182cc:	ff8ff06f          	j	17ac4 <_svfprintf_r+0x1d88>
   182d0:	000a0693          	mv	a3,s4
   182d4:	00300613          	li	a2,3
   182d8:	b7dff06f          	j	17e54 <_svfprintf_r+0x2118>
   182dc:	01012783          	lw	a5,16(sp)
   182e0:	00a7c583          	lbu	a1,10(a5)
   182e4:	fb9ff06f          	j	1829c <_svfprintf_r+0x2560>
   182e8:	0a714703          	lbu	a4,167(sp)
   182ec:	000b8d93          	mv	s11,s7
   182f0:	00000a13          	li	s4,0
   182f4:	00070463          	beqz	a4,182fc <_svfprintf_r+0x25c0>
   182f8:	9fcfe06f          	j	164f4 <_svfprintf_r+0x7b8>
   182fc:	c1dfd06f          	j	15f18 <_svfprintf_r+0x1dc>
   18300:	01012783          	lw	a5,16(sp)
   18304:	1cfb4263          	blt	s6,a5,184c8 <_svfprintf_r+0x278c>
   18308:	001df713          	and	a4,s11,1
   1830c:	000b0c13          	mv	s8,s6
   18310:	00070663          	beqz	a4,1831c <_svfprintf_r+0x25e0>
   18314:	02012783          	lw	a5,32(sp)
   18318:	00fb0c33          	add	s8,s6,a5
   1831c:	400dfe13          	and	t3,s11,1024
   18320:	000e0463          	beqz	t3,18328 <_svfprintf_r+0x25ec>
   18324:	29604063          	bgtz	s6,185a4 <_svfprintf_r+0x2868>
   18328:	fffc4693          	not	a3,s8
   1832c:	41f6d693          	sra	a3,a3,0x1f
   18330:	00dc7cb3          	and	s9,s8,a3
   18334:	06700893          	li	a7,103
   18338:	00012c23          	sw	zero,24(sp)
   1833c:	00012a23          	sw	zero,20(sp)
   18340:	895ff06f          	j	17bd4 <_svfprintf_r+0x1e98>
   18344:	0c410613          	add	a2,sp,196
   18348:	000c0593          	mv	a1,s8
   1834c:	000a8513          	mv	a0,s5
   18350:	60c020ef          	jal	1a95c <__ssprint_r>
   18354:	00050463          	beqz	a0,1835c <_svfprintf_r+0x2620>
   18358:	885fe06f          	j	16bdc <_svfprintf_r+0xea0>
   1835c:	000bc683          	lbu	a3,0(s7)
   18360:	0cc12603          	lw	a2,204(sp)
   18364:	00090593          	mv	a1,s2
   18368:	01000713          	li	a4,16
   1836c:	00700813          	li	a6,7
   18370:	00dd0d33          	add	s10,s10,a3
   18374:	8ecff06f          	j	17460 <_svfprintf_r+0x1724>
   18378:	00900793          	li	a5,9
   1837c:	af87ea63          	bltu	a5,s8,17670 <_svfprintf_r+0x1934>
   18380:	b3cff06f          	j	176bc <_svfprintf_r+0x1980>
   18384:	02d00793          	li	a5,45
   18388:	0af103a3          	sb	a5,167(sp)
   1838c:	02d00713          	li	a4,45
   18390:	d00ff06f          	j	17890 <_svfprintf_r+0x1b54>
   18394:	0a714703          	lbu	a4,167(sp)
   18398:	01712623          	sw	s7,12(sp)
   1839c:	00012c23          	sw	zero,24(sp)
   183a0:	00012a23          	sw	zero,20(sp)
   183a4:	000a0c93          	mv	s9,s4
   183a8:	000a0c13          	mv	s8,s4
   183ac:	00000b13          	li	s6,0
   183b0:	00000a13          	li	s4,0
   183b4:	00070463          	beqz	a4,183bc <_svfprintf_r+0x2680>
   183b8:	93cfe06f          	j	164f4 <_svfprintf_r+0x7b8>
   183bc:	b5dfd06f          	j	15f18 <_svfprintf_r+0x1dc>
   183c0:	0ac12b03          	lw	s6,172(sp)
   183c4:	00070c93          	mv	s9,a4
   183c8:	a59ff06f          	j	17e20 <_svfprintf_r+0x20e4>
   183cc:	00012583          	lw	a1,0(sp)
   183d0:	0c410613          	add	a2,sp,196
   183d4:	000a8513          	mv	a0,s5
   183d8:	00612a23          	sw	t1,20(sp)
   183dc:	580020ef          	jal	1a95c <__ssprint_r>
   183e0:	00050463          	beqz	a0,183e8 <_svfprintf_r+0x26ac>
   183e4:	ff8fe06f          	j	16bdc <_svfprintf_r+0xea0>
   183e8:	0ac12583          	lw	a1,172(sp)
   183ec:	01012783          	lw	a5,16(sp)
   183f0:	0cc12603          	lw	a2,204(sp)
   183f4:	01412303          	lw	t1,20(sp)
   183f8:	00090493          	mv	s1,s2
   183fc:	40b785b3          	sub	a1,a5,a1
   18400:	a15fe06f          	j	16e14 <_svfprintf_r+0x10d8>
   18404:	000d8613          	mv	a2,s11
   18408:	af4fe06f          	j	166fc <_svfprintf_r+0x9c0>
   1840c:	08010c93          	add	s9,sp,128
   18410:	000c8593          	mv	a1,s9
   18414:	000c0513          	mv	a0,s8
   18418:	04e12a23          	sw	a4,84(sp)
   1841c:	04c12823          	sw	a2,80(sp)
   18420:	04612623          	sw	t1,76(sp)
   18424:	05112423          	sw	a7,72(sp)
   18428:	04d12223          	sw	a3,68(sp)
   1842c:	08512823          	sw	t0,144(sp)
   18430:	02512823          	sw	t0,48(sp)
   18434:	09f12a23          	sw	t6,148(sp)
   18438:	01f12c23          	sw	t6,24(sp)
   1843c:	09e12c23          	sw	t5,152(sp)
   18440:	01e12a23          	sw	t5,20(sp)
   18444:	09d12e23          	sw	t4,156(sp)
   18448:	01d12823          	sw	t4,16(sp)
   1844c:	08012023          	sw	zero,128(sp)
   18450:	08012223          	sw	zero,132(sp)
   18454:	08012423          	sw	zero,136(sp)
   18458:	08012623          	sw	zero,140(sp)
   1845c:	5cd050ef          	jal	1e228 <__eqtf2>
   18460:	01012e83          	lw	t4,16(sp)
   18464:	01412f03          	lw	t5,20(sp)
   18468:	01812f83          	lw	t6,24(sp)
   1846c:	03012283          	lw	t0,48(sp)
   18470:	04412683          	lw	a3,68(sp)
   18474:	04812883          	lw	a7,72(sp)
   18478:	04c12303          	lw	t1,76(sp)
   1847c:	05012603          	lw	a2,80(sp)
   18480:	05412703          	lw	a4,84(sp)
   18484:	1e051e63          	bnez	a0,18680 <_svfprintf_r+0x2944>
   18488:	0ac12b03          	lw	s6,172(sp)
   1848c:	01670733          	add	a4,a4,s6
   18490:	41a707b3          	sub	a5,a4,s10
   18494:	00f12823          	sw	a5,16(sp)
   18498:	001df713          	and	a4,s11,1
   1849c:	01476733          	or	a4,a4,s4
   184a0:	1f605a63          	blez	s6,18694 <_svfprintf_r+0x2958>
   184a4:	1c071463          	bnez	a4,1866c <_svfprintf_r+0x2930>
   184a8:	000b0c13          	mv	s8,s6
   184ac:	06600893          	li	a7,102
   184b0:	400dfe13          	and	t3,s11,1024
   184b4:	0e0e1a63          	bnez	t3,185a8 <_svfprintf_r+0x286c>
   184b8:	fffc4693          	not	a3,s8
   184bc:	41f6d693          	sra	a3,a3,0x1f
   184c0:	00dc7cb3          	and	s9,s8,a3
   184c4:	e75ff06f          	j	18338 <_svfprintf_r+0x25fc>
   184c8:	01012783          	lw	a5,16(sp)
   184cc:	02012703          	lw	a4,32(sp)
   184d0:	06700893          	li	a7,103
   184d4:	00e78c33          	add	s8,a5,a4
   184d8:	fd604ce3          	bgtz	s6,184b0 <_svfprintf_r+0x2774>
   184dc:	416c0f33          	sub	t5,s8,s6
   184e0:	001f0c13          	add	s8,t5,1
   184e4:	fffc4693          	not	a3,s8
   184e8:	41f6d693          	sra	a3,a3,0x1f
   184ec:	00dc7cb3          	and	s9,s8,a3
   184f0:	e49ff06f          	j	18338 <_svfprintf_r+0x25fc>
   184f4:	0b610693          	add	a3,sp,182
   184f8:	00061863          	bnez	a2,18508 <_svfprintf_r+0x27cc>
   184fc:	03000693          	li	a3,48
   18500:	0ad10b23          	sb	a3,182(sp)
   18504:	0b710693          	add	a3,sp,183
   18508:	19010793          	add	a5,sp,400
   1850c:	40f68633          	sub	a2,a3,a5
   18510:	030a0713          	add	a4,s4,48
   18514:	0dd60793          	add	a5,a2,221
   18518:	00e68023          	sb	a4,0(a3)
   1851c:	02f12c23          	sw	a5,56(sp)
   18520:	e74ff06f          	j	17b94 <_svfprintf_r+0x1e58>
   18524:	00098813          	mv	a6,s3
   18528:	01412983          	lw	s3,20(sp)
   1852c:	000b0313          	mv	t1,s6
   18530:	01460633          	add	a2,a2,s4
   18534:	00170713          	add	a4,a4,1
   18538:	0104a023          	sw	a6,0(s1)
   1853c:	0144a223          	sw	s4,4(s1)
   18540:	0cc12623          	sw	a2,204(sp)
   18544:	0ce12423          	sw	a4,200(sp)
   18548:	00700593          	li	a1,7
   1854c:	a0e5dc63          	bge	a1,a4,17764 <_svfprintf_r+0x1a28>
   18550:	00012583          	lw	a1,0(sp)
   18554:	0c410613          	add	a2,sp,196
   18558:	000a8513          	mv	a0,s5
   1855c:	00612a23          	sw	t1,20(sp)
   18560:	3fc020ef          	jal	1a95c <__ssprint_r>
   18564:	00050463          	beqz	a0,1856c <_svfprintf_r+0x2830>
   18568:	e74fe06f          	j	16bdc <_svfprintf_r+0xea0>
   1856c:	0cc12603          	lw	a2,204(sp)
   18570:	0c812703          	lw	a4,200(sp)
   18574:	01412303          	lw	t1,20(sp)
   18578:	00090493          	mv	s1,s2
   1857c:	9ecff06f          	j	17768 <_svfprintf_r+0x1a2c>
   18580:	001df713          	and	a4,s11,1
   18584:	e2070663          	beqz	a4,17bb0 <_svfprintf_r+0x1e74>
   18588:	e20ff06f          	j	17ba8 <_svfprintf_r+0x1e6c>
   1858c:	01c12703          	lw	a4,28(sp)
   18590:	00c00793          	li	a5,12
   18594:	00f72023          	sw	a5,0(a4)
   18598:	fff00793          	li	a5,-1
   1859c:	00f12223          	sw	a5,4(sp)
   185a0:	addfd06f          	j	1607c <_svfprintf_r+0x340>
   185a4:	06700893          	li	a7,103
   185a8:	03412783          	lw	a5,52(sp)
   185ac:	0ff00693          	li	a3,255
   185b0:	0007c703          	lbu	a4,0(a5)
   185b4:	14d70863          	beq	a4,a3,18704 <_svfprintf_r+0x29c8>
   185b8:	00000593          	li	a1,0
   185bc:	00000613          	li	a2,0
   185c0:	01675e63          	bge	a4,s6,185dc <_svfprintf_r+0x28a0>
   185c4:	40eb0b33          	sub	s6,s6,a4
   185c8:	0017c703          	lbu	a4,1(a5)
   185cc:	04070a63          	beqz	a4,18620 <_svfprintf_r+0x28e4>
   185d0:	00160613          	add	a2,a2,1
   185d4:	00178793          	add	a5,a5,1
   185d8:	fed714e3          	bne	a4,a3,185c0 <_svfprintf_r+0x2884>
   185dc:	02f12a23          	sw	a5,52(sp)
   185e0:	00c12a23          	sw	a2,20(sp)
   185e4:	00b12c23          	sw	a1,24(sp)
   185e8:	01812783          	lw	a5,24(sp)
   185ec:	01412703          	lw	a4,20(sp)
   185f0:	04012583          	lw	a1,64(sp)
   185f4:	04612223          	sw	t1,68(sp)
   185f8:	00e78533          	add	a0,a5,a4
   185fc:	03112823          	sw	a7,48(sp)
   18600:	534090ef          	jal	21b34 <__mulsi3>
   18604:	01850c33          	add	s8,a0,s8
   18608:	fffc4693          	not	a3,s8
   1860c:	41f6d693          	sra	a3,a3,0x1f
   18610:	03012883          	lw	a7,48(sp)
   18614:	04412303          	lw	t1,68(sp)
   18618:	00dc7cb3          	and	s9,s8,a3
   1861c:	db8ff06f          	j	17bd4 <_svfprintf_r+0x1e98>
   18620:	0007c703          	lbu	a4,0(a5)
   18624:	00158593          	add	a1,a1,1
   18628:	fb1ff06f          	j	185d8 <_svfprintf_r+0x289c>
   1862c:	00098b93          	mv	s7,s3
   18630:	001a0693          	add	a3,s4,1
   18634:	04412883          	lw	a7,68(sp)
   18638:	04812d83          	lw	s11,72(sp)
   1863c:	04c12303          	lw	t1,76(sp)
   18640:	05012483          	lw	s1,80(sp)
   18644:	03812983          	lw	s3,56(sp)
   18648:	05412a83          	lw	s5,84(sp)
   1864c:	05812d03          	lw	s10,88(sp)
   18650:	00db86b3          	add	a3,s7,a3
   18654:	03000613          	li	a2,48
   18658:	c40a44e3          	bltz	s4,182a0 <_svfprintf_r+0x2564>
   1865c:	001b8b93          	add	s7,s7,1
   18660:	fecb8fa3          	sb	a2,-1(s7)
   18664:	fedb9ce3          	bne	s7,a3,1865c <_svfprintf_r+0x2920>
   18668:	c39ff06f          	j	182a0 <_svfprintf_r+0x2564>
   1866c:	02012783          	lw	a5,32(sp)
   18670:	06600893          	li	a7,102
   18674:	00fa0f33          	add	t5,s4,a5
   18678:	016f0c33          	add	s8,t5,s6
   1867c:	e35ff06f          	j	184b0 <_svfprintf_r+0x2774>
   18680:	00100593          	li	a1,1
   18684:	40d586b3          	sub	a3,a1,a3
   18688:	0ad12623          	sw	a3,172(sp)
   1868c:	00d70733          	add	a4,a4,a3
   18690:	f1cff06f          	j	17dac <_svfprintf_r+0x2070>
   18694:	00071a63          	bnez	a4,186a8 <_svfprintf_r+0x296c>
   18698:	00100c93          	li	s9,1
   1869c:	06600893          	li	a7,102
   186a0:	00100c13          	li	s8,1
   186a4:	c95ff06f          	j	18338 <_svfprintf_r+0x25fc>
   186a8:	02012783          	lw	a5,32(sp)
   186ac:	06600893          	li	a7,102
   186b0:	00178f13          	add	t5,a5,1
   186b4:	014f0c33          	add	s8,t5,s4
   186b8:	fffc4693          	not	a3,s8
   186bc:	41f6d693          	sra	a3,a3,0x1f
   186c0:	00dc7cb3          	and	s9,s8,a3
   186c4:	c75ff06f          	j	18338 <_svfprintf_r+0x25fc>
   186c8:	00200793          	li	a5,2
   186cc:	02f12c23          	sw	a5,56(sp)
   186d0:	cc4ff06f          	j	17b94 <_svfprintf_r+0x1e58>
   186d4:	00c12783          	lw	a5,12(sp)
   186d8:	0007aa03          	lw	s4,0(a5)
   186dc:	00478793          	add	a5,a5,4
   186e0:	000a5463          	bgez	s4,186e8 <_svfprintf_r+0x29ac>
   186e4:	fff00a13          	li	s4,-1
   186e8:	0019c883          	lbu	a7,1(s3)
   186ec:	00f12623          	sw	a5,12(sp)
   186f0:	00068993          	mv	s3,a3
   186f4:	f98fd06f          	j	15e8c <_svfprintf_r+0x150>
   186f8:	04500613          	li	a2,69
   186fc:	08010c93          	add	s9,sp,128
   18700:	eacff06f          	j	17dac <_svfprintf_r+0x2070>
   18704:	00012c23          	sw	zero,24(sp)
   18708:	00012a23          	sw	zero,20(sp)
   1870c:	eddff06f          	j	185e8 <_svfprintf_r+0x28ac>
   18710:	00012703          	lw	a4,0(sp)
   18714:	00c75783          	lhu	a5,12(a4)
   18718:	0407e793          	or	a5,a5,64
   1871c:	00f71623          	sh	a5,12(a4)
   18720:	921fd06f          	j	16040 <_svfprintf_r+0x304>

00018724 <__sprint_r.part.0>:
   18724:	0645a783          	lw	a5,100(a1)
   18728:	fd010113          	add	sp,sp,-48
   1872c:	01612823          	sw	s6,16(sp)
   18730:	02112623          	sw	ra,44(sp)
   18734:	01279713          	sll	a4,a5,0x12
   18738:	00060b13          	mv	s6,a2
   1873c:	0e075863          	bgez	a4,1882c <__sprint_r.part.0+0x108>
   18740:	00862783          	lw	a5,8(a2)
   18744:	03212023          	sw	s2,32(sp)
   18748:	01312e23          	sw	s3,28(sp)
   1874c:	01512a23          	sw	s5,20(sp)
   18750:	01712623          	sw	s7,12(sp)
   18754:	00058913          	mv	s2,a1
   18758:	00062b83          	lw	s7,0(a2)
   1875c:	00050993          	mv	s3,a0
   18760:	fff00a93          	li	s5,-1
   18764:	0a078863          	beqz	a5,18814 <__sprint_r.part.0+0xf0>
   18768:	02812423          	sw	s0,40(sp)
   1876c:	02912223          	sw	s1,36(sp)
   18770:	01412c23          	sw	s4,24(sp)
   18774:	01812423          	sw	s8,8(sp)
   18778:	004bac03          	lw	s8,4(s7)
   1877c:	000ba403          	lw	s0,0(s7)
   18780:	002c5a13          	srl	s4,s8,0x2
   18784:	060a0663          	beqz	s4,187f0 <__sprint_r.part.0+0xcc>
   18788:	00000493          	li	s1,0
   1878c:	00c0006f          	j	18798 <__sprint_r.part.0+0x74>
   18790:	00440413          	add	s0,s0,4
   18794:	049a0c63          	beq	s4,s1,187ec <__sprint_r.part.0+0xc8>
   18798:	00042583          	lw	a1,0(s0)
   1879c:	00090613          	mv	a2,s2
   187a0:	00098513          	mv	a0,s3
   187a4:	389010ef          	jal	1a32c <_fputwc_r>
   187a8:	00148493          	add	s1,s1,1
   187ac:	ff5512e3          	bne	a0,s5,18790 <__sprint_r.part.0+0x6c>
   187b0:	02812403          	lw	s0,40(sp)
   187b4:	02412483          	lw	s1,36(sp)
   187b8:	02012903          	lw	s2,32(sp)
   187bc:	01c12983          	lw	s3,28(sp)
   187c0:	01812a03          	lw	s4,24(sp)
   187c4:	01412a83          	lw	s5,20(sp)
   187c8:	00c12b83          	lw	s7,12(sp)
   187cc:	00812c03          	lw	s8,8(sp)
   187d0:	fff00513          	li	a0,-1
   187d4:	02c12083          	lw	ra,44(sp)
   187d8:	000b2423          	sw	zero,8(s6)
   187dc:	000b2223          	sw	zero,4(s6)
   187e0:	01012b03          	lw	s6,16(sp)
   187e4:	03010113          	add	sp,sp,48
   187e8:	00008067          	ret
   187ec:	008b2783          	lw	a5,8(s6)
   187f0:	ffcc7c13          	and	s8,s8,-4
   187f4:	418787b3          	sub	a5,a5,s8
   187f8:	00fb2423          	sw	a5,8(s6)
   187fc:	008b8b93          	add	s7,s7,8
   18800:	f6079ce3          	bnez	a5,18778 <__sprint_r.part.0+0x54>
   18804:	02812403          	lw	s0,40(sp)
   18808:	02412483          	lw	s1,36(sp)
   1880c:	01812a03          	lw	s4,24(sp)
   18810:	00812c03          	lw	s8,8(sp)
   18814:	02012903          	lw	s2,32(sp)
   18818:	01c12983          	lw	s3,28(sp)
   1881c:	01412a83          	lw	s5,20(sp)
   18820:	00c12b83          	lw	s7,12(sp)
   18824:	00000513          	li	a0,0
   18828:	fadff06f          	j	187d4 <__sprint_r.part.0+0xb0>
   1882c:	f38f70ef          	jal	ff64 <__sfvwrite_r>
   18830:	02c12083          	lw	ra,44(sp)
   18834:	000b2423          	sw	zero,8(s6)
   18838:	000b2223          	sw	zero,4(s6)
   1883c:	01012b03          	lw	s6,16(sp)
   18840:	03010113          	add	sp,sp,48
   18844:	00008067          	ret

00018848 <__sprint_r>:
   18848:	00862703          	lw	a4,8(a2)
   1884c:	00070463          	beqz	a4,18854 <__sprint_r+0xc>
   18850:	ed5ff06f          	j	18724 <__sprint_r.part.0>
   18854:	00062223          	sw	zero,4(a2)
   18858:	00000513          	li	a0,0
   1885c:	00008067          	ret

00018860 <_vfiprintf_r>:
   18860:	ed010113          	add	sp,sp,-304
   18864:	12912223          	sw	s1,292(sp)
   18868:	11312e23          	sw	s3,284(sp)
   1886c:	11412c23          	sw	s4,280(sp)
   18870:	11812423          	sw	s8,264(sp)
   18874:	12112623          	sw	ra,300(sp)
   18878:	11712623          	sw	s7,268(sp)
   1887c:	00050993          	mv	s3,a0
   18880:	00058493          	mv	s1,a1
   18884:	00060c13          	mv	s8,a2
   18888:	00068a13          	mv	s4,a3
   1888c:	00050663          	beqz	a0,18898 <_vfiprintf_r+0x38>
   18890:	03852783          	lw	a5,56(a0)
   18894:	5a078c63          	beqz	a5,18e4c <_vfiprintf_r+0x5ec>
   18898:	0644a703          	lw	a4,100(s1)
   1889c:	00c49783          	lh	a5,12(s1)
   188a0:	00177713          	and	a4,a4,1
   188a4:	00071863          	bnez	a4,188b4 <_vfiprintf_r+0x54>
   188a8:	2007f713          	and	a4,a5,512
   188ac:	00071463          	bnez	a4,188b4 <_vfiprintf_r+0x54>
   188b0:	0700106f          	j	19920 <_vfiprintf_r+0x10c0>
   188b4:	01279713          	sll	a4,a5,0x12
   188b8:	02074663          	bltz	a4,188e4 <_vfiprintf_r+0x84>
   188bc:	0644a703          	lw	a4,100(s1)
   188c0:	00002637          	lui	a2,0x2
   188c4:	ffffe6b7          	lui	a3,0xffffe
   188c8:	00c7e7b3          	or	a5,a5,a2
   188cc:	fff68693          	add	a3,a3,-1 # ffffdfff <__alt_data_end+0xfffb4c1f>
   188d0:	01079793          	sll	a5,a5,0x10
   188d4:	4107d793          	sra	a5,a5,0x10
   188d8:	00d77733          	and	a4,a4,a3
   188dc:	00f49623          	sh	a5,12(s1)
   188e0:	06e4a223          	sw	a4,100(s1)
   188e4:	0087f713          	and	a4,a5,8
   188e8:	14070263          	beqz	a4,18a2c <_vfiprintf_r+0x1cc>
   188ec:	0104a703          	lw	a4,16(s1)
   188f0:	12070e63          	beqz	a4,18a2c <_vfiprintf_r+0x1cc>
   188f4:	01a7f713          	and	a4,a5,26
   188f8:	00a00693          	li	a3,10
   188fc:	14d70a63          	beq	a4,a3,18a50 <_vfiprintf_r+0x1f0>
   18900:	00000b93          	li	s7,0
   18904:	13212023          	sw	s2,288(sp)
   18908:	04c10913          	add	s2,sp,76
   1890c:	12812423          	sw	s0,296(sp)
   18910:	11512a23          	sw	s5,276(sp)
   18914:	11612823          	sw	s6,272(sp)
   18918:	11a12023          	sw	s10,256(sp)
   1891c:	11912223          	sw	s9,260(sp)
   18920:	000b8d13          	mv	s10,s7
   18924:	0fb12e23          	sw	s11,252(sp)
   18928:	05212023          	sw	s2,64(sp)
   1892c:	04012423          	sw	zero,72(sp)
   18930:	04012223          	sw	zero,68(sp)
   18934:	00090713          	mv	a4,s2
   18938:	00012023          	sw	zero,0(sp)
   1893c:	00012c23          	sw	zero,24(sp)
   18940:	00012e23          	sw	zero,28(sp)
   18944:	02012023          	sw	zero,32(sp)
   18948:	0000bb17          	auipc	s6,0xb
   1894c:	0acb0b13          	add	s6,s6,172 # 239f4 <zeroes.0+0x10>
   18950:	01000413          	li	s0,16
   18954:	0000ba97          	auipc	s5,0xb
   18958:	21ca8a93          	add	s5,s5,540 # 23b70 <zeroes.0>
   1895c:	000c0b93          	mv	s7,s8
   18960:	000a0313          	mv	t1,s4
   18964:	000bc783          	lbu	a5,0(s7)
   18968:	36078a63          	beqz	a5,18cdc <_vfiprintf_r+0x47c>
   1896c:	000b8c93          	mv	s9,s7
   18970:	02500693          	li	a3,37
   18974:	38d78e63          	beq	a5,a3,18d10 <_vfiprintf_r+0x4b0>
   18978:	001cc783          	lbu	a5,1(s9)
   1897c:	001c8c93          	add	s9,s9,1
   18980:	fe079ae3          	bnez	a5,18974 <_vfiprintf_r+0x114>
   18984:	417c8a33          	sub	s4,s9,s7
   18988:	357c8a63          	beq	s9,s7,18cdc <_vfiprintf_r+0x47c>
   1898c:	04812683          	lw	a3,72(sp)
   18990:	04412783          	lw	a5,68(sp)
   18994:	01772023          	sw	s7,0(a4)
   18998:	00da06b3          	add	a3,s4,a3
   1899c:	00178793          	add	a5,a5,1
   189a0:	01472223          	sw	s4,4(a4)
   189a4:	04d12423          	sw	a3,72(sp)
   189a8:	04f12223          	sw	a5,68(sp)
   189ac:	00700613          	li	a2,7
   189b0:	00870713          	add	a4,a4,8
   189b4:	02f65463          	bge	a2,a5,189dc <_vfiprintf_r+0x17c>
   189b8:	560684e3          	beqz	a3,19720 <_vfiprintf_r+0xec0>
   189bc:	04010613          	add	a2,sp,64
   189c0:	00048593          	mv	a1,s1
   189c4:	00098513          	mv	a0,s3
   189c8:	00612223          	sw	t1,4(sp)
   189cc:	d59ff0ef          	jal	18724 <__sprint_r.part.0>
   189d0:	00412303          	lw	t1,4(sp)
   189d4:	0e051463          	bnez	a0,18abc <_vfiprintf_r+0x25c>
   189d8:	00090713          	mv	a4,s2
   189dc:	000cc783          	lbu	a5,0(s9)
   189e0:	014d0d33          	add	s10,s10,s4
   189e4:	2e078c63          	beqz	a5,18cdc <_vfiprintf_r+0x47c>
   189e8:	00000693          	li	a3,0
   189ec:	001cc603          	lbu	a2,1(s9)
   189f0:	001c8b93          	add	s7,s9,1
   189f4:	02010da3          	sb	zero,59(sp)
   189f8:	fff00c93          	li	s9,-1
   189fc:	00000813          	li	a6,0
   18a00:	05a00a13          	li	s4,90
   18a04:	00068c13          	mv	s8,a3
   18a08:	00070d93          	mv	s11,a4
   18a0c:	001b8b93          	add	s7,s7,1
   18a10:	fe060793          	add	a5,a2,-32 # 1fe0 <OS_EventTaskWaitMulti+0xb0>
   18a14:	12fa6e63          	bltu	s4,a5,18b50 <_vfiprintf_r+0x2f0>
   18a18:	00279793          	sll	a5,a5,0x2
   18a1c:	016787b3          	add	a5,a5,s6
   18a20:	0007a783          	lw	a5,0(a5)
   18a24:	016787b3          	add	a5,a5,s6
   18a28:	00078067          	jr	a5
   18a2c:	00048593          	mv	a1,s1
   18a30:	00098513          	mv	a0,s3
   18a34:	bf0f60ef          	jal	ee24 <__swsetup_r>
   18a38:	00050463          	beqz	a0,18a40 <_vfiprintf_r+0x1e0>
   18a3c:	2000106f          	j	19c3c <_vfiprintf_r+0x13dc>
   18a40:	00c49783          	lh	a5,12(s1)
   18a44:	00a00693          	li	a3,10
   18a48:	01a7f713          	and	a4,a5,26
   18a4c:	ead71ae3          	bne	a4,a3,18900 <_vfiprintf_r+0xa0>
   18a50:	00e49703          	lh	a4,14(s1)
   18a54:	ea0746e3          	bltz	a4,18900 <_vfiprintf_r+0xa0>
   18a58:	0644a703          	lw	a4,100(s1)
   18a5c:	00177713          	and	a4,a4,1
   18a60:	00071863          	bnez	a4,18a70 <_vfiprintf_r+0x210>
   18a64:	2007f793          	and	a5,a5,512
   18a68:	00079463          	bnez	a5,18a70 <_vfiprintf_r+0x210>
   18a6c:	1980106f          	j	19c04 <_vfiprintf_r+0x13a4>
   18a70:	12c12083          	lw	ra,300(sp)
   18a74:	10c12b83          	lw	s7,268(sp)
   18a78:	000a0693          	mv	a3,s4
   18a7c:	000c0613          	mv	a2,s8
   18a80:	11812a03          	lw	s4,280(sp)
   18a84:	10812c03          	lw	s8,264(sp)
   18a88:	00048593          	mv	a1,s1
   18a8c:	00098513          	mv	a0,s3
   18a90:	12412483          	lw	s1,292(sp)
   18a94:	11c12983          	lw	s3,284(sp)
   18a98:	13010113          	add	sp,sp,304
   18a9c:	2080106f          	j	19ca4 <__sbprintf>
   18aa0:	04010613          	add	a2,sp,64
   18aa4:	00048593          	mv	a1,s1
   18aa8:	00098513          	mv	a0,s3
   18aac:	00612223          	sw	t1,4(sp)
   18ab0:	c75ff0ef          	jal	18724 <__sprint_r.part.0>
   18ab4:	00412303          	lw	t1,4(sp)
   18ab8:	20050a63          	beqz	a0,18ccc <_vfiprintf_r+0x46c>
   18abc:	000d0b93          	mv	s7,s10
   18ac0:	0644a703          	lw	a4,100(s1)
   18ac4:	00c49783          	lh	a5,12(s1)
   18ac8:	00177713          	and	a4,a4,1
   18acc:	36070463          	beqz	a4,18e34 <_vfiprintf_r+0x5d4>
   18ad0:	0407f793          	and	a5,a5,64
   18ad4:	12812403          	lw	s0,296(sp)
   18ad8:	12012903          	lw	s2,288(sp)
   18adc:	11412a83          	lw	s5,276(sp)
   18ae0:	11012b03          	lw	s6,272(sp)
   18ae4:	10412c83          	lw	s9,260(sp)
   18ae8:	10012d03          	lw	s10,256(sp)
   18aec:	0fc12d83          	lw	s11,252(sp)
   18af0:	00078463          	beqz	a5,18af8 <_vfiprintf_r+0x298>
   18af4:	1680106f          	j	19c5c <_vfiprintf_r+0x13fc>
   18af8:	12c12083          	lw	ra,300(sp)
   18afc:	12412483          	lw	s1,292(sp)
   18b00:	11c12983          	lw	s3,284(sp)
   18b04:	11812a03          	lw	s4,280(sp)
   18b08:	10812c03          	lw	s8,264(sp)
   18b0c:	000b8513          	mv	a0,s7
   18b10:	10c12b83          	lw	s7,268(sp)
   18b14:	13010113          	add	sp,sp,304
   18b18:	00008067          	ret
   18b1c:	00000c13          	li	s8,0
   18b20:	fd060793          	add	a5,a2,-48
   18b24:	00900513          	li	a0,9
   18b28:	000bc603          	lbu	a2,0(s7)
   18b2c:	002c1593          	sll	a1,s8,0x2
   18b30:	018586b3          	add	a3,a1,s8
   18b34:	00169693          	sll	a3,a3,0x1
   18b38:	00d78c33          	add	s8,a5,a3
   18b3c:	fd060793          	add	a5,a2,-48
   18b40:	001b8b93          	add	s7,s7,1
   18b44:	fef572e3          	bgeu	a0,a5,18b28 <_vfiprintf_r+0x2c8>
   18b48:	fe060793          	add	a5,a2,-32
   18b4c:	ecfa76e3          	bgeu	s4,a5,18a18 <_vfiprintf_r+0x1b8>
   18b50:	000c0693          	mv	a3,s8
   18b54:	000d8713          	mv	a4,s11
   18b58:	18060263          	beqz	a2,18cdc <_vfiprintf_r+0x47c>
   18b5c:	08c10623          	sb	a2,140(sp)
   18b60:	02010da3          	sb	zero,59(sp)
   18b64:	00100a13          	li	s4,1
   18b68:	00100893          	li	a7,1
   18b6c:	08c10c13          	add	s8,sp,140
   18b70:	00000c93          	li	s9,0
   18b74:	00000f93          	li	t6,0
   18b78:	04412603          	lw	a2,68(sp)
   18b7c:	08487293          	and	t0,a6,132
   18b80:	04812783          	lw	a5,72(sp)
   18b84:	00160593          	add	a1,a2,1
   18b88:	00058e93          	mv	t4,a1
   18b8c:	00029663          	bnez	t0,18b98 <_vfiprintf_r+0x338>
   18b90:	41468db3          	sub	s11,a3,s4
   18b94:	23b040e3          	bgtz	s11,195b4 <_vfiprintf_r+0xd54>
   18b98:	03b14583          	lbu	a1,59(sp)
   18b9c:	02058a63          	beqz	a1,18bd0 <_vfiprintf_r+0x370>
   18ba0:	03b10613          	add	a2,sp,59
   18ba4:	00178793          	add	a5,a5,1
   18ba8:	00c72023          	sw	a2,0(a4)
   18bac:	00100613          	li	a2,1
   18bb0:	00c72223          	sw	a2,4(a4)
   18bb4:	04f12423          	sw	a5,72(sp)
   18bb8:	05d12223          	sw	t4,68(sp)
   18bbc:	00700613          	li	a2,7
   18bc0:	17d646e3          	blt	a2,t4,1952c <_vfiprintf_r+0xccc>
   18bc4:	000e8613          	mv	a2,t4
   18bc8:	00870713          	add	a4,a4,8
   18bcc:	001e8e93          	add	t4,t4,1
   18bd0:	060f8c63          	beqz	t6,18c48 <_vfiprintf_r+0x3e8>
   18bd4:	03c10613          	add	a2,sp,60
   18bd8:	00278793          	add	a5,a5,2
   18bdc:	00c72023          	sw	a2,0(a4)
   18be0:	00200613          	li	a2,2
   18be4:	00c72223          	sw	a2,4(a4)
   18be8:	04f12423          	sw	a5,72(sp)
   18bec:	05d12223          	sw	t4,68(sp)
   18bf0:	00700613          	li	a2,7
   18bf4:	1bd658e3          	bge	a2,t4,195a4 <_vfiprintf_r+0xd44>
   18bf8:	4a0782e3          	beqz	a5,1989c <_vfiprintf_r+0x103c>
   18bfc:	04010613          	add	a2,sp,64
   18c00:	00048593          	mv	a1,s1
   18c04:	00098513          	mv	a0,s3
   18c08:	00612a23          	sw	t1,20(sp)
   18c0c:	01112823          	sw	a7,16(sp)
   18c10:	01012623          	sw	a6,12(sp)
   18c14:	00d12423          	sw	a3,8(sp)
   18c18:	00512223          	sw	t0,4(sp)
   18c1c:	b09ff0ef          	jal	18724 <__sprint_r.part.0>
   18c20:	e8051ee3          	bnez	a0,18abc <_vfiprintf_r+0x25c>
   18c24:	04412603          	lw	a2,68(sp)
   18c28:	04812783          	lw	a5,72(sp)
   18c2c:	01412303          	lw	t1,20(sp)
   18c30:	01012883          	lw	a7,16(sp)
   18c34:	00c12803          	lw	a6,12(sp)
   18c38:	00812683          	lw	a3,8(sp)
   18c3c:	00412283          	lw	t0,4(sp)
   18c40:	00090713          	mv	a4,s2
   18c44:	00160e93          	add	t4,a2,1
   18c48:	08000593          	li	a1,128
   18c4c:	6ab28a63          	beq	t0,a1,19300 <_vfiprintf_r+0xaa0>
   18c50:	411c8cb3          	sub	s9,s9,a7
   18c54:	7f904263          	bgtz	s9,19438 <_vfiprintf_r+0xbd8>
   18c58:	00f887b3          	add	a5,a7,a5
   18c5c:	01872023          	sw	s8,0(a4)
   18c60:	01172223          	sw	a7,4(a4)
   18c64:	04f12423          	sw	a5,72(sp)
   18c68:	05d12223          	sw	t4,68(sp)
   18c6c:	00700613          	li	a2,7
   18c70:	63d65063          	bge	a2,t4,19290 <_vfiprintf_r+0xa30>
   18c74:	0a078663          	beqz	a5,18d20 <_vfiprintf_r+0x4c0>
   18c78:	04010613          	add	a2,sp,64
   18c7c:	00048593          	mv	a1,s1
   18c80:	00098513          	mv	a0,s3
   18c84:	00612623          	sw	t1,12(sp)
   18c88:	01012423          	sw	a6,8(sp)
   18c8c:	00d12223          	sw	a3,4(sp)
   18c90:	a95ff0ef          	jal	18724 <__sprint_r.part.0>
   18c94:	e20514e3          	bnez	a0,18abc <_vfiprintf_r+0x25c>
   18c98:	04812783          	lw	a5,72(sp)
   18c9c:	00c12303          	lw	t1,12(sp)
   18ca0:	00812803          	lw	a6,8(sp)
   18ca4:	00412683          	lw	a3,4(sp)
   18ca8:	00090713          	mv	a4,s2
   18cac:	00487813          	and	a6,a6,4
   18cb0:	00080663          	beqz	a6,18cbc <_vfiprintf_r+0x45c>
   18cb4:	41468c33          	sub	s8,a3,s4
   18cb8:	09804063          	bgtz	s8,18d38 <_vfiprintf_r+0x4d8>
   18cbc:	0146d463          	bge	a3,s4,18cc4 <_vfiprintf_r+0x464>
   18cc0:	000a0693          	mv	a3,s4
   18cc4:	00dd0d33          	add	s10,s10,a3
   18cc8:	dc079ce3          	bnez	a5,18aa0 <_vfiprintf_r+0x240>
   18ccc:	000bc783          	lbu	a5,0(s7)
   18cd0:	04012223          	sw	zero,68(sp)
   18cd4:	00090713          	mv	a4,s2
   18cd8:	c8079ae3          	bnez	a5,1896c <_vfiprintf_r+0x10c>
   18cdc:	04812783          	lw	a5,72(sp)
   18ce0:	000d0b93          	mv	s7,s10
   18ce4:	68079ce3          	bnez	a5,19b7c <_vfiprintf_r+0x131c>
   18ce8:	04012223          	sw	zero,68(sp)
   18cec:	dd5ff06f          	j	18ac0 <_vfiprintf_r+0x260>
   18cf0:	00032c03          	lw	s8,0(t1)
   18cf4:	00430313          	add	t1,t1,4
   18cf8:	200c4663          	bltz	s8,18f04 <_vfiprintf_r+0x6a4>
   18cfc:	000bc603          	lbu	a2,0(s7)
   18d00:	d0dff06f          	j	18a0c <_vfiprintf_r+0x1ac>
   18d04:	000bc603          	lbu	a2,0(s7)
   18d08:	02086813          	or	a6,a6,32
   18d0c:	d01ff06f          	j	18a0c <_vfiprintf_r+0x1ac>
   18d10:	417c8a33          	sub	s4,s9,s7
   18d14:	c77c9ce3          	bne	s9,s7,1898c <_vfiprintf_r+0x12c>
   18d18:	000cc783          	lbu	a5,0(s9)
   18d1c:	cc9ff06f          	j	189e4 <_vfiprintf_r+0x184>
   18d20:	04012223          	sw	zero,68(sp)
   18d24:	00487813          	and	a6,a6,4
   18d28:	18080ee3          	beqz	a6,196c4 <_vfiprintf_r+0xe64>
   18d2c:	41468c33          	sub	s8,a3,s4
   18d30:	19805ae3          	blez	s8,196c4 <_vfiprintf_r+0xe64>
   18d34:	00090713          	mv	a4,s2
   18d38:	01000613          	li	a2,16
   18d3c:	04412583          	lw	a1,68(sp)
   18d40:	6f8656e3          	bge	a2,s8,19c2c <_vfiprintf_r+0x13cc>
   18d44:	0000be97          	auipc	t4,0xb
   18d48:	e1ce8e93          	add	t4,t4,-484 # 23b60 <blanks.1>
   18d4c:	01412423          	sw	s4,8(sp)
   18d50:	01712623          	sw	s7,12(sp)
   18d54:	000c0a13          	mv	s4,s8
   18d58:	01000c93          	li	s9,16
   18d5c:	00700d93          	li	s11,7
   18d60:	00d12223          	sw	a3,4(sp)
   18d64:	00030c13          	mv	s8,t1
   18d68:	000e8b93          	mv	s7,t4
   18d6c:	0180006f          	j	18d84 <_vfiprintf_r+0x524>
   18d70:	00258513          	add	a0,a1,2
   18d74:	00870713          	add	a4,a4,8
   18d78:	00068593          	mv	a1,a3
   18d7c:	ff0a0a13          	add	s4,s4,-16
   18d80:	054cd863          	bge	s9,s4,18dd0 <_vfiprintf_r+0x570>
   18d84:	01078793          	add	a5,a5,16
   18d88:	00158693          	add	a3,a1,1
   18d8c:	01772023          	sw	s7,0(a4)
   18d90:	01972223          	sw	s9,4(a4)
   18d94:	04f12423          	sw	a5,72(sp)
   18d98:	04d12223          	sw	a3,68(sp)
   18d9c:	fcdddae3          	bge	s11,a3,18d70 <_vfiprintf_r+0x510>
   18da0:	54078863          	beqz	a5,192f0 <_vfiprintf_r+0xa90>
   18da4:	04010613          	add	a2,sp,64
   18da8:	00048593          	mv	a1,s1
   18dac:	00098513          	mv	a0,s3
   18db0:	975ff0ef          	jal	18724 <__sprint_r.part.0>
   18db4:	d00514e3          	bnez	a0,18abc <_vfiprintf_r+0x25c>
   18db8:	04412583          	lw	a1,68(sp)
   18dbc:	ff0a0a13          	add	s4,s4,-16
   18dc0:	04812783          	lw	a5,72(sp)
   18dc4:	00090713          	mv	a4,s2
   18dc8:	00158513          	add	a0,a1,1
   18dcc:	fb4ccce3          	blt	s9,s4,18d84 <_vfiprintf_r+0x524>
   18dd0:	000c0313          	mv	t1,s8
   18dd4:	000b8e93          	mv	t4,s7
   18dd8:	000a0c13          	mv	s8,s4
   18ddc:	00412683          	lw	a3,4(sp)
   18de0:	00812a03          	lw	s4,8(sp)
   18de4:	00c12b83          	lw	s7,12(sp)
   18de8:	018787b3          	add	a5,a5,s8
   18dec:	01d72023          	sw	t4,0(a4)
   18df0:	01872223          	sw	s8,4(a4)
   18df4:	04f12423          	sw	a5,72(sp)
   18df8:	04a12223          	sw	a0,68(sp)
   18dfc:	00700713          	li	a4,7
   18e00:	eaa75ee3          	bge	a4,a0,18cbc <_vfiprintf_r+0x45c>
   18e04:	0c0780e3          	beqz	a5,196c4 <_vfiprintf_r+0xe64>
   18e08:	04010613          	add	a2,sp,64
   18e0c:	00048593          	mv	a1,s1
   18e10:	00098513          	mv	a0,s3
   18e14:	00612423          	sw	t1,8(sp)
   18e18:	00d12223          	sw	a3,4(sp)
   18e1c:	909ff0ef          	jal	18724 <__sprint_r.part.0>
   18e20:	c8051ee3          	bnez	a0,18abc <_vfiprintf_r+0x25c>
   18e24:	04812783          	lw	a5,72(sp)
   18e28:	00812303          	lw	t1,8(sp)
   18e2c:	00412683          	lw	a3,4(sp)
   18e30:	e8dff06f          	j	18cbc <_vfiprintf_r+0x45c>
   18e34:	2007f713          	and	a4,a5,512
   18e38:	c8071ce3          	bnez	a4,18ad0 <_vfiprintf_r+0x270>
   18e3c:	0584a503          	lw	a0,88(s1)
   18e40:	d50fa0ef          	jal	13390 <__retarget_lock_release_recursive>
   18e44:	00c49783          	lh	a5,12(s1)
   18e48:	c89ff06f          	j	18ad0 <_vfiprintf_r+0x270>
   18e4c:	8d9f60ef          	jal	f724 <__sinit>
   18e50:	a49ff06f          	j	18898 <_vfiprintf_r+0x38>
   18e54:	000c0693          	mv	a3,s8
   18e58:	00032c03          	lw	s8,0(t1)
   18e5c:	02010da3          	sb	zero,59(sp)
   18e60:	000d8713          	mv	a4,s11
   18e64:	00430d93          	add	s11,t1,4
   18e68:	480c0ce3          	beqz	s8,19b00 <_vfiprintf_r+0x12a0>
   18e6c:	00e12623          	sw	a4,12(sp)
   18e70:	01012423          	sw	a6,8(sp)
   18e74:	00d12223          	sw	a3,4(sp)
   18e78:	3e0cc0e3          	bltz	s9,19a58 <_vfiprintf_r+0x11f8>
   18e7c:	000c8613          	mv	a2,s9
   18e80:	00000593          	li	a1,0
   18e84:	000c0513          	mv	a0,s8
   18e88:	f65fa0ef          	jal	13dec <memchr>
   18e8c:	00412683          	lw	a3,4(sp)
   18e90:	00812803          	lw	a6,8(sp)
   18e94:	00c12703          	lw	a4,12(sp)
   18e98:	000c8893          	mv	a7,s9
   18e9c:	00050463          	beqz	a0,18ea4 <_vfiprintf_r+0x644>
   18ea0:	418508b3          	sub	a7,a0,s8
   18ea4:	03b14783          	lbu	a5,59(sp)
   18ea8:	fff8ca13          	not	s4,a7
   18eac:	41fa5a13          	sra	s4,s4,0x1f
   18eb0:	0148fa33          	and	s4,a7,s4
   18eb4:	000d8313          	mv	t1,s11
   18eb8:	00000c93          	li	s9,0
   18ebc:	00000f93          	li	t6,0
   18ec0:	ca078ce3          	beqz	a5,18b78 <_vfiprintf_r+0x318>
   18ec4:	001a0a13          	add	s4,s4,1
   18ec8:	00287f93          	and	t6,a6,2
   18ecc:	ca0f86e3          	beqz	t6,18b78 <_vfiprintf_r+0x318>
   18ed0:	002a0a13          	add	s4,s4,2
   18ed4:	00200f93          	li	t6,2
   18ed8:	ca1ff06f          	j	18b78 <_vfiprintf_r+0x318>
   18edc:	00032783          	lw	a5,0(t1)
   18ee0:	000c0693          	mv	a3,s8
   18ee4:	000d8713          	mv	a4,s11
   18ee8:	02010da3          	sb	zero,59(sp)
   18eec:	00430313          	add	t1,t1,4
   18ef0:	08f10623          	sb	a5,140(sp)
   18ef4:	00100a13          	li	s4,1
   18ef8:	00100893          	li	a7,1
   18efc:	08c10c13          	add	s8,sp,140
   18f00:	c71ff06f          	j	18b70 <_vfiprintf_r+0x310>
   18f04:	41800c33          	neg	s8,s8
   18f08:	000bc603          	lbu	a2,0(s7)
   18f0c:	00486813          	or	a6,a6,4
   18f10:	afdff06f          	j	18a0c <_vfiprintf_r+0x1ac>
   18f14:	000c0693          	mv	a3,s8
   18f18:	000d8713          	mv	a4,s11
   18f1c:	01086613          	or	a2,a6,16
   18f20:	02067793          	and	a5,a2,32
   18f24:	120784e3          	beqz	a5,1984c <_vfiprintf_r+0xfec>
   18f28:	00730313          	add	t1,t1,7
   18f2c:	ff837313          	and	t1,t1,-8
   18f30:	00032783          	lw	a5,0(t1)
   18f34:	00432503          	lw	a0,4(t1)
   18f38:	00830313          	add	t1,t1,8
   18f3c:	02010da3          	sb	zero,59(sp)
   18f40:	bff67813          	and	a6,a2,-1025
   18f44:	060cd663          	bgez	s9,18fb0 <_vfiprintf_r+0x750>
   18f48:	0f010c13          	add	s8,sp,240
   18f4c:	01d51593          	sll	a1,a0,0x1d
   18f50:	0077f613          	and	a2,a5,7
   18f54:	0037d793          	srl	a5,a5,0x3
   18f58:	03060613          	add	a2,a2,48
   18f5c:	00f5e7b3          	or	a5,a1,a5
   18f60:	00355513          	srl	a0,a0,0x3
   18f64:	fecc0fa3          	sb	a2,-1(s8)
   18f68:	00a7e5b3          	or	a1,a5,a0
   18f6c:	000c0893          	mv	a7,s8
   18f70:	fffc0c13          	add	s8,s8,-1
   18f74:	fc059ce3          	bnez	a1,18f4c <_vfiprintf_r+0x6ec>
   18f78:	00187793          	and	a5,a6,1
   18f7c:	34078e63          	beqz	a5,192d8 <_vfiprintf_r+0xa78>
   18f80:	03000593          	li	a1,48
   18f84:	34b60a63          	beq	a2,a1,192d8 <_vfiprintf_r+0xa78>
   18f88:	ffe88793          	add	a5,a7,-2
   18f8c:	0f010613          	add	a2,sp,240
   18f90:	febc0fa3          	sb	a1,-1(s8)
   18f94:	40f608b3          	sub	a7,a2,a5
   18f98:	000c8a13          	mv	s4,s9
   18f9c:	211cc4e3          	blt	s9,a7,199a4 <_vfiprintf_r+0x1144>
   18fa0:	00078c13          	mv	s8,a5
   18fa4:	03b14783          	lbu	a5,59(sp)
   18fa8:	f0079ee3          	bnez	a5,18ec4 <_vfiprintf_r+0x664>
   18fac:	f1dff06f          	j	18ec8 <_vfiprintf_r+0x668>
   18fb0:	00a7e5b3          	or	a1,a5,a0
   18fb4:	b7f67613          	and	a2,a2,-1153
   18fb8:	1e059ae3          	bnez	a1,199ac <_vfiprintf_r+0x114c>
   18fbc:	00080893          	mv	a7,a6
   18fc0:	00000793          	li	a5,0
   18fc4:	00060813          	mv	a6,a2
   18fc8:	160c9663          	bnez	s9,19134 <_vfiprintf_r+0x8d4>
   18fcc:	20079863          	bnez	a5,191dc <_vfiprintf_r+0x97c>
   18fd0:	0018f893          	and	a7,a7,1
   18fd4:	140880e3          	beqz	a7,19914 <_vfiprintf_r+0x10b4>
   18fd8:	03000793          	li	a5,48
   18fdc:	0ef107a3          	sb	a5,239(sp)
   18fe0:	00088a13          	mv	s4,a7
   18fe4:	0ef10c13          	add	s8,sp,239
   18fe8:	fbdff06f          	j	18fa4 <_vfiprintf_r+0x744>
   18fec:	02b00793          	li	a5,43
   18ff0:	000bc603          	lbu	a2,0(s7)
   18ff4:	02f10da3          	sb	a5,59(sp)
   18ff8:	a15ff06f          	j	18a0c <_vfiprintf_r+0x1ac>
   18ffc:	000bc603          	lbu	a2,0(s7)
   19000:	08086813          	or	a6,a6,128
   19004:	a09ff06f          	j	18a0c <_vfiprintf_r+0x1ac>
   19008:	000bc603          	lbu	a2,0(s7)
   1900c:	02a00793          	li	a5,42
   19010:	001b8513          	add	a0,s7,1
   19014:	46f600e3          	beq	a2,a5,19c74 <_vfiprintf_r+0x1414>
   19018:	fd060793          	add	a5,a2,-48
   1901c:	00900593          	li	a1,9
   19020:	00000c93          	li	s9,0
   19024:	00900893          	li	a7,9
   19028:	02f5e463          	bltu	a1,a5,19050 <_vfiprintf_r+0x7f0>
   1902c:	00054603          	lbu	a2,0(a0)
   19030:	002c9593          	sll	a1,s9,0x2
   19034:	01958cb3          	add	s9,a1,s9
   19038:	001c9c93          	sll	s9,s9,0x1
   1903c:	00fc8cb3          	add	s9,s9,a5
   19040:	fd060793          	add	a5,a2,-48
   19044:	00150513          	add	a0,a0,1
   19048:	fef8f2e3          	bgeu	a7,a5,1902c <_vfiprintf_r+0x7cc>
   1904c:	160cc8e3          	bltz	s9,199bc <_vfiprintf_r+0x115c>
   19050:	00050b93          	mv	s7,a0
   19054:	9bdff06f          	j	18a10 <_vfiprintf_r+0x1b0>
   19058:	00098513          	mv	a0,s3
   1905c:	00612423          	sw	t1,8(sp)
   19060:	01012223          	sw	a6,4(sp)
   19064:	ae8fa0ef          	jal	1334c <_localeconv_r>
   19068:	00452783          	lw	a5,4(a0)
   1906c:	00078513          	mv	a0,a5
   19070:	02f12023          	sw	a5,32(sp)
   19074:	ac8f30ef          	jal	c33c <strlen>
   19078:	00050793          	mv	a5,a0
   1907c:	00098513          	mv	a0,s3
   19080:	00f12e23          	sw	a5,28(sp)
   19084:	ac8fa0ef          	jal	1334c <_localeconv_r>
   19088:	00852703          	lw	a4,8(a0)
   1908c:	01c12783          	lw	a5,28(sp)
   19090:	00412803          	lw	a6,4(sp)
   19094:	00e12c23          	sw	a4,24(sp)
   19098:	00812303          	lw	t1,8(sp)
   1909c:	c60780e3          	beqz	a5,18cfc <_vfiprintf_r+0x49c>
   190a0:	01812783          	lw	a5,24(sp)
   190a4:	000bc603          	lbu	a2,0(s7)
   190a8:	960782e3          	beqz	a5,18a0c <_vfiprintf_r+0x1ac>
   190ac:	0007c783          	lbu	a5,0(a5)
   190b0:	94078ee3          	beqz	a5,18a0c <_vfiprintf_r+0x1ac>
   190b4:	40086813          	or	a6,a6,1024
   190b8:	955ff06f          	j	18a0c <_vfiprintf_r+0x1ac>
   190bc:	000bc603          	lbu	a2,0(s7)
   190c0:	00186813          	or	a6,a6,1
   190c4:	949ff06f          	j	18a0c <_vfiprintf_r+0x1ac>
   190c8:	03b14783          	lbu	a5,59(sp)
   190cc:	000bc603          	lbu	a2,0(s7)
   190d0:	92079ee3          	bnez	a5,18a0c <_vfiprintf_r+0x1ac>
   190d4:	02000793          	li	a5,32
   190d8:	02f10da3          	sb	a5,59(sp)
   190dc:	931ff06f          	j	18a0c <_vfiprintf_r+0x1ac>
   190e0:	00008637          	lui	a2,0x8
   190e4:	83060613          	add	a2,a2,-2000 # 7830 <OSSemPend+0x24>
   190e8:	02c11e23          	sh	a2,60(sp)
   190ec:	0000a617          	auipc	a2,0xa
   190f0:	fe460613          	add	a2,a2,-28 # 230d0 <OSUnMapTbl+0x16c>
   190f4:	00032783          	lw	a5,0(t1)
   190f8:	000c0693          	mv	a3,s8
   190fc:	000d8713          	mv	a4,s11
   19100:	00000513          	li	a0,0
   19104:	00286813          	or	a6,a6,2
   19108:	00430313          	add	t1,t1,4
   1910c:	00c12023          	sw	a2,0(sp)
   19110:	02010da3          	sb	zero,59(sp)
   19114:	180cc863          	bltz	s9,192a4 <_vfiprintf_r+0xa44>
   19118:	00a7e633          	or	a2,a5,a0
   1911c:	f7f87593          	and	a1,a6,-129
   19120:	16061c63          	bnez	a2,19298 <_vfiprintf_r+0xa38>
   19124:	00080893          	mv	a7,a6
   19128:	00200793          	li	a5,2
   1912c:	00058813          	mv	a6,a1
   19130:	e80c8ee3          	beqz	s9,18fcc <_vfiprintf_r+0x76c>
   19134:	00100613          	li	a2,1
   19138:	2cc782e3          	beq	a5,a2,19bfc <_vfiprintf_r+0x139c>
   1913c:	00200613          	li	a2,2
   19140:	1ec780e3          	beq	a5,a2,19b20 <_vfiprintf_r+0x12c0>
   19144:	00000793          	li	a5,0
   19148:	00000513          	li	a0,0
   1914c:	dfdff06f          	j	18f48 <_vfiprintf_r+0x6e8>
   19150:	02087793          	and	a5,a6,32
   19154:	000d8713          	mv	a4,s11
   19158:	020792e3          	bnez	a5,1997c <_vfiprintf_r+0x111c>
   1915c:	01087793          	and	a5,a6,16
   19160:	180798e3          	bnez	a5,19af0 <_vfiprintf_r+0x1290>
   19164:	04087793          	and	a5,a6,64
   19168:	280792e3          	bnez	a5,19bec <_vfiprintf_r+0x138c>
   1916c:	20087813          	and	a6,a6,512
   19170:	180800e3          	beqz	a6,19af0 <_vfiprintf_r+0x1290>
   19174:	00032783          	lw	a5,0(t1)
   19178:	00430313          	add	t1,t1,4
   1917c:	01a78023          	sb	s10,0(a5)
   19180:	fe4ff06f          	j	18964 <_vfiprintf_r+0x104>
   19184:	000bc603          	lbu	a2,0(s7)
   19188:	06c00793          	li	a5,108
   1918c:	14f602e3          	beq	a2,a5,19ad0 <_vfiprintf_r+0x1270>
   19190:	01086813          	or	a6,a6,16
   19194:	879ff06f          	j	18a0c <_vfiprintf_r+0x1ac>
   19198:	000c0693          	mv	a3,s8
   1919c:	000d8713          	mv	a4,s11
   191a0:	01086813          	or	a6,a6,16
   191a4:	02087793          	and	a5,a6,32
   191a8:	58078263          	beqz	a5,1972c <_vfiprintf_r+0xecc>
   191ac:	00730313          	add	t1,t1,7
   191b0:	ff837313          	and	t1,t1,-8
   191b4:	00432603          	lw	a2,4(t1)
   191b8:	00032a03          	lw	s4,0(t1)
   191bc:	00830313          	add	t1,t1,8
   191c0:	00060d93          	mv	s11,a2
   191c4:	58064a63          	bltz	a2,19758 <_vfiprintf_r+0xef8>
   191c8:	060cce63          	bltz	s9,19244 <_vfiprintf_r+0x9e4>
   191cc:	01ba6633          	or	a2,s4,s11
   191d0:	f7f87813          	and	a6,a6,-129
   191d4:	06061863          	bnez	a2,19244 <_vfiprintf_r+0x9e4>
   191d8:	220c92e3          	bnez	s9,19bfc <_vfiprintf_r+0x139c>
   191dc:	00000a13          	li	s4,0
   191e0:	00000893          	li	a7,0
   191e4:	0f010c13          	add	s8,sp,240
   191e8:	dbdff06f          	j	18fa4 <_vfiprintf_r+0x744>
   191ec:	000bc603          	lbu	a2,0(s7)
   191f0:	06800793          	li	a5,104
   191f4:	0ef606e3          	beq	a2,a5,19ae0 <_vfiprintf_r+0x1280>
   191f8:	04086813          	or	a6,a6,64
   191fc:	811ff06f          	j	18a0c <_vfiprintf_r+0x1ac>
   19200:	000c0693          	mv	a3,s8
   19204:	000d8713          	mv	a4,s11
   19208:	01086893          	or	a7,a6,16
   1920c:	0208f793          	and	a5,a7,32
   19210:	66078263          	beqz	a5,19874 <_vfiprintf_r+0x1014>
   19214:	00730313          	add	t1,t1,7
   19218:	ff837313          	and	t1,t1,-8
   1921c:	00032a03          	lw	s4,0(t1)
   19220:	00432d83          	lw	s11,4(t1)
   19224:	00830313          	add	t1,t1,8
   19228:	02010da3          	sb	zero,59(sp)
   1922c:	00088813          	mv	a6,a7
   19230:	000cca63          	bltz	s9,19244 <_vfiprintf_r+0x9e4>
   19234:	01ba6633          	or	a2,s4,s11
   19238:	f7f8f813          	and	a6,a7,-129
   1923c:	00100793          	li	a5,1
   19240:	d80604e3          	beqz	a2,18fc8 <_vfiprintf_r+0x768>
   19244:	520d9c63          	bnez	s11,1977c <_vfiprintf_r+0xf1c>
   19248:	00900613          	li	a2,9
   1924c:	53466863          	bltu	a2,s4,1977c <_vfiprintf_r+0xf1c>
   19250:	030a0793          	add	a5,s4,48
   19254:	0ff7f793          	zext.b	a5,a5
   19258:	0ef107a3          	sb	a5,239(sp)
   1925c:	000c8a13          	mv	s4,s9
   19260:	01904463          	bgtz	s9,19268 <_vfiprintf_r+0xa08>
   19264:	00100a13          	li	s4,1
   19268:	00100893          	li	a7,1
   1926c:	0ef10c13          	add	s8,sp,239
   19270:	d35ff06f          	j	18fa4 <_vfiprintf_r+0x744>
   19274:	00100713          	li	a4,1
   19278:	04e12223          	sw	a4,68(sp)
   1927c:	00088793          	mv	a5,a7
   19280:	05812623          	sw	s8,76(sp)
   19284:	05112823          	sw	a7,80(sp)
   19288:	05112423          	sw	a7,72(sp)
   1928c:	00090713          	mv	a4,s2
   19290:	00870713          	add	a4,a4,8
   19294:	a19ff06f          	j	18cac <_vfiprintf_r+0x44c>
   19298:	00200613          	li	a2,2
   1929c:	00058813          	mv	a6,a1
   192a0:	ca0604e3          	beqz	a2,18f48 <_vfiprintf_r+0x6e8>
   192a4:	00012883          	lw	a7,0(sp)
   192a8:	0f010c13          	add	s8,sp,240
   192ac:	00f7f613          	and	a2,a5,15
   192b0:	00c88633          	add	a2,a7,a2
   192b4:	00064583          	lbu	a1,0(a2)
   192b8:	0047d793          	srl	a5,a5,0x4
   192bc:	01c51613          	sll	a2,a0,0x1c
   192c0:	00f667b3          	or	a5,a2,a5
   192c4:	00455513          	srl	a0,a0,0x4
   192c8:	febc0fa3          	sb	a1,-1(s8)
   192cc:	00a7e633          	or	a2,a5,a0
   192d0:	fffc0c13          	add	s8,s8,-1
   192d4:	fc061ce3          	bnez	a2,192ac <_vfiprintf_r+0xa4c>
   192d8:	0f010793          	add	a5,sp,240
   192dc:	418788b3          	sub	a7,a5,s8
   192e0:	000c8a13          	mv	s4,s9
   192e4:	cd1cd0e3          	bge	s9,a7,18fa4 <_vfiprintf_r+0x744>
   192e8:	00088a13          	mv	s4,a7
   192ec:	cb9ff06f          	j	18fa4 <_vfiprintf_r+0x744>
   192f0:	00100513          	li	a0,1
   192f4:	00000593          	li	a1,0
   192f8:	00090713          	mv	a4,s2
   192fc:	a81ff06f          	j	18d7c <_vfiprintf_r+0x51c>
   19300:	41468db3          	sub	s11,a3,s4
   19304:	95b056e3          	blez	s11,18c50 <_vfiprintf_r+0x3f0>
   19308:	01000593          	li	a1,16
   1930c:	15b5dce3          	bge	a1,s11,19c64 <_vfiprintf_r+0x1404>
   19310:	0000bf17          	auipc	t5,0xb
   19314:	860f0f13          	add	t5,t5,-1952 # 23b70 <zeroes.0>
   19318:	01412623          	sw	s4,12(sp)
   1931c:	01712a23          	sw	s7,20(sp)
   19320:	000d8a13          	mv	s4,s11
   19324:	01000e93          	li	t4,16
   19328:	00700f93          	li	t6,7
   1932c:	00d12223          	sw	a3,4(sp)
   19330:	01012423          	sw	a6,8(sp)
   19334:	01112823          	sw	a7,16(sp)
   19338:	00030d93          	mv	s11,t1
   1933c:	000f0b93          	mv	s7,t5
   19340:	0180006f          	j	19358 <_vfiprintf_r+0xaf8>
   19344:	00260513          	add	a0,a2,2
   19348:	00870713          	add	a4,a4,8
   1934c:	00068613          	mv	a2,a3
   19350:	ff0a0a13          	add	s4,s4,-16
   19354:	054edc63          	bge	t4,s4,193ac <_vfiprintf_r+0xb4c>
   19358:	01078793          	add	a5,a5,16
   1935c:	00160693          	add	a3,a2,1
   19360:	01772023          	sw	s7,0(a4)
   19364:	01d72223          	sw	t4,4(a4)
   19368:	04f12423          	sw	a5,72(sp)
   1936c:	04d12223          	sw	a3,68(sp)
   19370:	fcdfdae3          	bge	t6,a3,19344 <_vfiprintf_r+0xae4>
   19374:	1a078463          	beqz	a5,1951c <_vfiprintf_r+0xcbc>
   19378:	04010613          	add	a2,sp,64
   1937c:	00048593          	mv	a1,s1
   19380:	00098513          	mv	a0,s3
   19384:	ba0ff0ef          	jal	18724 <__sprint_r.part.0>
   19388:	f2051a63          	bnez	a0,18abc <_vfiprintf_r+0x25c>
   1938c:	04412603          	lw	a2,68(sp)
   19390:	01000e93          	li	t4,16
   19394:	ff0a0a13          	add	s4,s4,-16
   19398:	04812783          	lw	a5,72(sp)
   1939c:	00090713          	mv	a4,s2
   193a0:	00160513          	add	a0,a2,1
   193a4:	00700f93          	li	t6,7
   193a8:	fb4ec8e3          	blt	t4,s4,19358 <_vfiprintf_r+0xaf8>
   193ac:	000d8313          	mv	t1,s11
   193b0:	000b8f13          	mv	t5,s7
   193b4:	000a0d93          	mv	s11,s4
   193b8:	00412683          	lw	a3,4(sp)
   193bc:	00812803          	lw	a6,8(sp)
   193c0:	01012883          	lw	a7,16(sp)
   193c4:	00c12a03          	lw	s4,12(sp)
   193c8:	01412b83          	lw	s7,20(sp)
   193cc:	01b787b3          	add	a5,a5,s11
   193d0:	01e72023          	sw	t5,0(a4)
   193d4:	01b72223          	sw	s11,4(a4)
   193d8:	04f12423          	sw	a5,72(sp)
   193dc:	04a12223          	sw	a0,68(sp)
   193e0:	00700613          	li	a2,7
   193e4:	54a65663          	bge	a2,a0,19930 <_vfiprintf_r+0x10d0>
   193e8:	78078263          	beqz	a5,19b6c <_vfiprintf_r+0x130c>
   193ec:	04010613          	add	a2,sp,64
   193f0:	00048593          	mv	a1,s1
   193f4:	00098513          	mv	a0,s3
   193f8:	00612823          	sw	t1,16(sp)
   193fc:	01112623          	sw	a7,12(sp)
   19400:	01012423          	sw	a6,8(sp)
   19404:	00d12223          	sw	a3,4(sp)
   19408:	b1cff0ef          	jal	18724 <__sprint_r.part.0>
   1940c:	ea051863          	bnez	a0,18abc <_vfiprintf_r+0x25c>
   19410:	00c12883          	lw	a7,12(sp)
   19414:	04412603          	lw	a2,68(sp)
   19418:	04812783          	lw	a5,72(sp)
   1941c:	411c8cb3          	sub	s9,s9,a7
   19420:	01012303          	lw	t1,16(sp)
   19424:	00812803          	lw	a6,8(sp)
   19428:	00412683          	lw	a3,4(sp)
   1942c:	00090713          	mv	a4,s2
   19430:	00160e93          	add	t4,a2,1
   19434:	839052e3          	blez	s9,18c58 <_vfiprintf_r+0x3f8>
   19438:	0000af17          	auipc	t5,0xa
   1943c:	738f0f13          	add	t5,t5,1848 # 23b70 <zeroes.0>
   19440:	0b945263          	bge	s0,s9,194e4 <_vfiprintf_r+0xc84>
   19444:	01412623          	sw	s4,12(sp)
   19448:	00700d93          	li	s11,7
   1944c:	000c8a13          	mv	s4,s9
   19450:	00d12223          	sw	a3,4(sp)
   19454:	01012423          	sw	a6,8(sp)
   19458:	01112823          	sw	a7,16(sp)
   1945c:	00612a23          	sw	t1,20(sp)
   19460:	000a8c93          	mv	s9,s5
   19464:	0180006f          	j	1947c <_vfiprintf_r+0xc1c>
   19468:	00260e93          	add	t4,a2,2
   1946c:	00870713          	add	a4,a4,8
   19470:	00068613          	mv	a2,a3
   19474:	ff0a0a13          	add	s4,s4,-16
   19478:	05445863          	bge	s0,s4,194c8 <_vfiprintf_r+0xc68>
   1947c:	01078793          	add	a5,a5,16
   19480:	00160693          	add	a3,a2,1
   19484:	01572023          	sw	s5,0(a4)
   19488:	00872223          	sw	s0,4(a4)
   1948c:	04f12423          	sw	a5,72(sp)
   19490:	04d12223          	sw	a3,68(sp)
   19494:	fcdddae3          	bge	s11,a3,19468 <_vfiprintf_r+0xc08>
   19498:	06078a63          	beqz	a5,1950c <_vfiprintf_r+0xcac>
   1949c:	04010613          	add	a2,sp,64
   194a0:	00048593          	mv	a1,s1
   194a4:	00098513          	mv	a0,s3
   194a8:	a7cff0ef          	jal	18724 <__sprint_r.part.0>
   194ac:	e0051863          	bnez	a0,18abc <_vfiprintf_r+0x25c>
   194b0:	04412603          	lw	a2,68(sp)
   194b4:	ff0a0a13          	add	s4,s4,-16
   194b8:	04812783          	lw	a5,72(sp)
   194bc:	00090713          	mv	a4,s2
   194c0:	00160e93          	add	t4,a2,1
   194c4:	fb444ce3          	blt	s0,s4,1947c <_vfiprintf_r+0xc1c>
   194c8:	000c8f13          	mv	t5,s9
   194cc:	00412683          	lw	a3,4(sp)
   194d0:	000a0c93          	mv	s9,s4
   194d4:	00812803          	lw	a6,8(sp)
   194d8:	01012883          	lw	a7,16(sp)
   194dc:	01412303          	lw	t1,20(sp)
   194e0:	00c12a03          	lw	s4,12(sp)
   194e4:	019787b3          	add	a5,a5,s9
   194e8:	01e72023          	sw	t5,0(a4)
   194ec:	01972223          	sw	s9,4(a4)
   194f0:	04f12423          	sw	a5,72(sp)
   194f4:	05d12223          	sw	t4,68(sp)
   194f8:	00700613          	li	a2,7
   194fc:	1dd64c63          	blt	a2,t4,196d4 <_vfiprintf_r+0xe74>
   19500:	00870713          	add	a4,a4,8
   19504:	001e8e93          	add	t4,t4,1
   19508:	f50ff06f          	j	18c58 <_vfiprintf_r+0x3f8>
   1950c:	00100e93          	li	t4,1
   19510:	00000613          	li	a2,0
   19514:	00090713          	mv	a4,s2
   19518:	f5dff06f          	j	19474 <_vfiprintf_r+0xc14>
   1951c:	00100513          	li	a0,1
   19520:	00000613          	li	a2,0
   19524:	00090713          	mv	a4,s2
   19528:	e29ff06f          	j	19350 <_vfiprintf_r+0xaf0>
   1952c:	04078e63          	beqz	a5,19588 <_vfiprintf_r+0xd28>
   19530:	04010613          	add	a2,sp,64
   19534:	00048593          	mv	a1,s1
   19538:	00098513          	mv	a0,s3
   1953c:	02612223          	sw	t1,36(sp)
   19540:	01112a23          	sw	a7,20(sp)
   19544:	01012823          	sw	a6,16(sp)
   19548:	00d12623          	sw	a3,12(sp)
   1954c:	00512423          	sw	t0,8(sp)
   19550:	01f12223          	sw	t6,4(sp)
   19554:	9d0ff0ef          	jal	18724 <__sprint_r.part.0>
   19558:	d6051263          	bnez	a0,18abc <_vfiprintf_r+0x25c>
   1955c:	04412603          	lw	a2,68(sp)
   19560:	04812783          	lw	a5,72(sp)
   19564:	02412303          	lw	t1,36(sp)
   19568:	01412883          	lw	a7,20(sp)
   1956c:	01012803          	lw	a6,16(sp)
   19570:	00c12683          	lw	a3,12(sp)
   19574:	00812283          	lw	t0,8(sp)
   19578:	00412f83          	lw	t6,4(sp)
   1957c:	00090713          	mv	a4,s2
   19580:	00160e93          	add	t4,a2,1
   19584:	e4cff06f          	j	18bd0 <_vfiprintf_r+0x370>
   19588:	400f8663          	beqz	t6,19994 <_vfiprintf_r+0x1134>
   1958c:	03c10793          	add	a5,sp,60
   19590:	04f12623          	sw	a5,76(sp)
   19594:	00200793          	li	a5,2
   19598:	04f12823          	sw	a5,80(sp)
   1959c:	00100e93          	li	t4,1
   195a0:	00090713          	mv	a4,s2
   195a4:	000e8613          	mv	a2,t4
   195a8:	00870713          	add	a4,a4,8
   195ac:	001e8e93          	add	t4,t4,1
   195b0:	e98ff06f          	j	18c48 <_vfiprintf_r+0x3e8>
   195b4:	01000513          	li	a0,16
   195b8:	67b55263          	bge	a0,s11,19c1c <_vfiprintf_r+0x13bc>
   195bc:	0000ae97          	auipc	t4,0xa
   195c0:	5a4e8e93          	add	t4,t4,1444 # 23b60 <blanks.1>
   195c4:	01412a23          	sw	s4,20(sp)
   195c8:	03712423          	sw	s7,40(sp)
   195cc:	000d8a13          	mv	s4,s11
   195d0:	01000f13          	li	t5,16
   195d4:	00700393          	li	t2,7
   195d8:	01f12223          	sw	t6,4(sp)
   195dc:	00512423          	sw	t0,8(sp)
   195e0:	00d12623          	sw	a3,12(sp)
   195e4:	01012823          	sw	a6,16(sp)
   195e8:	03112223          	sw	a7,36(sp)
   195ec:	00030d93          	mv	s11,t1
   195f0:	000e8b93          	mv	s7,t4
   195f4:	01c0006f          	j	19610 <_vfiprintf_r+0xdb0>
   195f8:	00260513          	add	a0,a2,2
   195fc:	00870713          	add	a4,a4,8
   19600:	00058613          	mv	a2,a1
   19604:	ff0a0a13          	add	s4,s4,-16
   19608:	054f5c63          	bge	t5,s4,19660 <_vfiprintf_r+0xe00>
   1960c:	00160593          	add	a1,a2,1
   19610:	01078793          	add	a5,a5,16
   19614:	01772023          	sw	s7,0(a4)
   19618:	01e72223          	sw	t5,4(a4)
   1961c:	04f12423          	sw	a5,72(sp)
   19620:	04b12223          	sw	a1,68(sp)
   19624:	fcb3dae3          	bge	t2,a1,195f8 <_vfiprintf_r+0xd98>
   19628:	08078663          	beqz	a5,196b4 <_vfiprintf_r+0xe54>
   1962c:	04010613          	add	a2,sp,64
   19630:	00048593          	mv	a1,s1
   19634:	00098513          	mv	a0,s3
   19638:	8ecff0ef          	jal	18724 <__sprint_r.part.0>
   1963c:	c8051063          	bnez	a0,18abc <_vfiprintf_r+0x25c>
   19640:	04412603          	lw	a2,68(sp)
   19644:	01000f13          	li	t5,16
   19648:	ff0a0a13          	add	s4,s4,-16
   1964c:	04812783          	lw	a5,72(sp)
   19650:	00090713          	mv	a4,s2
   19654:	00160513          	add	a0,a2,1
   19658:	00700393          	li	t2,7
   1965c:	fb4f48e3          	blt	t5,s4,1960c <_vfiprintf_r+0xdac>
   19660:	000d8313          	mv	t1,s11
   19664:	000b8e93          	mv	t4,s7
   19668:	000a0d93          	mv	s11,s4
   1966c:	00412f83          	lw	t6,4(sp)
   19670:	00812283          	lw	t0,8(sp)
   19674:	00c12683          	lw	a3,12(sp)
   19678:	01012803          	lw	a6,16(sp)
   1967c:	02412883          	lw	a7,36(sp)
   19680:	01412a03          	lw	s4,20(sp)
   19684:	02812b83          	lw	s7,40(sp)
   19688:	01b787b3          	add	a5,a5,s11
   1968c:	01d72023          	sw	t4,0(a4)
   19690:	01b72223          	sw	s11,4(a4)
   19694:	04f12423          	sw	a5,72(sp)
   19698:	04a12223          	sw	a0,68(sp)
   1969c:	00700613          	li	a2,7
   196a0:	20a64663          	blt	a2,a0,198ac <_vfiprintf_r+0x104c>
   196a4:	00870713          	add	a4,a4,8
   196a8:	00150e93          	add	t4,a0,1
   196ac:	00050613          	mv	a2,a0
   196b0:	ce8ff06f          	j	18b98 <_vfiprintf_r+0x338>
   196b4:	00000613          	li	a2,0
   196b8:	00100513          	li	a0,1
   196bc:	00090713          	mv	a4,s2
   196c0:	f45ff06f          	j	19604 <_vfiprintf_r+0xda4>
   196c4:	0146d463          	bge	a3,s4,196cc <_vfiprintf_r+0xe6c>
   196c8:	000a0693          	mv	a3,s4
   196cc:	00dd0d33          	add	s10,s10,a3
   196d0:	dfcff06f          	j	18ccc <_vfiprintf_r+0x46c>
   196d4:	ba0780e3          	beqz	a5,19274 <_vfiprintf_r+0xa14>
   196d8:	04010613          	add	a2,sp,64
   196dc:	00048593          	mv	a1,s1
   196e0:	00098513          	mv	a0,s3
   196e4:	00612823          	sw	t1,16(sp)
   196e8:	01112623          	sw	a7,12(sp)
   196ec:	01012423          	sw	a6,8(sp)
   196f0:	00d12223          	sw	a3,4(sp)
   196f4:	830ff0ef          	jal	18724 <__sprint_r.part.0>
   196f8:	bc051263          	bnez	a0,18abc <_vfiprintf_r+0x25c>
   196fc:	04412e83          	lw	t4,68(sp)
   19700:	04812783          	lw	a5,72(sp)
   19704:	01012303          	lw	t1,16(sp)
   19708:	00c12883          	lw	a7,12(sp)
   1970c:	00812803          	lw	a6,8(sp)
   19710:	00412683          	lw	a3,4(sp)
   19714:	00090713          	mv	a4,s2
   19718:	001e8e93          	add	t4,t4,1
   1971c:	d3cff06f          	j	18c58 <_vfiprintf_r+0x3f8>
   19720:	04012223          	sw	zero,68(sp)
   19724:	00090713          	mv	a4,s2
   19728:	ab4ff06f          	j	189dc <_vfiprintf_r+0x17c>
   1972c:	01087613          	and	a2,a6,16
   19730:	00032783          	lw	a5,0(t1)
   19734:	00430313          	add	t1,t1,4
   19738:	22061a63          	bnez	a2,1996c <_vfiprintf_r+0x110c>
   1973c:	04087613          	and	a2,a6,64
   19740:	22060263          	beqz	a2,19964 <_vfiprintf_r+0x1104>
   19744:	01079a13          	sll	s4,a5,0x10
   19748:	410a5a13          	sra	s4,s4,0x10
   1974c:	41fa5d93          	sra	s11,s4,0x1f
   19750:	000d8613          	mv	a2,s11
   19754:	a6065ae3          	bgez	a2,191c8 <_vfiprintf_r+0x968>
   19758:	02d00593          	li	a1,45
   1975c:	01403633          	snez	a2,s4
   19760:	41b00eb3          	neg	t4,s11
   19764:	02b10da3          	sb	a1,59(sp)
   19768:	40ce8db3          	sub	s11,t4,a2
   1976c:	41400a33          	neg	s4,s4
   19770:	ac0ccae3          	bltz	s9,19244 <_vfiprintf_r+0x9e4>
   19774:	f7f87813          	and	a6,a6,-129
   19778:	ac0d88e3          	beqz	s11,19248 <_vfiprintf_r+0x9e8>
   1977c:	40087793          	and	a5,a6,1024
   19780:	00000613          	li	a2,0
   19784:	0f010893          	add	a7,sp,240
   19788:	01912423          	sw	s9,8(sp)
   1978c:	01a12a23          	sw	s10,20(sp)
   19790:	03312223          	sw	s3,36(sp)
   19794:	02912423          	sw	s1,40(sp)
   19798:	01812d03          	lw	s10,24(sp)
   1979c:	00d12223          	sw	a3,4(sp)
   197a0:	00e12623          	sw	a4,12(sp)
   197a4:	01012823          	sw	a6,16(sp)
   197a8:	00078c93          	mv	s9,a5
   197ac:	00060993          	mv	s3,a2
   197b0:	00088493          	mv	s1,a7
   197b4:	02612623          	sw	t1,44(sp)
   197b8:	0280006f          	j	197e0 <_vfiprintf_r+0xf80>
   197bc:	00a00613          	li	a2,10
   197c0:	00000693          	li	a3,0
   197c4:	000a0513          	mv	a0,s4
   197c8:	000d8593          	mv	a1,s11
   197cc:	581020ef          	jal	1c54c <__udivdi3>
   197d0:	440d8063          	beqz	s11,19c10 <_vfiprintf_r+0x13b0>
   197d4:	00050a13          	mv	s4,a0
   197d8:	00058d93          	mv	s11,a1
   197dc:	000c0493          	mv	s1,s8
   197e0:	00a00613          	li	a2,10
   197e4:	00000693          	li	a3,0
   197e8:	000a0513          	mv	a0,s4
   197ec:	000d8593          	mv	a1,s11
   197f0:	3e8030ef          	jal	1cbd8 <__umoddi3>
   197f4:	03050513          	add	a0,a0,48
   197f8:	fea48fa3          	sb	a0,-1(s1)
   197fc:	fff48c13          	add	s8,s1,-1
   19800:	00198993          	add	s3,s3,1
   19804:	fa0c8ce3          	beqz	s9,197bc <_vfiprintf_r+0xf5c>
   19808:	000d4783          	lbu	a5,0(s10)
   1980c:	fb3798e3          	bne	a5,s3,197bc <_vfiprintf_r+0xf5c>
   19810:	0ff00793          	li	a5,255
   19814:	faf984e3          	beq	s3,a5,197bc <_vfiprintf_r+0xf5c>
   19818:	300d9a63          	bnez	s11,19b2c <_vfiprintf_r+0x12cc>
   1981c:	00900793          	li	a5,9
   19820:	3147e663          	bltu	a5,s4,19b2c <_vfiprintf_r+0x12cc>
   19824:	01a12c23          	sw	s10,24(sp)
   19828:	00412683          	lw	a3,4(sp)
   1982c:	00812c83          	lw	s9,8(sp)
   19830:	00c12703          	lw	a4,12(sp)
   19834:	01012803          	lw	a6,16(sp)
   19838:	01412d03          	lw	s10,20(sp)
   1983c:	02412983          	lw	s3,36(sp)
   19840:	02812483          	lw	s1,40(sp)
   19844:	02c12303          	lw	t1,44(sp)
   19848:	a91ff06f          	j	192d8 <_vfiprintf_r+0xa78>
   1984c:	01067593          	and	a1,a2,16
   19850:	00032783          	lw	a5,0(t1)
   19854:	00430313          	add	t1,t1,4
   19858:	10059263          	bnez	a1,1995c <_vfiprintf_r+0x10fc>
   1985c:	04067593          	and	a1,a2,64
   19860:	0e058a63          	beqz	a1,19954 <_vfiprintf_r+0x10f4>
   19864:	01079793          	sll	a5,a5,0x10
   19868:	0107d793          	srl	a5,a5,0x10
   1986c:	00000513          	li	a0,0
   19870:	eccff06f          	j	18f3c <_vfiprintf_r+0x6dc>
   19874:	0108f613          	and	a2,a7,16
   19878:	00032783          	lw	a5,0(t1)
   1987c:	00430313          	add	t1,t1,4
   19880:	0c061463          	bnez	a2,19948 <_vfiprintf_r+0x10e8>
   19884:	0408f613          	and	a2,a7,64
   19888:	0a060c63          	beqz	a2,19940 <_vfiprintf_r+0x10e0>
   1988c:	01079a13          	sll	s4,a5,0x10
   19890:	010a5a13          	srl	s4,s4,0x10
   19894:	00000d93          	li	s11,0
   19898:	991ff06f          	j	19228 <_vfiprintf_r+0x9c8>
   1989c:	00100e93          	li	t4,1
   198a0:	00000613          	li	a2,0
   198a4:	00090713          	mv	a4,s2
   198a8:	ba0ff06f          	j	18c48 <_vfiprintf_r+0x3e8>
   198ac:	1c078463          	beqz	a5,19a74 <_vfiprintf_r+0x1214>
   198b0:	04010613          	add	a2,sp,64
   198b4:	00048593          	mv	a1,s1
   198b8:	00098513          	mv	a0,s3
   198bc:	02612223          	sw	t1,36(sp)
   198c0:	01112a23          	sw	a7,20(sp)
   198c4:	01012823          	sw	a6,16(sp)
   198c8:	00d12623          	sw	a3,12(sp)
   198cc:	00512423          	sw	t0,8(sp)
   198d0:	01f12223          	sw	t6,4(sp)
   198d4:	e51fe0ef          	jal	18724 <__sprint_r.part.0>
   198d8:	9e051263          	bnez	a0,18abc <_vfiprintf_r+0x25c>
   198dc:	04412603          	lw	a2,68(sp)
   198e0:	04812783          	lw	a5,72(sp)
   198e4:	02412303          	lw	t1,36(sp)
   198e8:	01412883          	lw	a7,20(sp)
   198ec:	01012803          	lw	a6,16(sp)
   198f0:	00c12683          	lw	a3,12(sp)
   198f4:	00812283          	lw	t0,8(sp)
   198f8:	00412f83          	lw	t6,4(sp)
   198fc:	00090713          	mv	a4,s2
   19900:	00160e93          	add	t4,a2,1
   19904:	a94ff06f          	j	18b98 <_vfiprintf_r+0x338>
   19908:	000c0693          	mv	a3,s8
   1990c:	000d8713          	mv	a4,s11
   19910:	895ff06f          	j	191a4 <_vfiprintf_r+0x944>
   19914:	00000a13          	li	s4,0
   19918:	0f010c13          	add	s8,sp,240
   1991c:	e88ff06f          	j	18fa4 <_vfiprintf_r+0x744>
   19920:	0584a503          	lw	a0,88(s1)
   19924:	a55f90ef          	jal	13378 <__retarget_lock_acquire_recursive>
   19928:	00c49783          	lh	a5,12(s1)
   1992c:	f89fe06f          	j	188b4 <_vfiprintf_r+0x54>
   19930:	00870713          	add	a4,a4,8
   19934:	00150e93          	add	t4,a0,1
   19938:	00050613          	mv	a2,a0
   1993c:	b14ff06f          	j	18c50 <_vfiprintf_r+0x3f0>
   19940:	2008f613          	and	a2,a7,512
   19944:	26061863          	bnez	a2,19bb4 <_vfiprintf_r+0x1354>
   19948:	00078a13          	mv	s4,a5
   1994c:	00000d93          	li	s11,0
   19950:	8d9ff06f          	j	19228 <_vfiprintf_r+0x9c8>
   19954:	20067593          	and	a1,a2,512
   19958:	26059463          	bnez	a1,19bc0 <_vfiprintf_r+0x1360>
   1995c:	00000513          	li	a0,0
   19960:	ddcff06f          	j	18f3c <_vfiprintf_r+0x6dc>
   19964:	20087613          	and	a2,a6,512
   19968:	26061863          	bnez	a2,19bd8 <_vfiprintf_r+0x1378>
   1996c:	41f7dd93          	sra	s11,a5,0x1f
   19970:	00078a13          	mv	s4,a5
   19974:	000d8613          	mv	a2,s11
   19978:	84dff06f          	j	191c4 <_vfiprintf_r+0x964>
   1997c:	00032783          	lw	a5,0(t1)
   19980:	41fd5693          	sra	a3,s10,0x1f
   19984:	00430313          	add	t1,t1,4
   19988:	01a7a023          	sw	s10,0(a5)
   1998c:	00d7a223          	sw	a3,4(a5)
   19990:	fd5fe06f          	j	18964 <_vfiprintf_r+0x104>
   19994:	00000613          	li	a2,0
   19998:	00100e93          	li	t4,1
   1999c:	00090713          	mv	a4,s2
   199a0:	aa8ff06f          	j	18c48 <_vfiprintf_r+0x3e8>
   199a4:	00088a13          	mv	s4,a7
   199a8:	df8ff06f          	j	18fa0 <_vfiprintf_r+0x740>
   199ac:	00060813          	mv	a6,a2
   199b0:	00000613          	li	a2,0
   199b4:	d8060a63          	beqz	a2,18f48 <_vfiprintf_r+0x6e8>
   199b8:	8edff06f          	j	192a4 <_vfiprintf_r+0xa44>
   199bc:	fff00c93          	li	s9,-1
   199c0:	00050b93          	mv	s7,a0
   199c4:	84cff06f          	j	18a10 <_vfiprintf_r+0x1b0>
   199c8:	000c0693          	mv	a3,s8
   199cc:	000d8713          	mv	a4,s11
   199d0:	00080893          	mv	a7,a6
   199d4:	839ff06f          	j	1920c <_vfiprintf_r+0x9ac>
   199d8:	000c0693          	mv	a3,s8
   199dc:	000d8713          	mv	a4,s11
   199e0:	00080613          	mv	a2,a6
   199e4:	d3cff06f          	j	18f20 <_vfiprintf_r+0x6c0>
   199e8:	00009797          	auipc	a5,0x9
   199ec:	6fc78793          	add	a5,a5,1788 # 230e4 <OSUnMapTbl+0x180>
   199f0:	000c0693          	mv	a3,s8
   199f4:	000d8713          	mv	a4,s11
   199f8:	00f12023          	sw	a5,0(sp)
   199fc:	02087793          	and	a5,a6,32
   19a00:	08078c63          	beqz	a5,19a98 <_vfiprintf_r+0x1238>
   19a04:	00730313          	add	t1,t1,7
   19a08:	ff837313          	and	t1,t1,-8
   19a0c:	00032783          	lw	a5,0(t1)
   19a10:	00432503          	lw	a0,4(t1)
   19a14:	00830313          	add	t1,t1,8
   19a18:	00187593          	and	a1,a6,1
   19a1c:	00058e63          	beqz	a1,19a38 <_vfiprintf_r+0x11d8>
   19a20:	00a7e5b3          	or	a1,a5,a0
   19a24:	00058a63          	beqz	a1,19a38 <_vfiprintf_r+0x11d8>
   19a28:	03000593          	li	a1,48
   19a2c:	02b10e23          	sb	a1,60(sp)
   19a30:	02c10ea3          	sb	a2,61(sp)
   19a34:	00286813          	or	a6,a6,2
   19a38:	bff87813          	and	a6,a6,-1025
   19a3c:	ed4ff06f          	j	19110 <_vfiprintf_r+0x8b0>
   19a40:	00009797          	auipc	a5,0x9
   19a44:	69078793          	add	a5,a5,1680 # 230d0 <OSUnMapTbl+0x16c>
   19a48:	000c0693          	mv	a3,s8
   19a4c:	000d8713          	mv	a4,s11
   19a50:	00f12023          	sw	a5,0(sp)
   19a54:	fa9ff06f          	j	199fc <_vfiprintf_r+0x119c>
   19a58:	000c0513          	mv	a0,s8
   19a5c:	8e1f20ef          	jal	c33c <strlen>
   19a60:	00412683          	lw	a3,4(sp)
   19a64:	00812803          	lw	a6,8(sp)
   19a68:	00c12703          	lw	a4,12(sp)
   19a6c:	00050893          	mv	a7,a0
   19a70:	c34ff06f          	j	18ea4 <_vfiprintf_r+0x644>
   19a74:	03b14703          	lbu	a4,59(sp)
   19a78:	12070663          	beqz	a4,19ba4 <_vfiprintf_r+0x1344>
   19a7c:	03b10793          	add	a5,sp,59
   19a80:	04f12623          	sw	a5,76(sp)
   19a84:	00100793          	li	a5,1
   19a88:	04f12823          	sw	a5,80(sp)
   19a8c:	00100e93          	li	t4,1
   19a90:	00090713          	mv	a4,s2
   19a94:	930ff06f          	j	18bc4 <_vfiprintf_r+0x364>
   19a98:	01087593          	and	a1,a6,16
   19a9c:	00032783          	lw	a5,0(t1)
   19aa0:	00430313          	add	t1,t1,4
   19aa4:	02059263          	bnez	a1,19ac8 <_vfiprintf_r+0x1268>
   19aa8:	04087593          	and	a1,a6,64
   19aac:	00058a63          	beqz	a1,19ac0 <_vfiprintf_r+0x1260>
   19ab0:	01079793          	sll	a5,a5,0x10
   19ab4:	0107d793          	srl	a5,a5,0x10
   19ab8:	00000513          	li	a0,0
   19abc:	f5dff06f          	j	19a18 <_vfiprintf_r+0x11b8>
   19ac0:	20087593          	and	a1,a6,512
   19ac4:	10059463          	bnez	a1,19bcc <_vfiprintf_r+0x136c>
   19ac8:	00000513          	li	a0,0
   19acc:	f4dff06f          	j	19a18 <_vfiprintf_r+0x11b8>
   19ad0:	001bc603          	lbu	a2,1(s7)
   19ad4:	02086813          	or	a6,a6,32
   19ad8:	001b8b93          	add	s7,s7,1
   19adc:	f31fe06f          	j	18a0c <_vfiprintf_r+0x1ac>
   19ae0:	001bc603          	lbu	a2,1(s7)
   19ae4:	20086813          	or	a6,a6,512
   19ae8:	001b8b93          	add	s7,s7,1
   19aec:	f21fe06f          	j	18a0c <_vfiprintf_r+0x1ac>
   19af0:	00032783          	lw	a5,0(t1)
   19af4:	00430313          	add	t1,t1,4
   19af8:	01a7a023          	sw	s10,0(a5)
   19afc:	e69fe06f          	j	18964 <_vfiprintf_r+0x104>
   19b00:	00600793          	li	a5,6
   19b04:	000c8893          	mv	a7,s9
   19b08:	0997ea63          	bltu	a5,s9,19b9c <_vfiprintf_r+0x133c>
   19b0c:	00088a13          	mv	s4,a7
   19b10:	000d8313          	mv	t1,s11
   19b14:	00009c17          	auipc	s8,0x9
   19b18:	5e4c0c13          	add	s8,s8,1508 # 230f8 <OSUnMapTbl+0x194>
   19b1c:	854ff06f          	j	18b70 <_vfiprintf_r+0x310>
   19b20:	00000793          	li	a5,0
   19b24:	00000513          	li	a0,0
   19b28:	f7cff06f          	j	192a4 <_vfiprintf_r+0xa44>
   19b2c:	01c12783          	lw	a5,28(sp)
   19b30:	02012583          	lw	a1,32(sp)
   19b34:	00000993          	li	s3,0
   19b38:	40fc0c33          	sub	s8,s8,a5
   19b3c:	00078613          	mv	a2,a5
   19b40:	000c0513          	mv	a0,s8
   19b44:	94cfc0ef          	jal	15c90 <strncpy>
   19b48:	001d4783          	lbu	a5,1(s10)
   19b4c:	00a00613          	li	a2,10
   19b50:	00000693          	li	a3,0
   19b54:	00f037b3          	snez	a5,a5
   19b58:	000a0513          	mv	a0,s4
   19b5c:	000d8593          	mv	a1,s11
   19b60:	00fd0d33          	add	s10,s10,a5
   19b64:	1e9020ef          	jal	1c54c <__udivdi3>
   19b68:	c6dff06f          	j	197d4 <_vfiprintf_r+0xf74>
   19b6c:	00100e93          	li	t4,1
   19b70:	00000613          	li	a2,0
   19b74:	00090713          	mv	a4,s2
   19b78:	8d8ff06f          	j	18c50 <_vfiprintf_r+0x3f0>
   19b7c:	04010613          	add	a2,sp,64
   19b80:	00048593          	mv	a1,s1
   19b84:	00098513          	mv	a0,s3
   19b88:	b9dfe0ef          	jal	18724 <__sprint_r.part.0>
   19b8c:	00050463          	beqz	a0,19b94 <_vfiprintf_r+0x1334>
   19b90:	f31fe06f          	j	18ac0 <_vfiprintf_r+0x260>
   19b94:	04012223          	sw	zero,68(sp)
   19b98:	f29fe06f          	j	18ac0 <_vfiprintf_r+0x260>
   19b9c:	00600893          	li	a7,6
   19ba0:	f6dff06f          	j	19b0c <_vfiprintf_r+0x12ac>
   19ba4:	00000613          	li	a2,0
   19ba8:	00100e93          	li	t4,1
   19bac:	00090713          	mv	a4,s2
   19bb0:	820ff06f          	j	18bd0 <_vfiprintf_r+0x370>
   19bb4:	0ff7fa13          	zext.b	s4,a5
   19bb8:	00000d93          	li	s11,0
   19bbc:	e6cff06f          	j	19228 <_vfiprintf_r+0x9c8>
   19bc0:	0ff7f793          	zext.b	a5,a5
   19bc4:	00000513          	li	a0,0
   19bc8:	b74ff06f          	j	18f3c <_vfiprintf_r+0x6dc>
   19bcc:	0ff7f793          	zext.b	a5,a5
   19bd0:	00000513          	li	a0,0
   19bd4:	e45ff06f          	j	19a18 <_vfiprintf_r+0x11b8>
   19bd8:	01879a13          	sll	s4,a5,0x18
   19bdc:	418a5a13          	sra	s4,s4,0x18
   19be0:	41fa5d93          	sra	s11,s4,0x1f
   19be4:	000d8613          	mv	a2,s11
   19be8:	ddcff06f          	j	191c4 <_vfiprintf_r+0x964>
   19bec:	00032783          	lw	a5,0(t1)
   19bf0:	00430313          	add	t1,t1,4
   19bf4:	01a79023          	sh	s10,0(a5)
   19bf8:	d6dfe06f          	j	18964 <_vfiprintf_r+0x104>
   19bfc:	03000793          	li	a5,48
   19c00:	e58ff06f          	j	19258 <_vfiprintf_r+0x9f8>
   19c04:	0584a503          	lw	a0,88(s1)
   19c08:	f88f90ef          	jal	13390 <__retarget_lock_release_recursive>
   19c0c:	e65fe06f          	j	18a70 <_vfiprintf_r+0x210>
   19c10:	00900793          	li	a5,9
   19c14:	bd47e0e3          	bltu	a5,s4,197d4 <_vfiprintf_r+0xf74>
   19c18:	c0dff06f          	j	19824 <_vfiprintf_r+0xfc4>
   19c1c:	00058513          	mv	a0,a1
   19c20:	0000ae97          	auipc	t4,0xa
   19c24:	f40e8e93          	add	t4,t4,-192 # 23b60 <blanks.1>
   19c28:	a61ff06f          	j	19688 <_vfiprintf_r+0xe28>
   19c2c:	00158513          	add	a0,a1,1
   19c30:	0000ae97          	auipc	t4,0xa
   19c34:	f30e8e93          	add	t4,t4,-208 # 23b60 <blanks.1>
   19c38:	9b0ff06f          	j	18de8 <_vfiprintf_r+0x588>
   19c3c:	0644a783          	lw	a5,100(s1)
   19c40:	0017f793          	and	a5,a5,1
   19c44:	00079c63          	bnez	a5,19c5c <_vfiprintf_r+0x13fc>
   19c48:	00c4d783          	lhu	a5,12(s1)
   19c4c:	2007f793          	and	a5,a5,512
   19c50:	00079663          	bnez	a5,19c5c <_vfiprintf_r+0x13fc>
   19c54:	0584a503          	lw	a0,88(s1)
   19c58:	f38f90ef          	jal	13390 <__retarget_lock_release_recursive>
   19c5c:	fff00b93          	li	s7,-1
   19c60:	e99fe06f          	j	18af8 <_vfiprintf_r+0x298>
   19c64:	000e8513          	mv	a0,t4
   19c68:	0000af17          	auipc	t5,0xa
   19c6c:	f08f0f13          	add	t5,t5,-248 # 23b70 <zeroes.0>
   19c70:	f5cff06f          	j	193cc <_vfiprintf_r+0xb6c>
   19c74:	00032c83          	lw	s9,0(t1)
   19c78:	00430313          	add	t1,t1,4
   19c7c:	000cd463          	bgez	s9,19c84 <_vfiprintf_r+0x1424>
   19c80:	fff00c93          	li	s9,-1
   19c84:	001bc603          	lbu	a2,1(s7)
   19c88:	00050b93          	mv	s7,a0
   19c8c:	d81fe06f          	j	18a0c <_vfiprintf_r+0x1ac>

00019c90 <vfiprintf>:
   19c90:	00060693          	mv	a3,a2
   19c94:	00058613          	mv	a2,a1
   19c98:	00050593          	mv	a1,a0
   19c9c:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
   19ca0:	bc1fe06f          	j	18860 <_vfiprintf_r>

00019ca4 <__sbprintf>:
   19ca4:	b7010113          	add	sp,sp,-1168
   19ca8:	00c59783          	lh	a5,12(a1)
   19cac:	00e5d703          	lhu	a4,14(a1)
   19cb0:	48812423          	sw	s0,1160(sp)
   19cb4:	00058413          	mv	s0,a1
   19cb8:	000105b7          	lui	a1,0x10
   19cbc:	ffd58593          	add	a1,a1,-3 # fffd <__sfvwrite_r+0x99>
   19cc0:	06442303          	lw	t1,100(s0)
   19cc4:	01c42883          	lw	a7,28(s0)
   19cc8:	02442803          	lw	a6,36(s0)
   19ccc:	01071713          	sll	a4,a4,0x10
   19cd0:	00b7f7b3          	and	a5,a5,a1
   19cd4:	00e7e7b3          	or	a5,a5,a4
   19cd8:	40000593          	li	a1,1024
   19cdc:	49212023          	sw	s2,1152(sp)
   19ce0:	00f12a23          	sw	a5,20(sp)
   19ce4:	00050913          	mv	s2,a0
   19ce8:	07010793          	add	a5,sp,112
   19cec:	06010513          	add	a0,sp,96
   19cf0:	48112623          	sw	ra,1164(sp)
   19cf4:	48912223          	sw	s1,1156(sp)
   19cf8:	47312e23          	sw	s3,1148(sp)
   19cfc:	00060493          	mv	s1,a2
   19d00:	00068993          	mv	s3,a3
   19d04:	06612623          	sw	t1,108(sp)
   19d08:	03112223          	sw	a7,36(sp)
   19d0c:	03012623          	sw	a6,44(sp)
   19d10:	00f12423          	sw	a5,8(sp)
   19d14:	00f12c23          	sw	a5,24(sp)
   19d18:	00b12823          	sw	a1,16(sp)
   19d1c:	00b12e23          	sw	a1,28(sp)
   19d20:	02012023          	sw	zero,32(sp)
   19d24:	e44f90ef          	jal	13368 <__retarget_lock_init_recursive>
   19d28:	00048613          	mv	a2,s1
   19d2c:	00098693          	mv	a3,s3
   19d30:	00810593          	add	a1,sp,8
   19d34:	00090513          	mv	a0,s2
   19d38:	b29fe0ef          	jal	18860 <_vfiprintf_r>
   19d3c:	00050493          	mv	s1,a0
   19d40:	04055263          	bgez	a0,19d84 <__sbprintf+0xe0>
   19d44:	01415783          	lhu	a5,20(sp)
   19d48:	0407f793          	and	a5,a5,64
   19d4c:	00078863          	beqz	a5,19d5c <__sbprintf+0xb8>
   19d50:	00c45783          	lhu	a5,12(s0)
   19d54:	0407e793          	or	a5,a5,64
   19d58:	00f41623          	sh	a5,12(s0)
   19d5c:	06012503          	lw	a0,96(sp)
   19d60:	e10f90ef          	jal	13370 <__retarget_lock_close_recursive>
   19d64:	48c12083          	lw	ra,1164(sp)
   19d68:	48812403          	lw	s0,1160(sp)
   19d6c:	48012903          	lw	s2,1152(sp)
   19d70:	47c12983          	lw	s3,1148(sp)
   19d74:	00048513          	mv	a0,s1
   19d78:	48412483          	lw	s1,1156(sp)
   19d7c:	49010113          	add	sp,sp,1168
   19d80:	00008067          	ret
   19d84:	00810593          	add	a1,sp,8
   19d88:	00090513          	mv	a0,s2
   19d8c:	ed8f50ef          	jal	f464 <_fflush_r>
   19d90:	fa050ae3          	beqz	a0,19d44 <__sbprintf+0xa0>
   19d94:	fff00493          	li	s1,-1
   19d98:	fadff06f          	j	19d44 <__sbprintf+0xa0>

00019d9c <_write_r>:
   19d9c:	ff010113          	add	sp,sp,-16
   19da0:	00058713          	mv	a4,a1
   19da4:	00812423          	sw	s0,8(sp)
   19da8:	00060593          	mv	a1,a2
   19dac:	00050413          	mv	s0,a0
   19db0:	00068613          	mv	a2,a3
   19db4:	00070513          	mv	a0,a4
   19db8:	0000e797          	auipc	a5,0xe
   19dbc:	aa07a423          	sw	zero,-1368(a5) # 27860 <errno>
   19dc0:	00112623          	sw	ra,12(sp)
   19dc4:	19d080ef          	jal	22760 <_write>
   19dc8:	fff00793          	li	a5,-1
   19dcc:	00f50a63          	beq	a0,a5,19de0 <_write_r+0x44>
   19dd0:	00c12083          	lw	ra,12(sp)
   19dd4:	00812403          	lw	s0,8(sp)
   19dd8:	01010113          	add	sp,sp,16
   19ddc:	00008067          	ret
   19de0:	0000e797          	auipc	a5,0xe
   19de4:	a807a783          	lw	a5,-1408(a5) # 27860 <errno>
   19de8:	fe0784e3          	beqz	a5,19dd0 <_write_r+0x34>
   19dec:	00c12083          	lw	ra,12(sp)
   19df0:	00f42023          	sw	a5,0(s0)
   19df4:	00812403          	lw	s0,8(sp)
   19df8:	01010113          	add	sp,sp,16
   19dfc:	00008067          	ret

00019e00 <__assert_func>:
   19e00:	ff010113          	add	sp,sp,-16
   19e04:	00068793          	mv	a5,a3
   19e08:	8281a703          	lw	a4,-2008(gp) # 25bc4 <_impure_ptr>
   19e0c:	00060813          	mv	a6,a2
   19e10:	00112623          	sw	ra,12(sp)
   19e14:	00c72883          	lw	a7,12(a4)
   19e18:	00078613          	mv	a2,a5
   19e1c:	00050693          	mv	a3,a0
   19e20:	00058713          	mv	a4,a1
   19e24:	00009797          	auipc	a5,0x9
   19e28:	38478793          	add	a5,a5,900 # 231a8 <OSUnMapTbl+0x244>
   19e2c:	00080c63          	beqz	a6,19e44 <__assert_func+0x44>
   19e30:	00009597          	auipc	a1,0x9
   19e34:	38858593          	add	a1,a1,904 # 231b8 <OSUnMapTbl+0x254>
   19e38:	00088513          	mv	a0,a7
   19e3c:	3b4000ef          	jal	1a1f0 <fiprintf>
   19e40:	150020ef          	jal	1bf90 <abort>
   19e44:	00009797          	auipc	a5,0x9
   19e48:	37078793          	add	a5,a5,880 # 231b4 <OSUnMapTbl+0x250>
   19e4c:	00078813          	mv	a6,a5
   19e50:	fe1ff06f          	j	19e30 <__assert_func+0x30>

00019e54 <__assert>:
   19e54:	ff010113          	add	sp,sp,-16
   19e58:	00060693          	mv	a3,a2
   19e5c:	00000613          	li	a2,0
   19e60:	00112623          	sw	ra,12(sp)
   19e64:	f9dff0ef          	jal	19e00 <__assert_func>

00019e68 <_calloc_r>:
   19e68:	fe010113          	add	sp,sp,-32
   19e6c:	00812c23          	sw	s0,24(sp)
   19e70:	00112e23          	sw	ra,28(sp)
   19e74:	0105d693          	srl	a3,a1,0x10
   19e78:	00058793          	mv	a5,a1
   19e7c:	00050413          	mv	s0,a0
   19e80:	01065713          	srl	a4,a2,0x10
   19e84:	0c069063          	bnez	a3,19f44 <_calloc_r+0xdc>
   19e88:	14071a63          	bnez	a4,19fdc <_calloc_r+0x174>
   19e8c:	01061593          	sll	a1,a2,0x10
   19e90:	01079513          	sll	a0,a5,0x10
   19e94:	0105d593          	srl	a1,a1,0x10
   19e98:	01055513          	srl	a0,a0,0x10
   19e9c:	499070ef          	jal	21b34 <__mulsi3>
   19ea0:	00050593          	mv	a1,a0
   19ea4:	00040513          	mv	a0,s0
   19ea8:	f68f90ef          	jal	13610 <_malloc_r>
   19eac:	00050413          	mv	s0,a0
   19eb0:	10050a63          	beqz	a0,19fc4 <_calloc_r+0x15c>
   19eb4:	ffc52603          	lw	a2,-4(a0)
   19eb8:	02400713          	li	a4,36
   19ebc:	ffc67613          	and	a2,a2,-4
   19ec0:	ffc60613          	add	a2,a2,-4
   19ec4:	04c76863          	bltu	a4,a2,19f14 <_calloc_r+0xac>
   19ec8:	01300693          	li	a3,19
   19ecc:	00050793          	mv	a5,a0
   19ed0:	02c6f263          	bgeu	a3,a2,19ef4 <_calloc_r+0x8c>
   19ed4:	00052023          	sw	zero,0(a0)
   19ed8:	00052223          	sw	zero,4(a0)
   19edc:	01b00793          	li	a5,27
   19ee0:	04c7f863          	bgeu	a5,a2,19f30 <_calloc_r+0xc8>
   19ee4:	00052423          	sw	zero,8(a0)
   19ee8:	00052623          	sw	zero,12(a0)
   19eec:	01050793          	add	a5,a0,16
   19ef0:	10e60263          	beq	a2,a4,19ff4 <_calloc_r+0x18c>
   19ef4:	0007a023          	sw	zero,0(a5)
   19ef8:	0007a223          	sw	zero,4(a5)
   19efc:	0007a423          	sw	zero,8(a5)
   19f00:	01c12083          	lw	ra,28(sp)
   19f04:	00040513          	mv	a0,s0
   19f08:	01812403          	lw	s0,24(sp)
   19f0c:	02010113          	add	sp,sp,32
   19f10:	00008067          	ret
   19f14:	00000593          	li	a1,0
   19f18:	fd9f10ef          	jal	bef0 <memset>
   19f1c:	01c12083          	lw	ra,28(sp)
   19f20:	00040513          	mv	a0,s0
   19f24:	01812403          	lw	s0,24(sp)
   19f28:	02010113          	add	sp,sp,32
   19f2c:	00008067          	ret
   19f30:	00850793          	add	a5,a0,8
   19f34:	0007a023          	sw	zero,0(a5)
   19f38:	0007a223          	sw	zero,4(a5)
   19f3c:	0007a423          	sw	zero,8(a5)
   19f40:	fc1ff06f          	j	19f00 <_calloc_r+0x98>
   19f44:	0c071663          	bnez	a4,1a010 <_calloc_r+0x1a8>
   19f48:	01212823          	sw	s2,16(sp)
   19f4c:	01312623          	sw	s3,12(sp)
   19f50:	00912a23          	sw	s1,20(sp)
   19f54:	00068913          	mv	s2,a3
   19f58:	00060993          	mv	s3,a2
   19f5c:	01079513          	sll	a0,a5,0x10
   19f60:	01061593          	sll	a1,a2,0x10
   19f64:	0105d593          	srl	a1,a1,0x10
   19f68:	01055513          	srl	a0,a0,0x10
   19f6c:	3c9070ef          	jal	21b34 <__mulsi3>
   19f70:	00050493          	mv	s1,a0
   19f74:	01091593          	sll	a1,s2,0x10
   19f78:	01099513          	sll	a0,s3,0x10
   19f7c:	0105d593          	srl	a1,a1,0x10
   19f80:	01055513          	srl	a0,a0,0x10
   19f84:	3b1070ef          	jal	21b34 <__mulsi3>
   19f88:	0104d793          	srl	a5,s1,0x10
   19f8c:	00f505b3          	add	a1,a0,a5
   19f90:	0105d793          	srl	a5,a1,0x10
   19f94:	06079863          	bnez	a5,1a004 <_calloc_r+0x19c>
   19f98:	01049493          	sll	s1,s1,0x10
   19f9c:	0104d493          	srl	s1,s1,0x10
   19fa0:	01059593          	sll	a1,a1,0x10
   19fa4:	0095e5b3          	or	a1,a1,s1
   19fa8:	00040513          	mv	a0,s0
   19fac:	01412483          	lw	s1,20(sp)
   19fb0:	01012903          	lw	s2,16(sp)
   19fb4:	00c12983          	lw	s3,12(sp)
   19fb8:	e58f90ef          	jal	13610 <_malloc_r>
   19fbc:	00050413          	mv	s0,a0
   19fc0:	ee051ae3          	bnez	a0,19eb4 <_calloc_r+0x4c>
   19fc4:	00000413          	li	s0,0
   19fc8:	01c12083          	lw	ra,28(sp)
   19fcc:	00040513          	mv	a0,s0
   19fd0:	01812403          	lw	s0,24(sp)
   19fd4:	02010113          	add	sp,sp,32
   19fd8:	00008067          	ret
   19fdc:	01212823          	sw	s2,16(sp)
   19fe0:	01312623          	sw	s3,12(sp)
   19fe4:	00912a23          	sw	s1,20(sp)
   19fe8:	00070913          	mv	s2,a4
   19fec:	00058993          	mv	s3,a1
   19ff0:	f6dff06f          	j	19f5c <_calloc_r+0xf4>
   19ff4:	00052823          	sw	zero,16(a0)
   19ff8:	01850793          	add	a5,a0,24
   19ffc:	00052a23          	sw	zero,20(a0)
   1a000:	ef5ff06f          	j	19ef4 <_calloc_r+0x8c>
   1a004:	01412483          	lw	s1,20(sp)
   1a008:	01012903          	lw	s2,16(sp)
   1a00c:	00c12983          	lw	s3,12(sp)
   1a010:	014000ef          	jal	1a024 <__errno>
   1a014:	00c00793          	li	a5,12
   1a018:	00f52023          	sw	a5,0(a0)
   1a01c:	00000413          	li	s0,0
   1a020:	fa9ff06f          	j	19fc8 <_calloc_r+0x160>

0001a024 <__errno>:
   1a024:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
   1a028:	00008067          	ret

0001a02c <_fclose_r>:
   1a02c:	ff010113          	add	sp,sp,-16
   1a030:	00112623          	sw	ra,12(sp)
   1a034:	01212023          	sw	s2,0(sp)
   1a038:	0e058263          	beqz	a1,1a11c <_fclose_r+0xf0>
   1a03c:	00812423          	sw	s0,8(sp)
   1a040:	00912223          	sw	s1,4(sp)
   1a044:	00058413          	mv	s0,a1
   1a048:	00050493          	mv	s1,a0
   1a04c:	00050663          	beqz	a0,1a058 <_fclose_r+0x2c>
   1a050:	03852783          	lw	a5,56(a0)
   1a054:	0e078063          	beqz	a5,1a134 <_fclose_r+0x108>
   1a058:	06442783          	lw	a5,100(s0)
   1a05c:	00c41703          	lh	a4,12(s0)
   1a060:	0017f793          	and	a5,a5,1
   1a064:	0a079663          	bnez	a5,1a110 <_fclose_r+0xe4>
   1a068:	20077713          	and	a4,a4,512
   1a06c:	10070063          	beqz	a4,1a16c <_fclose_r+0x140>
   1a070:	00040593          	mv	a1,s0
   1a074:	00048513          	mv	a0,s1
   1a078:	9a0f50ef          	jal	f218 <__sflush_r>
   1a07c:	02c42783          	lw	a5,44(s0)
   1a080:	00050913          	mv	s2,a0
   1a084:	00078a63          	beqz	a5,1a098 <_fclose_r+0x6c>
   1a088:	01c42583          	lw	a1,28(s0)
   1a08c:	00048513          	mv	a0,s1
   1a090:	000780e7          	jalr	a5
   1a094:	0a054c63          	bltz	a0,1a14c <_fclose_r+0x120>
   1a098:	00c45783          	lhu	a5,12(s0)
   1a09c:	0807f793          	and	a5,a5,128
   1a0a0:	0a079e63          	bnez	a5,1a15c <_fclose_r+0x130>
   1a0a4:	03042583          	lw	a1,48(s0)
   1a0a8:	00058c63          	beqz	a1,1a0c0 <_fclose_r+0x94>
   1a0ac:	04040793          	add	a5,s0,64
   1a0b0:	00f58663          	beq	a1,a5,1a0bc <_fclose_r+0x90>
   1a0b4:	00048513          	mv	a0,s1
   1a0b8:	ba5f50ef          	jal	fc5c <_free_r>
   1a0bc:	02042823          	sw	zero,48(s0)
   1a0c0:	04442583          	lw	a1,68(s0)
   1a0c4:	00058863          	beqz	a1,1a0d4 <_fclose_r+0xa8>
   1a0c8:	00048513          	mv	a0,s1
   1a0cc:	b91f50ef          	jal	fc5c <_free_r>
   1a0d0:	04042223          	sw	zero,68(s0)
   1a0d4:	965f50ef          	jal	fa38 <__sfp_lock_acquire>
   1a0d8:	06442783          	lw	a5,100(s0)
   1a0dc:	00041623          	sh	zero,12(s0)
   1a0e0:	0017f793          	and	a5,a5,1
   1a0e4:	0a078e63          	beqz	a5,1a1a0 <_fclose_r+0x174>
   1a0e8:	05842503          	lw	a0,88(s0)
   1a0ec:	a84f90ef          	jal	13370 <__retarget_lock_close_recursive>
   1a0f0:	955f50ef          	jal	fa44 <__sfp_lock_release>
   1a0f4:	00c12083          	lw	ra,12(sp)
   1a0f8:	00812403          	lw	s0,8(sp)
   1a0fc:	00412483          	lw	s1,4(sp)
   1a100:	00090513          	mv	a0,s2
   1a104:	00012903          	lw	s2,0(sp)
   1a108:	01010113          	add	sp,sp,16
   1a10c:	00008067          	ret
   1a110:	f60710e3          	bnez	a4,1a070 <_fclose_r+0x44>
   1a114:	00812403          	lw	s0,8(sp)
   1a118:	00412483          	lw	s1,4(sp)
   1a11c:	00000913          	li	s2,0
   1a120:	00c12083          	lw	ra,12(sp)
   1a124:	00090513          	mv	a0,s2
   1a128:	00012903          	lw	s2,0(sp)
   1a12c:	01010113          	add	sp,sp,16
   1a130:	00008067          	ret
   1a134:	df0f50ef          	jal	f724 <__sinit>
   1a138:	06442783          	lw	a5,100(s0)
   1a13c:	00c41703          	lh	a4,12(s0)
   1a140:	0017f793          	and	a5,a5,1
   1a144:	fc0796e3          	bnez	a5,1a110 <_fclose_r+0xe4>
   1a148:	f21ff06f          	j	1a068 <_fclose_r+0x3c>
   1a14c:	00c45783          	lhu	a5,12(s0)
   1a150:	fff00913          	li	s2,-1
   1a154:	0807f793          	and	a5,a5,128
   1a158:	f40786e3          	beqz	a5,1a0a4 <_fclose_r+0x78>
   1a15c:	01042583          	lw	a1,16(s0)
   1a160:	00048513          	mv	a0,s1
   1a164:	af9f50ef          	jal	fc5c <_free_r>
   1a168:	f3dff06f          	j	1a0a4 <_fclose_r+0x78>
   1a16c:	05842503          	lw	a0,88(s0)
   1a170:	a08f90ef          	jal	13378 <__retarget_lock_acquire_recursive>
   1a174:	00c41783          	lh	a5,12(s0)
   1a178:	ee079ce3          	bnez	a5,1a070 <_fclose_r+0x44>
   1a17c:	06442783          	lw	a5,100(s0)
   1a180:	0017f793          	and	a5,a5,1
   1a184:	f80798e3          	bnez	a5,1a114 <_fclose_r+0xe8>
   1a188:	05842503          	lw	a0,88(s0)
   1a18c:	00000913          	li	s2,0
   1a190:	a00f90ef          	jal	13390 <__retarget_lock_release_recursive>
   1a194:	00812403          	lw	s0,8(sp)
   1a198:	00412483          	lw	s1,4(sp)
   1a19c:	f85ff06f          	j	1a120 <_fclose_r+0xf4>
   1a1a0:	05842503          	lw	a0,88(s0)
   1a1a4:	9ecf90ef          	jal	13390 <__retarget_lock_release_recursive>
   1a1a8:	f41ff06f          	j	1a0e8 <_fclose_r+0xbc>

0001a1ac <fclose>:
   1a1ac:	00050593          	mv	a1,a0
   1a1b0:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
   1a1b4:	e79ff06f          	j	1a02c <_fclose_r>

0001a1b8 <_fiprintf_r>:
   1a1b8:	fc010113          	add	sp,sp,-64
   1a1bc:	02c10313          	add	t1,sp,44
   1a1c0:	02d12623          	sw	a3,44(sp)
   1a1c4:	00030693          	mv	a3,t1
   1a1c8:	00112e23          	sw	ra,28(sp)
   1a1cc:	02e12823          	sw	a4,48(sp)
   1a1d0:	02f12a23          	sw	a5,52(sp)
   1a1d4:	03012c23          	sw	a6,56(sp)
   1a1d8:	03112e23          	sw	a7,60(sp)
   1a1dc:	00612623          	sw	t1,12(sp)
   1a1e0:	e80fe0ef          	jal	18860 <_vfiprintf_r>
   1a1e4:	01c12083          	lw	ra,28(sp)
   1a1e8:	04010113          	add	sp,sp,64
   1a1ec:	00008067          	ret

0001a1f0 <fiprintf>:
   1a1f0:	fc010113          	add	sp,sp,-64
   1a1f4:	02810313          	add	t1,sp,40
   1a1f8:	02c12423          	sw	a2,40(sp)
   1a1fc:	02d12623          	sw	a3,44(sp)
   1a200:	00058613          	mv	a2,a1
   1a204:	00030693          	mv	a3,t1
   1a208:	00050593          	mv	a1,a0
   1a20c:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
   1a210:	00112e23          	sw	ra,28(sp)
   1a214:	02e12823          	sw	a4,48(sp)
   1a218:	02f12a23          	sw	a5,52(sp)
   1a21c:	03012c23          	sw	a6,56(sp)
   1a220:	03112e23          	sw	a7,60(sp)
   1a224:	00612623          	sw	t1,12(sp)
   1a228:	e38fe0ef          	jal	18860 <_vfiprintf_r>
   1a22c:	01c12083          	lw	ra,28(sp)
   1a230:	04010113          	add	sp,sp,64
   1a234:	00008067          	ret

0001a238 <__fputwc>:
   1a238:	fe010113          	add	sp,sp,-32
   1a23c:	00812c23          	sw	s0,24(sp)
   1a240:	00912a23          	sw	s1,20(sp)
   1a244:	01212823          	sw	s2,16(sp)
   1a248:	00112e23          	sw	ra,28(sp)
   1a24c:	00050913          	mv	s2,a0
   1a250:	00058493          	mv	s1,a1
   1a254:	00060413          	mv	s0,a2
   1a258:	3c4000ef          	jal	1a61c <__locale_mb_cur_max>
   1a25c:	00100793          	li	a5,1
   1a260:	00f51c63          	bne	a0,a5,1a278 <__fputwc+0x40>
   1a264:	fff48793          	add	a5,s1,-1
   1a268:	0fe00713          	li	a4,254
   1a26c:	00f76663          	bltu	a4,a5,1a278 <__fputwc+0x40>
   1a270:	00910623          	sb	s1,12(sp)
   1a274:	0240006f          	j	1a298 <__fputwc+0x60>
   1a278:	05c40693          	add	a3,s0,92
   1a27c:	00048613          	mv	a2,s1
   1a280:	00c10593          	add	a1,sp,12
   1a284:	00090513          	mv	a0,s2
   1a288:	3c5010ef          	jal	1be4c <_wcrtomb_r>
   1a28c:	fff00793          	li	a5,-1
   1a290:	08f50463          	beq	a0,a5,1a318 <__fputwc+0xe0>
   1a294:	02050c63          	beqz	a0,1a2cc <__fputwc+0x94>
   1a298:	00842783          	lw	a5,8(s0)
   1a29c:	00c14583          	lbu	a1,12(sp)
   1a2a0:	fff78793          	add	a5,a5,-1
   1a2a4:	00f42423          	sw	a5,8(s0)
   1a2a8:	0007da63          	bgez	a5,1a2bc <__fputwc+0x84>
   1a2ac:	01842703          	lw	a4,24(s0)
   1a2b0:	02e7cc63          	blt	a5,a4,1a2e8 <__fputwc+0xb0>
   1a2b4:	00a00793          	li	a5,10
   1a2b8:	02f58863          	beq	a1,a5,1a2e8 <__fputwc+0xb0>
   1a2bc:	00042783          	lw	a5,0(s0)
   1a2c0:	00178713          	add	a4,a5,1
   1a2c4:	00e42023          	sw	a4,0(s0)
   1a2c8:	00b78023          	sb	a1,0(a5)
   1a2cc:	01c12083          	lw	ra,28(sp)
   1a2d0:	01812403          	lw	s0,24(sp)
   1a2d4:	01012903          	lw	s2,16(sp)
   1a2d8:	00048513          	mv	a0,s1
   1a2dc:	01412483          	lw	s1,20(sp)
   1a2e0:	02010113          	add	sp,sp,32
   1a2e4:	00008067          	ret
   1a2e8:	00040613          	mv	a2,s0
   1a2ec:	00090513          	mv	a0,s2
   1a2f0:	1bd010ef          	jal	1bcac <__swbuf_r>
   1a2f4:	fff00793          	li	a5,-1
   1a2f8:	fcf51ae3          	bne	a0,a5,1a2cc <__fputwc+0x94>
   1a2fc:	fff00513          	li	a0,-1
   1a300:	01c12083          	lw	ra,28(sp)
   1a304:	01812403          	lw	s0,24(sp)
   1a308:	01412483          	lw	s1,20(sp)
   1a30c:	01012903          	lw	s2,16(sp)
   1a310:	02010113          	add	sp,sp,32
   1a314:	00008067          	ret
   1a318:	00c45783          	lhu	a5,12(s0)
   1a31c:	fff00513          	li	a0,-1
   1a320:	0407e793          	or	a5,a5,64
   1a324:	00f41623          	sh	a5,12(s0)
   1a328:	fd9ff06f          	j	1a300 <__fputwc+0xc8>

0001a32c <_fputwc_r>:
   1a32c:	06462783          	lw	a5,100(a2)
   1a330:	fe010113          	add	sp,sp,-32
   1a334:	00812c23          	sw	s0,24(sp)
   1a338:	00912a23          	sw	s1,20(sp)
   1a33c:	0017f713          	and	a4,a5,1
   1a340:	00112e23          	sw	ra,28(sp)
   1a344:	00c61783          	lh	a5,12(a2)
   1a348:	00060413          	mv	s0,a2
   1a34c:	00050493          	mv	s1,a0
   1a350:	00071663          	bnez	a4,1a35c <_fputwc_r+0x30>
   1a354:	2007f713          	and	a4,a5,512
   1a358:	08070463          	beqz	a4,1a3e0 <_fputwc_r+0xb4>
   1a35c:	01279713          	sll	a4,a5,0x12
   1a360:	02074063          	bltz	a4,1a380 <_fputwc_r+0x54>
   1a364:	06442703          	lw	a4,100(s0)
   1a368:	000026b7          	lui	a3,0x2
   1a36c:	00d7e7b3          	or	a5,a5,a3
   1a370:	000026b7          	lui	a3,0x2
   1a374:	00d76733          	or	a4,a4,a3
   1a378:	00f41623          	sh	a5,12(s0)
   1a37c:	06e42223          	sw	a4,100(s0)
   1a380:	00048513          	mv	a0,s1
   1a384:	00040613          	mv	a2,s0
   1a388:	eb1ff0ef          	jal	1a238 <__fputwc>
   1a38c:	06442783          	lw	a5,100(s0)
   1a390:	00050493          	mv	s1,a0
   1a394:	0017f793          	and	a5,a5,1
   1a398:	00079863          	bnez	a5,1a3a8 <_fputwc_r+0x7c>
   1a39c:	00c45783          	lhu	a5,12(s0)
   1a3a0:	2007f793          	and	a5,a5,512
   1a3a4:	00078e63          	beqz	a5,1a3c0 <_fputwc_r+0x94>
   1a3a8:	01c12083          	lw	ra,28(sp)
   1a3ac:	01812403          	lw	s0,24(sp)
   1a3b0:	00048513          	mv	a0,s1
   1a3b4:	01412483          	lw	s1,20(sp)
   1a3b8:	02010113          	add	sp,sp,32
   1a3bc:	00008067          	ret
   1a3c0:	05842503          	lw	a0,88(s0)
   1a3c4:	fcdf80ef          	jal	13390 <__retarget_lock_release_recursive>
   1a3c8:	01c12083          	lw	ra,28(sp)
   1a3cc:	01812403          	lw	s0,24(sp)
   1a3d0:	00048513          	mv	a0,s1
   1a3d4:	01412483          	lw	s1,20(sp)
   1a3d8:	02010113          	add	sp,sp,32
   1a3dc:	00008067          	ret
   1a3e0:	05862503          	lw	a0,88(a2)
   1a3e4:	00b12623          	sw	a1,12(sp)
   1a3e8:	f91f80ef          	jal	13378 <__retarget_lock_acquire_recursive>
   1a3ec:	00c41783          	lh	a5,12(s0)
   1a3f0:	00c12583          	lw	a1,12(sp)
   1a3f4:	f69ff06f          	j	1a35c <_fputwc_r+0x30>

0001a3f8 <fputwc>:
   1a3f8:	fe010113          	add	sp,sp,-32
   1a3fc:	00812c23          	sw	s0,24(sp)
   1a400:	00912a23          	sw	s1,20(sp)
   1a404:	00112e23          	sw	ra,28(sp)
   1a408:	8281a483          	lw	s1,-2008(gp) # 25bc4 <_impure_ptr>
   1a40c:	00058413          	mv	s0,a1
   1a410:	00050593          	mv	a1,a0
   1a414:	00048663          	beqz	s1,1a420 <fputwc+0x28>
   1a418:	0384a783          	lw	a5,56(s1)
   1a41c:	08078063          	beqz	a5,1a49c <fputwc+0xa4>
   1a420:	06442703          	lw	a4,100(s0)
   1a424:	00c41783          	lh	a5,12(s0)
   1a428:	00177713          	and	a4,a4,1
   1a42c:	00071663          	bnez	a4,1a438 <fputwc+0x40>
   1a430:	2007f713          	and	a4,a5,512
   1a434:	08070e63          	beqz	a4,1a4d0 <fputwc+0xd8>
   1a438:	01279713          	sll	a4,a5,0x12
   1a43c:	02074063          	bltz	a4,1a45c <fputwc+0x64>
   1a440:	06442703          	lw	a4,100(s0)
   1a444:	000026b7          	lui	a3,0x2
   1a448:	00d7e7b3          	or	a5,a5,a3
   1a44c:	000026b7          	lui	a3,0x2
   1a450:	00d76733          	or	a4,a4,a3
   1a454:	00f41623          	sh	a5,12(s0)
   1a458:	06e42223          	sw	a4,100(s0)
   1a45c:	00048513          	mv	a0,s1
   1a460:	00040613          	mv	a2,s0
   1a464:	dd5ff0ef          	jal	1a238 <__fputwc>
   1a468:	06442783          	lw	a5,100(s0)
   1a46c:	00050493          	mv	s1,a0
   1a470:	0017f793          	and	a5,a5,1
   1a474:	00079863          	bnez	a5,1a484 <fputwc+0x8c>
   1a478:	00c45783          	lhu	a5,12(s0)
   1a47c:	2007f793          	and	a5,a5,512
   1a480:	02078863          	beqz	a5,1a4b0 <fputwc+0xb8>
   1a484:	01c12083          	lw	ra,28(sp)
   1a488:	01812403          	lw	s0,24(sp)
   1a48c:	00048513          	mv	a0,s1
   1a490:	01412483          	lw	s1,20(sp)
   1a494:	02010113          	add	sp,sp,32
   1a498:	00008067          	ret
   1a49c:	00a12623          	sw	a0,12(sp)
   1a4a0:	00048513          	mv	a0,s1
   1a4a4:	a80f50ef          	jal	f724 <__sinit>
   1a4a8:	00c12583          	lw	a1,12(sp)
   1a4ac:	f75ff06f          	j	1a420 <fputwc+0x28>
   1a4b0:	05842503          	lw	a0,88(s0)
   1a4b4:	eddf80ef          	jal	13390 <__retarget_lock_release_recursive>
   1a4b8:	01c12083          	lw	ra,28(sp)
   1a4bc:	01812403          	lw	s0,24(sp)
   1a4c0:	00048513          	mv	a0,s1
   1a4c4:	01412483          	lw	s1,20(sp)
   1a4c8:	02010113          	add	sp,sp,32
   1a4cc:	00008067          	ret
   1a4d0:	05842503          	lw	a0,88(s0)
   1a4d4:	00b12623          	sw	a1,12(sp)
   1a4d8:	ea1f80ef          	jal	13378 <__retarget_lock_acquire_recursive>
   1a4dc:	00c41783          	lh	a5,12(s0)
   1a4e0:	00c12583          	lw	a1,12(sp)
   1a4e4:	f55ff06f          	j	1a438 <fputwc+0x40>

0001a4e8 <_fstat_r>:
   1a4e8:	ff010113          	add	sp,sp,-16
   1a4ec:	00058713          	mv	a4,a1
   1a4f0:	00812423          	sw	s0,8(sp)
   1a4f4:	00060593          	mv	a1,a2
   1a4f8:	00050413          	mv	s0,a0
   1a4fc:	00070513          	mv	a0,a4
   1a500:	0000d797          	auipc	a5,0xd
   1a504:	3607a023          	sw	zero,864(a5) # 27860 <errno>
   1a508:	00112623          	sw	ra,12(sp)
   1a50c:	135070ef          	jal	21e40 <_fstat>
   1a510:	fff00793          	li	a5,-1
   1a514:	00f50a63          	beq	a0,a5,1a528 <_fstat_r+0x40>
   1a518:	00c12083          	lw	ra,12(sp)
   1a51c:	00812403          	lw	s0,8(sp)
   1a520:	01010113          	add	sp,sp,16
   1a524:	00008067          	ret
   1a528:	0000d797          	auipc	a5,0xd
   1a52c:	3387a783          	lw	a5,824(a5) # 27860 <errno>
   1a530:	fe0784e3          	beqz	a5,1a518 <_fstat_r+0x30>
   1a534:	00c12083          	lw	ra,12(sp)
   1a538:	00f42023          	sw	a5,0(s0)
   1a53c:	00812403          	lw	s0,8(sp)
   1a540:	01010113          	add	sp,sp,16
   1a544:	00008067          	ret

0001a548 <_isatty_r>:
   1a548:	ff010113          	add	sp,sp,-16
   1a54c:	00812423          	sw	s0,8(sp)
   1a550:	00050413          	mv	s0,a0
   1a554:	00058513          	mv	a0,a1
   1a558:	0000d797          	auipc	a5,0xd
   1a55c:	3007a423          	sw	zero,776(a5) # 27860 <errno>
   1a560:	00112623          	sw	ra,12(sp)
   1a564:	201070ef          	jal	21f64 <_isatty>
   1a568:	fff00793          	li	a5,-1
   1a56c:	00f50a63          	beq	a0,a5,1a580 <_isatty_r+0x38>
   1a570:	00c12083          	lw	ra,12(sp)
   1a574:	00812403          	lw	s0,8(sp)
   1a578:	01010113          	add	sp,sp,16
   1a57c:	00008067          	ret
   1a580:	0000d797          	auipc	a5,0xd
   1a584:	2e07a783          	lw	a5,736(a5) # 27860 <errno>
   1a588:	fe0784e3          	beqz	a5,1a570 <_isatty_r+0x28>
   1a58c:	00c12083          	lw	ra,12(sp)
   1a590:	00f42023          	sw	a5,0(s0)
   1a594:	00812403          	lw	s0,8(sp)
   1a598:	01010113          	add	sp,sp,16
   1a59c:	00008067          	ret

0001a5a0 <_setlocale_r>:
   1a5a0:	04060063          	beqz	a2,1a5e0 <_setlocale_r+0x40>
   1a5a4:	ff010113          	add	sp,sp,-16
   1a5a8:	00009597          	auipc	a1,0x9
   1a5ac:	c4458593          	add	a1,a1,-956 # 231ec <OSUnMapTbl+0x288>
   1a5b0:	00060513          	mv	a0,a2
   1a5b4:	00812423          	sw	s0,8(sp)
   1a5b8:	00112623          	sw	ra,12(sp)
   1a5bc:	00060413          	mv	s0,a2
   1a5c0:	220000ef          	jal	1a7e0 <strcmp>
   1a5c4:	02051463          	bnez	a0,1a5ec <_setlocale_r+0x4c>
   1a5c8:	00009517          	auipc	a0,0x9
   1a5cc:	c2050513          	add	a0,a0,-992 # 231e8 <OSUnMapTbl+0x284>
   1a5d0:	00c12083          	lw	ra,12(sp)
   1a5d4:	00812403          	lw	s0,8(sp)
   1a5d8:	01010113          	add	sp,sp,16
   1a5dc:	00008067          	ret
   1a5e0:	00009517          	auipc	a0,0x9
   1a5e4:	c0850513          	add	a0,a0,-1016 # 231e8 <OSUnMapTbl+0x284>
   1a5e8:	00008067          	ret
   1a5ec:	00009597          	auipc	a1,0x9
   1a5f0:	bfc58593          	add	a1,a1,-1028 # 231e8 <OSUnMapTbl+0x284>
   1a5f4:	00040513          	mv	a0,s0
   1a5f8:	1e8000ef          	jal	1a7e0 <strcmp>
   1a5fc:	fc0506e3          	beqz	a0,1a5c8 <_setlocale_r+0x28>
   1a600:	00009597          	auipc	a1,0x9
   1a604:	bb458593          	add	a1,a1,-1100 # 231b4 <OSUnMapTbl+0x250>
   1a608:	00040513          	mv	a0,s0
   1a60c:	1d4000ef          	jal	1a7e0 <strcmp>
   1a610:	fa050ce3          	beqz	a0,1a5c8 <_setlocale_r+0x28>
   1a614:	00000513          	li	a0,0
   1a618:	fb9ff06f          	j	1a5d0 <_setlocale_r+0x30>

0001a61c <__locale_mb_cur_max>:
   1a61c:	0000b517          	auipc	a0,0xb
   1a620:	53c54503          	lbu	a0,1340(a0) # 25b58 <__global_locale+0x128>
   1a624:	00008067          	ret

0001a628 <setlocale>:
   1a628:	04058063          	beqz	a1,1a668 <setlocale+0x40>
   1a62c:	ff010113          	add	sp,sp,-16
   1a630:	00812423          	sw	s0,8(sp)
   1a634:	00058413          	mv	s0,a1
   1a638:	00040513          	mv	a0,s0
   1a63c:	00009597          	auipc	a1,0x9
   1a640:	bb058593          	add	a1,a1,-1104 # 231ec <OSUnMapTbl+0x288>
   1a644:	00112623          	sw	ra,12(sp)
   1a648:	198000ef          	jal	1a7e0 <strcmp>
   1a64c:	02051463          	bnez	a0,1a674 <setlocale+0x4c>
   1a650:	00009517          	auipc	a0,0x9
   1a654:	b9850513          	add	a0,a0,-1128 # 231e8 <OSUnMapTbl+0x284>
   1a658:	00c12083          	lw	ra,12(sp)
   1a65c:	00812403          	lw	s0,8(sp)
   1a660:	01010113          	add	sp,sp,16
   1a664:	00008067          	ret
   1a668:	00009517          	auipc	a0,0x9
   1a66c:	b8050513          	add	a0,a0,-1152 # 231e8 <OSUnMapTbl+0x284>
   1a670:	00008067          	ret
   1a674:	00009597          	auipc	a1,0x9
   1a678:	b7458593          	add	a1,a1,-1164 # 231e8 <OSUnMapTbl+0x284>
   1a67c:	00040513          	mv	a0,s0
   1a680:	160000ef          	jal	1a7e0 <strcmp>
   1a684:	fc0506e3          	beqz	a0,1a650 <setlocale+0x28>
   1a688:	00009597          	auipc	a1,0x9
   1a68c:	b2c58593          	add	a1,a1,-1236 # 231b4 <OSUnMapTbl+0x250>
   1a690:	00040513          	mv	a0,s0
   1a694:	14c000ef          	jal	1a7e0 <strcmp>
   1a698:	fa050ce3          	beqz	a0,1a650 <setlocale+0x28>
   1a69c:	00000513          	li	a0,0
   1a6a0:	fb9ff06f          	j	1a658 <setlocale+0x30>

0001a6a4 <_lseek_r>:
   1a6a4:	ff010113          	add	sp,sp,-16
   1a6a8:	00058713          	mv	a4,a1
   1a6ac:	00812423          	sw	s0,8(sp)
   1a6b0:	00060593          	mv	a1,a2
   1a6b4:	00050413          	mv	s0,a0
   1a6b8:	00068613          	mv	a2,a3
   1a6bc:	00070513          	mv	a0,a4
   1a6c0:	0000d797          	auipc	a5,0xd
   1a6c4:	1a07a023          	sw	zero,416(a5) # 27860 <errno>
   1a6c8:	00112623          	sw	ra,12(sp)
   1a6cc:	2e1070ef          	jal	221ac <_lseek>
   1a6d0:	fff00793          	li	a5,-1
   1a6d4:	00f50a63          	beq	a0,a5,1a6e8 <_lseek_r+0x44>
   1a6d8:	00c12083          	lw	ra,12(sp)
   1a6dc:	00812403          	lw	s0,8(sp)
   1a6e0:	01010113          	add	sp,sp,16
   1a6e4:	00008067          	ret
   1a6e8:	0000d797          	auipc	a5,0xd
   1a6ec:	1787a783          	lw	a5,376(a5) # 27860 <errno>
   1a6f0:	fe0784e3          	beqz	a5,1a6d8 <_lseek_r+0x34>
   1a6f4:	00c12083          	lw	ra,12(sp)
   1a6f8:	00f42023          	sw	a5,0(s0)
   1a6fc:	00812403          	lw	s0,8(sp)
   1a700:	01010113          	add	sp,sp,16
   1a704:	00008067          	ret

0001a708 <_mbtowc_r>:
   1a708:	0000b797          	auipc	a5,0xb
   1a70c:	40c7a783          	lw	a5,1036(a5) # 25b14 <__global_locale+0xe4>
   1a710:	00078067          	jr	a5

0001a714 <__ascii_mbtowc>:
   1a714:	02058063          	beqz	a1,1a734 <__ascii_mbtowc+0x20>
   1a718:	04060263          	beqz	a2,1a75c <__ascii_mbtowc+0x48>
   1a71c:	04068863          	beqz	a3,1a76c <__ascii_mbtowc+0x58>
   1a720:	00064783          	lbu	a5,0(a2)
   1a724:	00f5a023          	sw	a5,0(a1)
   1a728:	00064503          	lbu	a0,0(a2)
   1a72c:	00a03533          	snez	a0,a0
   1a730:	00008067          	ret
   1a734:	ff010113          	add	sp,sp,-16
   1a738:	00c10593          	add	a1,sp,12
   1a73c:	02060463          	beqz	a2,1a764 <__ascii_mbtowc+0x50>
   1a740:	02068a63          	beqz	a3,1a774 <__ascii_mbtowc+0x60>
   1a744:	00064783          	lbu	a5,0(a2)
   1a748:	00f5a023          	sw	a5,0(a1)
   1a74c:	00064503          	lbu	a0,0(a2)
   1a750:	00a03533          	snez	a0,a0
   1a754:	01010113          	add	sp,sp,16
   1a758:	00008067          	ret
   1a75c:	00000513          	li	a0,0
   1a760:	00008067          	ret
   1a764:	00000513          	li	a0,0
   1a768:	fedff06f          	j	1a754 <__ascii_mbtowc+0x40>
   1a76c:	ffe00513          	li	a0,-2
   1a770:	00008067          	ret
   1a774:	ffe00513          	li	a0,-2
   1a778:	fddff06f          	j	1a754 <__ascii_mbtowc+0x40>

0001a77c <_read_r>:
   1a77c:	ff010113          	add	sp,sp,-16
   1a780:	00058713          	mv	a4,a1
   1a784:	00812423          	sw	s0,8(sp)
   1a788:	00060593          	mv	a1,a2
   1a78c:	00050413          	mv	s0,a0
   1a790:	00068613          	mv	a2,a3
   1a794:	00070513          	mv	a0,a4
   1a798:	0000d797          	auipc	a5,0xd
   1a79c:	0c07a423          	sw	zero,200(a5) # 27860 <errno>
   1a7a0:	00112623          	sw	ra,12(sp)
   1a7a4:	5bd070ef          	jal	22560 <_read>
   1a7a8:	fff00793          	li	a5,-1
   1a7ac:	00f50a63          	beq	a0,a5,1a7c0 <_read_r+0x44>
   1a7b0:	00c12083          	lw	ra,12(sp)
   1a7b4:	00812403          	lw	s0,8(sp)
   1a7b8:	01010113          	add	sp,sp,16
   1a7bc:	00008067          	ret
   1a7c0:	0000d797          	auipc	a5,0xd
   1a7c4:	0a07a783          	lw	a5,160(a5) # 27860 <errno>
   1a7c8:	fe0784e3          	beqz	a5,1a7b0 <_read_r+0x34>
   1a7cc:	00c12083          	lw	ra,12(sp)
   1a7d0:	00f42023          	sw	a5,0(s0)
   1a7d4:	00812403          	lw	s0,8(sp)
   1a7d8:	01010113          	add	sp,sp,16
   1a7dc:	00008067          	ret

0001a7e0 <strcmp>:
   1a7e0:	00b56733          	or	a4,a0,a1
   1a7e4:	fff00393          	li	t2,-1
   1a7e8:	00377713          	and	a4,a4,3
   1a7ec:	10071063          	bnez	a4,1a8ec <strcmp+0x10c>
   1a7f0:	7f7f87b7          	lui	a5,0x7f7f8
   1a7f4:	f7f78793          	add	a5,a5,-129 # 7f7f7f7f <__alt_data_end+0x7f7aeb9f>
   1a7f8:	00052603          	lw	a2,0(a0)
   1a7fc:	0005a683          	lw	a3,0(a1)
   1a800:	00f672b3          	and	t0,a2,a5
   1a804:	00f66333          	or	t1,a2,a5
   1a808:	00f282b3          	add	t0,t0,a5
   1a80c:	0062e2b3          	or	t0,t0,t1
   1a810:	10729263          	bne	t0,t2,1a914 <strcmp+0x134>
   1a814:	08d61663          	bne	a2,a3,1a8a0 <strcmp+0xc0>
   1a818:	00452603          	lw	a2,4(a0)
   1a81c:	0045a683          	lw	a3,4(a1)
   1a820:	00f672b3          	and	t0,a2,a5
   1a824:	00f66333          	or	t1,a2,a5
   1a828:	00f282b3          	add	t0,t0,a5
   1a82c:	0062e2b3          	or	t0,t0,t1
   1a830:	0c729e63          	bne	t0,t2,1a90c <strcmp+0x12c>
   1a834:	06d61663          	bne	a2,a3,1a8a0 <strcmp+0xc0>
   1a838:	00852603          	lw	a2,8(a0)
   1a83c:	0085a683          	lw	a3,8(a1)
   1a840:	00f672b3          	and	t0,a2,a5
   1a844:	00f66333          	or	t1,a2,a5
   1a848:	00f282b3          	add	t0,t0,a5
   1a84c:	0062e2b3          	or	t0,t0,t1
   1a850:	0c729863          	bne	t0,t2,1a920 <strcmp+0x140>
   1a854:	04d61663          	bne	a2,a3,1a8a0 <strcmp+0xc0>
   1a858:	00c52603          	lw	a2,12(a0)
   1a85c:	00c5a683          	lw	a3,12(a1)
   1a860:	00f672b3          	and	t0,a2,a5
   1a864:	00f66333          	or	t1,a2,a5
   1a868:	00f282b3          	add	t0,t0,a5
   1a86c:	0062e2b3          	or	t0,t0,t1
   1a870:	0c729263          	bne	t0,t2,1a934 <strcmp+0x154>
   1a874:	02d61663          	bne	a2,a3,1a8a0 <strcmp+0xc0>
   1a878:	01052603          	lw	a2,16(a0)
   1a87c:	0105a683          	lw	a3,16(a1)
   1a880:	00f672b3          	and	t0,a2,a5
   1a884:	00f66333          	or	t1,a2,a5
   1a888:	00f282b3          	add	t0,t0,a5
   1a88c:	0062e2b3          	or	t0,t0,t1
   1a890:	0a729c63          	bne	t0,t2,1a948 <strcmp+0x168>
   1a894:	01450513          	add	a0,a0,20
   1a898:	01458593          	add	a1,a1,20
   1a89c:	f4d60ee3          	beq	a2,a3,1a7f8 <strcmp+0x18>
   1a8a0:	01061713          	sll	a4,a2,0x10
   1a8a4:	01069793          	sll	a5,a3,0x10
   1a8a8:	00f71e63          	bne	a4,a5,1a8c4 <strcmp+0xe4>
   1a8ac:	01065713          	srl	a4,a2,0x10
   1a8b0:	0106d793          	srl	a5,a3,0x10
   1a8b4:	40f70533          	sub	a0,a4,a5
   1a8b8:	0ff57593          	zext.b	a1,a0
   1a8bc:	02059063          	bnez	a1,1a8dc <strcmp+0xfc>
   1a8c0:	00008067          	ret
   1a8c4:	01075713          	srl	a4,a4,0x10
   1a8c8:	0107d793          	srl	a5,a5,0x10
   1a8cc:	40f70533          	sub	a0,a4,a5
   1a8d0:	0ff57593          	zext.b	a1,a0
   1a8d4:	00059463          	bnez	a1,1a8dc <strcmp+0xfc>
   1a8d8:	00008067          	ret
   1a8dc:	0ff77713          	zext.b	a4,a4
   1a8e0:	0ff7f793          	zext.b	a5,a5
   1a8e4:	40f70533          	sub	a0,a4,a5
   1a8e8:	00008067          	ret
   1a8ec:	00054603          	lbu	a2,0(a0)
   1a8f0:	0005c683          	lbu	a3,0(a1)
   1a8f4:	00150513          	add	a0,a0,1
   1a8f8:	00158593          	add	a1,a1,1
   1a8fc:	00d61463          	bne	a2,a3,1a904 <strcmp+0x124>
   1a900:	fe0616e3          	bnez	a2,1a8ec <strcmp+0x10c>
   1a904:	40d60533          	sub	a0,a2,a3
   1a908:	00008067          	ret
   1a90c:	00450513          	add	a0,a0,4
   1a910:	00458593          	add	a1,a1,4
   1a914:	fcd61ce3          	bne	a2,a3,1a8ec <strcmp+0x10c>
   1a918:	00000513          	li	a0,0
   1a91c:	00008067          	ret
   1a920:	00850513          	add	a0,a0,8
   1a924:	00858593          	add	a1,a1,8
   1a928:	fcd612e3          	bne	a2,a3,1a8ec <strcmp+0x10c>
   1a92c:	00000513          	li	a0,0
   1a930:	00008067          	ret
   1a934:	00c50513          	add	a0,a0,12
   1a938:	00c58593          	add	a1,a1,12
   1a93c:	fad618e3          	bne	a2,a3,1a8ec <strcmp+0x10c>
   1a940:	00000513          	li	a0,0
   1a944:	00008067          	ret
   1a948:	01050513          	add	a0,a0,16
   1a94c:	01058593          	add	a1,a1,16
   1a950:	f8d61ee3          	bne	a2,a3,1a8ec <strcmp+0x10c>
   1a954:	00000513          	li	a0,0
   1a958:	00008067          	ret

0001a95c <__ssprint_r>:
   1a95c:	00862783          	lw	a5,8(a2)
   1a960:	fd010113          	add	sp,sp,-48
   1a964:	01312e23          	sw	s3,28(sp)
   1a968:	01412c23          	sw	s4,24(sp)
   1a96c:	02112623          	sw	ra,44(sp)
   1a970:	00062983          	lw	s3,0(a2)
   1a974:	00060a13          	mv	s4,a2
   1a978:	1c078063          	beqz	a5,1ab38 <__ssprint_r+0x1dc>
   1a97c:	02912223          	sw	s1,36(sp)
   1a980:	03212023          	sw	s2,32(sp)
   1a984:	01512a23          	sw	s5,20(sp)
   1a988:	01712623          	sw	s7,12(sp)
   1a98c:	0085a703          	lw	a4,8(a1)
   1a990:	0005a783          	lw	a5,0(a1)
   1a994:	02812423          	sw	s0,40(sp)
   1a998:	01612823          	sw	s6,16(sp)
   1a99c:	01812423          	sw	s8,8(sp)
   1a9a0:	00050a93          	mv	s5,a0
   1a9a4:	00058493          	mv	s1,a1
   1a9a8:	00000b93          	li	s7,0
   1a9ac:	00000913          	li	s2,0
   1a9b0:	0e00006f          	j	1aa90 <__ssprint_r+0x134>
   1a9b4:	00c49703          	lh	a4,12(s1)
   1a9b8:	48077693          	and	a3,a4,1152
   1a9bc:	08068a63          	beqz	a3,1aa50 <__ssprint_r+0xf4>
   1a9c0:	0144a603          	lw	a2,20(s1)
   1a9c4:	0104a583          	lw	a1,16(s1)
   1a9c8:	00161693          	sll	a3,a2,0x1
   1a9cc:	00c686b3          	add	a3,a3,a2
   1a9d0:	40b78433          	sub	s0,a5,a1
   1a9d4:	01f6db13          	srl	s6,a3,0x1f
   1a9d8:	00db0b33          	add	s6,s6,a3
   1a9dc:	00140793          	add	a5,s0,1
   1a9e0:	401b5b13          	sra	s6,s6,0x1
   1a9e4:	012787b3          	add	a5,a5,s2
   1a9e8:	000b0613          	mv	a2,s6
   1a9ec:	00fb7663          	bgeu	s6,a5,1a9f8 <__ssprint_r+0x9c>
   1a9f0:	00078b13          	mv	s6,a5
   1a9f4:	00078613          	mv	a2,a5
   1a9f8:	40077713          	and	a4,a4,1024
   1a9fc:	0a070a63          	beqz	a4,1aab0 <__ssprint_r+0x154>
   1aa00:	00060593          	mv	a1,a2
   1aa04:	000a8513          	mv	a0,s5
   1aa08:	c09f80ef          	jal	13610 <_malloc_r>
   1aa0c:	00050c13          	mv	s8,a0
   1aa10:	0a050e63          	beqz	a0,1aacc <__ssprint_r+0x170>
   1aa14:	0104a583          	lw	a1,16(s1)
   1aa18:	00040613          	mv	a2,s0
   1aa1c:	b30f10ef          	jal	bd4c <memcpy>
   1aa20:	00c4d783          	lhu	a5,12(s1)
   1aa24:	b7f7f793          	and	a5,a5,-1153
   1aa28:	0807e793          	or	a5,a5,128
   1aa2c:	00f49623          	sh	a5,12(s1)
   1aa30:	408b07b3          	sub	a5,s6,s0
   1aa34:	008c0533          	add	a0,s8,s0
   1aa38:	0164aa23          	sw	s6,20(s1)
   1aa3c:	0184a823          	sw	s8,16(s1)
   1aa40:	00a4a023          	sw	a0,0(s1)
   1aa44:	00090b13          	mv	s6,s2
   1aa48:	00f4a423          	sw	a5,8(s1)
   1aa4c:	00090413          	mv	s0,s2
   1aa50:	00040613          	mv	a2,s0
   1aa54:	000b8593          	mv	a1,s7
   1aa58:	c58f90ef          	jal	13eb0 <memmove>
   1aa5c:	0084a703          	lw	a4,8(s1)
   1aa60:	0004a783          	lw	a5,0(s1)
   1aa64:	008a2683          	lw	a3,8(s4)
   1aa68:	41670733          	sub	a4,a4,s6
   1aa6c:	008787b3          	add	a5,a5,s0
   1aa70:	00e4a423          	sw	a4,8(s1)
   1aa74:	00f4a023          	sw	a5,0(s1)
   1aa78:	412686b3          	sub	a3,a3,s2
   1aa7c:	00da2423          	sw	a3,8(s4)
   1aa80:	08068e63          	beqz	a3,1ab1c <__ssprint_r+0x1c0>
   1aa84:	0009ab83          	lw	s7,0(s3)
   1aa88:	0049a903          	lw	s2,4(s3)
   1aa8c:	00898993          	add	s3,s3,8
   1aa90:	00070b13          	mv	s6,a4
   1aa94:	00078513          	mv	a0,a5
   1aa98:	fe0906e3          	beqz	s2,1aa84 <__ssprint_r+0x128>
   1aa9c:	00070413          	mv	s0,a4
   1aaa0:	f0e97ae3          	bgeu	s2,a4,1a9b4 <__ssprint_r+0x58>
   1aaa4:	00090b13          	mv	s6,s2
   1aaa8:	00090413          	mv	s0,s2
   1aaac:	fa5ff06f          	j	1aa50 <__ssprint_r+0xf4>
   1aab0:	000a8513          	mv	a0,s5
   1aab4:	861fa0ef          	jal	15314 <_realloc_r>
   1aab8:	00050c13          	mv	s8,a0
   1aabc:	f6051ae3          	bnez	a0,1aa30 <__ssprint_r+0xd4>
   1aac0:	0104a583          	lw	a1,16(s1)
   1aac4:	000a8513          	mv	a0,s5
   1aac8:	994f50ef          	jal	fc5c <_free_r>
   1aacc:	00c4d783          	lhu	a5,12(s1)
   1aad0:	00c00713          	li	a4,12
   1aad4:	00eaa023          	sw	a4,0(s5)
   1aad8:	02812403          	lw	s0,40(sp)
   1aadc:	02c12083          	lw	ra,44(sp)
   1aae0:	0407e793          	or	a5,a5,64
   1aae4:	00f49623          	sh	a5,12(s1)
   1aae8:	02012903          	lw	s2,32(sp)
   1aaec:	02412483          	lw	s1,36(sp)
   1aaf0:	01412a83          	lw	s5,20(sp)
   1aaf4:	01012b03          	lw	s6,16(sp)
   1aaf8:	00c12b83          	lw	s7,12(sp)
   1aafc:	00812c03          	lw	s8,8(sp)
   1ab00:	000a2423          	sw	zero,8(s4)
   1ab04:	000a2223          	sw	zero,4(s4)
   1ab08:	01c12983          	lw	s3,28(sp)
   1ab0c:	01812a03          	lw	s4,24(sp)
   1ab10:	fff00513          	li	a0,-1
   1ab14:	03010113          	add	sp,sp,48
   1ab18:	00008067          	ret
   1ab1c:	02812403          	lw	s0,40(sp)
   1ab20:	02412483          	lw	s1,36(sp)
   1ab24:	02012903          	lw	s2,32(sp)
   1ab28:	01412a83          	lw	s5,20(sp)
   1ab2c:	01012b03          	lw	s6,16(sp)
   1ab30:	00c12b83          	lw	s7,12(sp)
   1ab34:	00812c03          	lw	s8,8(sp)
   1ab38:	02c12083          	lw	ra,44(sp)
   1ab3c:	000a2223          	sw	zero,4(s4)
   1ab40:	01c12983          	lw	s3,28(sp)
   1ab44:	01812a03          	lw	s4,24(sp)
   1ab48:	00000513          	li	a0,0
   1ab4c:	03010113          	add	sp,sp,48
   1ab50:	00008067          	ret

0001ab54 <_svfiprintf_r>:
   1ab54:	00c5d783          	lhu	a5,12(a1)
   1ab58:	ec010113          	add	sp,sp,-320
   1ab5c:	12912a23          	sw	s1,308(sp)
   1ab60:	13212823          	sw	s2,304(sp)
   1ab64:	13412423          	sw	s4,296(sp)
   1ab68:	11812c23          	sw	s8,280(sp)
   1ab6c:	12112e23          	sw	ra,316(sp)
   1ab70:	11712e23          	sw	s7,284(sp)
   1ab74:	0807f793          	and	a5,a5,128
   1ab78:	00058913          	mv	s2,a1
   1ab7c:	00050a13          	mv	s4,a0
   1ab80:	00060c13          	mv	s8,a2
   1ab84:	00068493          	mv	s1,a3
   1ab88:	00078663          	beqz	a5,1ab94 <_svfiprintf_r+0x40>
   1ab8c:	0105a783          	lw	a5,16(a1)
   1ab90:	78078ce3          	beqz	a5,1bb28 <_svfiprintf_r+0xfd4>
   1ab94:	12812c23          	sw	s0,312(sp)
   1ab98:	13312623          	sw	s3,300(sp)
   1ab9c:	13512223          	sw	s5,292(sp)
   1aba0:	13612023          	sw	s6,288(sp)
   1aba4:	11912a23          	sw	s9,276(sp)
   1aba8:	11a12823          	sw	s10,272(sp)
   1abac:	11b12623          	sw	s11,268(sp)
   1abb0:	05c10993          	add	s3,sp,92
   1abb4:	00000b93          	li	s7,0
   1abb8:	000b8c93          	mv	s9,s7
   1abbc:	05312823          	sw	s3,80(sp)
   1abc0:	04012c23          	sw	zero,88(sp)
   1abc4:	04012a23          	sw	zero,84(sp)
   1abc8:	00000713          	li	a4,0
   1abcc:	00098793          	mv	a5,s3
   1abd0:	00012623          	sw	zero,12(sp)
   1abd4:	02012223          	sw	zero,36(sp)
   1abd8:	02012423          	sw	zero,40(sp)
   1abdc:	02012623          	sw	zero,44(sp)
   1abe0:	00009b17          	auipc	s6,0x9
   1abe4:	fa0b0b13          	add	s6,s6,-96 # 23b80 <zeroes.0+0x10>
   1abe8:	01000413          	li	s0,16
   1abec:	00009a97          	auipc	s5,0x9
   1abf0:	110a8a93          	add	s5,s5,272 # 23cfc <zeroes.0>
   1abf4:	000c0b93          	mv	s7,s8
   1abf8:	00048313          	mv	t1,s1
   1abfc:	000bc683          	lbu	a3,0(s7)
   1ac00:	1c068a63          	beqz	a3,1add4 <_svfiprintf_r+0x280>
   1ac04:	000b8493          	mv	s1,s7
   1ac08:	02500613          	li	a2,37
   1ac0c:	20c68a63          	beq	a3,a2,1ae20 <_svfiprintf_r+0x2cc>
   1ac10:	0014c683          	lbu	a3,1(s1)
   1ac14:	00148493          	add	s1,s1,1
   1ac18:	fe069ae3          	bnez	a3,1ac0c <_svfiprintf_r+0xb8>
   1ac1c:	41748c33          	sub	s8,s1,s7
   1ac20:	1b748a63          	beq	s1,s7,1add4 <_svfiprintf_r+0x280>
   1ac24:	05412683          	lw	a3,84(sp)
   1ac28:	01870733          	add	a4,a4,s8
   1ac2c:	0177a023          	sw	s7,0(a5)
   1ac30:	00168693          	add	a3,a3,1 # 2001 <OS_EventTaskWaitMulti+0xd1>
   1ac34:	0187a223          	sw	s8,4(a5)
   1ac38:	04e12c23          	sw	a4,88(sp)
   1ac3c:	04d12a23          	sw	a3,84(sp)
   1ac40:	00700613          	li	a2,7
   1ac44:	00878793          	add	a5,a5,8
   1ac48:	1ed64463          	blt	a2,a3,1ae30 <_svfiprintf_r+0x2dc>
   1ac4c:	0004c683          	lbu	a3,0(s1)
   1ac50:	018c8cb3          	add	s9,s9,s8
   1ac54:	18068063          	beqz	a3,1add4 <_svfiprintf_r+0x280>
   1ac58:	00000693          	li	a3,0
   1ac5c:	0014c583          	lbu	a1,1(s1)
   1ac60:	00148b93          	add	s7,s1,1
   1ac64:	040105a3          	sb	zero,75(sp)
   1ac68:	fff00493          	li	s1,-1
   1ac6c:	00000813          	li	a6,0
   1ac70:	05a00c13          	li	s8,90
   1ac74:	00068d13          	mv	s10,a3
   1ac78:	00070d93          	mv	s11,a4
   1ac7c:	001b8b93          	add	s7,s7,1
   1ac80:	fe058613          	add	a2,a1,-32
   1ac84:	04cc6663          	bltu	s8,a2,1acd0 <_svfiprintf_r+0x17c>
   1ac88:	00261613          	sll	a2,a2,0x2
   1ac8c:	01660633          	add	a2,a2,s6
   1ac90:	00062603          	lw	a2,0(a2)
   1ac94:	01660633          	add	a2,a2,s6
   1ac98:	00060067          	jr	a2
   1ac9c:	00000d13          	li	s10,0
   1aca0:	fd058613          	add	a2,a1,-48
   1aca4:	00900893          	li	a7,9
   1aca8:	000bc583          	lbu	a1,0(s7)
   1acac:	002d1513          	sll	a0,s10,0x2
   1acb0:	01a506b3          	add	a3,a0,s10
   1acb4:	00169693          	sll	a3,a3,0x1
   1acb8:	00d60d33          	add	s10,a2,a3
   1acbc:	fd058613          	add	a2,a1,-48
   1acc0:	001b8b93          	add	s7,s7,1
   1acc4:	fec8f2e3          	bgeu	a7,a2,1aca8 <_svfiprintf_r+0x154>
   1acc8:	fe058613          	add	a2,a1,-32
   1accc:	facc7ee3          	bgeu	s8,a2,1ac88 <_svfiprintf_r+0x134>
   1acd0:	000d0693          	mv	a3,s10
   1acd4:	000d8713          	mv	a4,s11
   1acd8:	0e058e63          	beqz	a1,1add4 <_svfiprintf_r+0x280>
   1acdc:	08b10e23          	sb	a1,156(sp)
   1ace0:	040105a3          	sb	zero,75(sp)
   1ace4:	00100d93          	li	s11,1
   1ace8:	00100893          	li	a7,1
   1acec:	09c10c13          	add	s8,sp,156
   1acf0:	00000493          	li	s1,0
   1acf4:	00000f93          	li	t6,0
   1acf8:	08487293          	and	t0,a6,132
   1acfc:	05412603          	lw	a2,84(sp)
   1ad00:	00029663          	bnez	t0,1ad0c <_svfiprintf_r+0x1b8>
   1ad04:	41b68d33          	sub	s10,a3,s11
   1ad08:	21a04ee3          	bgtz	s10,1b724 <_svfiprintf_r+0xbd0>
   1ad0c:	04b14583          	lbu	a1,75(sp)
   1ad10:	02058863          	beqz	a1,1ad40 <_svfiprintf_r+0x1ec>
   1ad14:	04b10593          	add	a1,sp,75
   1ad18:	00b7a023          	sw	a1,0(a5)
   1ad1c:	00160613          	add	a2,a2,1
   1ad20:	00100593          	li	a1,1
   1ad24:	00170713          	add	a4,a4,1
   1ad28:	00b7a223          	sw	a1,4(a5)
   1ad2c:	04e12c23          	sw	a4,88(sp)
   1ad30:	04c12a23          	sw	a2,84(sp)
   1ad34:	00700593          	li	a1,7
   1ad38:	00878793          	add	a5,a5,8
   1ad3c:	16c5c663          	blt	a1,a2,1aea8 <_svfiprintf_r+0x354>
   1ad40:	020f8863          	beqz	t6,1ad70 <_svfiprintf_r+0x21c>
   1ad44:	04c10593          	add	a1,sp,76
   1ad48:	00b7a023          	sw	a1,0(a5)
   1ad4c:	00160613          	add	a2,a2,1
   1ad50:	00200593          	li	a1,2
   1ad54:	00270713          	add	a4,a4,2
   1ad58:	00b7a223          	sw	a1,4(a5)
   1ad5c:	04e12c23          	sw	a4,88(sp)
   1ad60:	04c12a23          	sw	a2,84(sp)
   1ad64:	00700593          	li	a1,7
   1ad68:	00878793          	add	a5,a5,8
   1ad6c:	2ec5cae3          	blt	a1,a2,1b860 <_svfiprintf_r+0xd0c>
   1ad70:	08000593          	li	a1,128
   1ad74:	6eb28063          	beq	t0,a1,1b454 <_svfiprintf_r+0x900>
   1ad78:	411484b3          	sub	s1,s1,a7
   1ad7c:	009040e3          	bgtz	s1,1b57c <_svfiprintf_r+0xa28>
   1ad80:	01170733          	add	a4,a4,a7
   1ad84:	00160613          	add	a2,a2,1
   1ad88:	0187a023          	sw	s8,0(a5)
   1ad8c:	0117a223          	sw	a7,4(a5)
   1ad90:	04e12c23          	sw	a4,88(sp)
   1ad94:	04c12a23          	sw	a2,84(sp)
   1ad98:	00700593          	li	a1,7
   1ad9c:	00878793          	add	a5,a5,8
   1ada0:	0cc5c8e3          	blt	a1,a2,1b670 <_svfiprintf_r+0xb1c>
   1ada4:	00487813          	and	a6,a6,4
   1ada8:	00080663          	beqz	a6,1adb4 <_svfiprintf_r+0x260>
   1adac:	41b684b3          	sub	s1,a3,s11
   1adb0:	14904663          	bgtz	s1,1aefc <_svfiprintf_r+0x3a8>
   1adb4:	01b6d463          	bge	a3,s11,1adbc <_svfiprintf_r+0x268>
   1adb8:	000d8693          	mv	a3,s11
   1adbc:	00dc8cb3          	add	s9,s9,a3
   1adc0:	0e0714e3          	bnez	a4,1b6a8 <_svfiprintf_r+0xb54>
   1adc4:	000bc683          	lbu	a3,0(s7)
   1adc8:	04012a23          	sw	zero,84(sp)
   1adcc:	00098793          	mv	a5,s3
   1add0:	e2069ae3          	bnez	a3,1ac04 <_svfiprintf_r+0xb0>
   1add4:	000c8b93          	mv	s7,s9
   1add8:	08070263          	beqz	a4,1ae5c <_svfiprintf_r+0x308>
   1addc:	05010613          	add	a2,sp,80
   1ade0:	00090593          	mv	a1,s2
   1ade4:	000a0513          	mv	a0,s4
   1ade8:	b75ff0ef          	jal	1a95c <__ssprint_r>
   1adec:	0700006f          	j	1ae5c <_svfiprintf_r+0x308>
   1adf0:	00032d03          	lw	s10,0(t1)
   1adf4:	00430313          	add	t1,t1,4
   1adf8:	000d4c63          	bltz	s10,1ae10 <_svfiprintf_r+0x2bc>
   1adfc:	000bc583          	lbu	a1,0(s7)
   1ae00:	e7dff06f          	j	1ac7c <_svfiprintf_r+0x128>
   1ae04:	000bc583          	lbu	a1,0(s7)
   1ae08:	02086813          	or	a6,a6,32
   1ae0c:	e71ff06f          	j	1ac7c <_svfiprintf_r+0x128>
   1ae10:	41a00d33          	neg	s10,s10
   1ae14:	000bc583          	lbu	a1,0(s7)
   1ae18:	00486813          	or	a6,a6,4
   1ae1c:	e61ff06f          	j	1ac7c <_svfiprintf_r+0x128>
   1ae20:	41748c33          	sub	s8,s1,s7
   1ae24:	e17490e3          	bne	s1,s7,1ac24 <_svfiprintf_r+0xd0>
   1ae28:	0004c683          	lbu	a3,0(s1)
   1ae2c:	e29ff06f          	j	1ac54 <_svfiprintf_r+0x100>
   1ae30:	05010613          	add	a2,sp,80
   1ae34:	00090593          	mv	a1,s2
   1ae38:	000a0513          	mv	a0,s4
   1ae3c:	00612823          	sw	t1,16(sp)
   1ae40:	b1dff0ef          	jal	1a95c <__ssprint_r>
   1ae44:	00051a63          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1ae48:	05812703          	lw	a4,88(sp)
   1ae4c:	01012303          	lw	t1,16(sp)
   1ae50:	00098793          	mv	a5,s3
   1ae54:	df9ff06f          	j	1ac4c <_svfiprintf_r+0xf8>
   1ae58:	000c8b93          	mv	s7,s9
   1ae5c:	00c95783          	lhu	a5,12(s2)
   1ae60:	13812403          	lw	s0,312(sp)
   1ae64:	12c12983          	lw	s3,300(sp)
   1ae68:	0407f793          	and	a5,a5,64
   1ae6c:	12412a83          	lw	s5,292(sp)
   1ae70:	12012b03          	lw	s6,288(sp)
   1ae74:	11412c83          	lw	s9,276(sp)
   1ae78:	11012d03          	lw	s10,272(sp)
   1ae7c:	10c12d83          	lw	s11,268(sp)
   1ae80:	600794e3          	bnez	a5,1bc88 <_svfiprintf_r+0x1134>
   1ae84:	13c12083          	lw	ra,316(sp)
   1ae88:	13412483          	lw	s1,308(sp)
   1ae8c:	13012903          	lw	s2,304(sp)
   1ae90:	12812a03          	lw	s4,296(sp)
   1ae94:	11812c03          	lw	s8,280(sp)
   1ae98:	000b8513          	mv	a0,s7
   1ae9c:	11c12b83          	lw	s7,284(sp)
   1aea0:	14010113          	add	sp,sp,320
   1aea4:	00008067          	ret
   1aea8:	05010613          	add	a2,sp,80
   1aeac:	00090593          	mv	a1,s2
   1aeb0:	000a0513          	mv	a0,s4
   1aeb4:	02612823          	sw	t1,48(sp)
   1aeb8:	03112023          	sw	a7,32(sp)
   1aebc:	01012e23          	sw	a6,28(sp)
   1aec0:	00d12c23          	sw	a3,24(sp)
   1aec4:	00512a23          	sw	t0,20(sp)
   1aec8:	01f12823          	sw	t6,16(sp)
   1aecc:	a91ff0ef          	jal	1a95c <__ssprint_r>
   1aed0:	f80514e3          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1aed4:	05812703          	lw	a4,88(sp)
   1aed8:	05412603          	lw	a2,84(sp)
   1aedc:	03012303          	lw	t1,48(sp)
   1aee0:	02012883          	lw	a7,32(sp)
   1aee4:	01c12803          	lw	a6,28(sp)
   1aee8:	01812683          	lw	a3,24(sp)
   1aeec:	01412283          	lw	t0,20(sp)
   1aef0:	01012f83          	lw	t6,16(sp)
   1aef4:	00098793          	mv	a5,s3
   1aef8:	e49ff06f          	j	1ad40 <_svfiprintf_r+0x1ec>
   1aefc:	01000593          	li	a1,16
   1af00:	05412603          	lw	a2,84(sp)
   1af04:	00009e17          	auipc	t3,0x9
   1af08:	de8e0e13          	add	t3,t3,-536 # 23cec <blanks.1>
   1af0c:	0895d063          	bge	a1,s1,1af8c <_svfiprintf_r+0x438>
   1af10:	01712a23          	sw	s7,20(sp)
   1af14:	01000c13          	li	s8,16
   1af18:	00700d13          	li	s10,7
   1af1c:	00d12823          	sw	a3,16(sp)
   1af20:	00612c23          	sw	t1,24(sp)
   1af24:	000e0b93          	mv	s7,t3
   1af28:	00c0006f          	j	1af34 <_svfiprintf_r+0x3e0>
   1af2c:	ff048493          	add	s1,s1,-16
   1af30:	049c5663          	bge	s8,s1,1af7c <_svfiprintf_r+0x428>
   1af34:	01070713          	add	a4,a4,16
   1af38:	00160613          	add	a2,a2,1
   1af3c:	0177a023          	sw	s7,0(a5)
   1af40:	0187a223          	sw	s8,4(a5)
   1af44:	04e12c23          	sw	a4,88(sp)
   1af48:	04c12a23          	sw	a2,84(sp)
   1af4c:	00878793          	add	a5,a5,8
   1af50:	fccd5ee3          	bge	s10,a2,1af2c <_svfiprintf_r+0x3d8>
   1af54:	05010613          	add	a2,sp,80
   1af58:	00090593          	mv	a1,s2
   1af5c:	000a0513          	mv	a0,s4
   1af60:	9fdff0ef          	jal	1a95c <__ssprint_r>
   1af64:	ee051ae3          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1af68:	ff048493          	add	s1,s1,-16
   1af6c:	05812703          	lw	a4,88(sp)
   1af70:	05412603          	lw	a2,84(sp)
   1af74:	00098793          	mv	a5,s3
   1af78:	fa9c4ee3          	blt	s8,s1,1af34 <_svfiprintf_r+0x3e0>
   1af7c:	000b8e13          	mv	t3,s7
   1af80:	01012683          	lw	a3,16(sp)
   1af84:	01812303          	lw	t1,24(sp)
   1af88:	01412b83          	lw	s7,20(sp)
   1af8c:	00970733          	add	a4,a4,s1
   1af90:	00160613          	add	a2,a2,1
   1af94:	01c7a023          	sw	t3,0(a5)
   1af98:	0097a223          	sw	s1,4(a5)
   1af9c:	04e12c23          	sw	a4,88(sp)
   1afa0:	04c12a23          	sw	a2,84(sp)
   1afa4:	00700793          	li	a5,7
   1afa8:	e0c7d6e3          	bge	a5,a2,1adb4 <_svfiprintf_r+0x260>
   1afac:	05010613          	add	a2,sp,80
   1afb0:	00090593          	mv	a1,s2
   1afb4:	000a0513          	mv	a0,s4
   1afb8:	00612a23          	sw	t1,20(sp)
   1afbc:	00d12823          	sw	a3,16(sp)
   1afc0:	99dff0ef          	jal	1a95c <__ssprint_r>
   1afc4:	e8051ae3          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1afc8:	05812703          	lw	a4,88(sp)
   1afcc:	01412303          	lw	t1,20(sp)
   1afd0:	01012683          	lw	a3,16(sp)
   1afd4:	de1ff06f          	j	1adb4 <_svfiprintf_r+0x260>
   1afd8:	00032c03          	lw	s8,0(t1)
   1afdc:	040105a3          	sb	zero,75(sp)
   1afe0:	000d0693          	mv	a3,s10
   1afe4:	000d8713          	mv	a4,s11
   1afe8:	00430d13          	add	s10,t1,4
   1afec:	400c04e3          	beqz	s8,1bbf4 <_svfiprintf_r+0x10a0>
   1aff0:	00f12e23          	sw	a5,28(sp)
   1aff4:	01b12c23          	sw	s11,24(sp)
   1aff8:	01012a23          	sw	a6,20(sp)
   1affc:	00d12823          	sw	a3,16(sp)
   1b000:	3004c4e3          	bltz	s1,1bb08 <_svfiprintf_r+0xfb4>
   1b004:	00048613          	mv	a2,s1
   1b008:	00000593          	li	a1,0
   1b00c:	000c0513          	mv	a0,s8
   1b010:	dddf80ef          	jal	13dec <memchr>
   1b014:	01012683          	lw	a3,16(sp)
   1b018:	01412803          	lw	a6,20(sp)
   1b01c:	01812703          	lw	a4,24(sp)
   1b020:	01c12783          	lw	a5,28(sp)
   1b024:	00048893          	mv	a7,s1
   1b028:	00050463          	beqz	a0,1b030 <_svfiprintf_r+0x4dc>
   1b02c:	418508b3          	sub	a7,a0,s8
   1b030:	04b14603          	lbu	a2,75(sp)
   1b034:	fff8cd93          	not	s11,a7
   1b038:	41fddd93          	sra	s11,s11,0x1f
   1b03c:	01b8fdb3          	and	s11,a7,s11
   1b040:	000d0313          	mv	t1,s10
   1b044:	00000493          	li	s1,0
   1b048:	00000f93          	li	t6,0
   1b04c:	ca0606e3          	beqz	a2,1acf8 <_svfiprintf_r+0x1a4>
   1b050:	001d8d93          	add	s11,s11,1
   1b054:	00287f93          	and	t6,a6,2
   1b058:	ca0f80e3          	beqz	t6,1acf8 <_svfiprintf_r+0x1a4>
   1b05c:	002d8d93          	add	s11,s11,2
   1b060:	00200f93          	li	t6,2
   1b064:	c95ff06f          	j	1acf8 <_svfiprintf_r+0x1a4>
   1b068:	00032603          	lw	a2,0(t1)
   1b06c:	000d8713          	mv	a4,s11
   1b070:	000d0693          	mv	a3,s10
   1b074:	040105a3          	sb	zero,75(sp)
   1b078:	00430313          	add	t1,t1,4
   1b07c:	08c10e23          	sb	a2,156(sp)
   1b080:	00100d93          	li	s11,1
   1b084:	00100893          	li	a7,1
   1b088:	09c10c13          	add	s8,sp,156
   1b08c:	c65ff06f          	j	1acf0 <_svfiprintf_r+0x19c>
   1b090:	02087613          	and	a2,a6,32
   1b094:	000d0693          	mv	a3,s10
   1b098:	000d8713          	mv	a4,s11
   1b09c:	0c060863          	beqz	a2,1b16c <_svfiprintf_r+0x618>
   1b0a0:	00730313          	add	t1,t1,7
   1b0a4:	ff837313          	and	t1,t1,-8
   1b0a8:	00432583          	lw	a1,4(t1)
   1b0ac:	00032d83          	lw	s11,0(t1)
   1b0b0:	00830313          	add	t1,t1,8
   1b0b4:	00058d13          	mv	s10,a1
   1b0b8:	0e05c063          	bltz	a1,1b198 <_svfiprintf_r+0x644>
   1b0bc:	0e04ce63          	bltz	s1,1b1b8 <_svfiprintf_r+0x664>
   1b0c0:	01ade5b3          	or	a1,s11,s10
   1b0c4:	f7f87813          	and	a6,a6,-129
   1b0c8:	0e059863          	bnez	a1,1b1b8 <_svfiprintf_r+0x664>
   1b0cc:	3a0496e3          	bnez	s1,1bc78 <_svfiprintf_r+0x1124>
   1b0d0:	00000d93          	li	s11,0
   1b0d4:	00000893          	li	a7,0
   1b0d8:	10010c13          	add	s8,sp,256
   1b0dc:	0700006f          	j	1b14c <_svfiprintf_r+0x5f8>
   1b0e0:	000d0693          	mv	a3,s10
   1b0e4:	000d8713          	mv	a4,s11
   1b0e8:	01086593          	or	a1,a6,16
   1b0ec:	0205f613          	and	a2,a1,32
   1b0f0:	7e060c63          	beqz	a2,1b8e8 <_svfiprintf_r+0xd94>
   1b0f4:	00730313          	add	t1,t1,7
   1b0f8:	ff837313          	and	t1,t1,-8
   1b0fc:	00032603          	lw	a2,0(t1)
   1b100:	00432883          	lw	a7,4(t1)
   1b104:	00830313          	add	t1,t1,8
   1b108:	040105a3          	sb	zero,75(sp)
   1b10c:	bff5f813          	and	a6,a1,-1025
   1b110:	1604c063          	bltz	s1,1b270 <_svfiprintf_r+0x71c>
   1b114:	01166533          	or	a0,a2,a7
   1b118:	b7f5f593          	and	a1,a1,-1153
   1b11c:	28051ce3          	bnez	a0,1bbb4 <_svfiprintf_r+0x1060>
   1b120:	00080893          	mv	a7,a6
   1b124:	00000613          	li	a2,0
   1b128:	00058813          	mv	a6,a1
   1b12c:	12049663          	bnez	s1,1b258 <_svfiprintf_r+0x704>
   1b130:	fa0610e3          	bnez	a2,1b0d0 <_svfiprintf_r+0x57c>
   1b134:	0018f893          	and	a7,a7,1
   1b138:	0c088ce3          	beqz	a7,1ba10 <_svfiprintf_r+0xebc>
   1b13c:	03000613          	li	a2,48
   1b140:	0ec10fa3          	sb	a2,255(sp)
   1b144:	00088d93          	mv	s11,a7
   1b148:	0ff10c13          	add	s8,sp,255
   1b14c:	04b14603          	lbu	a2,75(sp)
   1b150:	f00610e3          	bnez	a2,1b050 <_svfiprintf_r+0x4fc>
   1b154:	f01ff06f          	j	1b054 <_svfiprintf_r+0x500>
   1b158:	01086813          	or	a6,a6,16
   1b15c:	02087613          	and	a2,a6,32
   1b160:	000d0693          	mv	a3,s10
   1b164:	000d8713          	mv	a4,s11
   1b168:	f2061ce3          	bnez	a2,1b0a0 <_svfiprintf_r+0x54c>
   1b16c:	01087593          	and	a1,a6,16
   1b170:	00032603          	lw	a2,0(t1)
   1b174:	00430313          	add	t1,t1,4
   1b178:	7a059863          	bnez	a1,1b928 <_svfiprintf_r+0xdd4>
   1b17c:	04087593          	and	a1,a6,64
   1b180:	7a058063          	beqz	a1,1b920 <_svfiprintf_r+0xdcc>
   1b184:	01061d93          	sll	s11,a2,0x10
   1b188:	410ddd93          	sra	s11,s11,0x10
   1b18c:	41fddd13          	sra	s10,s11,0x1f
   1b190:	000d0593          	mv	a1,s10
   1b194:	f205d4e3          	bgez	a1,1b0bc <_svfiprintf_r+0x568>
   1b198:	02d00513          	li	a0,45
   1b19c:	01b035b3          	snez	a1,s11
   1b1a0:	41a00e33          	neg	t3,s10
   1b1a4:	04a105a3          	sb	a0,75(sp)
   1b1a8:	40be0d33          	sub	s10,t3,a1
   1b1ac:	41b00db3          	neg	s11,s11
   1b1b0:	0004c463          	bltz	s1,1b1b8 <_svfiprintf_r+0x664>
   1b1b4:	f7f87813          	and	a6,a6,-129
   1b1b8:	780d1063          	bnez	s10,1b938 <_svfiprintf_r+0xde4>
   1b1bc:	00900593          	li	a1,9
   1b1c0:	77b5ec63          	bltu	a1,s11,1b938 <_svfiprintf_r+0xde4>
   1b1c4:	030d8613          	add	a2,s11,48
   1b1c8:	0ff67613          	zext.b	a2,a2
   1b1cc:	0ec10fa3          	sb	a2,255(sp)
   1b1d0:	00048d93          	mv	s11,s1
   1b1d4:	00904463          	bgtz	s1,1b1dc <_svfiprintf_r+0x688>
   1b1d8:	00100d93          	li	s11,1
   1b1dc:	00100893          	li	a7,1
   1b1e0:	0ff10c13          	add	s8,sp,255
   1b1e4:	f69ff06f          	j	1b14c <_svfiprintf_r+0x5f8>
   1b1e8:	000bc583          	lbu	a1,0(s7)
   1b1ec:	06c00613          	li	a2,108
   1b1f0:	1cc58ae3          	beq	a1,a2,1bbc4 <_svfiprintf_r+0x1070>
   1b1f4:	01086813          	or	a6,a6,16
   1b1f8:	a85ff06f          	j	1ac7c <_svfiprintf_r+0x128>
   1b1fc:	000bc583          	lbu	a1,0(s7)
   1b200:	06800613          	li	a2,104
   1b204:	1cc588e3          	beq	a1,a2,1bbd4 <_svfiprintf_r+0x1080>
   1b208:	04086813          	or	a6,a6,64
   1b20c:	a71ff06f          	j	1ac7c <_svfiprintf_r+0x128>
   1b210:	000d0693          	mv	a3,s10
   1b214:	000d8713          	mv	a4,s11
   1b218:	01086893          	or	a7,a6,16
   1b21c:	0208f613          	and	a2,a7,32
   1b220:	68060663          	beqz	a2,1b8ac <_svfiprintf_r+0xd58>
   1b224:	00730313          	add	t1,t1,7
   1b228:	ff837313          	and	t1,t1,-8
   1b22c:	00032d83          	lw	s11,0(t1)
   1b230:	00432d03          	lw	s10,4(t1)
   1b234:	00830313          	add	t1,t1,8
   1b238:	040105a3          	sb	zero,75(sp)
   1b23c:	00088813          	mv	a6,a7
   1b240:	f604cce3          	bltz	s1,1b1b8 <_svfiprintf_r+0x664>
   1b244:	01ade5b3          	or	a1,s11,s10
   1b248:	f7f8f813          	and	a6,a7,-129
   1b24c:	00100613          	li	a2,1
   1b250:	f60594e3          	bnez	a1,1b1b8 <_svfiprintf_r+0x664>
   1b254:	ec048ee3          	beqz	s1,1b130 <_svfiprintf_r+0x5dc>
   1b258:	00100593          	li	a1,1
   1b25c:	20b60ee3          	beq	a2,a1,1bc78 <_svfiprintf_r+0x1124>
   1b260:	00200593          	li	a1,2
   1b264:	1ab60ae3          	beq	a2,a1,1bc18 <_svfiprintf_r+0x10c4>
   1b268:	00000613          	li	a2,0
   1b26c:	00000893          	li	a7,0
   1b270:	10010c13          	add	s8,sp,256
   1b274:	01d89513          	sll	a0,a7,0x1d
   1b278:	00767593          	and	a1,a2,7
   1b27c:	00365613          	srl	a2,a2,0x3
   1b280:	03058593          	add	a1,a1,48
   1b284:	00c56633          	or	a2,a0,a2
   1b288:	0038d893          	srl	a7,a7,0x3
   1b28c:	febc0fa3          	sb	a1,-1(s8)
   1b290:	01166533          	or	a0,a2,a7
   1b294:	000c0e13          	mv	t3,s8
   1b298:	fffc0c13          	add	s8,s8,-1
   1b29c:	fc051ce3          	bnez	a0,1b274 <_svfiprintf_r+0x720>
   1b2a0:	00187613          	and	a2,a6,1
   1b2a4:	46060463          	beqz	a2,1b70c <_svfiprintf_r+0xbb8>
   1b2a8:	03000613          	li	a2,48
   1b2ac:	46c58063          	beq	a1,a2,1b70c <_svfiprintf_r+0xbb8>
   1b2b0:	ffee0e13          	add	t3,t3,-2
   1b2b4:	fecc0fa3          	sb	a2,-1(s8)
   1b2b8:	10010613          	add	a2,sp,256
   1b2bc:	41c608b3          	sub	a7,a2,t3
   1b2c0:	00048d93          	mv	s11,s1
   1b2c4:	7714c863          	blt	s1,a7,1ba34 <_svfiprintf_r+0xee0>
   1b2c8:	000e0c13          	mv	s8,t3
   1b2cc:	e81ff06f          	j	1b14c <_svfiprintf_r+0x5f8>
   1b2d0:	000bc583          	lbu	a1,0(s7)
   1b2d4:	08086813          	or	a6,a6,128
   1b2d8:	9a5ff06f          	j	1ac7c <_svfiprintf_r+0x128>
   1b2dc:	000bc583          	lbu	a1,0(s7)
   1b2e0:	02a00613          	li	a2,42
   1b2e4:	001b8893          	add	a7,s7,1
   1b2e8:	1ac584e3          	beq	a1,a2,1bc90 <_svfiprintf_r+0x113c>
   1b2ec:	fd058613          	add	a2,a1,-48
   1b2f0:	00900513          	li	a0,9
   1b2f4:	00000493          	li	s1,0
   1b2f8:	00900e13          	li	t3,9
   1b2fc:	02c56463          	bltu	a0,a2,1b324 <_svfiprintf_r+0x7d0>
   1b300:	0008c583          	lbu	a1,0(a7)
   1b304:	00249513          	sll	a0,s1,0x2
   1b308:	009504b3          	add	s1,a0,s1
   1b30c:	00149493          	sll	s1,s1,0x1
   1b310:	00c484b3          	add	s1,s1,a2
   1b314:	fd058613          	add	a2,a1,-48
   1b318:	00188893          	add	a7,a7,1
   1b31c:	fece72e3          	bgeu	t3,a2,1b300 <_svfiprintf_r+0x7ac>
   1b320:	7204c063          	bltz	s1,1ba40 <_svfiprintf_r+0xeec>
   1b324:	00088b93          	mv	s7,a7
   1b328:	959ff06f          	j	1ac80 <_svfiprintf_r+0x12c>
   1b32c:	02b00613          	li	a2,43
   1b330:	000bc583          	lbu	a1,0(s7)
   1b334:	04c105a3          	sb	a2,75(sp)
   1b338:	945ff06f          	j	1ac7c <_svfiprintf_r+0x128>
   1b33c:	000a0513          	mv	a0,s4
   1b340:	00612c23          	sw	t1,24(sp)
   1b344:	01012a23          	sw	a6,20(sp)
   1b348:	00f12823          	sw	a5,16(sp)
   1b34c:	800f80ef          	jal	1334c <_localeconv_r>
   1b350:	00452783          	lw	a5,4(a0)
   1b354:	00078513          	mv	a0,a5
   1b358:	02f12623          	sw	a5,44(sp)
   1b35c:	fe1f00ef          	jal	c33c <strlen>
   1b360:	00050613          	mv	a2,a0
   1b364:	000a0513          	mv	a0,s4
   1b368:	02c12423          	sw	a2,40(sp)
   1b36c:	fe1f70ef          	jal	1334c <_localeconv_r>
   1b370:	00852783          	lw	a5,8(a0)
   1b374:	02812703          	lw	a4,40(sp)
   1b378:	01412803          	lw	a6,20(sp)
   1b37c:	02f12223          	sw	a5,36(sp)
   1b380:	01812303          	lw	t1,24(sp)
   1b384:	01012783          	lw	a5,16(sp)
   1b388:	a6070ae3          	beqz	a4,1adfc <_svfiprintf_r+0x2a8>
   1b38c:	02412703          	lw	a4,36(sp)
   1b390:	000bc583          	lbu	a1,0(s7)
   1b394:	8e0704e3          	beqz	a4,1ac7c <_svfiprintf_r+0x128>
   1b398:	00074603          	lbu	a2,0(a4)
   1b39c:	8e0600e3          	beqz	a2,1ac7c <_svfiprintf_r+0x128>
   1b3a0:	40086813          	or	a6,a6,1024
   1b3a4:	8d9ff06f          	j	1ac7c <_svfiprintf_r+0x128>
   1b3a8:	000bc583          	lbu	a1,0(s7)
   1b3ac:	00186813          	or	a6,a6,1
   1b3b0:	8cdff06f          	j	1ac7c <_svfiprintf_r+0x128>
   1b3b4:	04b14603          	lbu	a2,75(sp)
   1b3b8:	000bc583          	lbu	a1,0(s7)
   1b3bc:	8c0610e3          	bnez	a2,1ac7c <_svfiprintf_r+0x128>
   1b3c0:	02000613          	li	a2,32
   1b3c4:	04c105a3          	sb	a2,75(sp)
   1b3c8:	8b5ff06f          	j	1ac7c <_svfiprintf_r+0x128>
   1b3cc:	000085b7          	lui	a1,0x8
   1b3d0:	83058593          	add	a1,a1,-2000 # 7830 <OSSemPend+0x24>
   1b3d4:	04b11623          	sh	a1,76(sp)
   1b3d8:	00008597          	auipc	a1,0x8
   1b3dc:	cf858593          	add	a1,a1,-776 # 230d0 <OSUnMapTbl+0x16c>
   1b3e0:	00032603          	lw	a2,0(t1)
   1b3e4:	000d0693          	mv	a3,s10
   1b3e8:	000d8713          	mv	a4,s11
   1b3ec:	00000893          	li	a7,0
   1b3f0:	00286813          	or	a6,a6,2
   1b3f4:	00430313          	add	t1,t1,4
   1b3f8:	00b12623          	sw	a1,12(sp)
   1b3fc:	040105a3          	sb	zero,75(sp)
   1b400:	2c04cc63          	bltz	s1,1b6d8 <_svfiprintf_r+0xb84>
   1b404:	011665b3          	or	a1,a2,a7
   1b408:	f7f87513          	and	a0,a6,-129
   1b40c:	2c059063          	bnez	a1,1b6cc <_svfiprintf_r+0xb78>
   1b410:	00080893          	mv	a7,a6
   1b414:	00200613          	li	a2,2
   1b418:	00050813          	mv	a6,a0
   1b41c:	d11ff06f          	j	1b12c <_svfiprintf_r+0x5d8>
   1b420:	02087693          	and	a3,a6,32
   1b424:	000d8713          	mv	a4,s11
   1b428:	5e069a63          	bnez	a3,1ba1c <_svfiprintf_r+0xec8>
   1b42c:	01087693          	and	a3,a6,16
   1b430:	7a069a63          	bnez	a3,1bbe4 <_svfiprintf_r+0x1090>
   1b434:	04087693          	and	a3,a6,64
   1b438:	7e069c63          	bnez	a3,1bc30 <_svfiprintf_r+0x10dc>
   1b43c:	20087813          	and	a6,a6,512
   1b440:	7a080263          	beqz	a6,1bbe4 <_svfiprintf_r+0x1090>
   1b444:	00032683          	lw	a3,0(t1)
   1b448:	00430313          	add	t1,t1,4
   1b44c:	01968023          	sb	s9,0(a3)
   1b450:	facff06f          	j	1abfc <_svfiprintf_r+0xa8>
   1b454:	41b68d33          	sub	s10,a3,s11
   1b458:	93a050e3          	blez	s10,1ad78 <_svfiprintf_r+0x224>
   1b45c:	01000593          	li	a1,16
   1b460:	00009e97          	auipc	t4,0x9
   1b464:	89ce8e93          	add	t4,t4,-1892 # 23cfc <zeroes.0>
   1b468:	0ba5d463          	bge	a1,s10,1b510 <_svfiprintf_r+0x9bc>
   1b46c:	00912a23          	sw	s1,20(sp)
   1b470:	03712023          	sw	s7,32(sp)
   1b474:	000d0493          	mv	s1,s10
   1b478:	01000e13          	li	t3,16
   1b47c:	00700f93          	li	t6,7
   1b480:	00d12823          	sw	a3,16(sp)
   1b484:	01012c23          	sw	a6,24(sp)
   1b488:	01112e23          	sw	a7,28(sp)
   1b48c:	00030d13          	mv	s10,t1
   1b490:	000e8b93          	mv	s7,t4
   1b494:	00c0006f          	j	1b4a0 <_svfiprintf_r+0x94c>
   1b498:	ff048493          	add	s1,s1,-16
   1b49c:	049e5a63          	bge	t3,s1,1b4f0 <_svfiprintf_r+0x99c>
   1b4a0:	01070713          	add	a4,a4,16
   1b4a4:	00160613          	add	a2,a2,1
   1b4a8:	0177a023          	sw	s7,0(a5)
   1b4ac:	01c7a223          	sw	t3,4(a5)
   1b4b0:	04e12c23          	sw	a4,88(sp)
   1b4b4:	04c12a23          	sw	a2,84(sp)
   1b4b8:	00878793          	add	a5,a5,8
   1b4bc:	fccfdee3          	bge	t6,a2,1b498 <_svfiprintf_r+0x944>
   1b4c0:	05010613          	add	a2,sp,80
   1b4c4:	00090593          	mv	a1,s2
   1b4c8:	000a0513          	mv	a0,s4
   1b4cc:	c90ff0ef          	jal	1a95c <__ssprint_r>
   1b4d0:	980514e3          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1b4d4:	01000e13          	li	t3,16
   1b4d8:	ff048493          	add	s1,s1,-16
   1b4dc:	05812703          	lw	a4,88(sp)
   1b4e0:	05412603          	lw	a2,84(sp)
   1b4e4:	00098793          	mv	a5,s3
   1b4e8:	00700f93          	li	t6,7
   1b4ec:	fa9e4ae3          	blt	t3,s1,1b4a0 <_svfiprintf_r+0x94c>
   1b4f0:	000d0313          	mv	t1,s10
   1b4f4:	000b8e93          	mv	t4,s7
   1b4f8:	00048d13          	mv	s10,s1
   1b4fc:	01012683          	lw	a3,16(sp)
   1b500:	01812803          	lw	a6,24(sp)
   1b504:	01c12883          	lw	a7,28(sp)
   1b508:	01412483          	lw	s1,20(sp)
   1b50c:	02012b83          	lw	s7,32(sp)
   1b510:	01a70733          	add	a4,a4,s10
   1b514:	00160613          	add	a2,a2,1
   1b518:	01d7a023          	sw	t4,0(a5)
   1b51c:	01a7a223          	sw	s10,4(a5)
   1b520:	04e12c23          	sw	a4,88(sp)
   1b524:	04c12a23          	sw	a2,84(sp)
   1b528:	00700593          	li	a1,7
   1b52c:	00878793          	add	a5,a5,8
   1b530:	84c5d4e3          	bge	a1,a2,1ad78 <_svfiprintf_r+0x224>
   1b534:	05010613          	add	a2,sp,80
   1b538:	00090593          	mv	a1,s2
   1b53c:	000a0513          	mv	a0,s4
   1b540:	00612e23          	sw	t1,28(sp)
   1b544:	01112c23          	sw	a7,24(sp)
   1b548:	01012a23          	sw	a6,20(sp)
   1b54c:	00d12823          	sw	a3,16(sp)
   1b550:	c0cff0ef          	jal	1a95c <__ssprint_r>
   1b554:	900512e3          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1b558:	01812883          	lw	a7,24(sp)
   1b55c:	05812703          	lw	a4,88(sp)
   1b560:	05412603          	lw	a2,84(sp)
   1b564:	411484b3          	sub	s1,s1,a7
   1b568:	01c12303          	lw	t1,28(sp)
   1b56c:	01412803          	lw	a6,20(sp)
   1b570:	01012683          	lw	a3,16(sp)
   1b574:	00098793          	mv	a5,s3
   1b578:	809054e3          	blez	s1,1ad80 <_svfiprintf_r+0x22c>
   1b57c:	00008e97          	auipc	t4,0x8
   1b580:	780e8e93          	add	t4,t4,1920 # 23cfc <zeroes.0>
   1b584:	08945263          	bge	s0,s1,1b608 <_svfiprintf_r+0xab4>
   1b588:	00700d13          	li	s10,7
   1b58c:	00d12823          	sw	a3,16(sp)
   1b590:	01012a23          	sw	a6,20(sp)
   1b594:	01112c23          	sw	a7,24(sp)
   1b598:	00612e23          	sw	t1,28(sp)
   1b59c:	03512023          	sw	s5,32(sp)
   1b5a0:	00c0006f          	j	1b5ac <_svfiprintf_r+0xa58>
   1b5a4:	ff048493          	add	s1,s1,-16
   1b5a8:	04945663          	bge	s0,s1,1b5f4 <_svfiprintf_r+0xaa0>
   1b5ac:	01070713          	add	a4,a4,16
   1b5b0:	00160613          	add	a2,a2,1
   1b5b4:	0157a023          	sw	s5,0(a5)
   1b5b8:	0087a223          	sw	s0,4(a5)
   1b5bc:	04e12c23          	sw	a4,88(sp)
   1b5c0:	04c12a23          	sw	a2,84(sp)
   1b5c4:	00878793          	add	a5,a5,8
   1b5c8:	fccd5ee3          	bge	s10,a2,1b5a4 <_svfiprintf_r+0xa50>
   1b5cc:	05010613          	add	a2,sp,80
   1b5d0:	00090593          	mv	a1,s2
   1b5d4:	000a0513          	mv	a0,s4
   1b5d8:	b84ff0ef          	jal	1a95c <__ssprint_r>
   1b5dc:	86051ee3          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1b5e0:	ff048493          	add	s1,s1,-16
   1b5e4:	05812703          	lw	a4,88(sp)
   1b5e8:	05412603          	lw	a2,84(sp)
   1b5ec:	00098793          	mv	a5,s3
   1b5f0:	fa944ee3          	blt	s0,s1,1b5ac <_svfiprintf_r+0xa58>
   1b5f4:	01012683          	lw	a3,16(sp)
   1b5f8:	01412803          	lw	a6,20(sp)
   1b5fc:	01812883          	lw	a7,24(sp)
   1b600:	01c12303          	lw	t1,28(sp)
   1b604:	02012e83          	lw	t4,32(sp)
   1b608:	00970733          	add	a4,a4,s1
   1b60c:	00160613          	add	a2,a2,1
   1b610:	01d7a023          	sw	t4,0(a5)
   1b614:	0097a223          	sw	s1,4(a5)
   1b618:	04e12c23          	sw	a4,88(sp)
   1b61c:	04c12a23          	sw	a2,84(sp)
   1b620:	00700593          	li	a1,7
   1b624:	00878793          	add	a5,a5,8
   1b628:	f4c5dc63          	bge	a1,a2,1ad80 <_svfiprintf_r+0x22c>
   1b62c:	05010613          	add	a2,sp,80
   1b630:	00090593          	mv	a1,s2
   1b634:	000a0513          	mv	a0,s4
   1b638:	00612e23          	sw	t1,28(sp)
   1b63c:	01112c23          	sw	a7,24(sp)
   1b640:	01012a23          	sw	a6,20(sp)
   1b644:	00d12823          	sw	a3,16(sp)
   1b648:	b14ff0ef          	jal	1a95c <__ssprint_r>
   1b64c:	800516e3          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1b650:	05812703          	lw	a4,88(sp)
   1b654:	05412603          	lw	a2,84(sp)
   1b658:	01c12303          	lw	t1,28(sp)
   1b65c:	01812883          	lw	a7,24(sp)
   1b660:	01412803          	lw	a6,20(sp)
   1b664:	01012683          	lw	a3,16(sp)
   1b668:	00098793          	mv	a5,s3
   1b66c:	f14ff06f          	j	1ad80 <_svfiprintf_r+0x22c>
   1b670:	05010613          	add	a2,sp,80
   1b674:	00090593          	mv	a1,s2
   1b678:	000a0513          	mv	a0,s4
   1b67c:	00612c23          	sw	t1,24(sp)
   1b680:	01012a23          	sw	a6,20(sp)
   1b684:	00d12823          	sw	a3,16(sp)
   1b688:	ad4ff0ef          	jal	1a95c <__ssprint_r>
   1b68c:	fc051663          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1b690:	05812703          	lw	a4,88(sp)
   1b694:	01812303          	lw	t1,24(sp)
   1b698:	01412803          	lw	a6,20(sp)
   1b69c:	01012683          	lw	a3,16(sp)
   1b6a0:	00098793          	mv	a5,s3
   1b6a4:	f00ff06f          	j	1ada4 <_svfiprintf_r+0x250>
   1b6a8:	05010613          	add	a2,sp,80
   1b6ac:	00090593          	mv	a1,s2
   1b6b0:	000a0513          	mv	a0,s4
   1b6b4:	00612823          	sw	t1,16(sp)
   1b6b8:	aa4ff0ef          	jal	1a95c <__ssprint_r>
   1b6bc:	f8051e63          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1b6c0:	05812703          	lw	a4,88(sp)
   1b6c4:	01012303          	lw	t1,16(sp)
   1b6c8:	efcff06f          	j	1adc4 <_svfiprintf_r+0x270>
   1b6cc:	00200593          	li	a1,2
   1b6d0:	00050813          	mv	a6,a0
   1b6d4:	b8058ee3          	beqz	a1,1b270 <_svfiprintf_r+0x71c>
   1b6d8:	00c12e03          	lw	t3,12(sp)
   1b6dc:	10010c13          	add	s8,sp,256
   1b6e0:	00f67593          	and	a1,a2,15
   1b6e4:	00be05b3          	add	a1,t3,a1
   1b6e8:	0005c503          	lbu	a0,0(a1)
   1b6ec:	00465613          	srl	a2,a2,0x4
   1b6f0:	01c89593          	sll	a1,a7,0x1c
   1b6f4:	00c5e633          	or	a2,a1,a2
   1b6f8:	0048d893          	srl	a7,a7,0x4
   1b6fc:	feac0fa3          	sb	a0,-1(s8)
   1b700:	011665b3          	or	a1,a2,a7
   1b704:	fffc0c13          	add	s8,s8,-1
   1b708:	fc059ce3          	bnez	a1,1b6e0 <_svfiprintf_r+0xb8c>
   1b70c:	10010613          	add	a2,sp,256
   1b710:	418608b3          	sub	a7,a2,s8
   1b714:	00048d93          	mv	s11,s1
   1b718:	a314dae3          	bge	s1,a7,1b14c <_svfiprintf_r+0x5f8>
   1b71c:	00088d93          	mv	s11,a7
   1b720:	a2dff06f          	j	1b14c <_svfiprintf_r+0x5f8>
   1b724:	01000593          	li	a1,16
   1b728:	00008e17          	auipc	t3,0x8
   1b72c:	5c4e0e13          	add	t3,t3,1476 # 23cec <blanks.1>
   1b730:	0ba5dc63          	bge	a1,s10,1b7e8 <_svfiprintf_r+0xc94>
   1b734:	00912e23          	sw	s1,28(sp)
   1b738:	03712a23          	sw	s7,52(sp)
   1b73c:	000d0493          	mv	s1,s10
   1b740:	01000e93          	li	t4,16
   1b744:	00700393          	li	t2,7
   1b748:	01f12823          	sw	t6,16(sp)
   1b74c:	00512a23          	sw	t0,20(sp)
   1b750:	00d12c23          	sw	a3,24(sp)
   1b754:	03012023          	sw	a6,32(sp)
   1b758:	03112823          	sw	a7,48(sp)
   1b75c:	00030d13          	mv	s10,t1
   1b760:	000e0b93          	mv	s7,t3
   1b764:	00c0006f          	j	1b770 <_svfiprintf_r+0xc1c>
   1b768:	ff048493          	add	s1,s1,-16
   1b76c:	049eda63          	bge	t4,s1,1b7c0 <_svfiprintf_r+0xc6c>
   1b770:	01070713          	add	a4,a4,16
   1b774:	00160613          	add	a2,a2,1
   1b778:	0177a023          	sw	s7,0(a5)
   1b77c:	01d7a223          	sw	t4,4(a5)
   1b780:	04e12c23          	sw	a4,88(sp)
   1b784:	04c12a23          	sw	a2,84(sp)
   1b788:	00878793          	add	a5,a5,8
   1b78c:	fcc3dee3          	bge	t2,a2,1b768 <_svfiprintf_r+0xc14>
   1b790:	05010613          	add	a2,sp,80
   1b794:	00090593          	mv	a1,s2
   1b798:	000a0513          	mv	a0,s4
   1b79c:	9c0ff0ef          	jal	1a95c <__ssprint_r>
   1b7a0:	ea051c63          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1b7a4:	01000e93          	li	t4,16
   1b7a8:	ff048493          	add	s1,s1,-16
   1b7ac:	05812703          	lw	a4,88(sp)
   1b7b0:	05412603          	lw	a2,84(sp)
   1b7b4:	00098793          	mv	a5,s3
   1b7b8:	00700393          	li	t2,7
   1b7bc:	fa9ecae3          	blt	t4,s1,1b770 <_svfiprintf_r+0xc1c>
   1b7c0:	000d0313          	mv	t1,s10
   1b7c4:	000b8e13          	mv	t3,s7
   1b7c8:	00048d13          	mv	s10,s1
   1b7cc:	01012f83          	lw	t6,16(sp)
   1b7d0:	01412283          	lw	t0,20(sp)
   1b7d4:	01812683          	lw	a3,24(sp)
   1b7d8:	02012803          	lw	a6,32(sp)
   1b7dc:	03012883          	lw	a7,48(sp)
   1b7e0:	01c12483          	lw	s1,28(sp)
   1b7e4:	03412b83          	lw	s7,52(sp)
   1b7e8:	01a70733          	add	a4,a4,s10
   1b7ec:	00160613          	add	a2,a2,1
   1b7f0:	01c7a023          	sw	t3,0(a5)
   1b7f4:	01a7a223          	sw	s10,4(a5)
   1b7f8:	04e12c23          	sw	a4,88(sp)
   1b7fc:	04c12a23          	sw	a2,84(sp)
   1b800:	00700593          	li	a1,7
   1b804:	00878793          	add	a5,a5,8
   1b808:	d0c5d263          	bge	a1,a2,1ad0c <_svfiprintf_r+0x1b8>
   1b80c:	05010613          	add	a2,sp,80
   1b810:	00090593          	mv	a1,s2
   1b814:	000a0513          	mv	a0,s4
   1b818:	02612823          	sw	t1,48(sp)
   1b81c:	03112023          	sw	a7,32(sp)
   1b820:	01012e23          	sw	a6,28(sp)
   1b824:	00d12c23          	sw	a3,24(sp)
   1b828:	00512a23          	sw	t0,20(sp)
   1b82c:	01f12823          	sw	t6,16(sp)
   1b830:	92cff0ef          	jal	1a95c <__ssprint_r>
   1b834:	e2051263          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1b838:	05812703          	lw	a4,88(sp)
   1b83c:	05412603          	lw	a2,84(sp)
   1b840:	03012303          	lw	t1,48(sp)
   1b844:	02012883          	lw	a7,32(sp)
   1b848:	01c12803          	lw	a6,28(sp)
   1b84c:	01812683          	lw	a3,24(sp)
   1b850:	01412283          	lw	t0,20(sp)
   1b854:	01012f83          	lw	t6,16(sp)
   1b858:	00098793          	mv	a5,s3
   1b85c:	cb0ff06f          	j	1ad0c <_svfiprintf_r+0x1b8>
   1b860:	05010613          	add	a2,sp,80
   1b864:	00090593          	mv	a1,s2
   1b868:	000a0513          	mv	a0,s4
   1b86c:	02612023          	sw	t1,32(sp)
   1b870:	01112e23          	sw	a7,28(sp)
   1b874:	01012c23          	sw	a6,24(sp)
   1b878:	00d12a23          	sw	a3,20(sp)
   1b87c:	00512823          	sw	t0,16(sp)
   1b880:	8dcff0ef          	jal	1a95c <__ssprint_r>
   1b884:	dc051a63          	bnez	a0,1ae58 <_svfiprintf_r+0x304>
   1b888:	05812703          	lw	a4,88(sp)
   1b88c:	05412603          	lw	a2,84(sp)
   1b890:	02012303          	lw	t1,32(sp)
   1b894:	01c12883          	lw	a7,28(sp)
   1b898:	01812803          	lw	a6,24(sp)
   1b89c:	01412683          	lw	a3,20(sp)
   1b8a0:	01012283          	lw	t0,16(sp)
   1b8a4:	00098793          	mv	a5,s3
   1b8a8:	cc8ff06f          	j	1ad70 <_svfiprintf_r+0x21c>
   1b8ac:	0108f593          	and	a1,a7,16
   1b8b0:	00032603          	lw	a2,0(t1)
   1b8b4:	00430313          	add	t1,t1,4
   1b8b8:	02059263          	bnez	a1,1b8dc <_svfiprintf_r+0xd88>
   1b8bc:	0408f593          	and	a1,a7,64
   1b8c0:	00058a63          	beqz	a1,1b8d4 <_svfiprintf_r+0xd80>
   1b8c4:	01061d93          	sll	s11,a2,0x10
   1b8c8:	010ddd93          	srl	s11,s11,0x10
   1b8cc:	00000d13          	li	s10,0
   1b8d0:	969ff06f          	j	1b238 <_svfiprintf_r+0x6e4>
   1b8d4:	2008f593          	and	a1,a7,512
   1b8d8:	36059463          	bnez	a1,1bc40 <_svfiprintf_r+0x10ec>
   1b8dc:	00060d93          	mv	s11,a2
   1b8e0:	00000d13          	li	s10,0
   1b8e4:	955ff06f          	j	1b238 <_svfiprintf_r+0x6e4>
   1b8e8:	0105f513          	and	a0,a1,16
   1b8ec:	00032603          	lw	a2,0(t1)
   1b8f0:	00430313          	add	t1,t1,4
   1b8f4:	02051263          	bnez	a0,1b918 <_svfiprintf_r+0xdc4>
   1b8f8:	0405f513          	and	a0,a1,64
   1b8fc:	00050a63          	beqz	a0,1b910 <_svfiprintf_r+0xdbc>
   1b900:	01061613          	sll	a2,a2,0x10
   1b904:	01065613          	srl	a2,a2,0x10
   1b908:	00000893          	li	a7,0
   1b90c:	ffcff06f          	j	1b108 <_svfiprintf_r+0x5b4>
   1b910:	2005f513          	and	a0,a1,512
   1b914:	32051c63          	bnez	a0,1bc4c <_svfiprintf_r+0x10f8>
   1b918:	00000893          	li	a7,0
   1b91c:	fecff06f          	j	1b108 <_svfiprintf_r+0x5b4>
   1b920:	20087593          	and	a1,a6,512
   1b924:	34059063          	bnez	a1,1bc64 <_svfiprintf_r+0x1110>
   1b928:	41f65d13          	sra	s10,a2,0x1f
   1b92c:	00060d93          	mv	s11,a2
   1b930:	000d0593          	mv	a1,s10
   1b934:	f84ff06f          	j	1b0b8 <_svfiprintf_r+0x564>
   1b938:	40087613          	and	a2,a6,1024
   1b93c:	00000593          	li	a1,0
   1b940:	10010893          	add	a7,sp,256
   1b944:	00912a23          	sw	s1,20(sp)
   1b948:	03912823          	sw	s9,48(sp)
   1b94c:	03412a23          	sw	s4,52(sp)
   1b950:	03212c23          	sw	s2,56(sp)
   1b954:	02412c83          	lw	s9,36(sp)
   1b958:	00d12823          	sw	a3,16(sp)
   1b95c:	00058493          	mv	s1,a1
   1b960:	00e12c23          	sw	a4,24(sp)
   1b964:	00f12e23          	sw	a5,28(sp)
   1b968:	03012023          	sw	a6,32(sp)
   1b96c:	00060a13          	mv	s4,a2
   1b970:	00088913          	mv	s2,a7
   1b974:	02612e23          	sw	t1,60(sp)
   1b978:	0280006f          	j	1b9a0 <_svfiprintf_r+0xe4c>
   1b97c:	00a00613          	li	a2,10
   1b980:	00000693          	li	a3,0
   1b984:	000d8513          	mv	a0,s11
   1b988:	000d0593          	mv	a1,s10
   1b98c:	3c1000ef          	jal	1c54c <__udivdi3>
   1b990:	280d0a63          	beqz	s10,1bc24 <_svfiprintf_r+0x10d0>
   1b994:	00050d93          	mv	s11,a0
   1b998:	00058d13          	mv	s10,a1
   1b99c:	000c0913          	mv	s2,s8
   1b9a0:	00a00613          	li	a2,10
   1b9a4:	00000693          	li	a3,0
   1b9a8:	000d8513          	mv	a0,s11
   1b9ac:	000d0593          	mv	a1,s10
   1b9b0:	228010ef          	jal	1cbd8 <__umoddi3>
   1b9b4:	03050513          	add	a0,a0,48
   1b9b8:	fea90fa3          	sb	a0,-1(s2)
   1b9bc:	fff90c13          	add	s8,s2,-1
   1b9c0:	00148493          	add	s1,s1,1
   1b9c4:	fa0a0ce3          	beqz	s4,1b97c <_svfiprintf_r+0xe28>
   1b9c8:	000cc783          	lbu	a5,0(s9)
   1b9cc:	fa9798e3          	bne	a5,s1,1b97c <_svfiprintf_r+0xe28>
   1b9d0:	0ff00793          	li	a5,255
   1b9d4:	faf484e3          	beq	s1,a5,1b97c <_svfiprintf_r+0xe28>
   1b9d8:	180d1663          	bnez	s10,1bb64 <_svfiprintf_r+0x1010>
   1b9dc:	00900793          	li	a5,9
   1b9e0:	19b7e263          	bltu	a5,s11,1bb64 <_svfiprintf_r+0x1010>
   1b9e4:	03912223          	sw	s9,36(sp)
   1b9e8:	01012683          	lw	a3,16(sp)
   1b9ec:	01412483          	lw	s1,20(sp)
   1b9f0:	01812703          	lw	a4,24(sp)
   1b9f4:	01c12783          	lw	a5,28(sp)
   1b9f8:	02012803          	lw	a6,32(sp)
   1b9fc:	03012c83          	lw	s9,48(sp)
   1ba00:	03412a03          	lw	s4,52(sp)
   1ba04:	03812903          	lw	s2,56(sp)
   1ba08:	03c12303          	lw	t1,60(sp)
   1ba0c:	d01ff06f          	j	1b70c <_svfiprintf_r+0xbb8>
   1ba10:	00000d93          	li	s11,0
   1ba14:	10010c13          	add	s8,sp,256
   1ba18:	f34ff06f          	j	1b14c <_svfiprintf_r+0x5f8>
   1ba1c:	00032683          	lw	a3,0(t1)
   1ba20:	41fcd613          	sra	a2,s9,0x1f
   1ba24:	00430313          	add	t1,t1,4
   1ba28:	0196a023          	sw	s9,0(a3)
   1ba2c:	00c6a223          	sw	a2,4(a3)
   1ba30:	9ccff06f          	j	1abfc <_svfiprintf_r+0xa8>
   1ba34:	00088d93          	mv	s11,a7
   1ba38:	000e0c13          	mv	s8,t3
   1ba3c:	f10ff06f          	j	1b14c <_svfiprintf_r+0x5f8>
   1ba40:	fff00493          	li	s1,-1
   1ba44:	00088b93          	mv	s7,a7
   1ba48:	a38ff06f          	j	1ac80 <_svfiprintf_r+0x12c>
   1ba4c:	00007617          	auipc	a2,0x7
   1ba50:	69860613          	add	a2,a2,1688 # 230e4 <OSUnMapTbl+0x180>
   1ba54:	00c12623          	sw	a2,12(sp)
   1ba58:	02087613          	and	a2,a6,32
   1ba5c:	000d0693          	mv	a3,s10
   1ba60:	000d8713          	mv	a4,s11
   1ba64:	06060e63          	beqz	a2,1bae0 <_svfiprintf_r+0xf8c>
   1ba68:	00730313          	add	t1,t1,7
   1ba6c:	ff837313          	and	t1,t1,-8
   1ba70:	00032603          	lw	a2,0(t1)
   1ba74:	00432883          	lw	a7,4(t1)
   1ba78:	00830313          	add	t1,t1,8
   1ba7c:	00187513          	and	a0,a6,1
   1ba80:	00050e63          	beqz	a0,1ba9c <_svfiprintf_r+0xf48>
   1ba84:	01166533          	or	a0,a2,a7
   1ba88:	00050a63          	beqz	a0,1ba9c <_svfiprintf_r+0xf48>
   1ba8c:	03000513          	li	a0,48
   1ba90:	04a10623          	sb	a0,76(sp)
   1ba94:	04b106a3          	sb	a1,77(sp)
   1ba98:	00286813          	or	a6,a6,2
   1ba9c:	bff87813          	and	a6,a6,-1025
   1baa0:	95dff06f          	j	1b3fc <_svfiprintf_r+0x8a8>
   1baa4:	000d0693          	mv	a3,s10
   1baa8:	000d8713          	mv	a4,s11
   1baac:	00080593          	mv	a1,a6
   1bab0:	e3cff06f          	j	1b0ec <_svfiprintf_r+0x598>
   1bab4:	000d0693          	mv	a3,s10
   1bab8:	000d8713          	mv	a4,s11
   1babc:	00080893          	mv	a7,a6
   1bac0:	f5cff06f          	j	1b21c <_svfiprintf_r+0x6c8>
   1bac4:	00007617          	auipc	a2,0x7
   1bac8:	60c60613          	add	a2,a2,1548 # 230d0 <OSUnMapTbl+0x16c>
   1bacc:	00c12623          	sw	a2,12(sp)
   1bad0:	02087613          	and	a2,a6,32
   1bad4:	000d0693          	mv	a3,s10
   1bad8:	000d8713          	mv	a4,s11
   1badc:	f80616e3          	bnez	a2,1ba68 <_svfiprintf_r+0xf14>
   1bae0:	01087513          	and	a0,a6,16
   1bae4:	00032603          	lw	a2,0(t1)
   1bae8:	00430313          	add	t1,t1,4
   1baec:	0c051063          	bnez	a0,1bbac <_svfiprintf_r+0x1058>
   1baf0:	04087513          	and	a0,a6,64
   1baf4:	0a050863          	beqz	a0,1bba4 <_svfiprintf_r+0x1050>
   1baf8:	01061613          	sll	a2,a2,0x10
   1bafc:	01065613          	srl	a2,a2,0x10
   1bb00:	00000893          	li	a7,0
   1bb04:	f79ff06f          	j	1ba7c <_svfiprintf_r+0xf28>
   1bb08:	000c0513          	mv	a0,s8
   1bb0c:	831f00ef          	jal	c33c <strlen>
   1bb10:	01012683          	lw	a3,16(sp)
   1bb14:	01412803          	lw	a6,20(sp)
   1bb18:	01812703          	lw	a4,24(sp)
   1bb1c:	01c12783          	lw	a5,28(sp)
   1bb20:	00050893          	mv	a7,a0
   1bb24:	d0cff06f          	j	1b030 <_svfiprintf_r+0x4dc>
   1bb28:	04000593          	li	a1,64
   1bb2c:	ae5f70ef          	jal	13610 <_malloc_r>
   1bb30:	00a92023          	sw	a0,0(s2)
   1bb34:	00a92823          	sw	a0,16(s2)
   1bb38:	14050463          	beqz	a0,1bc80 <_svfiprintf_r+0x112c>
   1bb3c:	12812c23          	sw	s0,312(sp)
   1bb40:	13312623          	sw	s3,300(sp)
   1bb44:	13512223          	sw	s5,292(sp)
   1bb48:	13612023          	sw	s6,288(sp)
   1bb4c:	11912a23          	sw	s9,276(sp)
   1bb50:	11a12823          	sw	s10,272(sp)
   1bb54:	11b12623          	sw	s11,268(sp)
   1bb58:	04000793          	li	a5,64
   1bb5c:	00f92a23          	sw	a5,20(s2)
   1bb60:	850ff06f          	j	1abb0 <_svfiprintf_r+0x5c>
   1bb64:	02812783          	lw	a5,40(sp)
   1bb68:	02c12583          	lw	a1,44(sp)
   1bb6c:	00000493          	li	s1,0
   1bb70:	40fc0c33          	sub	s8,s8,a5
   1bb74:	00078613          	mv	a2,a5
   1bb78:	000c0513          	mv	a0,s8
   1bb7c:	914fa0ef          	jal	15c90 <strncpy>
   1bb80:	001cc783          	lbu	a5,1(s9)
   1bb84:	00a00613          	li	a2,10
   1bb88:	00000693          	li	a3,0
   1bb8c:	00f037b3          	snez	a5,a5
   1bb90:	000d8513          	mv	a0,s11
   1bb94:	000d0593          	mv	a1,s10
   1bb98:	00fc8cb3          	add	s9,s9,a5
   1bb9c:	1b1000ef          	jal	1c54c <__udivdi3>
   1bba0:	df5ff06f          	j	1b994 <_svfiprintf_r+0xe40>
   1bba4:	20087513          	and	a0,a6,512
   1bba8:	0a051863          	bnez	a0,1bc58 <_svfiprintf_r+0x1104>
   1bbac:	00000893          	li	a7,0
   1bbb0:	ecdff06f          	j	1ba7c <_svfiprintf_r+0xf28>
   1bbb4:	00058813          	mv	a6,a1
   1bbb8:	00000593          	li	a1,0
   1bbbc:	ea058a63          	beqz	a1,1b270 <_svfiprintf_r+0x71c>
   1bbc0:	b19ff06f          	j	1b6d8 <_svfiprintf_r+0xb84>
   1bbc4:	001bc583          	lbu	a1,1(s7)
   1bbc8:	02086813          	or	a6,a6,32
   1bbcc:	001b8b93          	add	s7,s7,1
   1bbd0:	8acff06f          	j	1ac7c <_svfiprintf_r+0x128>
   1bbd4:	001bc583          	lbu	a1,1(s7)
   1bbd8:	20086813          	or	a6,a6,512
   1bbdc:	001b8b93          	add	s7,s7,1
   1bbe0:	89cff06f          	j	1ac7c <_svfiprintf_r+0x128>
   1bbe4:	00032683          	lw	a3,0(t1)
   1bbe8:	00430313          	add	t1,t1,4
   1bbec:	0196a023          	sw	s9,0(a3)
   1bbf0:	80cff06f          	j	1abfc <_svfiprintf_r+0xa8>
   1bbf4:	00600613          	li	a2,6
   1bbf8:	00048893          	mv	a7,s1
   1bbfc:	00967463          	bgeu	a2,s1,1bc04 <_svfiprintf_r+0x10b0>
   1bc00:	00600893          	li	a7,6
   1bc04:	00088d93          	mv	s11,a7
   1bc08:	000d0313          	mv	t1,s10
   1bc0c:	00007c17          	auipc	s8,0x7
   1bc10:	4ecc0c13          	add	s8,s8,1260 # 230f8 <OSUnMapTbl+0x194>
   1bc14:	8dcff06f          	j	1acf0 <_svfiprintf_r+0x19c>
   1bc18:	00000613          	li	a2,0
   1bc1c:	00000893          	li	a7,0
   1bc20:	ab9ff06f          	j	1b6d8 <_svfiprintf_r+0xb84>
   1bc24:	00900793          	li	a5,9
   1bc28:	d7b7e6e3          	bltu	a5,s11,1b994 <_svfiprintf_r+0xe40>
   1bc2c:	db9ff06f          	j	1b9e4 <_svfiprintf_r+0xe90>
   1bc30:	00032683          	lw	a3,0(t1)
   1bc34:	00430313          	add	t1,t1,4
   1bc38:	01969023          	sh	s9,0(a3)
   1bc3c:	fc1fe06f          	j	1abfc <_svfiprintf_r+0xa8>
   1bc40:	0ff67d93          	zext.b	s11,a2
   1bc44:	00000d13          	li	s10,0
   1bc48:	df0ff06f          	j	1b238 <_svfiprintf_r+0x6e4>
   1bc4c:	0ff67613          	zext.b	a2,a2
   1bc50:	00000893          	li	a7,0
   1bc54:	cb4ff06f          	j	1b108 <_svfiprintf_r+0x5b4>
   1bc58:	0ff67613          	zext.b	a2,a2
   1bc5c:	00000893          	li	a7,0
   1bc60:	e1dff06f          	j	1ba7c <_svfiprintf_r+0xf28>
   1bc64:	01861d93          	sll	s11,a2,0x18
   1bc68:	418ddd93          	sra	s11,s11,0x18
   1bc6c:	41fddd13          	sra	s10,s11,0x1f
   1bc70:	000d0593          	mv	a1,s10
   1bc74:	c44ff06f          	j	1b0b8 <_svfiprintf_r+0x564>
   1bc78:	03000613          	li	a2,48
   1bc7c:	d50ff06f          	j	1b1cc <_svfiprintf_r+0x678>
   1bc80:	00c00793          	li	a5,12
   1bc84:	00fa2023          	sw	a5,0(s4)
   1bc88:	fff00b93          	li	s7,-1
   1bc8c:	9f8ff06f          	j	1ae84 <_svfiprintf_r+0x330>
   1bc90:	00032483          	lw	s1,0(t1)
   1bc94:	00430313          	add	t1,t1,4
   1bc98:	0004d463          	bgez	s1,1bca0 <_svfiprintf_r+0x114c>
   1bc9c:	fff00493          	li	s1,-1
   1bca0:	001bc583          	lbu	a1,1(s7)
   1bca4:	00088b93          	mv	s7,a7
   1bca8:	fd5fe06f          	j	1ac7c <_svfiprintf_r+0x128>

0001bcac <__swbuf_r>:
   1bcac:	fe010113          	add	sp,sp,-32
   1bcb0:	00812c23          	sw	s0,24(sp)
   1bcb4:	00912a23          	sw	s1,20(sp)
   1bcb8:	01212823          	sw	s2,16(sp)
   1bcbc:	00112e23          	sw	ra,28(sp)
   1bcc0:	00050913          	mv	s2,a0
   1bcc4:	00058493          	mv	s1,a1
   1bcc8:	00060413          	mv	s0,a2
   1bccc:	00050663          	beqz	a0,1bcd8 <__swbuf_r+0x2c>
   1bcd0:	03852783          	lw	a5,56(a0)
   1bcd4:	16078063          	beqz	a5,1be34 <__swbuf_r+0x188>
   1bcd8:	01842783          	lw	a5,24(s0)
   1bcdc:	00c41703          	lh	a4,12(s0)
   1bce0:	00f42423          	sw	a5,8(s0)
   1bce4:	00877793          	and	a5,a4,8
   1bce8:	08078063          	beqz	a5,1bd68 <__swbuf_r+0xbc>
   1bcec:	01042783          	lw	a5,16(s0)
   1bcf0:	06078c63          	beqz	a5,1bd68 <__swbuf_r+0xbc>
   1bcf4:	01312623          	sw	s3,12(sp)
   1bcf8:	01271693          	sll	a3,a4,0x12
   1bcfc:	0ff4f993          	zext.b	s3,s1
   1bd00:	0ff4f493          	zext.b	s1,s1
   1bd04:	0806d863          	bgez	a3,1bd94 <__swbuf_r+0xe8>
   1bd08:	00042703          	lw	a4,0(s0)
   1bd0c:	01442683          	lw	a3,20(s0)
   1bd10:	40f707b3          	sub	a5,a4,a5
   1bd14:	0ad7d863          	bge	a5,a3,1bdc4 <__swbuf_r+0x118>
   1bd18:	00842683          	lw	a3,8(s0)
   1bd1c:	00170613          	add	a2,a4,1
   1bd20:	00c42023          	sw	a2,0(s0)
   1bd24:	fff68693          	add	a3,a3,-1
   1bd28:	00d42423          	sw	a3,8(s0)
   1bd2c:	01370023          	sb	s3,0(a4)
   1bd30:	01442703          	lw	a4,20(s0)
   1bd34:	00178793          	add	a5,a5,1
   1bd38:	0cf70263          	beq	a4,a5,1bdfc <__swbuf_r+0x150>
   1bd3c:	00c45783          	lhu	a5,12(s0)
   1bd40:	0017f793          	and	a5,a5,1
   1bd44:	0c079a63          	bnez	a5,1be18 <__swbuf_r+0x16c>
   1bd48:	00c12983          	lw	s3,12(sp)
   1bd4c:	01c12083          	lw	ra,28(sp)
   1bd50:	01812403          	lw	s0,24(sp)
   1bd54:	01012903          	lw	s2,16(sp)
   1bd58:	00048513          	mv	a0,s1
   1bd5c:	01412483          	lw	s1,20(sp)
   1bd60:	02010113          	add	sp,sp,32
   1bd64:	00008067          	ret
   1bd68:	00040593          	mv	a1,s0
   1bd6c:	00090513          	mv	a0,s2
   1bd70:	8b4f30ef          	jal	ee24 <__swsetup_r>
   1bd74:	08051e63          	bnez	a0,1be10 <__swbuf_r+0x164>
   1bd78:	00c41703          	lh	a4,12(s0)
   1bd7c:	01312623          	sw	s3,12(sp)
   1bd80:	01042783          	lw	a5,16(s0)
   1bd84:	01271693          	sll	a3,a4,0x12
   1bd88:	0ff4f993          	zext.b	s3,s1
   1bd8c:	0ff4f493          	zext.b	s1,s1
   1bd90:	f606cce3          	bltz	a3,1bd08 <__swbuf_r+0x5c>
   1bd94:	06442683          	lw	a3,100(s0)
   1bd98:	ffffe637          	lui	a2,0xffffe
   1bd9c:	000025b7          	lui	a1,0x2
   1bda0:	00b76733          	or	a4,a4,a1
   1bda4:	fff60613          	add	a2,a2,-1 # ffffdfff <__alt_data_end+0xfffb4c1f>
   1bda8:	00c6f6b3          	and	a3,a3,a2
   1bdac:	00e41623          	sh	a4,12(s0)
   1bdb0:	00042703          	lw	a4,0(s0)
   1bdb4:	06d42223          	sw	a3,100(s0)
   1bdb8:	01442683          	lw	a3,20(s0)
   1bdbc:	40f707b3          	sub	a5,a4,a5
   1bdc0:	f4d7cce3          	blt	a5,a3,1bd18 <__swbuf_r+0x6c>
   1bdc4:	00040593          	mv	a1,s0
   1bdc8:	00090513          	mv	a0,s2
   1bdcc:	e98f30ef          	jal	f464 <_fflush_r>
   1bdd0:	02051e63          	bnez	a0,1be0c <__swbuf_r+0x160>
   1bdd4:	00042703          	lw	a4,0(s0)
   1bdd8:	00842683          	lw	a3,8(s0)
   1bddc:	00100793          	li	a5,1
   1bde0:	00170613          	add	a2,a4,1
   1bde4:	fff68693          	add	a3,a3,-1
   1bde8:	00c42023          	sw	a2,0(s0)
   1bdec:	00d42423          	sw	a3,8(s0)
   1bdf0:	01370023          	sb	s3,0(a4)
   1bdf4:	01442703          	lw	a4,20(s0)
   1bdf8:	f4f712e3          	bne	a4,a5,1bd3c <__swbuf_r+0x90>
   1bdfc:	00040593          	mv	a1,s0
   1be00:	00090513          	mv	a0,s2
   1be04:	e60f30ef          	jal	f464 <_fflush_r>
   1be08:	f40500e3          	beqz	a0,1bd48 <__swbuf_r+0x9c>
   1be0c:	00c12983          	lw	s3,12(sp)
   1be10:	fff00493          	li	s1,-1
   1be14:	f39ff06f          	j	1bd4c <__swbuf_r+0xa0>
   1be18:	00a00793          	li	a5,10
   1be1c:	f2f496e3          	bne	s1,a5,1bd48 <__swbuf_r+0x9c>
   1be20:	00040593          	mv	a1,s0
   1be24:	00090513          	mv	a0,s2
   1be28:	e3cf30ef          	jal	f464 <_fflush_r>
   1be2c:	f0050ee3          	beqz	a0,1bd48 <__swbuf_r+0x9c>
   1be30:	fddff06f          	j	1be0c <__swbuf_r+0x160>
   1be34:	8f1f30ef          	jal	f724 <__sinit>
   1be38:	ea1ff06f          	j	1bcd8 <__swbuf_r+0x2c>

0001be3c <__swbuf>:
   1be3c:	00058613          	mv	a2,a1
   1be40:	00050593          	mv	a1,a0
   1be44:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
   1be48:	e65ff06f          	j	1bcac <__swbuf_r>

0001be4c <_wcrtomb_r>:
   1be4c:	fe010113          	add	sp,sp,-32
   1be50:	00812c23          	sw	s0,24(sp)
   1be54:	00912a23          	sw	s1,20(sp)
   1be58:	00112e23          	sw	ra,28(sp)
   1be5c:	00050413          	mv	s0,a0
   1be60:	00068493          	mv	s1,a3
   1be64:	0000a797          	auipc	a5,0xa
   1be68:	cac7a783          	lw	a5,-852(a5) # 25b10 <__global_locale+0xe0>
   1be6c:	02058263          	beqz	a1,1be90 <_wcrtomb_r+0x44>
   1be70:	000780e7          	jalr	a5
   1be74:	fff00793          	li	a5,-1
   1be78:	02f50663          	beq	a0,a5,1bea4 <_wcrtomb_r+0x58>
   1be7c:	01c12083          	lw	ra,28(sp)
   1be80:	01812403          	lw	s0,24(sp)
   1be84:	01412483          	lw	s1,20(sp)
   1be88:	02010113          	add	sp,sp,32
   1be8c:	00008067          	ret
   1be90:	00000613          	li	a2,0
   1be94:	00410593          	add	a1,sp,4
   1be98:	000780e7          	jalr	a5
   1be9c:	fff00793          	li	a5,-1
   1bea0:	fcf51ee3          	bne	a0,a5,1be7c <_wcrtomb_r+0x30>
   1bea4:	0004a023          	sw	zero,0(s1)
   1bea8:	08a00793          	li	a5,138
   1beac:	01c12083          	lw	ra,28(sp)
   1beb0:	00f42023          	sw	a5,0(s0)
   1beb4:	01812403          	lw	s0,24(sp)
   1beb8:	01412483          	lw	s1,20(sp)
   1bebc:	02010113          	add	sp,sp,32
   1bec0:	00008067          	ret

0001bec4 <wcrtomb>:
   1bec4:	fe010113          	add	sp,sp,-32
   1bec8:	00812c23          	sw	s0,24(sp)
   1becc:	00912a23          	sw	s1,20(sp)
   1bed0:	00112e23          	sw	ra,28(sp)
   1bed4:	00060413          	mv	s0,a2
   1bed8:	8281a483          	lw	s1,-2008(gp) # 25bc4 <_impure_ptr>
   1bedc:	0000a797          	auipc	a5,0xa
   1bee0:	c347a783          	lw	a5,-972(a5) # 25b10 <__global_locale+0xe0>
   1bee4:	02050a63          	beqz	a0,1bf18 <wcrtomb+0x54>
   1bee8:	00058613          	mv	a2,a1
   1beec:	00040693          	mv	a3,s0
   1bef0:	00050593          	mv	a1,a0
   1bef4:	00048513          	mv	a0,s1
   1bef8:	000780e7          	jalr	a5
   1befc:	fff00793          	li	a5,-1
   1bf00:	02f50a63          	beq	a0,a5,1bf34 <wcrtomb+0x70>
   1bf04:	01c12083          	lw	ra,28(sp)
   1bf08:	01812403          	lw	s0,24(sp)
   1bf0c:	01412483          	lw	s1,20(sp)
   1bf10:	02010113          	add	sp,sp,32
   1bf14:	00008067          	ret
   1bf18:	00060693          	mv	a3,a2
   1bf1c:	00410593          	add	a1,sp,4
   1bf20:	00000613          	li	a2,0
   1bf24:	00048513          	mv	a0,s1
   1bf28:	000780e7          	jalr	a5
   1bf2c:	fff00793          	li	a5,-1
   1bf30:	fcf51ae3          	bne	a0,a5,1bf04 <wcrtomb+0x40>
   1bf34:	00042023          	sw	zero,0(s0)
   1bf38:	01c12083          	lw	ra,28(sp)
   1bf3c:	01812403          	lw	s0,24(sp)
   1bf40:	08a00793          	li	a5,138
   1bf44:	00f4a023          	sw	a5,0(s1)
   1bf48:	01412483          	lw	s1,20(sp)
   1bf4c:	02010113          	add	sp,sp,32
   1bf50:	00008067          	ret

0001bf54 <_wctomb_r>:
   1bf54:	0000a797          	auipc	a5,0xa
   1bf58:	bbc7a783          	lw	a5,-1092(a5) # 25b10 <__global_locale+0xe0>
   1bf5c:	00078067          	jr	a5

0001bf60 <__ascii_wctomb>:
   1bf60:	02058463          	beqz	a1,1bf88 <__ascii_wctomb+0x28>
   1bf64:	0ff00793          	li	a5,255
   1bf68:	00c7e863          	bltu	a5,a2,1bf78 <__ascii_wctomb+0x18>
   1bf6c:	00c58023          	sb	a2,0(a1) # 2000 <OS_EventTaskWaitMulti+0xd0>
   1bf70:	00100513          	li	a0,1
   1bf74:	00008067          	ret
   1bf78:	08a00793          	li	a5,138
   1bf7c:	00f52023          	sw	a5,0(a0)
   1bf80:	fff00513          	li	a0,-1
   1bf84:	00008067          	ret
   1bf88:	00000513          	li	a0,0
   1bf8c:	00008067          	ret

0001bf90 <abort>:
   1bf90:	ff010113          	add	sp,sp,-16
   1bf94:	00600513          	li	a0,6
   1bf98:	00112623          	sw	ra,12(sp)
   1bf9c:	2a8000ef          	jal	1c244 <raise>
   1bfa0:	00100513          	li	a0,1
   1bfa4:	615050ef          	jal	21db8 <_exit>

0001bfa8 <_init_signal_r>:
   1bfa8:	2dc52783          	lw	a5,732(a0)
   1bfac:	00078663          	beqz	a5,1bfb8 <_init_signal_r+0x10>
   1bfb0:	00000513          	li	a0,0
   1bfb4:	00008067          	ret
   1bfb8:	ff010113          	add	sp,sp,-16
   1bfbc:	08000593          	li	a1,128
   1bfc0:	00812423          	sw	s0,8(sp)
   1bfc4:	00112623          	sw	ra,12(sp)
   1bfc8:	00050413          	mv	s0,a0
   1bfcc:	e44f70ef          	jal	13610 <_malloc_r>
   1bfd0:	2ca42e23          	sw	a0,732(s0)
   1bfd4:	02050463          	beqz	a0,1bffc <_init_signal_r+0x54>
   1bfd8:	08050793          	add	a5,a0,128
   1bfdc:	00052023          	sw	zero,0(a0)
   1bfe0:	00450513          	add	a0,a0,4
   1bfe4:	fef51ce3          	bne	a0,a5,1bfdc <_init_signal_r+0x34>
   1bfe8:	00000513          	li	a0,0
   1bfec:	00c12083          	lw	ra,12(sp)
   1bff0:	00812403          	lw	s0,8(sp)
   1bff4:	01010113          	add	sp,sp,16
   1bff8:	00008067          	ret
   1bffc:	fff00513          	li	a0,-1
   1c000:	fedff06f          	j	1bfec <_init_signal_r+0x44>

0001c004 <_signal_r>:
   1c004:	fe010113          	add	sp,sp,-32
   1c008:	00912a23          	sw	s1,20(sp)
   1c00c:	00112e23          	sw	ra,28(sp)
   1c010:	01f00793          	li	a5,31
   1c014:	00050493          	mv	s1,a0
   1c018:	02b7ec63          	bltu	a5,a1,1c050 <_signal_r+0x4c>
   1c01c:	2dc52783          	lw	a5,732(a0)
   1c020:	00812c23          	sw	s0,24(sp)
   1c024:	00058413          	mv	s0,a1
   1c028:	02078c63          	beqz	a5,1c060 <_signal_r+0x5c>
   1c02c:	00241413          	sll	s0,s0,0x2
   1c030:	008787b3          	add	a5,a5,s0
   1c034:	01812403          	lw	s0,24(sp)
   1c038:	0007a503          	lw	a0,0(a5)
   1c03c:	00c7a023          	sw	a2,0(a5)
   1c040:	01c12083          	lw	ra,28(sp)
   1c044:	01412483          	lw	s1,20(sp)
   1c048:	02010113          	add	sp,sp,32
   1c04c:	00008067          	ret
   1c050:	01600793          	li	a5,22
   1c054:	00f52023          	sw	a5,0(a0)
   1c058:	fff00513          	li	a0,-1
   1c05c:	fe5ff06f          	j	1c040 <_signal_r+0x3c>
   1c060:	08000593          	li	a1,128
   1c064:	00c12623          	sw	a2,12(sp)
   1c068:	da8f70ef          	jal	13610 <_malloc_r>
   1c06c:	2ca4ae23          	sw	a0,732(s1)
   1c070:	00c12603          	lw	a2,12(sp)
   1c074:	00050793          	mv	a5,a0
   1c078:	00050713          	mv	a4,a0
   1c07c:	08050693          	add	a3,a0,128
   1c080:	00050a63          	beqz	a0,1c094 <_signal_r+0x90>
   1c084:	00072023          	sw	zero,0(a4)
   1c088:	00470713          	add	a4,a4,4
   1c08c:	fed71ce3          	bne	a4,a3,1c084 <_signal_r+0x80>
   1c090:	f9dff06f          	j	1c02c <_signal_r+0x28>
   1c094:	01812403          	lw	s0,24(sp)
   1c098:	fff00513          	li	a0,-1
   1c09c:	fa5ff06f          	j	1c040 <_signal_r+0x3c>

0001c0a0 <_raise_r>:
   1c0a0:	ff010113          	add	sp,sp,-16
   1c0a4:	00912223          	sw	s1,4(sp)
   1c0a8:	00112623          	sw	ra,12(sp)
   1c0ac:	01f00793          	li	a5,31
   1c0b0:	00050493          	mv	s1,a0
   1c0b4:	0ab7e063          	bltu	a5,a1,1c154 <_raise_r+0xb4>
   1c0b8:	2dc52783          	lw	a5,732(a0)
   1c0bc:	00812423          	sw	s0,8(sp)
   1c0c0:	00058413          	mv	s0,a1
   1c0c4:	04078463          	beqz	a5,1c10c <_raise_r+0x6c>
   1c0c8:	00259713          	sll	a4,a1,0x2
   1c0cc:	00e787b3          	add	a5,a5,a4
   1c0d0:	0007a703          	lw	a4,0(a5)
   1c0d4:	02070c63          	beqz	a4,1c10c <_raise_r+0x6c>
   1c0d8:	00100693          	li	a3,1
   1c0dc:	00d70c63          	beq	a4,a3,1c0f4 <_raise_r+0x54>
   1c0e0:	fff00693          	li	a3,-1
   1c0e4:	04d70863          	beq	a4,a3,1c134 <_raise_r+0x94>
   1c0e8:	0007a023          	sw	zero,0(a5)
   1c0ec:	00058513          	mv	a0,a1
   1c0f0:	000700e7          	jalr	a4
   1c0f4:	00812403          	lw	s0,8(sp)
   1c0f8:	00000513          	li	a0,0
   1c0fc:	00c12083          	lw	ra,12(sp)
   1c100:	00412483          	lw	s1,4(sp)
   1c104:	01010113          	add	sp,sp,16
   1c108:	00008067          	ret
   1c10c:	00048513          	mv	a0,s1
   1c110:	438000ef          	jal	1c548 <_getpid_r>
   1c114:	00040613          	mv	a2,s0
   1c118:	00812403          	lw	s0,8(sp)
   1c11c:	00c12083          	lw	ra,12(sp)
   1c120:	00050593          	mv	a1,a0
   1c124:	00048513          	mv	a0,s1
   1c128:	00412483          	lw	s1,4(sp)
   1c12c:	01010113          	add	sp,sp,16
   1c130:	3b80006f          	j	1c4e8 <_kill_r>
   1c134:	00812403          	lw	s0,8(sp)
   1c138:	00c12083          	lw	ra,12(sp)
   1c13c:	01600793          	li	a5,22
   1c140:	00f52023          	sw	a5,0(a0)
   1c144:	00412483          	lw	s1,4(sp)
   1c148:	00100513          	li	a0,1
   1c14c:	01010113          	add	sp,sp,16
   1c150:	00008067          	ret
   1c154:	01600793          	li	a5,22
   1c158:	00f52023          	sw	a5,0(a0)
   1c15c:	fff00513          	li	a0,-1
   1c160:	f9dff06f          	j	1c0fc <_raise_r+0x5c>

0001c164 <__sigtramp_r>:
   1c164:	01f00793          	li	a5,31
   1c168:	0cb7ea63          	bltu	a5,a1,1c23c <__sigtramp_r+0xd8>
   1c16c:	2dc52783          	lw	a5,732(a0)
   1c170:	ff010113          	add	sp,sp,-16
   1c174:	00812423          	sw	s0,8(sp)
   1c178:	00912223          	sw	s1,4(sp)
   1c17c:	00112623          	sw	ra,12(sp)
   1c180:	00058413          	mv	s0,a1
   1c184:	00050493          	mv	s1,a0
   1c188:	08078063          	beqz	a5,1c208 <__sigtramp_r+0xa4>
   1c18c:	00241713          	sll	a4,s0,0x2
   1c190:	00e787b3          	add	a5,a5,a4
   1c194:	0007a703          	lw	a4,0(a5)
   1c198:	02070c63          	beqz	a4,1c1d0 <__sigtramp_r+0x6c>
   1c19c:	fff00693          	li	a3,-1
   1c1a0:	06d70063          	beq	a4,a3,1c200 <__sigtramp_r+0x9c>
   1c1a4:	00100693          	li	a3,1
   1c1a8:	04d70063          	beq	a4,a3,1c1e8 <__sigtramp_r+0x84>
   1c1ac:	00040513          	mv	a0,s0
   1c1b0:	0007a023          	sw	zero,0(a5)
   1c1b4:	000700e7          	jalr	a4
   1c1b8:	00000513          	li	a0,0
   1c1bc:	00c12083          	lw	ra,12(sp)
   1c1c0:	00812403          	lw	s0,8(sp)
   1c1c4:	00412483          	lw	s1,4(sp)
   1c1c8:	01010113          	add	sp,sp,16
   1c1cc:	00008067          	ret
   1c1d0:	00c12083          	lw	ra,12(sp)
   1c1d4:	00812403          	lw	s0,8(sp)
   1c1d8:	00412483          	lw	s1,4(sp)
   1c1dc:	00100513          	li	a0,1
   1c1e0:	01010113          	add	sp,sp,16
   1c1e4:	00008067          	ret
   1c1e8:	00c12083          	lw	ra,12(sp)
   1c1ec:	00812403          	lw	s0,8(sp)
   1c1f0:	00412483          	lw	s1,4(sp)
   1c1f4:	00300513          	li	a0,3
   1c1f8:	01010113          	add	sp,sp,16
   1c1fc:	00008067          	ret
   1c200:	00200513          	li	a0,2
   1c204:	fb9ff06f          	j	1c1bc <__sigtramp_r+0x58>
   1c208:	08000593          	li	a1,128
   1c20c:	c04f70ef          	jal	13610 <_malloc_r>
   1c210:	2ca4ae23          	sw	a0,732(s1)
   1c214:	00050793          	mv	a5,a0
   1c218:	00050e63          	beqz	a0,1c234 <__sigtramp_r+0xd0>
   1c21c:	00050713          	mv	a4,a0
   1c220:	08050693          	add	a3,a0,128
   1c224:	00072023          	sw	zero,0(a4)
   1c228:	00470713          	add	a4,a4,4
   1c22c:	fed71ce3          	bne	a4,a3,1c224 <__sigtramp_r+0xc0>
   1c230:	f5dff06f          	j	1c18c <__sigtramp_r+0x28>
   1c234:	fff00513          	li	a0,-1
   1c238:	f85ff06f          	j	1c1bc <__sigtramp_r+0x58>
   1c23c:	fff00513          	li	a0,-1
   1c240:	00008067          	ret

0001c244 <raise>:
   1c244:	ff010113          	add	sp,sp,-16
   1c248:	00912223          	sw	s1,4(sp)
   1c24c:	00112623          	sw	ra,12(sp)
   1c250:	01f00793          	li	a5,31
   1c254:	8281a483          	lw	s1,-2008(gp) # 25bc4 <_impure_ptr>
   1c258:	08a7ee63          	bltu	a5,a0,1c2f4 <raise+0xb0>
   1c25c:	2dc4a783          	lw	a5,732(s1)
   1c260:	00812423          	sw	s0,8(sp)
   1c264:	00050413          	mv	s0,a0
   1c268:	04078263          	beqz	a5,1c2ac <raise+0x68>
   1c26c:	00251713          	sll	a4,a0,0x2
   1c270:	00e787b3          	add	a5,a5,a4
   1c274:	0007a703          	lw	a4,0(a5)
   1c278:	02070a63          	beqz	a4,1c2ac <raise+0x68>
   1c27c:	00100693          	li	a3,1
   1c280:	00d70a63          	beq	a4,a3,1c294 <raise+0x50>
   1c284:	fff00693          	li	a3,-1
   1c288:	04d70663          	beq	a4,a3,1c2d4 <raise+0x90>
   1c28c:	0007a023          	sw	zero,0(a5)
   1c290:	000700e7          	jalr	a4
   1c294:	00812403          	lw	s0,8(sp)
   1c298:	00000513          	li	a0,0
   1c29c:	00c12083          	lw	ra,12(sp)
   1c2a0:	00412483          	lw	s1,4(sp)
   1c2a4:	01010113          	add	sp,sp,16
   1c2a8:	00008067          	ret
   1c2ac:	00048513          	mv	a0,s1
   1c2b0:	298000ef          	jal	1c548 <_getpid_r>
   1c2b4:	00040613          	mv	a2,s0
   1c2b8:	00812403          	lw	s0,8(sp)
   1c2bc:	00c12083          	lw	ra,12(sp)
   1c2c0:	00050593          	mv	a1,a0
   1c2c4:	00048513          	mv	a0,s1
   1c2c8:	00412483          	lw	s1,4(sp)
   1c2cc:	01010113          	add	sp,sp,16
   1c2d0:	2180006f          	j	1c4e8 <_kill_r>
   1c2d4:	00812403          	lw	s0,8(sp)
   1c2d8:	00c12083          	lw	ra,12(sp)
   1c2dc:	01600793          	li	a5,22
   1c2e0:	00f4a023          	sw	a5,0(s1)
   1c2e4:	00100513          	li	a0,1
   1c2e8:	00412483          	lw	s1,4(sp)
   1c2ec:	01010113          	add	sp,sp,16
   1c2f0:	00008067          	ret
   1c2f4:	01600793          	li	a5,22
   1c2f8:	00f4a023          	sw	a5,0(s1)
   1c2fc:	fff00513          	li	a0,-1
   1c300:	f9dff06f          	j	1c29c <raise+0x58>

0001c304 <signal>:
   1c304:	ff010113          	add	sp,sp,-16
   1c308:	01212023          	sw	s2,0(sp)
   1c30c:	00112623          	sw	ra,12(sp)
   1c310:	01f00793          	li	a5,31
   1c314:	8281a903          	lw	s2,-2008(gp) # 25bc4 <_impure_ptr>
   1c318:	04a7e263          	bltu	a5,a0,1c35c <signal+0x58>
   1c31c:	00812423          	sw	s0,8(sp)
   1c320:	00050413          	mv	s0,a0
   1c324:	2dc92503          	lw	a0,732(s2)
   1c328:	00912223          	sw	s1,4(sp)
   1c32c:	00058493          	mv	s1,a1
   1c330:	02050e63          	beqz	a0,1c36c <signal+0x68>
   1c334:	00241413          	sll	s0,s0,0x2
   1c338:	008507b3          	add	a5,a0,s0
   1c33c:	0007a503          	lw	a0,0(a5)
   1c340:	00812403          	lw	s0,8(sp)
   1c344:	0097a023          	sw	s1,0(a5)
   1c348:	00412483          	lw	s1,4(sp)
   1c34c:	00c12083          	lw	ra,12(sp)
   1c350:	00012903          	lw	s2,0(sp)
   1c354:	01010113          	add	sp,sp,16
   1c358:	00008067          	ret
   1c35c:	01600793          	li	a5,22
   1c360:	00f92023          	sw	a5,0(s2)
   1c364:	fff00513          	li	a0,-1
   1c368:	fe5ff06f          	j	1c34c <signal+0x48>
   1c36c:	08000593          	li	a1,128
   1c370:	00090513          	mv	a0,s2
   1c374:	a9cf70ef          	jal	13610 <_malloc_r>
   1c378:	2ca92e23          	sw	a0,732(s2)
   1c37c:	00050793          	mv	a5,a0
   1c380:	08050713          	add	a4,a0,128
   1c384:	00050a63          	beqz	a0,1c398 <signal+0x94>
   1c388:	0007a023          	sw	zero,0(a5)
   1c38c:	00478793          	add	a5,a5,4
   1c390:	fef71ce3          	bne	a4,a5,1c388 <signal+0x84>
   1c394:	fa1ff06f          	j	1c334 <signal+0x30>
   1c398:	00812403          	lw	s0,8(sp)
   1c39c:	00412483          	lw	s1,4(sp)
   1c3a0:	fff00513          	li	a0,-1
   1c3a4:	fa9ff06f          	j	1c34c <signal+0x48>

0001c3a8 <_init_signal>:
   1c3a8:	ff010113          	add	sp,sp,-16
   1c3ac:	00812423          	sw	s0,8(sp)
   1c3b0:	8281a403          	lw	s0,-2008(gp) # 25bc4 <_impure_ptr>
   1c3b4:	2dc42783          	lw	a5,732(s0)
   1c3b8:	00112623          	sw	ra,12(sp)
   1c3bc:	00078c63          	beqz	a5,1c3d4 <_init_signal+0x2c>
   1c3c0:	00000513          	li	a0,0
   1c3c4:	00c12083          	lw	ra,12(sp)
   1c3c8:	00812403          	lw	s0,8(sp)
   1c3cc:	01010113          	add	sp,sp,16
   1c3d0:	00008067          	ret
   1c3d4:	08000593          	li	a1,128
   1c3d8:	00040513          	mv	a0,s0
   1c3dc:	a34f70ef          	jal	13610 <_malloc_r>
   1c3e0:	2ca42e23          	sw	a0,732(s0)
   1c3e4:	00050c63          	beqz	a0,1c3fc <_init_signal+0x54>
   1c3e8:	08050793          	add	a5,a0,128
   1c3ec:	00052023          	sw	zero,0(a0)
   1c3f0:	00450513          	add	a0,a0,4
   1c3f4:	fef51ce3          	bne	a0,a5,1c3ec <_init_signal+0x44>
   1c3f8:	fc9ff06f          	j	1c3c0 <_init_signal+0x18>
   1c3fc:	fff00513          	li	a0,-1
   1c400:	fc5ff06f          	j	1c3c4 <_init_signal+0x1c>

0001c404 <__sigtramp>:
   1c404:	ff010113          	add	sp,sp,-16
   1c408:	00912223          	sw	s1,4(sp)
   1c40c:	00112623          	sw	ra,12(sp)
   1c410:	01f00793          	li	a5,31
   1c414:	8281a483          	lw	s1,-2008(gp) # 25bc4 <_impure_ptr>
   1c418:	0ca7e463          	bltu	a5,a0,1c4e0 <__sigtramp+0xdc>
   1c41c:	2dc4a783          	lw	a5,732(s1)
   1c420:	00812423          	sw	s0,8(sp)
   1c424:	00050413          	mv	s0,a0
   1c428:	08078263          	beqz	a5,1c4ac <__sigtramp+0xa8>
   1c42c:	00241713          	sll	a4,s0,0x2
   1c430:	00e787b3          	add	a5,a5,a4
   1c434:	0007a703          	lw	a4,0(a5)
   1c438:	02070c63          	beqz	a4,1c470 <__sigtramp+0x6c>
   1c43c:	fff00693          	li	a3,-1
   1c440:	06d70063          	beq	a4,a3,1c4a0 <__sigtramp+0x9c>
   1c444:	00100693          	li	a3,1
   1c448:	04d70063          	beq	a4,a3,1c488 <__sigtramp+0x84>
   1c44c:	00040513          	mv	a0,s0
   1c450:	0007a023          	sw	zero,0(a5)
   1c454:	000700e7          	jalr	a4
   1c458:	00812403          	lw	s0,8(sp)
   1c45c:	00000513          	li	a0,0
   1c460:	00c12083          	lw	ra,12(sp)
   1c464:	00412483          	lw	s1,4(sp)
   1c468:	01010113          	add	sp,sp,16
   1c46c:	00008067          	ret
   1c470:	00812403          	lw	s0,8(sp)
   1c474:	00c12083          	lw	ra,12(sp)
   1c478:	00412483          	lw	s1,4(sp)
   1c47c:	00100513          	li	a0,1
   1c480:	01010113          	add	sp,sp,16
   1c484:	00008067          	ret
   1c488:	00812403          	lw	s0,8(sp)
   1c48c:	00c12083          	lw	ra,12(sp)
   1c490:	00412483          	lw	s1,4(sp)
   1c494:	00300513          	li	a0,3
   1c498:	01010113          	add	sp,sp,16
   1c49c:	00008067          	ret
   1c4a0:	00812403          	lw	s0,8(sp)
   1c4a4:	00200513          	li	a0,2
   1c4a8:	fb9ff06f          	j	1c460 <__sigtramp+0x5c>
   1c4ac:	08000593          	li	a1,128
   1c4b0:	00048513          	mv	a0,s1
   1c4b4:	95cf70ef          	jal	13610 <_malloc_r>
   1c4b8:	2ca4ae23          	sw	a0,732(s1)
   1c4bc:	00050793          	mv	a5,a0
   1c4c0:	00050e63          	beqz	a0,1c4dc <__sigtramp+0xd8>
   1c4c4:	00050713          	mv	a4,a0
   1c4c8:	08050693          	add	a3,a0,128
   1c4cc:	00072023          	sw	zero,0(a4)
   1c4d0:	00470713          	add	a4,a4,4
   1c4d4:	fee69ce3          	bne	a3,a4,1c4cc <__sigtramp+0xc8>
   1c4d8:	f55ff06f          	j	1c42c <__sigtramp+0x28>
   1c4dc:	00812403          	lw	s0,8(sp)
   1c4e0:	fff00513          	li	a0,-1
   1c4e4:	f7dff06f          	j	1c460 <__sigtramp+0x5c>

0001c4e8 <_kill_r>:
   1c4e8:	ff010113          	add	sp,sp,-16
   1c4ec:	00058713          	mv	a4,a1
   1c4f0:	00812423          	sw	s0,8(sp)
   1c4f4:	00060593          	mv	a1,a2
   1c4f8:	00050413          	mv	s0,a0
   1c4fc:	00070513          	mv	a0,a4
   1c500:	0000b797          	auipc	a5,0xb
   1c504:	3607a023          	sw	zero,864(a5) # 27860 <errno>
   1c508:	00112623          	sw	ra,12(sp)
   1c50c:	369050ef          	jal	22074 <_kill>
   1c510:	fff00793          	li	a5,-1
   1c514:	00f50a63          	beq	a0,a5,1c528 <_kill_r+0x40>
   1c518:	00c12083          	lw	ra,12(sp)
   1c51c:	00812403          	lw	s0,8(sp)
   1c520:	01010113          	add	sp,sp,16
   1c524:	00008067          	ret
   1c528:	0000b797          	auipc	a5,0xb
   1c52c:	3387a783          	lw	a5,824(a5) # 27860 <errno>
   1c530:	fe0784e3          	beqz	a5,1c518 <_kill_r+0x30>
   1c534:	00c12083          	lw	ra,12(sp)
   1c538:	00f42023          	sw	a5,0(s0)
   1c53c:	00812403          	lw	s0,8(sp)
   1c540:	01010113          	add	sp,sp,16
   1c544:	00008067          	ret

0001c548 <_getpid_r>:
   1c548:	1b90506f          	j	21f00 <_getpid>

0001c54c <__udivdi3>:
   1c54c:	fd010113          	add	sp,sp,-48
   1c550:	01312e23          	sw	s3,28(sp)
   1c554:	02112623          	sw	ra,44(sp)
   1c558:	01612823          	sw	s6,16(sp)
   1c55c:	00050993          	mv	s3,a0
   1c560:	16069663          	bnez	a3,1c6cc <__udivdi3+0x180>
   1c564:	02912223          	sw	s1,36(sp)
   1c568:	01512a23          	sw	s5,20(sp)
   1c56c:	02812423          	sw	s0,40(sp)
   1c570:	03212023          	sw	s2,32(sp)
   1c574:	01412c23          	sw	s4,24(sp)
   1c578:	00060a93          	mv	s5,a2
   1c57c:	00050493          	mv	s1,a0
   1c580:	1cc5f063          	bgeu	a1,a2,1c740 <__udivdi3+0x1f4>
   1c584:	000107b7          	lui	a5,0x10
   1c588:	00058913          	mv	s2,a1
   1c58c:	2af66e63          	bltu	a2,a5,1c848 <__udivdi3+0x2fc>
   1c590:	010007b7          	lui	a5,0x1000
   1c594:	01800713          	li	a4,24
   1c598:	00f67463          	bgeu	a2,a5,1c5a0 <__udivdi3+0x54>
   1c59c:	01000713          	li	a4,16
   1c5a0:	000247b7          	lui	a5,0x24
   1c5a4:	00e656b3          	srl	a3,a2,a4
   1c5a8:	e5078793          	add	a5,a5,-432 # 23e50 <__clz_tab>
   1c5ac:	00d787b3          	add	a5,a5,a3
   1c5b0:	0007c783          	lbu	a5,0(a5)
   1c5b4:	02000693          	li	a3,32
   1c5b8:	00e787b3          	add	a5,a5,a4
   1c5bc:	40f68733          	sub	a4,a3,a5
   1c5c0:	00f68c63          	beq	a3,a5,1c5d8 <__udivdi3+0x8c>
   1c5c4:	00e59933          	sll	s2,a1,a4
   1c5c8:	00f9d7b3          	srl	a5,s3,a5
   1c5cc:	00e61ab3          	sll	s5,a2,a4
   1c5d0:	0127e933          	or	s2,a5,s2
   1c5d4:	00e994b3          	sll	s1,s3,a4
   1c5d8:	010ada13          	srl	s4,s5,0x10
   1c5dc:	000a0593          	mv	a1,s4
   1c5e0:	00090513          	mv	a0,s2
   1c5e4:	010a9b13          	sll	s6,s5,0x10
   1c5e8:	578050ef          	jal	21b60 <__hidden___udivsi3>
   1c5ec:	010b5b13          	srl	s6,s6,0x10
   1c5f0:	00050593          	mv	a1,a0
   1c5f4:	00050413          	mv	s0,a0
   1c5f8:	000b0513          	mv	a0,s6
   1c5fc:	538050ef          	jal	21b34 <__mulsi3>
   1c600:	00050793          	mv	a5,a0
   1c604:	000a0593          	mv	a1,s4
   1c608:	00090513          	mv	a0,s2
   1c60c:	00078913          	mv	s2,a5
   1c610:	598050ef          	jal	21ba8 <__umodsi3>
   1c614:	01051513          	sll	a0,a0,0x10
   1c618:	0104d793          	srl	a5,s1,0x10
   1c61c:	00a7e7b3          	or	a5,a5,a0
   1c620:	0127fc63          	bgeu	a5,s2,1c638 <__udivdi3+0xec>
   1c624:	00fa87b3          	add	a5,s5,a5
   1c628:	fff40713          	add	a4,s0,-1
   1c62c:	0157e463          	bltu	a5,s5,1c634 <__udivdi3+0xe8>
   1c630:	5927e863          	bltu	a5,s2,1cbc0 <__udivdi3+0x674>
   1c634:	00070413          	mv	s0,a4
   1c638:	41278933          	sub	s2,a5,s2
   1c63c:	000a0593          	mv	a1,s4
   1c640:	00090513          	mv	a0,s2
   1c644:	51c050ef          	jal	21b60 <__hidden___udivsi3>
   1c648:	00050593          	mv	a1,a0
   1c64c:	00050993          	mv	s3,a0
   1c650:	000b0513          	mv	a0,s6
   1c654:	4e0050ef          	jal	21b34 <__mulsi3>
   1c658:	00050793          	mv	a5,a0
   1c65c:	000a0593          	mv	a1,s4
   1c660:	00090513          	mv	a0,s2
   1c664:	01049493          	sll	s1,s1,0x10
   1c668:	00078913          	mv	s2,a5
   1c66c:	53c050ef          	jal	21ba8 <__umodsi3>
   1c670:	01051513          	sll	a0,a0,0x10
   1c674:	0104d493          	srl	s1,s1,0x10
   1c678:	00a4e4b3          	or	s1,s1,a0
   1c67c:	0124fc63          	bgeu	s1,s2,1c694 <__udivdi3+0x148>
   1c680:	009a84b3          	add	s1,s5,s1
   1c684:	fff98793          	add	a5,s3,-1
   1c688:	2f54ec63          	bltu	s1,s5,1c980 <__udivdi3+0x434>
   1c68c:	ffe98993          	add	s3,s3,-2
   1c690:	2f24f863          	bgeu	s1,s2,1c980 <__udivdi3+0x434>
   1c694:	01041413          	sll	s0,s0,0x10
   1c698:	01346533          	or	a0,s0,s3
   1c69c:	00000b13          	li	s6,0
   1c6a0:	02812403          	lw	s0,40(sp)
   1c6a4:	02c12083          	lw	ra,44(sp)
   1c6a8:	02412483          	lw	s1,36(sp)
   1c6ac:	02012903          	lw	s2,32(sp)
   1c6b0:	01812a03          	lw	s4,24(sp)
   1c6b4:	01412a83          	lw	s5,20(sp)
   1c6b8:	01c12983          	lw	s3,28(sp)
   1c6bc:	000b0593          	mv	a1,s6
   1c6c0:	01012b03          	lw	s6,16(sp)
   1c6c4:	03010113          	add	sp,sp,48
   1c6c8:	00008067          	ret
   1c6cc:	02d5f263          	bgeu	a1,a3,1c6f0 <__udivdi3+0x1a4>
   1c6d0:	00000b13          	li	s6,0
   1c6d4:	00000513          	li	a0,0
   1c6d8:	02c12083          	lw	ra,44(sp)
   1c6dc:	01c12983          	lw	s3,28(sp)
   1c6e0:	000b0593          	mv	a1,s6
   1c6e4:	01012b03          	lw	s6,16(sp)
   1c6e8:	03010113          	add	sp,sp,48
   1c6ec:	00008067          	ret
   1c6f0:	000107b7          	lui	a5,0x10
   1c6f4:	26f6ee63          	bltu	a3,a5,1c970 <__udivdi3+0x424>
   1c6f8:	010007b7          	lui	a5,0x1000
   1c6fc:	01800513          	li	a0,24
   1c700:	00f6f463          	bgeu	a3,a5,1c708 <__udivdi3+0x1bc>
   1c704:	01000513          	li	a0,16
   1c708:	000247b7          	lui	a5,0x24
   1c70c:	00a6d733          	srl	a4,a3,a0
   1c710:	e5078793          	add	a5,a5,-432 # 23e50 <__clz_tab>
   1c714:	00e787b3          	add	a5,a5,a4
   1c718:	0007c703          	lbu	a4,0(a5)
   1c71c:	02000793          	li	a5,32
   1c720:	00a70733          	add	a4,a4,a0
   1c724:	40e78b33          	sub	s6,a5,a4
   1c728:	26e79063          	bne	a5,a4,1c988 <__udivdi3+0x43c>
   1c72c:	44b6ee63          	bltu	a3,a1,1cb88 <__udivdi3+0x63c>
   1c730:	00c9b533          	sltu	a0,s3,a2
   1c734:	00153513          	seqz	a0,a0
   1c738:	00000b13          	li	s6,0
   1c73c:	f9dff06f          	j	1c6d8 <__udivdi3+0x18c>
   1c740:	10060c63          	beqz	a2,1c858 <__udivdi3+0x30c>
   1c744:	000107b7          	lui	a5,0x10
   1c748:	42f67663          	bgeu	a2,a5,1cb74 <__udivdi3+0x628>
   1c74c:	10063713          	sltiu	a4,a2,256
   1c750:	00173713          	seqz	a4,a4
   1c754:	00371713          	sll	a4,a4,0x3
   1c758:	00e656b3          	srl	a3,a2,a4
   1c75c:	000247b7          	lui	a5,0x24
   1c760:	e5078793          	add	a5,a5,-432 # 23e50 <__clz_tab>
   1c764:	00d787b3          	add	a5,a5,a3
   1c768:	0007c403          	lbu	s0,0(a5)
   1c76c:	02000793          	li	a5,32
   1c770:	00e40433          	add	s0,s0,a4
   1c774:	40878733          	sub	a4,a5,s0
   1c778:	10879463          	bne	a5,s0,1c880 <__udivdi3+0x334>
   1c77c:	01061993          	sll	s3,a2,0x10
   1c780:	40c58433          	sub	s0,a1,a2
   1c784:	01065913          	srl	s2,a2,0x10
   1c788:	0109d993          	srl	s3,s3,0x10
   1c78c:	00100b13          	li	s6,1
   1c790:	00090593          	mv	a1,s2
   1c794:	00040513          	mv	a0,s0
   1c798:	3c8050ef          	jal	21b60 <__hidden___udivsi3>
   1c79c:	00098593          	mv	a1,s3
   1c7a0:	00050a13          	mv	s4,a0
   1c7a4:	390050ef          	jal	21b34 <__mulsi3>
   1c7a8:	00050793          	mv	a5,a0
   1c7ac:	00090593          	mv	a1,s2
   1c7b0:	00040513          	mv	a0,s0
   1c7b4:	00078413          	mv	s0,a5
   1c7b8:	3f0050ef          	jal	21ba8 <__umodsi3>
   1c7bc:	01051513          	sll	a0,a0,0x10
   1c7c0:	0104d713          	srl	a4,s1,0x10
   1c7c4:	00a76733          	or	a4,a4,a0
   1c7c8:	00877c63          	bgeu	a4,s0,1c7e0 <__udivdi3+0x294>
   1c7cc:	00ea8733          	add	a4,s5,a4
   1c7d0:	fffa0793          	add	a5,s4,-1
   1c7d4:	01576463          	bltu	a4,s5,1c7dc <__udivdi3+0x290>
   1c7d8:	3c876e63          	bltu	a4,s0,1cbb4 <__udivdi3+0x668>
   1c7dc:	00078a13          	mv	s4,a5
   1c7e0:	40870433          	sub	s0,a4,s0
   1c7e4:	00090593          	mv	a1,s2
   1c7e8:	00040513          	mv	a0,s0
   1c7ec:	374050ef          	jal	21b60 <__hidden___udivsi3>
   1c7f0:	00098593          	mv	a1,s3
   1c7f4:	00050993          	mv	s3,a0
   1c7f8:	33c050ef          	jal	21b34 <__mulsi3>
   1c7fc:	00050793          	mv	a5,a0
   1c800:	00090593          	mv	a1,s2
   1c804:	00040513          	mv	a0,s0
   1c808:	01049493          	sll	s1,s1,0x10
   1c80c:	00078413          	mv	s0,a5
   1c810:	398050ef          	jal	21ba8 <__umodsi3>
   1c814:	01051513          	sll	a0,a0,0x10
   1c818:	0104d493          	srl	s1,s1,0x10
   1c81c:	00a4e4b3          	or	s1,s1,a0
   1c820:	0084fe63          	bgeu	s1,s0,1c83c <__udivdi3+0x2f0>
   1c824:	009a84b3          	add	s1,s5,s1
   1c828:	fff98793          	add	a5,s3,-1
   1c82c:	0154e663          	bltu	s1,s5,1c838 <__udivdi3+0x2ec>
   1c830:	ffe98993          	add	s3,s3,-2
   1c834:	0084e463          	bltu	s1,s0,1c83c <__udivdi3+0x2f0>
   1c838:	00078993          	mv	s3,a5
   1c83c:	010a1793          	sll	a5,s4,0x10
   1c840:	0137e533          	or	a0,a5,s3
   1c844:	e5dff06f          	j	1c6a0 <__udivdi3+0x154>
   1c848:	10063713          	sltiu	a4,a2,256
   1c84c:	00173713          	seqz	a4,a4
   1c850:	00371713          	sll	a4,a4,0x3
   1c854:	d4dff06f          	j	1c5a0 <__udivdi3+0x54>
   1c858:	000247b7          	lui	a5,0x24
   1c85c:	00000693          	li	a3,0
   1c860:	e5078793          	add	a5,a5,-432 # 23e50 <__clz_tab>
   1c864:	00d787b3          	add	a5,a5,a3
   1c868:	0007c403          	lbu	s0,0(a5)
   1c86c:	00000713          	li	a4,0
   1c870:	02000793          	li	a5,32
   1c874:	00e40433          	add	s0,s0,a4
   1c878:	40878733          	sub	a4,a5,s0
   1c87c:	f08780e3          	beq	a5,s0,1c77c <__udivdi3+0x230>
   1c880:	00e61ab3          	sll	s5,a2,a4
   1c884:	01712623          	sw	s7,12(sp)
   1c888:	010ad913          	srl	s2,s5,0x10
   1c88c:	0085dbb3          	srl	s7,a1,s0
   1c890:	00e597b3          	sll	a5,a1,a4
   1c894:	00e994b3          	sll	s1,s3,a4
   1c898:	0089d433          	srl	s0,s3,s0
   1c89c:	00090593          	mv	a1,s2
   1c8a0:	000b8513          	mv	a0,s7
   1c8a4:	010a9993          	sll	s3,s5,0x10
   1c8a8:	00f46433          	or	s0,s0,a5
   1c8ac:	0109d993          	srl	s3,s3,0x10
   1c8b0:	2b0050ef          	jal	21b60 <__hidden___udivsi3>
   1c8b4:	00050593          	mv	a1,a0
   1c8b8:	00050b13          	mv	s6,a0
   1c8bc:	00098513          	mv	a0,s3
   1c8c0:	274050ef          	jal	21b34 <__mulsi3>
   1c8c4:	00050a13          	mv	s4,a0
   1c8c8:	00090593          	mv	a1,s2
   1c8cc:	000b8513          	mv	a0,s7
   1c8d0:	2d8050ef          	jal	21ba8 <__umodsi3>
   1c8d4:	01051513          	sll	a0,a0,0x10
   1c8d8:	01045793          	srl	a5,s0,0x10
   1c8dc:	00a7e7b3          	or	a5,a5,a0
   1c8e0:	0147fe63          	bgeu	a5,s4,1c8fc <__udivdi3+0x3b0>
   1c8e4:	00fa87b3          	add	a5,s5,a5
   1c8e8:	fffb0713          	add	a4,s6,-1
   1c8ec:	2b57ec63          	bltu	a5,s5,1cba4 <__udivdi3+0x658>
   1c8f0:	2b47fa63          	bgeu	a5,s4,1cba4 <__udivdi3+0x658>
   1c8f4:	ffeb0b13          	add	s6,s6,-2
   1c8f8:	015787b3          	add	a5,a5,s5
   1c8fc:	41478a33          	sub	s4,a5,s4
   1c900:	00090593          	mv	a1,s2
   1c904:	000a0513          	mv	a0,s4
   1c908:	258050ef          	jal	21b60 <__hidden___udivsi3>
   1c90c:	00050593          	mv	a1,a0
   1c910:	00050b93          	mv	s7,a0
   1c914:	00098513          	mv	a0,s3
   1c918:	21c050ef          	jal	21b34 <__mulsi3>
   1c91c:	00050793          	mv	a5,a0
   1c920:	00090593          	mv	a1,s2
   1c924:	000a0513          	mv	a0,s4
   1c928:	01041413          	sll	s0,s0,0x10
   1c92c:	00078a13          	mv	s4,a5
   1c930:	278050ef          	jal	21ba8 <__umodsi3>
   1c934:	01051513          	sll	a0,a0,0x10
   1c938:	01045413          	srl	s0,s0,0x10
   1c93c:	00a46433          	or	s0,s0,a0
   1c940:	01447e63          	bgeu	s0,s4,1c95c <__udivdi3+0x410>
   1c944:	008a8433          	add	s0,s5,s0
   1c948:	fffb8793          	add	a5,s7,-1
   1c94c:	25546463          	bltu	s0,s5,1cb94 <__udivdi3+0x648>
   1c950:	25447263          	bgeu	s0,s4,1cb94 <__udivdi3+0x648>
   1c954:	ffeb8b93          	add	s7,s7,-2
   1c958:	01540433          	add	s0,s0,s5
   1c95c:	010b1b13          	sll	s6,s6,0x10
   1c960:	017b6b33          	or	s6,s6,s7
   1c964:	41440433          	sub	s0,s0,s4
   1c968:	00c12b83          	lw	s7,12(sp)
   1c96c:	e25ff06f          	j	1c790 <__udivdi3+0x244>
   1c970:	1006b513          	sltiu	a0,a3,256
   1c974:	00153513          	seqz	a0,a0
   1c978:	00351513          	sll	a0,a0,0x3
   1c97c:	d8dff06f          	j	1c708 <__udivdi3+0x1bc>
   1c980:	00078993          	mv	s3,a5
   1c984:	d11ff06f          	j	1c694 <__udivdi3+0x148>
   1c988:	016696b3          	sll	a3,a3,s6
   1c98c:	01912223          	sw	s9,4(sp)
   1c990:	00e65cb3          	srl	s9,a2,a4
   1c994:	00dcecb3          	or	s9,s9,a3
   1c998:	01512a23          	sw	s5,20(sp)
   1c99c:	01712623          	sw	s7,12(sp)
   1c9a0:	010cda93          	srl	s5,s9,0x10
   1c9a4:	00e5dbb3          	srl	s7,a1,a4
   1c9a8:	016597b3          	sll	a5,a1,s6
   1c9ac:	00e9d733          	srl	a4,s3,a4
   1c9b0:	01812423          	sw	s8,8(sp)
   1c9b4:	000a8593          	mv	a1,s5
   1c9b8:	000b8513          	mv	a0,s7
   1c9bc:	010c9c13          	sll	s8,s9,0x10
   1c9c0:	02812423          	sw	s0,40(sp)
   1c9c4:	02912223          	sw	s1,36(sp)
   1c9c8:	03212023          	sw	s2,32(sp)
   1c9cc:	00f764b3          	or	s1,a4,a5
   1c9d0:	01661933          	sll	s2,a2,s6
   1c9d4:	01412c23          	sw	s4,24(sp)
   1c9d8:	010c5c13          	srl	s8,s8,0x10
   1c9dc:	184050ef          	jal	21b60 <__hidden___udivsi3>
   1c9e0:	00050593          	mv	a1,a0
   1c9e4:	00050413          	mv	s0,a0
   1c9e8:	000c0513          	mv	a0,s8
   1c9ec:	148050ef          	jal	21b34 <__mulsi3>
   1c9f0:	00050a13          	mv	s4,a0
   1c9f4:	000a8593          	mv	a1,s5
   1c9f8:	000b8513          	mv	a0,s7
   1c9fc:	1ac050ef          	jal	21ba8 <__umodsi3>
   1ca00:	01051513          	sll	a0,a0,0x10
   1ca04:	0104d793          	srl	a5,s1,0x10
   1ca08:	00a7e7b3          	or	a5,a5,a0
   1ca0c:	0147fe63          	bgeu	a5,s4,1ca28 <__udivdi3+0x4dc>
   1ca10:	00fc87b3          	add	a5,s9,a5
   1ca14:	fff40713          	add	a4,s0,-1
   1ca18:	1997ea63          	bltu	a5,s9,1cbac <__udivdi3+0x660>
   1ca1c:	1947f863          	bgeu	a5,s4,1cbac <__udivdi3+0x660>
   1ca20:	ffe40413          	add	s0,s0,-2
   1ca24:	019787b3          	add	a5,a5,s9
   1ca28:	41478a33          	sub	s4,a5,s4
   1ca2c:	000a8593          	mv	a1,s5
   1ca30:	000a0513          	mv	a0,s4
   1ca34:	12c050ef          	jal	21b60 <__hidden___udivsi3>
   1ca38:	00050593          	mv	a1,a0
   1ca3c:	00050b93          	mv	s7,a0
   1ca40:	000c0513          	mv	a0,s8
   1ca44:	0f0050ef          	jal	21b34 <__mulsi3>
   1ca48:	00050793          	mv	a5,a0
   1ca4c:	000a8593          	mv	a1,s5
   1ca50:	000a0513          	mv	a0,s4
   1ca54:	00078a13          	mv	s4,a5
   1ca58:	150050ef          	jal	21ba8 <__umodsi3>
   1ca5c:	01049713          	sll	a4,s1,0x10
   1ca60:	01051513          	sll	a0,a0,0x10
   1ca64:	01075713          	srl	a4,a4,0x10
   1ca68:	00a76733          	or	a4,a4,a0
   1ca6c:	01477e63          	bgeu	a4,s4,1ca88 <__udivdi3+0x53c>
   1ca70:	00ec8733          	add	a4,s9,a4
   1ca74:	fffb8793          	add	a5,s7,-1
   1ca78:	13976263          	bltu	a4,s9,1cb9c <__udivdi3+0x650>
   1ca7c:	13477063          	bgeu	a4,s4,1cb9c <__udivdi3+0x650>
   1ca80:	ffeb8b93          	add	s7,s7,-2
   1ca84:	01970733          	add	a4,a4,s9
   1ca88:	00010e37          	lui	t3,0x10
   1ca8c:	01041413          	sll	s0,s0,0x10
   1ca90:	01746433          	or	s0,s0,s7
   1ca94:	fffe0793          	add	a5,t3,-1 # ffff <__sfvwrite_r+0x9b>
   1ca98:	00f47833          	and	a6,s0,a5
   1ca9c:	00f977b3          	and	a5,s2,a5
   1caa0:	41470733          	sub	a4,a4,s4
   1caa4:	01045e93          	srl	t4,s0,0x10
   1caa8:	01095913          	srl	s2,s2,0x10
   1caac:	00080513          	mv	a0,a6
   1cab0:	00078593          	mv	a1,a5
   1cab4:	080050ef          	jal	21b34 <__mulsi3>
   1cab8:	00050313          	mv	t1,a0
   1cabc:	00090593          	mv	a1,s2
   1cac0:	00080513          	mv	a0,a6
   1cac4:	070050ef          	jal	21b34 <__mulsi3>
   1cac8:	00050813          	mv	a6,a0
   1cacc:	00078593          	mv	a1,a5
   1cad0:	000e8513          	mv	a0,t4
   1cad4:	060050ef          	jal	21b34 <__mulsi3>
   1cad8:	00050893          	mv	a7,a0
   1cadc:	00090593          	mv	a1,s2
   1cae0:	000e8513          	mv	a0,t4
   1cae4:	050050ef          	jal	21b34 <__mulsi3>
   1cae8:	01035793          	srl	a5,t1,0x10
   1caec:	01180833          	add	a6,a6,a7
   1caf0:	010787b3          	add	a5,a5,a6
   1caf4:	0117f463          	bgeu	a5,a7,1cafc <__udivdi3+0x5b0>
   1caf8:	01c50533          	add	a0,a0,t3
   1cafc:	0107d693          	srl	a3,a5,0x10
   1cb00:	00a686b3          	add	a3,a3,a0
   1cb04:	06d76463          	bltu	a4,a3,1cb6c <__udivdi3+0x620>
   1cb08:	04d70263          	beq	a4,a3,1cb4c <__udivdi3+0x600>
   1cb0c:	00040513          	mv	a0,s0
   1cb10:	02812403          	lw	s0,40(sp)
   1cb14:	02c12083          	lw	ra,44(sp)
   1cb18:	00000b13          	li	s6,0
   1cb1c:	02412483          	lw	s1,36(sp)
   1cb20:	02012903          	lw	s2,32(sp)
   1cb24:	01812a03          	lw	s4,24(sp)
   1cb28:	01412a83          	lw	s5,20(sp)
   1cb2c:	00c12b83          	lw	s7,12(sp)
   1cb30:	00812c03          	lw	s8,8(sp)
   1cb34:	00412c83          	lw	s9,4(sp)
   1cb38:	01c12983          	lw	s3,28(sp)
   1cb3c:	000b0593          	mv	a1,s6
   1cb40:	01012b03          	lw	s6,16(sp)
   1cb44:	03010113          	add	sp,sp,48
   1cb48:	00008067          	ret
   1cb4c:	00010737          	lui	a4,0x10
   1cb50:	fff70713          	add	a4,a4,-1 # ffff <__sfvwrite_r+0x9b>
   1cb54:	00e7f7b3          	and	a5,a5,a4
   1cb58:	01079793          	sll	a5,a5,0x10
   1cb5c:	00e37333          	and	t1,t1,a4
   1cb60:	01699533          	sll	a0,s3,s6
   1cb64:	006787b3          	add	a5,a5,t1
   1cb68:	faf572e3          	bgeu	a0,a5,1cb0c <__udivdi3+0x5c0>
   1cb6c:	fff40513          	add	a0,s0,-1
   1cb70:	fa1ff06f          	j	1cb10 <__udivdi3+0x5c4>
   1cb74:	010007b7          	lui	a5,0x1000
   1cb78:	04f67a63          	bgeu	a2,a5,1cbcc <__udivdi3+0x680>
   1cb7c:	01065693          	srl	a3,a2,0x10
   1cb80:	01000713          	li	a4,16
   1cb84:	bd9ff06f          	j	1c75c <__udivdi3+0x210>
   1cb88:	00000b13          	li	s6,0
   1cb8c:	00100513          	li	a0,1
   1cb90:	b49ff06f          	j	1c6d8 <__udivdi3+0x18c>
   1cb94:	00078b93          	mv	s7,a5
   1cb98:	dc5ff06f          	j	1c95c <__udivdi3+0x410>
   1cb9c:	00078b93          	mv	s7,a5
   1cba0:	ee9ff06f          	j	1ca88 <__udivdi3+0x53c>
   1cba4:	00070b13          	mv	s6,a4
   1cba8:	d55ff06f          	j	1c8fc <__udivdi3+0x3b0>
   1cbac:	00070413          	mv	s0,a4
   1cbb0:	e79ff06f          	j	1ca28 <__udivdi3+0x4dc>
   1cbb4:	ffea0a13          	add	s4,s4,-2
   1cbb8:	01570733          	add	a4,a4,s5
   1cbbc:	c25ff06f          	j	1c7e0 <__udivdi3+0x294>
   1cbc0:	ffe40413          	add	s0,s0,-2
   1cbc4:	015787b3          	add	a5,a5,s5
   1cbc8:	a71ff06f          	j	1c638 <__udivdi3+0xec>
   1cbcc:	01865693          	srl	a3,a2,0x18
   1cbd0:	01800713          	li	a4,24
   1cbd4:	b89ff06f          	j	1c75c <__udivdi3+0x210>

0001cbd8 <__umoddi3>:
   1cbd8:	fd010113          	add	sp,sp,-48
   1cbdc:	02112623          	sw	ra,44(sp)
   1cbe0:	00050793          	mv	a5,a0
   1cbe4:	14069663          	bnez	a3,1cd30 <__umoddi3+0x158>
   1cbe8:	03212023          	sw	s2,32(sp)
   1cbec:	01412c23          	sw	s4,24(sp)
   1cbf0:	02812423          	sw	s0,40(sp)
   1cbf4:	02912223          	sw	s1,36(sp)
   1cbf8:	01312e23          	sw	s3,28(sp)
   1cbfc:	01512a23          	sw	s5,20(sp)
   1cc00:	00060a13          	mv	s4,a2
   1cc04:	00050913          	mv	s2,a0
   1cc08:	1ac5f663          	bgeu	a1,a2,1cdb4 <__umoddi3+0x1dc>
   1cc0c:	00010737          	lui	a4,0x10
   1cc10:	00058413          	mv	s0,a1
   1cc14:	26e66a63          	bltu	a2,a4,1ce88 <__umoddi3+0x2b0>
   1cc18:	01000737          	lui	a4,0x1000
   1cc1c:	01800693          	li	a3,24
   1cc20:	00e67463          	bgeu	a2,a4,1cc28 <__umoddi3+0x50>
   1cc24:	01000693          	li	a3,16
   1cc28:	00024737          	lui	a4,0x24
   1cc2c:	00d65533          	srl	a0,a2,a3
   1cc30:	e5070713          	add	a4,a4,-432 # 23e50 <__clz_tab>
   1cc34:	00a70733          	add	a4,a4,a0
   1cc38:	00074703          	lbu	a4,0(a4)
   1cc3c:	02000513          	li	a0,32
   1cc40:	00d70733          	add	a4,a4,a3
   1cc44:	40e504b3          	sub	s1,a0,a4
   1cc48:	00e50c63          	beq	a0,a4,1cc60 <__umoddi3+0x88>
   1cc4c:	00959433          	sll	s0,a1,s1
   1cc50:	00e7d733          	srl	a4,a5,a4
   1cc54:	00961a33          	sll	s4,a2,s1
   1cc58:	00876433          	or	s0,a4,s0
   1cc5c:	00979933          	sll	s2,a5,s1
   1cc60:	010a5993          	srl	s3,s4,0x10
   1cc64:	00098593          	mv	a1,s3
   1cc68:	00040513          	mv	a0,s0
   1cc6c:	010a1a93          	sll	s5,s4,0x10
   1cc70:	6f1040ef          	jal	21b60 <__hidden___udivsi3>
   1cc74:	010ada93          	srl	s5,s5,0x10
   1cc78:	000a8593          	mv	a1,s5
   1cc7c:	6b9040ef          	jal	21b34 <__mulsi3>
   1cc80:	00050793          	mv	a5,a0
   1cc84:	00098593          	mv	a1,s3
   1cc88:	00040513          	mv	a0,s0
   1cc8c:	00078413          	mv	s0,a5
   1cc90:	719040ef          	jal	21ba8 <__umodsi3>
   1cc94:	01051513          	sll	a0,a0,0x10
   1cc98:	01095793          	srl	a5,s2,0x10
   1cc9c:	00a7e7b3          	or	a5,a5,a0
   1cca0:	0087f863          	bgeu	a5,s0,1ccb0 <__umoddi3+0xd8>
   1cca4:	00fa07b3          	add	a5,s4,a5
   1cca8:	0147e463          	bltu	a5,s4,1ccb0 <__umoddi3+0xd8>
   1ccac:	5287e863          	bltu	a5,s0,1d1dc <__umoddi3+0x604>
   1ccb0:	40878433          	sub	s0,a5,s0
   1ccb4:	00098593          	mv	a1,s3
   1ccb8:	00040513          	mv	a0,s0
   1ccbc:	6a5040ef          	jal	21b60 <__hidden___udivsi3>
   1ccc0:	000a8593          	mv	a1,s5
   1ccc4:	671040ef          	jal	21b34 <__mulsi3>
   1ccc8:	00050793          	mv	a5,a0
   1cccc:	00098593          	mv	a1,s3
   1ccd0:	00040513          	mv	a0,s0
   1ccd4:	00078413          	mv	s0,a5
   1ccd8:	6d1040ef          	jal	21ba8 <__umodsi3>
   1ccdc:	01091793          	sll	a5,s2,0x10
   1cce0:	01051513          	sll	a0,a0,0x10
   1cce4:	0107d793          	srl	a5,a5,0x10
   1cce8:	00a7e7b3          	or	a5,a5,a0
   1ccec:	0087fa63          	bgeu	a5,s0,1cd00 <__umoddi3+0x128>
   1ccf0:	00fa07b3          	add	a5,s4,a5
   1ccf4:	0147e663          	bltu	a5,s4,1cd00 <__umoddi3+0x128>
   1ccf8:	0087f463          	bgeu	a5,s0,1cd00 <__umoddi3+0x128>
   1ccfc:	014787b3          	add	a5,a5,s4
   1cd00:	408787b3          	sub	a5,a5,s0
   1cd04:	0097d533          	srl	a0,a5,s1
   1cd08:	02812403          	lw	s0,40(sp)
   1cd0c:	02412483          	lw	s1,36(sp)
   1cd10:	02012903          	lw	s2,32(sp)
   1cd14:	01c12983          	lw	s3,28(sp)
   1cd18:	01812a03          	lw	s4,24(sp)
   1cd1c:	01412a83          	lw	s5,20(sp)
   1cd20:	00000593          	li	a1,0
   1cd24:	02c12083          	lw	ra,44(sp)
   1cd28:	03010113          	add	sp,sp,48
   1cd2c:	00008067          	ret
   1cd30:	00050893          	mv	a7,a0
   1cd34:	fed5e8e3          	bltu	a1,a3,1cd24 <__umoddi3+0x14c>
   1cd38:	02912223          	sw	s1,36(sp)
   1cd3c:	01312e23          	sw	s3,28(sp)
   1cd40:	00010737          	lui	a4,0x10
   1cd44:	00058813          	mv	a6,a1
   1cd48:	24e6e463          	bltu	a3,a4,1cf90 <__umoddi3+0x3b8>
   1cd4c:	01000737          	lui	a4,0x1000
   1cd50:	01800513          	li	a0,24
   1cd54:	00e6f463          	bgeu	a3,a4,1cd5c <__umoddi3+0x184>
   1cd58:	01000513          	li	a0,16
   1cd5c:	00024737          	lui	a4,0x24
   1cd60:	00a6d333          	srl	t1,a3,a0
   1cd64:	e5070713          	add	a4,a4,-432 # 23e50 <__clz_tab>
   1cd68:	00670733          	add	a4,a4,t1
   1cd6c:	00074483          	lbu	s1,0(a4)
   1cd70:	02000713          	li	a4,32
   1cd74:	00a484b3          	add	s1,s1,a0
   1cd78:	409709b3          	sub	s3,a4,s1
   1cd7c:	22971263          	bne	a4,s1,1cfa0 <__umoddi3+0x3c8>
   1cd80:	00b6e463          	bltu	a3,a1,1cd88 <__umoddi3+0x1b0>
   1cd84:	00c7ea63          	bltu	a5,a2,1cd98 <__umoddi3+0x1c0>
   1cd88:	40c788b3          	sub	a7,a5,a2
   1cd8c:	40d586b3          	sub	a3,a1,a3
   1cd90:	0117b833          	sltu	a6,a5,a7
   1cd94:	41068833          	sub	a6,a3,a6
   1cd98:	02c12083          	lw	ra,44(sp)
   1cd9c:	02412483          	lw	s1,36(sp)
   1cda0:	01c12983          	lw	s3,28(sp)
   1cda4:	00088513          	mv	a0,a7
   1cda8:	00080593          	mv	a1,a6
   1cdac:	03010113          	add	sp,sp,48
   1cdb0:	00008067          	ret
   1cdb4:	0e060263          	beqz	a2,1ce98 <__umoddi3+0x2c0>
   1cdb8:	00010737          	lui	a4,0x10
   1cdbc:	3ee67e63          	bgeu	a2,a4,1d1b8 <__umoddi3+0x5e0>
   1cdc0:	10063693          	sltiu	a3,a2,256
   1cdc4:	0016b693          	seqz	a3,a3
   1cdc8:	00369693          	sll	a3,a3,0x3
   1cdcc:	00d65533          	srl	a0,a2,a3
   1cdd0:	00024737          	lui	a4,0x24
   1cdd4:	e5070713          	add	a4,a4,-432 # 23e50 <__clz_tab>
   1cdd8:	00a70733          	add	a4,a4,a0
   1cddc:	00074983          	lbu	s3,0(a4)
   1cde0:	02000713          	li	a4,32
   1cde4:	00d989b3          	add	s3,s3,a3
   1cde8:	413704b3          	sub	s1,a4,s3
   1cdec:	0d371a63          	bne	a4,s3,1cec0 <__umoddi3+0x2e8>
   1cdf0:	01061413          	sll	s0,a2,0x10
   1cdf4:	40c589b3          	sub	s3,a1,a2
   1cdf8:	01065a93          	srl	s5,a2,0x10
   1cdfc:	01045413          	srl	s0,s0,0x10
   1ce00:	000a8593          	mv	a1,s5
   1ce04:	00098513          	mv	a0,s3
   1ce08:	559040ef          	jal	21b60 <__hidden___udivsi3>
   1ce0c:	00040593          	mv	a1,s0
   1ce10:	525040ef          	jal	21b34 <__mulsi3>
   1ce14:	00050793          	mv	a5,a0
   1ce18:	000a8593          	mv	a1,s5
   1ce1c:	00098513          	mv	a0,s3
   1ce20:	00078993          	mv	s3,a5
   1ce24:	585040ef          	jal	21ba8 <__umodsi3>
   1ce28:	01051513          	sll	a0,a0,0x10
   1ce2c:	01095793          	srl	a5,s2,0x10
   1ce30:	00a7e7b3          	or	a5,a5,a0
   1ce34:	0137fa63          	bgeu	a5,s3,1ce48 <__umoddi3+0x270>
   1ce38:	00fa07b3          	add	a5,s4,a5
   1ce3c:	0147e663          	bltu	a5,s4,1ce48 <__umoddi3+0x270>
   1ce40:	0137f463          	bgeu	a5,s3,1ce48 <__umoddi3+0x270>
   1ce44:	014787b3          	add	a5,a5,s4
   1ce48:	413789b3          	sub	s3,a5,s3
   1ce4c:	000a8593          	mv	a1,s5
   1ce50:	00098513          	mv	a0,s3
   1ce54:	50d040ef          	jal	21b60 <__hidden___udivsi3>
   1ce58:	00040593          	mv	a1,s0
   1ce5c:	4d9040ef          	jal	21b34 <__mulsi3>
   1ce60:	00050413          	mv	s0,a0
   1ce64:	000a8593          	mv	a1,s5
   1ce68:	00098513          	mv	a0,s3
   1ce6c:	53d040ef          	jal	21ba8 <__umodsi3>
   1ce70:	01091913          	sll	s2,s2,0x10
   1ce74:	01051793          	sll	a5,a0,0x10
   1ce78:	01095913          	srl	s2,s2,0x10
   1ce7c:	00f967b3          	or	a5,s2,a5
   1ce80:	e887f0e3          	bgeu	a5,s0,1cd00 <__umoddi3+0x128>
   1ce84:	e6dff06f          	j	1ccf0 <__umoddi3+0x118>
   1ce88:	10063693          	sltiu	a3,a2,256
   1ce8c:	0016b693          	seqz	a3,a3
   1ce90:	00369693          	sll	a3,a3,0x3
   1ce94:	d95ff06f          	j	1cc28 <__umoddi3+0x50>
   1ce98:	00024737          	lui	a4,0x24
   1ce9c:	00000513          	li	a0,0
   1cea0:	e5070713          	add	a4,a4,-432 # 23e50 <__clz_tab>
   1cea4:	00a70733          	add	a4,a4,a0
   1cea8:	00074983          	lbu	s3,0(a4)
   1ceac:	00000693          	li	a3,0
   1ceb0:	02000713          	li	a4,32
   1ceb4:	00d989b3          	add	s3,s3,a3
   1ceb8:	413704b3          	sub	s1,a4,s3
   1cebc:	f3370ae3          	beq	a4,s3,1cdf0 <__umoddi3+0x218>
   1cec0:	00961a33          	sll	s4,a2,s1
   1cec4:	01712623          	sw	s7,12(sp)
   1cec8:	010a5a93          	srl	s5,s4,0x10
   1cecc:	0135dbb3          	srl	s7,a1,s3
   1ced0:	00959733          	sll	a4,a1,s1
   1ced4:	0137d9b3          	srl	s3,a5,s3
   1ced8:	000a8593          	mv	a1,s5
   1cedc:	000b8513          	mv	a0,s7
   1cee0:	010a1413          	sll	s0,s4,0x10
   1cee4:	00e9e9b3          	or	s3,s3,a4
   1cee8:	00979933          	sll	s2,a5,s1
   1ceec:	01612823          	sw	s6,16(sp)
   1cef0:	01045413          	srl	s0,s0,0x10
   1cef4:	46d040ef          	jal	21b60 <__hidden___udivsi3>
   1cef8:	00040593          	mv	a1,s0
   1cefc:	439040ef          	jal	21b34 <__mulsi3>
   1cf00:	00050b13          	mv	s6,a0
   1cf04:	000a8593          	mv	a1,s5
   1cf08:	000b8513          	mv	a0,s7
   1cf0c:	49d040ef          	jal	21ba8 <__umodsi3>
   1cf10:	01051513          	sll	a0,a0,0x10
   1cf14:	0109d793          	srl	a5,s3,0x10
   1cf18:	00a7e7b3          	or	a5,a5,a0
   1cf1c:	0167fa63          	bgeu	a5,s6,1cf30 <__umoddi3+0x358>
   1cf20:	00fa07b3          	add	a5,s4,a5
   1cf24:	0147e663          	bltu	a5,s4,1cf30 <__umoddi3+0x358>
   1cf28:	0167f463          	bgeu	a5,s6,1cf30 <__umoddi3+0x358>
   1cf2c:	014787b3          	add	a5,a5,s4
   1cf30:	41678b33          	sub	s6,a5,s6
   1cf34:	000a8593          	mv	a1,s5
   1cf38:	000b0513          	mv	a0,s6
   1cf3c:	425040ef          	jal	21b60 <__hidden___udivsi3>
   1cf40:	00040593          	mv	a1,s0
   1cf44:	3f1040ef          	jal	21b34 <__mulsi3>
   1cf48:	00050793          	mv	a5,a0
   1cf4c:	000a8593          	mv	a1,s5
   1cf50:	000b0513          	mv	a0,s6
   1cf54:	01099993          	sll	s3,s3,0x10
   1cf58:	00078b13          	mv	s6,a5
   1cf5c:	44d040ef          	jal	21ba8 <__umodsi3>
   1cf60:	01051513          	sll	a0,a0,0x10
   1cf64:	0109d993          	srl	s3,s3,0x10
   1cf68:	00a9e9b3          	or	s3,s3,a0
   1cf6c:	0169fa63          	bgeu	s3,s6,1cf80 <__umoddi3+0x3a8>
   1cf70:	013a09b3          	add	s3,s4,s3
   1cf74:	0149e663          	bltu	s3,s4,1cf80 <__umoddi3+0x3a8>
   1cf78:	0169f463          	bgeu	s3,s6,1cf80 <__umoddi3+0x3a8>
   1cf7c:	014989b3          	add	s3,s3,s4
   1cf80:	416989b3          	sub	s3,s3,s6
   1cf84:	00c12b83          	lw	s7,12(sp)
   1cf88:	01012b03          	lw	s6,16(sp)
   1cf8c:	e75ff06f          	j	1ce00 <__umoddi3+0x228>
   1cf90:	1006b513          	sltiu	a0,a3,256
   1cf94:	00153513          	seqz	a0,a0
   1cf98:	00351513          	sll	a0,a0,0x3
   1cf9c:	dc1ff06f          	j	1cd5c <__umoddi3+0x184>
   1cfa0:	01512a23          	sw	s5,20(sp)
   1cfa4:	013696b3          	sll	a3,a3,s3
   1cfa8:	00965ab3          	srl	s5,a2,s1
   1cfac:	00daeab3          	or	s5,s5,a3
   1cfb0:	01712623          	sw	s7,12(sp)
   1cfb4:	01a12023          	sw	s10,0(sp)
   1cfb8:	010adb93          	srl	s7,s5,0x10
   1cfbc:	0095dd33          	srl	s10,a1,s1
   1cfc0:	01359733          	sll	a4,a1,s3
   1cfc4:	0097d6b3          	srl	a3,a5,s1
   1cfc8:	01912223          	sw	s9,4(sp)
   1cfcc:	000b8593          	mv	a1,s7
   1cfd0:	000d0513          	mv	a0,s10
   1cfd4:	010a9c93          	sll	s9,s5,0x10
   1cfd8:	02812423          	sw	s0,40(sp)
   1cfdc:	03212023          	sw	s2,32(sp)
   1cfe0:	01361433          	sll	s0,a2,s3
   1cfe4:	01379933          	sll	s2,a5,s3
   1cfe8:	01412c23          	sw	s4,24(sp)
   1cfec:	01612823          	sw	s6,16(sp)
   1cff0:	00e6ea33          	or	s4,a3,a4
   1cff4:	01812423          	sw	s8,8(sp)
   1cff8:	010cdc93          	srl	s9,s9,0x10
   1cffc:	365040ef          	jal	21b60 <__hidden___udivsi3>
   1d000:	00050593          	mv	a1,a0
   1d004:	00050b13          	mv	s6,a0
   1d008:	000c8513          	mv	a0,s9
   1d00c:	329040ef          	jal	21b34 <__mulsi3>
   1d010:	00050c13          	mv	s8,a0
   1d014:	000b8593          	mv	a1,s7
   1d018:	000d0513          	mv	a0,s10
   1d01c:	38d040ef          	jal	21ba8 <__umodsi3>
   1d020:	01051513          	sll	a0,a0,0x10
   1d024:	010a5793          	srl	a5,s4,0x10
   1d028:	00a7e7b3          	or	a5,a5,a0
   1d02c:	0187fe63          	bgeu	a5,s8,1d048 <__umoddi3+0x470>
   1d030:	00fa87b3          	add	a5,s5,a5
   1d034:	fffb0713          	add	a4,s6,-1
   1d038:	1957ee63          	bltu	a5,s5,1d1d4 <__umoddi3+0x5fc>
   1d03c:	1987fc63          	bgeu	a5,s8,1d1d4 <__umoddi3+0x5fc>
   1d040:	ffeb0b13          	add	s6,s6,-2
   1d044:	015787b3          	add	a5,a5,s5
   1d048:	41878c33          	sub	s8,a5,s8
   1d04c:	000b8593          	mv	a1,s7
   1d050:	000c0513          	mv	a0,s8
   1d054:	30d040ef          	jal	21b60 <__hidden___udivsi3>
   1d058:	00050593          	mv	a1,a0
   1d05c:	00050d13          	mv	s10,a0
   1d060:	000c8513          	mv	a0,s9
   1d064:	2d1040ef          	jal	21b34 <__mulsi3>
   1d068:	00050793          	mv	a5,a0
   1d06c:	000b8593          	mv	a1,s7
   1d070:	000c0513          	mv	a0,s8
   1d074:	00078b93          	mv	s7,a5
   1d078:	331040ef          	jal	21ba8 <__umodsi3>
   1d07c:	010a1593          	sll	a1,s4,0x10
   1d080:	01051513          	sll	a0,a0,0x10
   1d084:	0105d593          	srl	a1,a1,0x10
   1d088:	00a5e5b3          	or	a1,a1,a0
   1d08c:	0175fe63          	bgeu	a1,s7,1d0a8 <__umoddi3+0x4d0>
   1d090:	00ba85b3          	add	a1,s5,a1
   1d094:	fffd0793          	add	a5,s10,-1
   1d098:	1355ea63          	bltu	a1,s5,1d1cc <__umoddi3+0x5f4>
   1d09c:	1375f863          	bgeu	a1,s7,1d1cc <__umoddi3+0x5f4>
   1d0a0:	ffed0d13          	add	s10,s10,-2
   1d0a4:	015585b3          	add	a1,a1,s5
   1d0a8:	010b1793          	sll	a5,s6,0x10
   1d0ac:	00010e37          	lui	t3,0x10
   1d0b0:	01a7e7b3          	or	a5,a5,s10
   1d0b4:	fffe0313          	add	t1,t3,-1 # ffff <__sfvwrite_r+0x9b>
   1d0b8:	0067f8b3          	and	a7,a5,t1
   1d0bc:	00647333          	and	t1,s0,t1
   1d0c0:	41758733          	sub	a4,a1,s7
   1d0c4:	0107d793          	srl	a5,a5,0x10
   1d0c8:	01045e93          	srl	t4,s0,0x10
   1d0cc:	00088513          	mv	a0,a7
   1d0d0:	00030593          	mv	a1,t1
   1d0d4:	261040ef          	jal	21b34 <__mulsi3>
   1d0d8:	00050813          	mv	a6,a0
   1d0dc:	000e8593          	mv	a1,t4
   1d0e0:	00088513          	mv	a0,a7
   1d0e4:	251040ef          	jal	21b34 <__mulsi3>
   1d0e8:	00050893          	mv	a7,a0
   1d0ec:	00030593          	mv	a1,t1
   1d0f0:	00078513          	mv	a0,a5
   1d0f4:	241040ef          	jal	21b34 <__mulsi3>
   1d0f8:	00050313          	mv	t1,a0
   1d0fc:	000e8593          	mv	a1,t4
   1d100:	00078513          	mv	a0,a5
   1d104:	231040ef          	jal	21b34 <__mulsi3>
   1d108:	01085793          	srl	a5,a6,0x10
   1d10c:	006888b3          	add	a7,a7,t1
   1d110:	011787b3          	add	a5,a5,a7
   1d114:	0067f463          	bgeu	a5,t1,1d11c <__umoddi3+0x544>
   1d118:	01c50533          	add	a0,a0,t3
   1d11c:	00010637          	lui	a2,0x10
   1d120:	fff60613          	add	a2,a2,-1 # ffff <__sfvwrite_r+0x9b>
   1d124:	0107d693          	srl	a3,a5,0x10
   1d128:	00c7f7b3          	and	a5,a5,a2
   1d12c:	01079793          	sll	a5,a5,0x10
   1d130:	00c87833          	and	a6,a6,a2
   1d134:	00a686b3          	add	a3,a3,a0
   1d138:	010787b3          	add	a5,a5,a6
   1d13c:	06d76263          	bltu	a4,a3,1d1a0 <__umoddi3+0x5c8>
   1d140:	04d70e63          	beq	a4,a3,1d19c <__umoddi3+0x5c4>
   1d144:	40f907b3          	sub	a5,s2,a5
   1d148:	00f93933          	sltu	s2,s2,a5
   1d14c:	02812403          	lw	s0,40(sp)
   1d150:	02c12083          	lw	ra,44(sp)
   1d154:	40d705b3          	sub	a1,a4,a3
   1d158:	412585b3          	sub	a1,a1,s2
   1d15c:	009594b3          	sll	s1,a1,s1
   1d160:	0137d7b3          	srl	a5,a5,s3
   1d164:	02012903          	lw	s2,32(sp)
   1d168:	01812a03          	lw	s4,24(sp)
   1d16c:	01412a83          	lw	s5,20(sp)
   1d170:	01012b03          	lw	s6,16(sp)
   1d174:	00c12b83          	lw	s7,12(sp)
   1d178:	00812c03          	lw	s8,8(sp)
   1d17c:	00412c83          	lw	s9,4(sp)
   1d180:	00012d03          	lw	s10,0(sp)
   1d184:	00f4e533          	or	a0,s1,a5
   1d188:	0135d5b3          	srl	a1,a1,s3
   1d18c:	02412483          	lw	s1,36(sp)
   1d190:	01c12983          	lw	s3,28(sp)
   1d194:	03010113          	add	sp,sp,48
   1d198:	00008067          	ret
   1d19c:	faf974e3          	bgeu	s2,a5,1d144 <__umoddi3+0x56c>
   1d1a0:	40878633          	sub	a2,a5,s0
   1d1a4:	00c7b7b3          	sltu	a5,a5,a2
   1d1a8:	01578ab3          	add	s5,a5,s5
   1d1ac:	415686b3          	sub	a3,a3,s5
   1d1b0:	00060793          	mv	a5,a2
   1d1b4:	f91ff06f          	j	1d144 <__umoddi3+0x56c>
   1d1b8:	01000737          	lui	a4,0x1000
   1d1bc:	02e67463          	bgeu	a2,a4,1d1e4 <__umoddi3+0x60c>
   1d1c0:	01065513          	srl	a0,a2,0x10
   1d1c4:	01000693          	li	a3,16
   1d1c8:	c09ff06f          	j	1cdd0 <__umoddi3+0x1f8>
   1d1cc:	00078d13          	mv	s10,a5
   1d1d0:	ed9ff06f          	j	1d0a8 <__umoddi3+0x4d0>
   1d1d4:	00070b13          	mv	s6,a4
   1d1d8:	e71ff06f          	j	1d048 <__umoddi3+0x470>
   1d1dc:	014787b3          	add	a5,a5,s4
   1d1e0:	ad1ff06f          	j	1ccb0 <__umoddi3+0xd8>
   1d1e4:	01865513          	srl	a0,a2,0x18
   1d1e8:	01800693          	li	a3,24
   1d1ec:	be5ff06f          	j	1cdd0 <__umoddi3+0x1f8>

0001d1f0 <__divdf3>:
   1d1f0:	fb010113          	add	sp,sp,-80
   1d1f4:	0145d793          	srl	a5,a1,0x14
   1d1f8:	04812423          	sw	s0,72(sp)
   1d1fc:	04912223          	sw	s1,68(sp)
   1d200:	05212023          	sw	s2,64(sp)
   1d204:	03412c23          	sw	s4,56(sp)
   1d208:	03512a23          	sw	s5,52(sp)
   1d20c:	00c59493          	sll	s1,a1,0xc
   1d210:	04112623          	sw	ra,76(sp)
   1d214:	03312e23          	sw	s3,60(sp)
   1d218:	03612823          	sw	s6,48(sp)
   1d21c:	03712623          	sw	s7,44(sp)
   1d220:	03812423          	sw	s8,40(sp)
   1d224:	7ff7f793          	and	a5,a5,2047
   1d228:	00050413          	mv	s0,a0
   1d22c:	00060a13          	mv	s4,a2
   1d230:	00068913          	mv	s2,a3
   1d234:	00c4d493          	srl	s1,s1,0xc
   1d238:	01f5da93          	srl	s5,a1,0x1f
   1d23c:	18078a63          	beqz	a5,1d3d0 <__divdf3+0x1e0>
   1d240:	7ff00713          	li	a4,2047
   1d244:	08e78863          	beq	a5,a4,1d2d4 <__divdf3+0xe4>
   1d248:	01d55b13          	srl	s6,a0,0x1d
   1d24c:	00349493          	sll	s1,s1,0x3
   1d250:	009b64b3          	or	s1,s6,s1
   1d254:	00800737          	lui	a4,0x800
   1d258:	00e4eb33          	or	s6,s1,a4
   1d25c:	00351b93          	sll	s7,a0,0x3
   1d260:	c0178993          	add	s3,a5,-1023 # fffc01 <__alt_data_end+0xfb6821>
   1d264:	00000493          	li	s1,0
   1d268:	00000c13          	li	s8,0
   1d26c:	01495793          	srl	a5,s2,0x14
   1d270:	00c91413          	sll	s0,s2,0xc
   1d274:	7ff7f793          	and	a5,a5,2047
   1d278:	00c45413          	srl	s0,s0,0xc
   1d27c:	01f95913          	srl	s2,s2,0x1f
   1d280:	08078263          	beqz	a5,1d304 <__divdf3+0x114>
   1d284:	7ff00713          	li	a4,2047
   1d288:	18e78a63          	beq	a5,a4,1d41c <__divdf3+0x22c>
   1d28c:	00341413          	sll	s0,s0,0x3
   1d290:	01da5713          	srl	a4,s4,0x1d
   1d294:	00876733          	or	a4,a4,s0
   1d298:	c0178793          	add	a5,a5,-1023
   1d29c:	00800437          	lui	s0,0x800
   1d2a0:	40f989b3          	sub	s3,s3,a5
   1d2a4:	00876433          	or	s0,a4,s0
   1d2a8:	003a1813          	sll	a6,s4,0x3
   1d2ac:	00000793          	li	a5,0
   1d2b0:	00f00713          	li	a4,15
   1d2b4:	012aca33          	xor	s4,s5,s2
   1d2b8:	24976463          	bltu	a4,s1,1d500 <__divdf3+0x310>
   1d2bc:	00024737          	lui	a4,0x24
   1d2c0:	e1070713          	add	a4,a4,-496 # 23e10 <_ctype_+0x104>
   1d2c4:	00249493          	sll	s1,s1,0x2
   1d2c8:	00e484b3          	add	s1,s1,a4
   1d2cc:	0004a703          	lw	a4,0(s1)
   1d2d0:	00070067          	jr	a4
   1d2d4:	00a4eb33          	or	s6,s1,a0
   1d2d8:	1c0b1e63          	bnez	s6,1d4b4 <__divdf3+0x2c4>
   1d2dc:	01495793          	srl	a5,s2,0x14
   1d2e0:	00c91413          	sll	s0,s2,0xc
   1d2e4:	7ff7f793          	and	a5,a5,2047
   1d2e8:	00000b93          	li	s7,0
   1d2ec:	00800493          	li	s1,8
   1d2f0:	7ff00993          	li	s3,2047
   1d2f4:	00200c13          	li	s8,2
   1d2f8:	00c45413          	srl	s0,s0,0xc
   1d2fc:	01f95913          	srl	s2,s2,0x1f
   1d300:	f80792e3          	bnez	a5,1d284 <__divdf3+0x94>
   1d304:	01446833          	or	a6,s0,s4
   1d308:	1c080263          	beqz	a6,1d4cc <__divdf3+0x2dc>
   1d30c:	5c040663          	beqz	s0,1d8d8 <__divdf3+0x6e8>
   1d310:	00040513          	mv	a0,s0
   1d314:	0f9040ef          	jal	21c0c <__clzsi2>
   1d318:	00050793          	mv	a5,a0
   1d31c:	ff550693          	add	a3,a0,-11
   1d320:	01d00713          	li	a4,29
   1d324:	ff878813          	add	a6,a5,-8
   1d328:	40d70733          	sub	a4,a4,a3
   1d32c:	01041433          	sll	s0,s0,a6
   1d330:	00ea5733          	srl	a4,s4,a4
   1d334:	00876433          	or	s0,a4,s0
   1d338:	010a1833          	sll	a6,s4,a6
   1d33c:	013787b3          	add	a5,a5,s3
   1d340:	3f378993          	add	s3,a5,1011
   1d344:	00000793          	li	a5,0
   1d348:	f69ff06f          	j	1d2b0 <__divdf3+0xc0>
   1d34c:	40f70733          	sub	a4,a4,a5
   1d350:	03800693          	li	a3,56
   1d354:	60e6d063          	bge	a3,a4,1d954 <__divdf3+0x764>
   1d358:	00000793          	li	a5,0
   1d35c:	00000693          	li	a3,0
   1d360:	00000713          	li	a4,0
   1d364:	04c12083          	lw	ra,76(sp)
   1d368:	04812403          	lw	s0,72(sp)
   1d36c:	01479793          	sll	a5,a5,0x14
   1d370:	00d7e7b3          	or	a5,a5,a3
   1d374:	01fa1693          	sll	a3,s4,0x1f
   1d378:	00d7e7b3          	or	a5,a5,a3
   1d37c:	04412483          	lw	s1,68(sp)
   1d380:	04012903          	lw	s2,64(sp)
   1d384:	03c12983          	lw	s3,60(sp)
   1d388:	03812a03          	lw	s4,56(sp)
   1d38c:	03412a83          	lw	s5,52(sp)
   1d390:	03012b03          	lw	s6,48(sp)
   1d394:	02c12b83          	lw	s7,44(sp)
   1d398:	02812c03          	lw	s8,40(sp)
   1d39c:	00070513          	mv	a0,a4
   1d3a0:	00078593          	mv	a1,a5
   1d3a4:	05010113          	add	sp,sp,80
   1d3a8:	00008067          	ret
   1d3ac:	7ff00793          	li	a5,2047
   1d3b0:	00000693          	li	a3,0
   1d3b4:	00000713          	li	a4,0
   1d3b8:	fadff06f          	j	1d364 <__divdf3+0x174>
   1d3bc:	00000a13          	li	s4,0
   1d3c0:	7ff00793          	li	a5,2047
   1d3c4:	000806b7          	lui	a3,0x80
   1d3c8:	00000713          	li	a4,0
   1d3cc:	f99ff06f          	j	1d364 <__divdf3+0x174>
   1d3d0:	00a4eb33          	or	s6,s1,a0
   1d3d4:	100b0c63          	beqz	s6,1d4ec <__divdf3+0x2fc>
   1d3d8:	52048463          	beqz	s1,1d900 <__divdf3+0x710>
   1d3dc:	00048513          	mv	a0,s1
   1d3e0:	02d040ef          	jal	21c0c <__clzsi2>
   1d3e4:	00050713          	mv	a4,a0
   1d3e8:	ff550793          	add	a5,a0,-11
   1d3ec:	01d00b13          	li	s6,29
   1d3f0:	ff870b93          	add	s7,a4,-8
   1d3f4:	40fb0b33          	sub	s6,s6,a5
   1d3f8:	017494b3          	sll	s1,s1,s7
   1d3fc:	01645b33          	srl	s6,s0,s6
   1d400:	009b6b33          	or	s6,s6,s1
   1d404:	01741bb3          	sll	s7,s0,s7
   1d408:	c0d00793          	li	a5,-1011
   1d40c:	40e789b3          	sub	s3,a5,a4
   1d410:	00000493          	li	s1,0
   1d414:	00000c13          	li	s8,0
   1d418:	e55ff06f          	j	1d26c <__divdf3+0x7c>
   1d41c:	01446833          	or	a6,s0,s4
   1d420:	80198993          	add	s3,s3,-2047
   1d424:	0a081c63          	bnez	a6,1d4dc <__divdf3+0x2ec>
   1d428:	0024e493          	or	s1,s1,2
   1d42c:	00000413          	li	s0,0
   1d430:	00200793          	li	a5,2
   1d434:	e7dff06f          	j	1d2b0 <__divdf3+0xc0>
   1d438:	000a8913          	mv	s2,s5
   1d43c:	000b0413          	mv	s0,s6
   1d440:	000b8813          	mv	a6,s7
   1d444:	00200793          	li	a5,2
   1d448:	60fc0863          	beq	s8,a5,1da58 <__divdf3+0x868>
   1d44c:	00300793          	li	a5,3
   1d450:	f6fc06e3          	beq	s8,a5,1d3bc <__divdf3+0x1cc>
   1d454:	00100793          	li	a5,1
   1d458:	00090a13          	mv	s4,s2
   1d45c:	eefc0ee3          	beq	s8,a5,1d358 <__divdf3+0x168>
   1d460:	3ff98793          	add	a5,s3,1023
   1d464:	3cf05263          	blez	a5,1d828 <__divdf3+0x638>
   1d468:	00787713          	and	a4,a6,7
   1d46c:	5c071663          	bnez	a4,1da38 <__divdf3+0x848>
   1d470:	00741713          	sll	a4,s0,0x7
   1d474:	00075a63          	bgez	a4,1d488 <__divdf3+0x298>
   1d478:	ff0007b7          	lui	a5,0xff000
   1d47c:	fff78793          	add	a5,a5,-1 # feffffff <__alt_data_end+0xfefb6c1f>
   1d480:	00f47433          	and	s0,s0,a5
   1d484:	40098793          	add	a5,s3,1024
   1d488:	7fe00713          	li	a4,2046
   1d48c:	f2f740e3          	blt	a4,a5,1d3ac <__divdf3+0x1bc>
   1d490:	00385813          	srl	a6,a6,0x3
   1d494:	01d41713          	sll	a4,s0,0x1d
   1d498:	00941693          	sll	a3,s0,0x9
   1d49c:	01076733          	or	a4,a4,a6
   1d4a0:	00c6d693          	srl	a3,a3,0xc
   1d4a4:	7ff7f793          	and	a5,a5,2047
   1d4a8:	ebdff06f          	j	1d364 <__divdf3+0x174>
   1d4ac:	00078c13          	mv	s8,a5
   1d4b0:	f95ff06f          	j	1d444 <__divdf3+0x254>
   1d4b4:	00048b13          	mv	s6,s1
   1d4b8:	00050b93          	mv	s7,a0
   1d4bc:	00c00493          	li	s1,12
   1d4c0:	7ff00993          	li	s3,2047
   1d4c4:	00300c13          	li	s8,3
   1d4c8:	da5ff06f          	j	1d26c <__divdf3+0x7c>
   1d4cc:	0014e493          	or	s1,s1,1
   1d4d0:	00000413          	li	s0,0
   1d4d4:	00100793          	li	a5,1
   1d4d8:	dd9ff06f          	j	1d2b0 <__divdf3+0xc0>
   1d4dc:	0034e493          	or	s1,s1,3
   1d4e0:	000a0813          	mv	a6,s4
   1d4e4:	00300793          	li	a5,3
   1d4e8:	dc9ff06f          	j	1d2b0 <__divdf3+0xc0>
   1d4ec:	00000b93          	li	s7,0
   1d4f0:	00400493          	li	s1,4
   1d4f4:	00000993          	li	s3,0
   1d4f8:	00100c13          	li	s8,1
   1d4fc:	d71ff06f          	j	1d26c <__divdf3+0x7c>
   1d500:	03912223          	sw	s9,36(sp)
   1d504:	03a12023          	sw	s10,32(sp)
   1d508:	01b12e23          	sw	s11,28(sp)
   1d50c:	3b646a63          	bltu	s0,s6,1d8c0 <__divdf3+0x6d0>
   1d510:	3a8b0663          	beq	s6,s0,1d8bc <__divdf3+0x6cc>
   1d514:	fff98993          	add	s3,s3,-1
   1d518:	000b8c13          	mv	s8,s7
   1d51c:	000b0493          	mv	s1,s6
   1d520:	00000d13          	li	s10,0
   1d524:	01885c93          	srl	s9,a6,0x18
   1d528:	00841413          	sll	s0,s0,0x8
   1d52c:	01045913          	srl	s2,s0,0x10
   1d530:	008cecb3          	or	s9,s9,s0
   1d534:	00090593          	mv	a1,s2
   1d538:	00048513          	mv	a0,s1
   1d53c:	010c9b13          	sll	s6,s9,0x10
   1d540:	00881a93          	sll	s5,a6,0x8
   1d544:	010b5b13          	srl	s6,s6,0x10
   1d548:	618040ef          	jal	21b60 <__hidden___udivsi3>
   1d54c:	00050593          	mv	a1,a0
   1d550:	00050413          	mv	s0,a0
   1d554:	000b0513          	mv	a0,s6
   1d558:	5dc040ef          	jal	21b34 <__mulsi3>
   1d55c:	00050793          	mv	a5,a0
   1d560:	00090593          	mv	a1,s2
   1d564:	00048513          	mv	a0,s1
   1d568:	00078493          	mv	s1,a5
   1d56c:	63c040ef          	jal	21ba8 <__umodsi3>
   1d570:	01051513          	sll	a0,a0,0x10
   1d574:	010c5793          	srl	a5,s8,0x10
   1d578:	00a7e7b3          	or	a5,a5,a0
   1d57c:	0097fa63          	bgeu	a5,s1,1d590 <__divdf3+0x3a0>
   1d580:	00fc87b3          	add	a5,s9,a5
   1d584:	fff40713          	add	a4,s0,-1 # 7fffff <__alt_data_end+0x7b6c1f>
   1d588:	3b97fe63          	bgeu	a5,s9,1d944 <__divdf3+0x754>
   1d58c:	00070413          	mv	s0,a4
   1d590:	409784b3          	sub	s1,a5,s1
   1d594:	00090593          	mv	a1,s2
   1d598:	00048513          	mv	a0,s1
   1d59c:	5c4040ef          	jal	21b60 <__hidden___udivsi3>
   1d5a0:	00050593          	mv	a1,a0
   1d5a4:	00050b93          	mv	s7,a0
   1d5a8:	000b0513          	mv	a0,s6
   1d5ac:	588040ef          	jal	21b34 <__mulsi3>
   1d5b0:	00050793          	mv	a5,a0
   1d5b4:	00090593          	mv	a1,s2
   1d5b8:	00048513          	mv	a0,s1
   1d5bc:	00078493          	mv	s1,a5
   1d5c0:	5e8040ef          	jal	21ba8 <__umodsi3>
   1d5c4:	010c1793          	sll	a5,s8,0x10
   1d5c8:	01051513          	sll	a0,a0,0x10
   1d5cc:	0107d793          	srl	a5,a5,0x10
   1d5d0:	00a7e7b3          	or	a5,a5,a0
   1d5d4:	0097fa63          	bgeu	a5,s1,1d5e8 <__divdf3+0x3f8>
   1d5d8:	00fc87b3          	add	a5,s9,a5
   1d5dc:	fffb8713          	add	a4,s7,-1
   1d5e0:	3597fa63          	bgeu	a5,s9,1d934 <__divdf3+0x744>
   1d5e4:	00070b93          	mv	s7,a4
   1d5e8:	00010337          	lui	t1,0x10
   1d5ec:	01041413          	sll	s0,s0,0x10
   1d5f0:	01746433          	or	s0,s0,s7
   1d5f4:	fff30d93          	add	s11,t1,-1 # ffff <__sfvwrite_r+0x9b>
   1d5f8:	01b478b3          	and	a7,s0,s11
   1d5fc:	01bafdb3          	and	s11,s5,s11
   1d600:	40978bb3          	sub	s7,a5,s1
   1d604:	010adc13          	srl	s8,s5,0x10
   1d608:	01045793          	srl	a5,s0,0x10
   1d60c:	00088513          	mv	a0,a7
   1d610:	000d8593          	mv	a1,s11
   1d614:	520040ef          	jal	21b34 <__mulsi3>
   1d618:	00050813          	mv	a6,a0
   1d61c:	000c0593          	mv	a1,s8
   1d620:	00088513          	mv	a0,a7
   1d624:	510040ef          	jal	21b34 <__mulsi3>
   1d628:	00050893          	mv	a7,a0
   1d62c:	000d8593          	mv	a1,s11
   1d630:	00078513          	mv	a0,a5
   1d634:	500040ef          	jal	21b34 <__mulsi3>
   1d638:	00050e13          	mv	t3,a0
   1d63c:	000c0593          	mv	a1,s8
   1d640:	00078513          	mv	a0,a5
   1d644:	4f0040ef          	jal	21b34 <__mulsi3>
   1d648:	01085793          	srl	a5,a6,0x10
   1d64c:	01c888b3          	add	a7,a7,t3
   1d650:	011787b3          	add	a5,a5,a7
   1d654:	01c7f463          	bgeu	a5,t3,1d65c <__divdf3+0x46c>
   1d658:	00650533          	add	a0,a0,t1
   1d65c:	00010637          	lui	a2,0x10
   1d660:	fff60613          	add	a2,a2,-1 # ffff <__sfvwrite_r+0x9b>
   1d664:	00c7f4b3          	and	s1,a5,a2
   1d668:	0107d693          	srl	a3,a5,0x10
   1d66c:	01049493          	sll	s1,s1,0x10
   1d670:	00c87833          	and	a6,a6,a2
   1d674:	00a687b3          	add	a5,a3,a0
   1d678:	010484b3          	add	s1,s1,a6
   1d67c:	20fbea63          	bltu	s7,a5,1d890 <__divdf3+0x6a0>
   1d680:	20fb8663          	beq	s7,a5,1d88c <__divdf3+0x69c>
   1d684:	409d04b3          	sub	s1,s10,s1
   1d688:	40fb8bb3          	sub	s7,s7,a5
   1d68c:	009d3d33          	sltu	s10,s10,s1
   1d690:	41ab8bb3          	sub	s7,s7,s10
   1d694:	377c8a63          	beq	s9,s7,1da08 <__divdf3+0x818>
   1d698:	00090593          	mv	a1,s2
   1d69c:	000b8513          	mv	a0,s7
   1d6a0:	4c0040ef          	jal	21b60 <__hidden___udivsi3>
   1d6a4:	00050593          	mv	a1,a0
   1d6a8:	00a12623          	sw	a0,12(sp)
   1d6ac:	00050d13          	mv	s10,a0
   1d6b0:	000b0513          	mv	a0,s6
   1d6b4:	480040ef          	jal	21b34 <__mulsi3>
   1d6b8:	00050793          	mv	a5,a0
   1d6bc:	00090593          	mv	a1,s2
   1d6c0:	000b8513          	mv	a0,s7
   1d6c4:	00078b93          	mv	s7,a5
   1d6c8:	4e0040ef          	jal	21ba8 <__umodsi3>
   1d6cc:	01051513          	sll	a0,a0,0x10
   1d6d0:	0104d793          	srl	a5,s1,0x10
   1d6d4:	00a7e7b3          	or	a5,a5,a0
   1d6d8:	0377f063          	bgeu	a5,s7,1d6f8 <__divdf3+0x508>
   1d6dc:	00fc87b3          	add	a5,s9,a5
   1d6e0:	fffd0693          	add	a3,s10,-1
   1d6e4:	3797e263          	bltu	a5,s9,1da48 <__divdf3+0x858>
   1d6e8:	3777f063          	bgeu	a5,s7,1da48 <__divdf3+0x858>
   1d6ec:	ffed0713          	add	a4,s10,-2
   1d6f0:	00e12623          	sw	a4,12(sp)
   1d6f4:	019787b3          	add	a5,a5,s9
   1d6f8:	41778bb3          	sub	s7,a5,s7
   1d6fc:	00090593          	mv	a1,s2
   1d700:	000b8513          	mv	a0,s7
   1d704:	45c040ef          	jal	21b60 <__hidden___udivsi3>
   1d708:	00050593          	mv	a1,a0
   1d70c:	00050d13          	mv	s10,a0
   1d710:	000b0513          	mv	a0,s6
   1d714:	420040ef          	jal	21b34 <__mulsi3>
   1d718:	00050793          	mv	a5,a0
   1d71c:	00090593          	mv	a1,s2
   1d720:	000b8513          	mv	a0,s7
   1d724:	00078913          	mv	s2,a5
   1d728:	01049493          	sll	s1,s1,0x10
   1d72c:	47c040ef          	jal	21ba8 <__umodsi3>
   1d730:	01051513          	sll	a0,a0,0x10
   1d734:	0104d493          	srl	s1,s1,0x10
   1d738:	00a4e4b3          	or	s1,s1,a0
   1d73c:	0124fe63          	bgeu	s1,s2,1d758 <__divdf3+0x568>
   1d740:	009c84b3          	add	s1,s9,s1
   1d744:	fffd0793          	add	a5,s10,-1
   1d748:	3194e463          	bltu	s1,s9,1da50 <__divdf3+0x860>
   1d74c:	3124f263          	bgeu	s1,s2,1da50 <__divdf3+0x860>
   1d750:	ffed0d13          	add	s10,s10,-2
   1d754:	019484b3          	add	s1,s1,s9
   1d758:	00c12783          	lw	a5,12(sp)
   1d75c:	412484b3          	sub	s1,s1,s2
   1d760:	000d8593          	mv	a1,s11
   1d764:	01079813          	sll	a6,a5,0x10
   1d768:	01a86833          	or	a6,a6,s10
   1d76c:	01081313          	sll	t1,a6,0x10
   1d770:	01035313          	srl	t1,t1,0x10
   1d774:	01085793          	srl	a5,a6,0x10
   1d778:	00030513          	mv	a0,t1
   1d77c:	3b8040ef          	jal	21b34 <__mulsi3>
   1d780:	00050893          	mv	a7,a0
   1d784:	000c0593          	mv	a1,s8
   1d788:	00030513          	mv	a0,t1
   1d78c:	3a8040ef          	jal	21b34 <__mulsi3>
   1d790:	00050313          	mv	t1,a0
   1d794:	000d8593          	mv	a1,s11
   1d798:	00078513          	mv	a0,a5
   1d79c:	398040ef          	jal	21b34 <__mulsi3>
   1d7a0:	00050e13          	mv	t3,a0
   1d7a4:	000c0593          	mv	a1,s8
   1d7a8:	00078513          	mv	a0,a5
   1d7ac:	388040ef          	jal	21b34 <__mulsi3>
   1d7b0:	0108d793          	srl	a5,a7,0x10
   1d7b4:	01c30333          	add	t1,t1,t3
   1d7b8:	006787b3          	add	a5,a5,t1
   1d7bc:	01c7f663          	bgeu	a5,t3,1d7c8 <__divdf3+0x5d8>
   1d7c0:	00010737          	lui	a4,0x10
   1d7c4:	00e50533          	add	a0,a0,a4
   1d7c8:	000106b7          	lui	a3,0x10
   1d7cc:	fff68693          	add	a3,a3,-1 # ffff <__sfvwrite_r+0x9b>
   1d7d0:	0107d713          	srl	a4,a5,0x10
   1d7d4:	00d7f7b3          	and	a5,a5,a3
   1d7d8:	01079793          	sll	a5,a5,0x10
   1d7dc:	00d8f8b3          	and	a7,a7,a3
   1d7e0:	00a70733          	add	a4,a4,a0
   1d7e4:	011787b3          	add	a5,a5,a7
   1d7e8:	02e4e063          	bltu	s1,a4,1d808 <__divdf3+0x618>
   1d7ec:	00e48c63          	beq	s1,a4,1d804 <__divdf3+0x614>
   1d7f0:	02412c83          	lw	s9,36(sp)
   1d7f4:	02012d03          	lw	s10,32(sp)
   1d7f8:	01c12d83          	lw	s11,28(sp)
   1d7fc:	00186813          	or	a6,a6,1
   1d800:	c61ff06f          	j	1d460 <__divdf3+0x270>
   1d804:	1c078a63          	beqz	a5,1d9d8 <__divdf3+0x7e8>
   1d808:	009c84b3          	add	s1,s9,s1
   1d80c:	fff80613          	add	a2,a6,-1
   1d810:	00048693          	mv	a3,s1
   1d814:	1b94ec63          	bltu	s1,s9,1d9cc <__divdf3+0x7dc>
   1d818:	24e4ea63          	bltu	s1,a4,1da6c <__divdf3+0x87c>
   1d81c:	26e48863          	beq	s1,a4,1da8c <__divdf3+0x89c>
   1d820:	00060813          	mv	a6,a2
   1d824:	fcdff06f          	j	1d7f0 <__divdf3+0x600>
   1d828:	00100713          	li	a4,1
   1d82c:	b20790e3          	bnez	a5,1d34c <__divdf3+0x15c>
   1d830:	41e98793          	add	a5,s3,1054
   1d834:	00f816b3          	sll	a3,a6,a5
   1d838:	00d036b3          	snez	a3,a3
   1d83c:	00f417b3          	sll	a5,s0,a5
   1d840:	00f6e7b3          	or	a5,a3,a5
   1d844:	00e85833          	srl	a6,a6,a4
   1d848:	00f86833          	or	a6,a6,a5
   1d84c:	00787793          	and	a5,a6,7
   1d850:	00e45433          	srl	s0,s0,a4
   1d854:	02078063          	beqz	a5,1d874 <__divdf3+0x684>
   1d858:	00f87793          	and	a5,a6,15
   1d85c:	00400713          	li	a4,4
   1d860:	00e78a63          	beq	a5,a4,1d874 <__divdf3+0x684>
   1d864:	00480793          	add	a5,a6,4
   1d868:	0107b833          	sltu	a6,a5,a6
   1d86c:	01040433          	add	s0,s0,a6
   1d870:	00078813          	mv	a6,a5
   1d874:	00841613          	sll	a2,s0,0x8
   1d878:	00100793          	li	a5,1
   1d87c:	00000693          	li	a3,0
   1d880:	00000713          	li	a4,0
   1d884:	ae0640e3          	bltz	a2,1d364 <__divdf3+0x174>
   1d888:	1280006f          	j	1d9b0 <__divdf3+0x7c0>
   1d88c:	de9d7ce3          	bgeu	s10,s1,1d684 <__divdf3+0x494>
   1d890:	015d06b3          	add	a3,s10,s5
   1d894:	01a6b633          	sltu	a2,a3,s10
   1d898:	019605b3          	add	a1,a2,s9
   1d89c:	00bb8bb3          	add	s7,s7,a1
   1d8a0:	00068d13          	mv	s10,a3
   1d8a4:	fff40593          	add	a1,s0,-1
   1d8a8:	077cfe63          	bgeu	s9,s7,1d924 <__divdf3+0x734>
   1d8ac:	14fbe063          	bltu	s7,a5,1d9ec <__divdf3+0x7fc>
   1d8b0:	13778c63          	beq	a5,s7,1d9e8 <__divdf3+0x7f8>
   1d8b4:	00058413          	mv	s0,a1
   1d8b8:	dcdff06f          	j	1d684 <__divdf3+0x494>
   1d8bc:	c50bece3          	bltu	s7,a6,1d514 <__divdf3+0x324>
   1d8c0:	01fb1c13          	sll	s8,s6,0x1f
   1d8c4:	001bd713          	srl	a4,s7,0x1
   1d8c8:	001b5493          	srl	s1,s6,0x1
   1d8cc:	00ec6c33          	or	s8,s8,a4
   1d8d0:	01fb9d13          	sll	s10,s7,0x1f
   1d8d4:	c51ff06f          	j	1d524 <__divdf3+0x334>
   1d8d8:	000a0513          	mv	a0,s4
   1d8dc:	330040ef          	jal	21c0c <__clzsi2>
   1d8e0:	01550693          	add	a3,a0,21
   1d8e4:	01c00713          	li	a4,28
   1d8e8:	02050793          	add	a5,a0,32
   1d8ec:	a2d75ae3          	bge	a4,a3,1d320 <__divdf3+0x130>
   1d8f0:	ff850513          	add	a0,a0,-8
   1d8f4:	00000813          	li	a6,0
   1d8f8:	00aa1433          	sll	s0,s4,a0
   1d8fc:	a41ff06f          	j	1d33c <__divdf3+0x14c>
   1d900:	30c040ef          	jal	21c0c <__clzsi2>
   1d904:	01550793          	add	a5,a0,21
   1d908:	01c00693          	li	a3,28
   1d90c:	02050713          	add	a4,a0,32
   1d910:	acf6dee3          	bge	a3,a5,1d3ec <__divdf3+0x1fc>
   1d914:	ff850493          	add	s1,a0,-8
   1d918:	00941b33          	sll	s6,s0,s1
   1d91c:	00000b93          	li	s7,0
   1d920:	ae9ff06f          	j	1d408 <__divdf3+0x218>
   1d924:	f97c98e3          	bne	s9,s7,1d8b4 <__divdf3+0x6c4>
   1d928:	f80602e3          	beqz	a2,1d8ac <__divdf3+0x6bc>
   1d92c:	00058413          	mv	s0,a1
   1d930:	d55ff06f          	j	1d684 <__divdf3+0x494>
   1d934:	ca97f8e3          	bgeu	a5,s1,1d5e4 <__divdf3+0x3f4>
   1d938:	ffeb8b93          	add	s7,s7,-2
   1d93c:	019787b3          	add	a5,a5,s9
   1d940:	ca9ff06f          	j	1d5e8 <__divdf3+0x3f8>
   1d944:	c497f4e3          	bgeu	a5,s1,1d58c <__divdf3+0x39c>
   1d948:	ffe40413          	add	s0,s0,-2
   1d94c:	019787b3          	add	a5,a5,s9
   1d950:	c41ff06f          	j	1d590 <__divdf3+0x3a0>
   1d954:	01f00693          	li	a3,31
   1d958:	ece6dce3          	bge	a3,a4,1d830 <__divdf3+0x640>
   1d95c:	fe100693          	li	a3,-31
   1d960:	40f686b3          	sub	a3,a3,a5
   1d964:	02000793          	li	a5,32
   1d968:	00d456b3          	srl	a3,s0,a3
   1d96c:	00f70863          	beq	a4,a5,1d97c <__divdf3+0x78c>
   1d970:	43e98793          	add	a5,s3,1086
   1d974:	00f417b3          	sll	a5,s0,a5
   1d978:	00f86833          	or	a6,a6,a5
   1d97c:	01003833          	snez	a6,a6
   1d980:	00d86833          	or	a6,a6,a3
   1d984:	00787713          	and	a4,a6,7
   1d988:	00000693          	li	a3,0
   1d98c:	02070863          	beqz	a4,1d9bc <__divdf3+0x7cc>
   1d990:	00f87793          	and	a5,a6,15
   1d994:	00400713          	li	a4,4
   1d998:	00000413          	li	s0,0
   1d99c:	00e78a63          	beq	a5,a4,1d9b0 <__divdf3+0x7c0>
   1d9a0:	00480793          	add	a5,a6,4
   1d9a4:	0107b833          	sltu	a6,a5,a6
   1d9a8:	01003433          	snez	s0,a6
   1d9ac:	00078813          	mv	a6,a5
   1d9b0:	00941693          	sll	a3,s0,0x9
   1d9b4:	01d41713          	sll	a4,s0,0x1d
   1d9b8:	00c6d693          	srl	a3,a3,0xc
   1d9bc:	00385813          	srl	a6,a6,0x3
   1d9c0:	00e86733          	or	a4,a6,a4
   1d9c4:	00000793          	li	a5,0
   1d9c8:	99dff06f          	j	1d364 <__divdf3+0x174>
   1d9cc:	00060813          	mv	a6,a2
   1d9d0:	e2e690e3          	bne	a3,a4,1d7f0 <__divdf3+0x600>
   1d9d4:	e1579ee3          	bne	a5,s5,1d7f0 <__divdf3+0x600>
   1d9d8:	02412c83          	lw	s9,36(sp)
   1d9dc:	02012d03          	lw	s10,32(sp)
   1d9e0:	01c12d83          	lw	s11,28(sp)
   1d9e4:	a7dff06f          	j	1d460 <__divdf3+0x270>
   1d9e8:	ec96f6e3          	bgeu	a3,s1,1d8b4 <__divdf3+0x6c4>
   1d9ec:	00da86b3          	add	a3,s5,a3
   1d9f0:	0156b633          	sltu	a2,a3,s5
   1d9f4:	01960633          	add	a2,a2,s9
   1d9f8:	ffe40413          	add	s0,s0,-2
   1d9fc:	00068d13          	mv	s10,a3
   1da00:	00cb8bb3          	add	s7,s7,a2
   1da04:	c81ff06f          	j	1d684 <__divdf3+0x494>
   1da08:	c0200713          	li	a4,-1022
   1da0c:	02412c83          	lw	s9,36(sp)
   1da10:	02012d03          	lw	s10,32(sp)
   1da14:	01c12d83          	lw	s11,28(sp)
   1da18:	3ff98793          	add	a5,s3,1023
   1da1c:	fff00813          	li	a6,-1
   1da20:	e0e9c4e3          	blt	s3,a4,1d828 <__divdf3+0x638>
   1da24:	00480713          	add	a4,a6,4
   1da28:	01073833          	sltu	a6,a4,a6
   1da2c:	01040433          	add	s0,s0,a6
   1da30:	00070813          	mv	a6,a4
   1da34:	a3dff06f          	j	1d470 <__divdf3+0x280>
   1da38:	00f87713          	and	a4,a6,15
   1da3c:	00400693          	li	a3,4
   1da40:	a2d708e3          	beq	a4,a3,1d470 <__divdf3+0x280>
   1da44:	fe1ff06f          	j	1da24 <__divdf3+0x834>
   1da48:	00d12623          	sw	a3,12(sp)
   1da4c:	cadff06f          	j	1d6f8 <__divdf3+0x508>
   1da50:	00078d13          	mv	s10,a5
   1da54:	d05ff06f          	j	1d758 <__divdf3+0x568>
   1da58:	00090a13          	mv	s4,s2
   1da5c:	7ff00793          	li	a5,2047
   1da60:	00000693          	li	a3,0
   1da64:	00000713          	li	a4,0
   1da68:	8fdff06f          	j	1d364 <__divdf3+0x174>
   1da6c:	001a9613          	sll	a2,s5,0x1
   1da70:	015636b3          	sltu	a3,a2,s5
   1da74:	019686b3          	add	a3,a3,s9
   1da78:	00d486b3          	add	a3,s1,a3
   1da7c:	ffe80813          	add	a6,a6,-2
   1da80:	00060a93          	mv	s5,a2
   1da84:	f4e688e3          	beq	a3,a4,1d9d4 <__divdf3+0x7e4>
   1da88:	d69ff06f          	j	1d7f0 <__divdf3+0x600>
   1da8c:	fefae0e3          	bltu	s5,a5,1da6c <__divdf3+0x87c>
   1da90:	00060813          	mv	a6,a2
   1da94:	f41ff06f          	j	1d9d4 <__divdf3+0x7e4>

0001da98 <__muldf3>:
   1da98:	fd010113          	add	sp,sp,-48
   1da9c:	0145d793          	srl	a5,a1,0x14
   1daa0:	02812423          	sw	s0,40(sp)
   1daa4:	02912223          	sw	s1,36(sp)
   1daa8:	03212023          	sw	s2,32(sp)
   1daac:	01312e23          	sw	s3,28(sp)
   1dab0:	01512a23          	sw	s5,20(sp)
   1dab4:	00c59493          	sll	s1,a1,0xc
   1dab8:	02112623          	sw	ra,44(sp)
   1dabc:	01412c23          	sw	s4,24(sp)
   1dac0:	01612823          	sw	s6,16(sp)
   1dac4:	01712623          	sw	s7,12(sp)
   1dac8:	01812423          	sw	s8,8(sp)
   1dacc:	7ff7f793          	and	a5,a5,2047
   1dad0:	00050413          	mv	s0,a0
   1dad4:	00060a93          	mv	s5,a2
   1dad8:	00068993          	mv	s3,a3
   1dadc:	00c4d493          	srl	s1,s1,0xc
   1dae0:	01f5d913          	srl	s2,a1,0x1f
   1dae4:	4e078063          	beqz	a5,1dfc4 <__muldf3+0x52c>
   1dae8:	7ff00713          	li	a4,2047
   1daec:	0ae78663          	beq	a5,a4,1db98 <__muldf3+0x100>
   1daf0:	00349693          	sll	a3,s1,0x3
   1daf4:	01d55713          	srl	a4,a0,0x1d
   1daf8:	00d76733          	or	a4,a4,a3
   1dafc:	008006b7          	lui	a3,0x800
   1db00:	00d764b3          	or	s1,a4,a3
   1db04:	00351a13          	sll	s4,a0,0x3
   1db08:	c0178c13          	add	s8,a5,-1023
   1db0c:	00000b13          	li	s6,0
   1db10:	00000b93          	li	s7,0
   1db14:	0149d793          	srl	a5,s3,0x14
   1db18:	00c99713          	sll	a4,s3,0xc
   1db1c:	7ff7f793          	and	a5,a5,2047
   1db20:	000a8e13          	mv	t3,s5
   1db24:	00c75413          	srl	s0,a4,0xc
   1db28:	01f9d993          	srl	s3,s3,0x1f
   1db2c:	0a078063          	beqz	a5,1dbcc <__muldf3+0x134>
   1db30:	7ff00713          	li	a4,2047
   1db34:	14e78e63          	beq	a5,a4,1dc90 <__muldf3+0x1f8>
   1db38:	00341713          	sll	a4,s0,0x3
   1db3c:	01dad693          	srl	a3,s5,0x1d
   1db40:	00e6e6b3          	or	a3,a3,a4
   1db44:	c0178793          	add	a5,a5,-1023
   1db48:	00800737          	lui	a4,0x800
   1db4c:	00e6e433          	or	s0,a3,a4
   1db50:	003a9e13          	sll	t3,s5,0x3
   1db54:	01878333          	add	t1,a5,s8
   1db58:	00000693          	li	a3,0
   1db5c:	00a00793          	li	a5,10
   1db60:	00130893          	add	a7,t1,1
   1db64:	0b67cc63          	blt	a5,s6,1dc1c <__muldf3+0x184>
   1db68:	013945b3          	xor	a1,s2,s3
   1db6c:	00200793          	li	a5,2
   1db70:	00058813          	mv	a6,a1
   1db74:	1567c663          	blt	a5,s6,1dcc0 <__muldf3+0x228>
   1db78:	fffb0b13          	add	s6,s6,-1
   1db7c:	00100713          	li	a4,1
   1db80:	17676063          	bltu	a4,s6,1dce0 <__muldf3+0x248>
   1db84:	48f68663          	beq	a3,a5,1e010 <__muldf3+0x578>
   1db88:	00040493          	mv	s1,s0
   1db8c:	000e0a13          	mv	s4,t3
   1db90:	00068b93          	mv	s7,a3
   1db94:	09c0006f          	j	1dc30 <__muldf3+0x198>
   1db98:	00a4ea33          	or	s4,s1,a0
   1db9c:	480a1463          	bnez	s4,1e024 <__muldf3+0x58c>
   1dba0:	0149d793          	srl	a5,s3,0x14
   1dba4:	00c99713          	sll	a4,s3,0xc
   1dba8:	7ff7f793          	and	a5,a5,2047
   1dbac:	00000493          	li	s1,0
   1dbb0:	00800b13          	li	s6,8
   1dbb4:	7ff00c13          	li	s8,2047
   1dbb8:	00200b93          	li	s7,2
   1dbbc:	000a8e13          	mv	t3,s5
   1dbc0:	00c75413          	srl	s0,a4,0xc
   1dbc4:	01f9d993          	srl	s3,s3,0x1f
   1dbc8:	f60794e3          	bnez	a5,1db30 <__muldf3+0x98>
   1dbcc:	015467b3          	or	a5,s0,s5
   1dbd0:	46078e63          	beqz	a5,1e04c <__muldf3+0x5b4>
   1dbd4:	54040c63          	beqz	s0,1e12c <__muldf3+0x694>
   1dbd8:	00040513          	mv	a0,s0
   1dbdc:	030040ef          	jal	21c0c <__clzsi2>
   1dbe0:	00050313          	mv	t1,a0
   1dbe4:	ff550713          	add	a4,a0,-11
   1dbe8:	01d00793          	li	a5,29
   1dbec:	ff830e13          	add	t3,t1,-8
   1dbf0:	40e787b3          	sub	a5,a5,a4
   1dbf4:	00fad7b3          	srl	a5,s5,a5
   1dbf8:	01c41733          	sll	a4,s0,t3
   1dbfc:	00e7e433          	or	s0,a5,a4
   1dc00:	01ca9e33          	sll	t3,s5,t3
   1dc04:	406c0333          	sub	t1,s8,t1
   1dc08:	c0d30313          	add	t1,t1,-1011
   1dc0c:	00a00793          	li	a5,10
   1dc10:	00000693          	li	a3,0
   1dc14:	00130893          	add	a7,t1,1
   1dc18:	f567d8e3          	bge	a5,s6,1db68 <__muldf3+0xd0>
   1dc1c:	00090593          	mv	a1,s2
   1dc20:	00200793          	li	a5,2
   1dc24:	3efb8663          	beq	s7,a5,1e010 <__muldf3+0x578>
   1dc28:	00300793          	li	a5,3
   1dc2c:	54fb8863          	beq	s7,a5,1e17c <__muldf3+0x6e4>
   1dc30:	00100793          	li	a5,1
   1dc34:	00058813          	mv	a6,a1
   1dc38:	52fb9663          	bne	s7,a5,1e164 <__muldf3+0x6cc>
   1dc3c:	00000793          	li	a5,0
   1dc40:	00000693          	li	a3,0
   1dc44:	00000713          	li	a4,0
   1dc48:	02c12083          	lw	ra,44(sp)
   1dc4c:	02812403          	lw	s0,40(sp)
   1dc50:	01479793          	sll	a5,a5,0x14
   1dc54:	00d7e7b3          	or	a5,a5,a3
   1dc58:	01f81813          	sll	a6,a6,0x1f
   1dc5c:	0107e7b3          	or	a5,a5,a6
   1dc60:	02412483          	lw	s1,36(sp)
   1dc64:	02012903          	lw	s2,32(sp)
   1dc68:	01c12983          	lw	s3,28(sp)
   1dc6c:	01812a03          	lw	s4,24(sp)
   1dc70:	01412a83          	lw	s5,20(sp)
   1dc74:	01012b03          	lw	s6,16(sp)
   1dc78:	00c12b83          	lw	s7,12(sp)
   1dc7c:	00812c03          	lw	s8,8(sp)
   1dc80:	00070513          	mv	a0,a4
   1dc84:	00078593          	mv	a1,a5
   1dc88:	03010113          	add	sp,sp,48
   1dc8c:	00008067          	ret
   1dc90:	01546733          	or	a4,s0,s5
   1dc94:	7ffc0313          	add	t1,s8,2047
   1dc98:	3c070663          	beqz	a4,1e064 <__muldf3+0x5cc>
   1dc9c:	00001737          	lui	a4,0x1
   1dca0:	01394833          	xor	a6,s2,s3
   1dca4:	80070713          	add	a4,a4,-2048 # 800 <_start+0x44>
   1dca8:	003b6b13          	or	s6,s6,3
   1dcac:	00a00693          	li	a3,10
   1dcb0:	00080593          	mv	a1,a6
   1dcb4:	00ec08b3          	add	a7,s8,a4
   1dcb8:	4366cc63          	blt	a3,s6,1e0f0 <__muldf3+0x658>
   1dcbc:	00300693          	li	a3,3
   1dcc0:	00100613          	li	a2,1
   1dcc4:	01661633          	sll	a2,a2,s6
   1dcc8:	53067713          	and	a4,a2,1328
   1dccc:	f4071ae3          	bnez	a4,1dc20 <__muldf3+0x188>
   1dcd0:	24067793          	and	a5,a2,576
   1dcd4:	48079063          	bnez	a5,1e154 <__muldf3+0x6bc>
   1dcd8:	08867613          	and	a2,a2,136
   1dcdc:	38061e63          	bnez	a2,1e078 <__muldf3+0x5e0>
   1dce0:	00010fb7          	lui	t6,0x10
   1dce4:	ffff8293          	add	t0,t6,-1 # ffff <__sfvwrite_r+0x9b>
   1dce8:	005a7f33          	and	t5,s4,t0
   1dcec:	005e72b3          	and	t0,t3,t0
   1dcf0:	010a5a13          	srl	s4,s4,0x10
   1dcf4:	010e5e13          	srl	t3,t3,0x10
   1dcf8:	000f0513          	mv	a0,t5
   1dcfc:	00028593          	mv	a1,t0
   1dd00:	635030ef          	jal	21b34 <__mulsi3>
   1dd04:	00050713          	mv	a4,a0
   1dd08:	000e0593          	mv	a1,t3
   1dd0c:	000f0513          	mv	a0,t5
   1dd10:	625030ef          	jal	21b34 <__mulsi3>
   1dd14:	00050793          	mv	a5,a0
   1dd18:	00028593          	mv	a1,t0
   1dd1c:	000a0513          	mv	a0,s4
   1dd20:	615030ef          	jal	21b34 <__mulsi3>
   1dd24:	00050e93          	mv	t4,a0
   1dd28:	000e0593          	mv	a1,t3
   1dd2c:	000a0513          	mv	a0,s4
   1dd30:	605030ef          	jal	21b34 <__mulsi3>
   1dd34:	01d786b3          	add	a3,a5,t4
   1dd38:	01075393          	srl	t2,a4,0x10
   1dd3c:	00d383b3          	add	t2,t2,a3
   1dd40:	00050793          	mv	a5,a0
   1dd44:	01d3f463          	bgeu	t2,t4,1dd4c <__muldf3+0x2b4>
   1dd48:	01f507b3          	add	a5,a0,t6
   1dd4c:	000109b7          	lui	s3,0x10
   1dd50:	fff98913          	add	s2,s3,-1 # ffff <__sfvwrite_r+0x9b>
   1dd54:	0123feb3          	and	t4,t2,s2
   1dd58:	01277733          	and	a4,a4,s2
   1dd5c:	010e9e93          	sll	t4,t4,0x10
   1dd60:	01247933          	and	s2,s0,s2
   1dd64:	0103d393          	srl	t2,t2,0x10
   1dd68:	00ee8eb3          	add	t4,t4,a4
   1dd6c:	01045413          	srl	s0,s0,0x10
   1dd70:	000f0513          	mv	a0,t5
   1dd74:	00090593          	mv	a1,s2
   1dd78:	5bd030ef          	jal	21b34 <__mulsi3>
   1dd7c:	00050f93          	mv	t6,a0
   1dd80:	00040593          	mv	a1,s0
   1dd84:	000f0513          	mv	a0,t5
   1dd88:	5ad030ef          	jal	21b34 <__mulsi3>
   1dd8c:	00050713          	mv	a4,a0
   1dd90:	00090593          	mv	a1,s2
   1dd94:	000a0513          	mv	a0,s4
   1dd98:	59d030ef          	jal	21b34 <__mulsi3>
   1dd9c:	00050f13          	mv	t5,a0
   1dda0:	00040593          	mv	a1,s0
   1dda4:	000a0513          	mv	a0,s4
   1dda8:	58d030ef          	jal	21b34 <__mulsi3>
   1ddac:	010fd693          	srl	a3,t6,0x10
   1ddb0:	01e70733          	add	a4,a4,t5
   1ddb4:	00e686b3          	add	a3,a3,a4
   1ddb8:	01e6f463          	bgeu	a3,t5,1ddc0 <__muldf3+0x328>
   1ddbc:	01350533          	add	a0,a0,s3
   1ddc0:	00010a37          	lui	s4,0x10
   1ddc4:	fffa0f13          	add	t5,s4,-1 # ffff <__sfvwrite_r+0x9b>
   1ddc8:	01e6f733          	and	a4,a3,t5
   1ddcc:	01efffb3          	and	t6,t6,t5
   1ddd0:	01071713          	sll	a4,a4,0x10
   1ddd4:	01f70733          	add	a4,a4,t6
   1ddd8:	01e4ff33          	and	t5,s1,t5
   1dddc:	0106d693          	srl	a3,a3,0x10
   1dde0:	00a68fb3          	add	t6,a3,a0
   1dde4:	00e383b3          	add	t2,t2,a4
   1dde8:	0104d493          	srl	s1,s1,0x10
   1ddec:	000f0513          	mv	a0,t5
   1ddf0:	00028593          	mv	a1,t0
   1ddf4:	541030ef          	jal	21b34 <__mulsi3>
   1ddf8:	00050a93          	mv	s5,a0
   1ddfc:	000e0593          	mv	a1,t3
   1de00:	000f0513          	mv	a0,t5
   1de04:	531030ef          	jal	21b34 <__mulsi3>
   1de08:	00050993          	mv	s3,a0
   1de0c:	00028593          	mv	a1,t0
   1de10:	00048513          	mv	a0,s1
   1de14:	521030ef          	jal	21b34 <__mulsi3>
   1de18:	00050293          	mv	t0,a0
   1de1c:	000e0593          	mv	a1,t3
   1de20:	00048513          	mv	a0,s1
   1de24:	511030ef          	jal	21b34 <__mulsi3>
   1de28:	010ad613          	srl	a2,s5,0x10
   1de2c:	005989b3          	add	s3,s3,t0
   1de30:	01360633          	add	a2,a2,s3
   1de34:	00567463          	bgeu	a2,t0,1de3c <__muldf3+0x3a4>
   1de38:	01450533          	add	a0,a0,s4
   1de3c:	00010a37          	lui	s4,0x10
   1de40:	fffa0693          	add	a3,s4,-1 # ffff <__sfvwrite_r+0x9b>
   1de44:	00d672b3          	and	t0,a2,a3
   1de48:	00dafab3          	and	s5,s5,a3
   1de4c:	01065613          	srl	a2,a2,0x10
   1de50:	01029293          	sll	t0,t0,0x10
   1de54:	00a60e33          	add	t3,a2,a0
   1de58:	015282b3          	add	t0,t0,s5
   1de5c:	000f0513          	mv	a0,t5
   1de60:	00090593          	mv	a1,s2
   1de64:	4d1030ef          	jal	21b34 <__mulsi3>
   1de68:	00050993          	mv	s3,a0
   1de6c:	00040593          	mv	a1,s0
   1de70:	000f0513          	mv	a0,t5
   1de74:	4c1030ef          	jal	21b34 <__mulsi3>
   1de78:	00050f13          	mv	t5,a0
   1de7c:	00090593          	mv	a1,s2
   1de80:	00048513          	mv	a0,s1
   1de84:	4b1030ef          	jal	21b34 <__mulsi3>
   1de88:	00050913          	mv	s2,a0
   1de8c:	00040593          	mv	a1,s0
   1de90:	00048513          	mv	a0,s1
   1de94:	4a1030ef          	jal	21b34 <__mulsi3>
   1de98:	012f06b3          	add	a3,t5,s2
   1de9c:	0109d593          	srl	a1,s3,0x10
   1dea0:	00d58433          	add	s0,a1,a3
   1dea4:	00050f13          	mv	t5,a0
   1dea8:	01247463          	bgeu	s0,s2,1deb0 <__muldf3+0x418>
   1deac:	01450f33          	add	t5,a0,s4
   1deb0:	00010637          	lui	a2,0x10
   1deb4:	fff60613          	add	a2,a2,-1 # ffff <__sfvwrite_r+0x9b>
   1deb8:	00c476b3          	and	a3,s0,a2
   1debc:	00c9f9b3          	and	s3,s3,a2
   1dec0:	01069693          	sll	a3,a3,0x10
   1dec4:	007787b3          	add	a5,a5,t2
   1dec8:	013686b3          	add	a3,a3,s3
   1decc:	01f685b3          	add	a1,a3,t6
   1ded0:	00e7b733          	sltu	a4,a5,a4
   1ded4:	00e58733          	add	a4,a1,a4
   1ded8:	005782b3          	add	t0,a5,t0
   1dedc:	01c70633          	add	a2,a4,t3
   1dee0:	00f2b7b3          	sltu	a5,t0,a5
   1dee4:	00f607b3          	add	a5,a2,a5
   1dee8:	00d5b6b3          	sltu	a3,a1,a3
   1deec:	00b735b3          	sltu	a1,a4,a1
   1def0:	00b6e6b3          	or	a3,a3,a1
   1def4:	00e63733          	sltu	a4,a2,a4
   1def8:	01045593          	srl	a1,s0,0x10
   1defc:	00c7b633          	sltu	a2,a5,a2
   1df00:	00b686b3          	add	a3,a3,a1
   1df04:	00929a13          	sll	s4,t0,0x9
   1df08:	00c76733          	or	a4,a4,a2
   1df0c:	00d70733          	add	a4,a4,a3
   1df10:	01da6a33          	or	s4,s4,t4
   1df14:	01e70733          	add	a4,a4,t5
   1df18:	01403a33          	snez	s4,s4
   1df1c:	0172d293          	srl	t0,t0,0x17
   1df20:	00971713          	sll	a4,a4,0x9
   1df24:	0177d693          	srl	a3,a5,0x17
   1df28:	005a6a33          	or	s4,s4,t0
   1df2c:	00979793          	sll	a5,a5,0x9
   1df30:	00fa6a33          	or	s4,s4,a5
   1df34:	00771793          	sll	a5,a4,0x7
   1df38:	00d764b3          	or	s1,a4,a3
   1df3c:	0207d063          	bgez	a5,1df5c <__muldf3+0x4c4>
   1df40:	001a5793          	srl	a5,s4,0x1
   1df44:	001a7a13          	and	s4,s4,1
   1df48:	01f49713          	sll	a4,s1,0x1f
   1df4c:	0147e7b3          	or	a5,a5,s4
   1df50:	00e7ea33          	or	s4,a5,a4
   1df54:	0014d493          	srl	s1,s1,0x1
   1df58:	00088313          	mv	t1,a7
   1df5c:	3ff30793          	add	a5,t1,1023
   1df60:	12f05663          	blez	a5,1e08c <__muldf3+0x5f4>
   1df64:	007a7713          	and	a4,s4,7
   1df68:	02070063          	beqz	a4,1df88 <__muldf3+0x4f0>
   1df6c:	00fa7713          	and	a4,s4,15
   1df70:	00400693          	li	a3,4
   1df74:	00d70a63          	beq	a4,a3,1df88 <__muldf3+0x4f0>
   1df78:	004a0713          	add	a4,s4,4
   1df7c:	01473a33          	sltu	s4,a4,s4
   1df80:	014484b3          	add	s1,s1,s4
   1df84:	00070a13          	mv	s4,a4
   1df88:	00749713          	sll	a4,s1,0x7
   1df8c:	00075a63          	bgez	a4,1dfa0 <__muldf3+0x508>
   1df90:	ff0007b7          	lui	a5,0xff000
   1df94:	fff78793          	add	a5,a5,-1 # feffffff <__alt_data_end+0xfefb6c1f>
   1df98:	00f4f4b3          	and	s1,s1,a5
   1df9c:	40030793          	add	a5,t1,1024
   1dfa0:	7fe00713          	li	a4,2046
   1dfa4:	1cf74463          	blt	a4,a5,1e16c <__muldf3+0x6d4>
   1dfa8:	003a5a13          	srl	s4,s4,0x3
   1dfac:	01d49713          	sll	a4,s1,0x1d
   1dfb0:	00949693          	sll	a3,s1,0x9
   1dfb4:	01476733          	or	a4,a4,s4
   1dfb8:	00c6d693          	srl	a3,a3,0xc
   1dfbc:	7ff7f793          	and	a5,a5,2047
   1dfc0:	c89ff06f          	j	1dc48 <__muldf3+0x1b0>
   1dfc4:	00a4ea33          	or	s4,s1,a0
   1dfc8:	060a0863          	beqz	s4,1e038 <__muldf3+0x5a0>
   1dfcc:	12048e63          	beqz	s1,1e108 <__muldf3+0x670>
   1dfd0:	00048513          	mv	a0,s1
   1dfd4:	439030ef          	jal	21c0c <__clzsi2>
   1dfd8:	00050713          	mv	a4,a0
   1dfdc:	ff550693          	add	a3,a0,-11
   1dfe0:	01d00793          	li	a5,29
   1dfe4:	ff870a13          	add	s4,a4,-8
   1dfe8:	40d787b3          	sub	a5,a5,a3
   1dfec:	00f457b3          	srl	a5,s0,a5
   1dff0:	014496b3          	sll	a3,s1,s4
   1dff4:	00d7e4b3          	or	s1,a5,a3
   1dff8:	01441a33          	sll	s4,s0,s4
   1dffc:	c0d00793          	li	a5,-1011
   1e000:	40e78c33          	sub	s8,a5,a4
   1e004:	00000b13          	li	s6,0
   1e008:	00000b93          	li	s7,0
   1e00c:	b09ff06f          	j	1db14 <__muldf3+0x7c>
   1e010:	00058813          	mv	a6,a1
   1e014:	7ff00793          	li	a5,2047
   1e018:	00000693          	li	a3,0
   1e01c:	00000713          	li	a4,0
   1e020:	c29ff06f          	j	1dc48 <__muldf3+0x1b0>
   1e024:	00050a13          	mv	s4,a0
   1e028:	00c00b13          	li	s6,12
   1e02c:	7ff00c13          	li	s8,2047
   1e030:	00300b93          	li	s7,3
   1e034:	ae1ff06f          	j	1db14 <__muldf3+0x7c>
   1e038:	00000493          	li	s1,0
   1e03c:	00400b13          	li	s6,4
   1e040:	00000c13          	li	s8,0
   1e044:	00100b93          	li	s7,1
   1e048:	acdff06f          	j	1db14 <__muldf3+0x7c>
   1e04c:	001b6b13          	or	s6,s6,1
   1e050:	000c0313          	mv	t1,s8
   1e054:	00000413          	li	s0,0
   1e058:	00000e13          	li	t3,0
   1e05c:	00100693          	li	a3,1
   1e060:	afdff06f          	j	1db5c <__muldf3+0xc4>
   1e064:	002b6b13          	or	s6,s6,2
   1e068:	00000413          	li	s0,0
   1e06c:	00000e13          	li	t3,0
   1e070:	00200693          	li	a3,2
   1e074:	ae9ff06f          	j	1db5c <__muldf3+0xc4>
   1e078:	00040493          	mv	s1,s0
   1e07c:	000e0a13          	mv	s4,t3
   1e080:	00068b93          	mv	s7,a3
   1e084:	00098593          	mv	a1,s3
   1e088:	b99ff06f          	j	1dc20 <__muldf3+0x188>
   1e08c:	00100713          	li	a4,1
   1e090:	10079063          	bnez	a5,1e190 <__muldf3+0x6f8>
   1e094:	41e30313          	add	t1,t1,1054
   1e098:	006a1633          	sll	a2,s4,t1
   1e09c:	00c03633          	snez	a2,a2
   1e0a0:	00649333          	sll	t1,s1,t1
   1e0a4:	00ea5a33          	srl	s4,s4,a4
   1e0a8:	00666633          	or	a2,a2,t1
   1e0ac:	01466633          	or	a2,a2,s4
   1e0b0:	00767793          	and	a5,a2,7
   1e0b4:	00e4d5b3          	srl	a1,s1,a4
   1e0b8:	02078063          	beqz	a5,1e0d8 <__muldf3+0x640>
   1e0bc:	00f67793          	and	a5,a2,15
   1e0c0:	00400713          	li	a4,4
   1e0c4:	00e78a63          	beq	a5,a4,1e0d8 <__muldf3+0x640>
   1e0c8:	00460793          	add	a5,a2,4
   1e0cc:	00c7b633          	sltu	a2,a5,a2
   1e0d0:	00c585b3          	add	a1,a1,a2
   1e0d4:	00078613          	mv	a2,a5
   1e0d8:	00859513          	sll	a0,a1,0x8
   1e0dc:	00100793          	li	a5,1
   1e0e0:	00000693          	li	a3,0
   1e0e4:	00000713          	li	a4,0
   1e0e8:	b60540e3          	bltz	a0,1dc48 <__muldf3+0x1b0>
   1e0ec:	10c0006f          	j	1e1f8 <__muldf3+0x760>
   1e0f0:	00f00713          	li	a4,15
   1e0f4:	12eb1063          	bne	s6,a4,1e214 <__muldf3+0x77c>
   1e0f8:	00000813          	li	a6,0
   1e0fc:	000806b7          	lui	a3,0x80
   1e100:	00000713          	li	a4,0
   1e104:	b45ff06f          	j	1dc48 <__muldf3+0x1b0>
   1e108:	305030ef          	jal	21c0c <__clzsi2>
   1e10c:	01550693          	add	a3,a0,21
   1e110:	01c00793          	li	a5,28
   1e114:	02050713          	add	a4,a0,32
   1e118:	ecd7d4e3          	bge	a5,a3,1dfe0 <__muldf3+0x548>
   1e11c:	ff850513          	add	a0,a0,-8
   1e120:	00000a13          	li	s4,0
   1e124:	00a414b3          	sll	s1,s0,a0
   1e128:	ed5ff06f          	j	1dffc <__muldf3+0x564>
   1e12c:	000a8513          	mv	a0,s5
   1e130:	2dd030ef          	jal	21c0c <__clzsi2>
   1e134:	01550713          	add	a4,a0,21
   1e138:	01c00793          	li	a5,28
   1e13c:	02050313          	add	t1,a0,32
   1e140:	aae7d4e3          	bge	a5,a4,1dbe8 <__muldf3+0x150>
   1e144:	ff850513          	add	a0,a0,-8
   1e148:	00000e13          	li	t3,0
   1e14c:	00aa9433          	sll	s0,s5,a0
   1e150:	ab5ff06f          	j	1dc04 <__muldf3+0x16c>
   1e154:	00000813          	li	a6,0
   1e158:	7ff00793          	li	a5,2047
   1e15c:	000806b7          	lui	a3,0x80
   1e160:	ae9ff06f          	j	1dc48 <__muldf3+0x1b0>
   1e164:	00088313          	mv	t1,a7
   1e168:	df5ff06f          	j	1df5c <__muldf3+0x4c4>
   1e16c:	7ff00793          	li	a5,2047
   1e170:	00000693          	li	a3,0
   1e174:	00000713          	li	a4,0
   1e178:	ad1ff06f          	j	1dc48 <__muldf3+0x1b0>
   1e17c:	00000813          	li	a6,0
   1e180:	7ff00793          	li	a5,2047
   1e184:	000806b7          	lui	a3,0x80
   1e188:	00000713          	li	a4,0
   1e18c:	abdff06f          	j	1dc48 <__muldf3+0x1b0>
   1e190:	40f70733          	sub	a4,a4,a5
   1e194:	03800693          	li	a3,56
   1e198:	aae6c2e3          	blt	a3,a4,1dc3c <__muldf3+0x1a4>
   1e19c:	01f00693          	li	a3,31
   1e1a0:	eee6dae3          	bge	a3,a4,1e094 <__muldf3+0x5fc>
   1e1a4:	fe100693          	li	a3,-31
   1e1a8:	40f687b3          	sub	a5,a3,a5
   1e1ac:	02000693          	li	a3,32
   1e1b0:	00f4d7b3          	srl	a5,s1,a5
   1e1b4:	00d70863          	beq	a4,a3,1e1c4 <__muldf3+0x72c>
   1e1b8:	43e30313          	add	t1,t1,1086
   1e1bc:	00649333          	sll	t1,s1,t1
   1e1c0:	006a6a33          	or	s4,s4,t1
   1e1c4:	01403633          	snez	a2,s4
   1e1c8:	00f66633          	or	a2,a2,a5
   1e1cc:	00767713          	and	a4,a2,7
   1e1d0:	00000693          	li	a3,0
   1e1d4:	02070863          	beqz	a4,1e204 <__muldf3+0x76c>
   1e1d8:	00f67793          	and	a5,a2,15
   1e1dc:	00400713          	li	a4,4
   1e1e0:	00000593          	li	a1,0
   1e1e4:	00e78a63          	beq	a5,a4,1e1f8 <__muldf3+0x760>
   1e1e8:	00460793          	add	a5,a2,4
   1e1ec:	00c7b633          	sltu	a2,a5,a2
   1e1f0:	00c035b3          	snez	a1,a2
   1e1f4:	00078613          	mv	a2,a5
   1e1f8:	00959693          	sll	a3,a1,0x9
   1e1fc:	01d59713          	sll	a4,a1,0x1d
   1e200:	00c6d693          	srl	a3,a3,0xc
   1e204:	00365613          	srl	a2,a2,0x3
   1e208:	00e66733          	or	a4,a2,a4
   1e20c:	00000793          	li	a5,0
   1e210:	a39ff06f          	j	1dc48 <__muldf3+0x1b0>
   1e214:	00040493          	mv	s1,s0
   1e218:	000a8a13          	mv	s4,s5
   1e21c:	00300b93          	li	s7,3
   1e220:	00098593          	mv	a1,s3
   1e224:	9fdff06f          	j	1dc20 <__muldf3+0x188>

0001e228 <__eqtf2>:
   1e228:	00c52703          	lw	a4,12(a0)
   1e22c:	00c5a683          	lw	a3,12(a1)
   1e230:	000087b7          	lui	a5,0x8
   1e234:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   1e238:	01075613          	srl	a2,a4,0x10
   1e23c:	0106d813          	srl	a6,a3,0x10
   1e240:	01071293          	sll	t0,a4,0x10
   1e244:	01069393          	sll	t2,a3,0x10
   1e248:	00f67633          	and	a2,a2,a5
   1e24c:	00052883          	lw	a7,0(a0)
   1e250:	00452e03          	lw	t3,4(a0)
   1e254:	00852f03          	lw	t5,8(a0)
   1e258:	0005a303          	lw	t1,0(a1)
   1e25c:	0045ae83          	lw	t4,4(a1)
   1e260:	0085af83          	lw	t6,8(a1)
   1e264:	ff010113          	add	sp,sp,-16
   1e268:	0102d293          	srl	t0,t0,0x10
   1e26c:	01f75713          	srl	a4,a4,0x1f
   1e270:	0103d393          	srl	t2,t2,0x10
   1e274:	00f875b3          	and	a1,a6,a5
   1e278:	01f6d693          	srl	a3,a3,0x1f
   1e27c:	00100513          	li	a0,1
   1e280:	00f60c63          	beq	a2,a5,1e298 <__eqtf2+0x70>
   1e284:	00f58663          	beq	a1,a5,1e290 <__eqtf2+0x68>
   1e288:	00c59463          	bne	a1,a2,1e290 <__eqtf2+0x68>
   1e28c:	02688e63          	beq	a7,t1,1e2c8 <__eqtf2+0xa0>
   1e290:	01010113          	add	sp,sp,16
   1e294:	00008067          	ret
   1e298:	fec59ce3          	bne	a1,a2,1e290 <__eqtf2+0x68>
   1e29c:	01c8e7b3          	or	a5,a7,t3
   1e2a0:	01e7e7b3          	or	a5,a5,t5
   1e2a4:	0057e7b3          	or	a5,a5,t0
   1e2a8:	0067e7b3          	or	a5,a5,t1
   1e2ac:	01d7e7b3          	or	a5,a5,t4
   1e2b0:	01f7e7b3          	or	a5,a5,t6
   1e2b4:	0077e7b3          	or	a5,a5,t2
   1e2b8:	fc079ce3          	bnez	a5,1e290 <__eqtf2+0x68>
   1e2bc:	40d70733          	sub	a4,a4,a3
   1e2c0:	00e03533          	snez	a0,a4
   1e2c4:	fcdff06f          	j	1e290 <__eqtf2+0x68>
   1e2c8:	fdde14e3          	bne	t3,t4,1e290 <__eqtf2+0x68>
   1e2cc:	fdff12e3          	bne	t5,t6,1e290 <__eqtf2+0x68>
   1e2d0:	fc7290e3          	bne	t0,t2,1e290 <__eqtf2+0x68>
   1e2d4:	00d70e63          	beq	a4,a3,1e2f0 <__eqtf2+0xc8>
   1e2d8:	fa059ce3          	bnez	a1,1e290 <__eqtf2+0x68>
   1e2dc:	01c8e7b3          	or	a5,a7,t3
   1e2e0:	01e7e7b3          	or	a5,a5,t5
   1e2e4:	0057e7b3          	or	a5,a5,t0
   1e2e8:	00f03533          	snez	a0,a5
   1e2ec:	fa5ff06f          	j	1e290 <__eqtf2+0x68>
   1e2f0:	00000513          	li	a0,0
   1e2f4:	f9dff06f          	j	1e290 <__eqtf2+0x68>

0001e2f8 <__getf2>:
   1e2f8:	00c52303          	lw	t1,12(a0)
   1e2fc:	00c5a883          	lw	a7,12(a1)
   1e300:	000087b7          	lui	a5,0x8
   1e304:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   1e308:	01035613          	srl	a2,t1,0x10
   1e30c:	0108d713          	srl	a4,a7,0x10
   1e310:	01031f13          	sll	t5,t1,0x10
   1e314:	0005a683          	lw	a3,0(a1)
   1e318:	0045ae83          	lw	t4,4(a1)
   1e31c:	0085ae03          	lw	t3,8(a1)
   1e320:	00f67633          	and	a2,a2,a5
   1e324:	01089593          	sll	a1,a7,0x10
   1e328:	00052283          	lw	t0,0(a0)
   1e32c:	00452803          	lw	a6,4(a0)
   1e330:	00852f83          	lw	t6,8(a0)
   1e334:	ff010113          	add	sp,sp,-16
   1e338:	010f5f13          	srl	t5,t5,0x10
   1e33c:	01f35313          	srl	t1,t1,0x1f
   1e340:	0105d593          	srl	a1,a1,0x10
   1e344:	00f77533          	and	a0,a4,a5
   1e348:	01f8d893          	srl	a7,a7,0x1f
   1e34c:	06f60a63          	beq	a2,a5,1e3c0 <__getf2+0xc8>
   1e350:	02f50e63          	beq	a0,a5,1e38c <__getf2+0x94>
   1e354:	0c061c63          	bnez	a2,1e42c <__getf2+0x134>
   1e358:	005867b3          	or	a5,a6,t0
   1e35c:	01f7e7b3          	or	a5,a5,t6
   1e360:	01e7e7b3          	or	a5,a5,t5
   1e364:	0e051263          	bnez	a0,1e448 <__getf2+0x150>
   1e368:	01d6e733          	or	a4,a3,t4
   1e36c:	01c76733          	or	a4,a4,t3
   1e370:	00b76733          	or	a4,a4,a1
   1e374:	06071e63          	bnez	a4,1e3f0 <__getf2+0xf8>
   1e378:	00078663          	beqz	a5,1e384 <__getf2+0x8c>
   1e37c:	02031e63          	bnez	t1,1e3b8 <__getf2+0xc0>
   1e380:	00100513          	li	a0,1
   1e384:	01010113          	add	sp,sp,16
   1e388:	00008067          	ret
   1e38c:	01d6e6b3          	or	a3,a3,t4
   1e390:	01c6e6b3          	or	a3,a3,t3
   1e394:	00b6e6b3          	or	a3,a3,a1
   1e398:	0a069463          	bnez	a3,1e440 <__getf2+0x148>
   1e39c:	08061463          	bnez	a2,1e424 <__getf2+0x12c>
   1e3a0:	00586833          	or	a6,a6,t0
   1e3a4:	01f86833          	or	a6,a6,t6
   1e3a8:	01e86833          	or	a6,a6,t5
   1e3ac:	06081c63          	bnez	a6,1e424 <__getf2+0x12c>
   1e3b0:	00100513          	li	a0,1
   1e3b4:	fc0898e3          	bnez	a7,1e384 <__getf2+0x8c>
   1e3b8:	fff00513          	li	a0,-1
   1e3bc:	fc9ff06f          	j	1e384 <__getf2+0x8c>
   1e3c0:	00586833          	or	a6,a6,t0
   1e3c4:	01f86833          	or	a6,a6,t6
   1e3c8:	01e86833          	or	a6,a6,t5
   1e3cc:	06081a63          	bnez	a6,1e440 <__getf2+0x148>
   1e3d0:	fac516e3          	bne	a0,a2,1e37c <__getf2+0x84>
   1e3d4:	01d6e6b3          	or	a3,a3,t4
   1e3d8:	01c6e6b3          	or	a3,a3,t3
   1e3dc:	00b6e6b3          	or	a3,a3,a1
   1e3e0:	06069063          	bnez	a3,1e440 <__getf2+0x148>
   1e3e4:	f8689ce3          	bne	a7,t1,1e37c <__getf2+0x84>
   1e3e8:	00000513          	li	a0,0
   1e3ec:	f99ff06f          	j	1e384 <__getf2+0x8c>
   1e3f0:	fc0780e3          	beqz	a5,1e3b0 <__getf2+0xb8>
   1e3f4:	f86894e3          	bne	a7,t1,1e37c <__getf2+0x84>
   1e3f8:	f9e5e2e3          	bltu	a1,t5,1e37c <__getf2+0x84>
   1e3fc:	00bf1e63          	bne	t5,a1,1e418 <__getf2+0x120>
   1e400:	f7fe6ee3          	bltu	t3,t6,1e37c <__getf2+0x84>
   1e404:	01cf9a63          	bne	t6,t3,1e418 <__getf2+0x120>
   1e408:	f70eeae3          	bltu	t4,a6,1e37c <__getf2+0x84>
   1e40c:	01d81663          	bne	a6,t4,1e418 <__getf2+0x120>
   1e410:	f656e6e3          	bltu	a3,t0,1e37c <__getf2+0x84>
   1e414:	fcd2fae3          	bgeu	t0,a3,1e3e8 <__getf2+0xf0>
   1e418:	00100513          	li	a0,1
   1e41c:	f60314e3          	bnez	t1,1e384 <__getf2+0x8c>
   1e420:	f99ff06f          	j	1e3b8 <__getf2+0xc0>
   1e424:	f4689ce3          	bne	a7,t1,1e37c <__getf2+0x84>
   1e428:	ff1ff06f          	j	1e418 <__getf2+0x120>
   1e42c:	f40508e3          	beqz	a0,1e37c <__getf2+0x84>
   1e430:	f46896e3          	bne	a7,t1,1e37c <__getf2+0x84>
   1e434:	f4c544e3          	blt	a0,a2,1e37c <__getf2+0x84>
   1e438:	fca650e3          	bge	a2,a0,1e3f8 <__getf2+0x100>
   1e43c:	fddff06f          	j	1e418 <__getf2+0x120>
   1e440:	ffe00513          	li	a0,-2
   1e444:	f41ff06f          	j	1e384 <__getf2+0x8c>
   1e448:	f60784e3          	beqz	a5,1e3b0 <__getf2+0xb8>
   1e44c:	f26898e3          	bne	a7,t1,1e37c <__getf2+0x84>
   1e450:	faa654e3          	bge	a2,a0,1e3f8 <__getf2+0x100>
   1e454:	fc5ff06f          	j	1e418 <__getf2+0x120>

0001e458 <__letf2>:
   1e458:	00c52303          	lw	t1,12(a0)
   1e45c:	00c5a883          	lw	a7,12(a1)
   1e460:	000087b7          	lui	a5,0x8
   1e464:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   1e468:	01035693          	srl	a3,t1,0x10
   1e46c:	0108d713          	srl	a4,a7,0x10
   1e470:	01031f13          	sll	t5,t1,0x10
   1e474:	0005a603          	lw	a2,0(a1)
   1e478:	0045ae83          	lw	t4,4(a1)
   1e47c:	0085ae03          	lw	t3,8(a1)
   1e480:	00f6f6b3          	and	a3,a3,a5
   1e484:	01089593          	sll	a1,a7,0x10
   1e488:	00052283          	lw	t0,0(a0)
   1e48c:	00452803          	lw	a6,4(a0)
   1e490:	00852f83          	lw	t6,8(a0)
   1e494:	ff010113          	add	sp,sp,-16
   1e498:	010f5f13          	srl	t5,t5,0x10
   1e49c:	01f35313          	srl	t1,t1,0x1f
   1e4a0:	0105d593          	srl	a1,a1,0x10
   1e4a4:	00f77533          	and	a0,a4,a5
   1e4a8:	01f8d893          	srl	a7,a7,0x1f
   1e4ac:	08f68463          	beq	a3,a5,1e534 <__letf2+0xdc>
   1e4b0:	02f50a63          	beq	a0,a5,1e4e4 <__letf2+0x8c>
   1e4b4:	0a069a63          	bnez	a3,1e568 <__letf2+0x110>
   1e4b8:	005867b3          	or	a5,a6,t0
   1e4bc:	01f7e7b3          	or	a5,a5,t6
   1e4c0:	01e7e7b3          	or	a5,a5,t5
   1e4c4:	04051e63          	bnez	a0,1e520 <__letf2+0xc8>
   1e4c8:	01d66733          	or	a4,a2,t4
   1e4cc:	01c76733          	or	a4,a4,t3
   1e4d0:	00b76733          	or	a4,a4,a1
   1e4d4:	04071663          	bnez	a4,1e520 <__letf2+0xc8>
   1e4d8:	02079c63          	bnez	a5,1e510 <__letf2+0xb8>
   1e4dc:	01010113          	add	sp,sp,16
   1e4e0:	00008067          	ret
   1e4e4:	01d66633          	or	a2,a2,t4
   1e4e8:	01c66633          	or	a2,a2,t3
   1e4ec:	00b66633          	or	a2,a2,a1
   1e4f0:	00200513          	li	a0,2
   1e4f4:	fe0614e3          	bnez	a2,1e4dc <__letf2+0x84>
   1e4f8:	00069a63          	bnez	a3,1e50c <__letf2+0xb4>
   1e4fc:	00586833          	or	a6,a6,t0
   1e500:	01f86833          	or	a6,a6,t6
   1e504:	01e86833          	or	a6,a6,t5
   1e508:	00080e63          	beqz	a6,1e524 <__letf2+0xcc>
   1e50c:	08688663          	beq	a7,t1,1e598 <__letf2+0x140>
   1e510:	00031e63          	bnez	t1,1e52c <__letf2+0xd4>
   1e514:	00100513          	li	a0,1
   1e518:	01010113          	add	sp,sp,16
   1e51c:	00008067          	ret
   1e520:	08079863          	bnez	a5,1e5b0 <__letf2+0x158>
   1e524:	00100513          	li	a0,1
   1e528:	fa089ae3          	bnez	a7,1e4dc <__letf2+0x84>
   1e52c:	fff00513          	li	a0,-1
   1e530:	fadff06f          	j	1e4dc <__letf2+0x84>
   1e534:	00586833          	or	a6,a6,t0
   1e538:	01f86833          	or	a6,a6,t6
   1e53c:	01e86833          	or	a6,a6,t5
   1e540:	06081263          	bnez	a6,1e5a4 <__letf2+0x14c>
   1e544:	fcd516e3          	bne	a0,a3,1e510 <__letf2+0xb8>
   1e548:	01d66633          	or	a2,a2,t4
   1e54c:	01c66633          	or	a2,a2,t3
   1e550:	00b66633          	or	a2,a2,a1
   1e554:	00200513          	li	a0,2
   1e558:	f80612e3          	bnez	a2,1e4dc <__letf2+0x84>
   1e55c:	fa689ae3          	bne	a7,t1,1e510 <__letf2+0xb8>
   1e560:	00000513          	li	a0,0
   1e564:	f79ff06f          	j	1e4dc <__letf2+0x84>
   1e568:	fa0504e3          	beqz	a0,1e510 <__letf2+0xb8>
   1e56c:	fa6892e3          	bne	a7,t1,1e510 <__letf2+0xb8>
   1e570:	fad540e3          	blt	a0,a3,1e510 <__letf2+0xb8>
   1e574:	02a6c263          	blt	a3,a0,1e598 <__letf2+0x140>
   1e578:	f9e5ece3          	bltu	a1,t5,1e510 <__letf2+0xb8>
   1e57c:	00bf1e63          	bne	t5,a1,1e598 <__letf2+0x140>
   1e580:	f9fe68e3          	bltu	t3,t6,1e510 <__letf2+0xb8>
   1e584:	01cf9a63          	bne	t6,t3,1e598 <__letf2+0x140>
   1e588:	f90ee4e3          	bltu	t4,a6,1e510 <__letf2+0xb8>
   1e58c:	01d81663          	bne	a6,t4,1e598 <__letf2+0x140>
   1e590:	f85660e3          	bltu	a2,t0,1e510 <__letf2+0xb8>
   1e594:	fcc2f6e3          	bgeu	t0,a2,1e560 <__letf2+0x108>
   1e598:	00100513          	li	a0,1
   1e59c:	f40310e3          	bnez	t1,1e4dc <__letf2+0x84>
   1e5a0:	f8dff06f          	j	1e52c <__letf2+0xd4>
   1e5a4:	00200513          	li	a0,2
   1e5a8:	01010113          	add	sp,sp,16
   1e5ac:	00008067          	ret
   1e5b0:	f66890e3          	bne	a7,t1,1e510 <__letf2+0xb8>
   1e5b4:	fc1ff06f          	j	1e574 <__letf2+0x11c>

0001e5b8 <__multf3>:
   1e5b8:	00c5a803          	lw	a6,12(a1)
   1e5bc:	f6010113          	add	sp,sp,-160
   1e5c0:	0045a683          	lw	a3,4(a1)
   1e5c4:	0085a883          	lw	a7,8(a1)
   1e5c8:	08912a23          	sw	s1,148(sp)
   1e5cc:	0005a483          	lw	s1,0(a1)
   1e5d0:	01081713          	sll	a4,a6,0x10
   1e5d4:	000085b7          	lui	a1,0x8
   1e5d8:	01075713          	srl	a4,a4,0x10
   1e5dc:	01085793          	srl	a5,a6,0x10
   1e5e0:	fff58593          	add	a1,a1,-1 # 7fff <OSTaskChangePrio+0x17f>
   1e5e4:	08812c23          	sw	s0,152(sp)
   1e5e8:	09212823          	sw	s2,144(sp)
   1e5ec:	09312623          	sw	s3,140(sp)
   1e5f0:	09412423          	sw	s4,136(sp)
   1e5f4:	09512223          	sw	s5,132(sp)
   1e5f8:	07712e23          	sw	s7,124(sp)
   1e5fc:	08112e23          	sw	ra,156(sp)
   1e600:	09612023          	sw	s6,128(sp)
   1e604:	07812c23          	sw	s8,120(sp)
   1e608:	04912023          	sw	s1,64(sp)
   1e60c:	04d12223          	sw	a3,68(sp)
   1e610:	05112423          	sw	a7,72(sp)
   1e614:	05012623          	sw	a6,76(sp)
   1e618:	00912823          	sw	s1,16(sp)
   1e61c:	00d12a23          	sw	a3,20(sp)
   1e620:	01112c23          	sw	a7,24(sp)
   1e624:	00e12e23          	sw	a4,28(sp)
   1e628:	00b7f7b3          	and	a5,a5,a1
   1e62c:	00062a83          	lw	s5,0(a2)
   1e630:	00462983          	lw	s3,4(a2)
   1e634:	00862b83          	lw	s7,8(a2)
   1e638:	00c62903          	lw	s2,12(a2)
   1e63c:	00050413          	mv	s0,a0
   1e640:	01f85a13          	srl	s4,a6,0x1f
   1e644:	32078463          	beqz	a5,1e96c <__multf3+0x3b4>
   1e648:	18b78a63          	beq	a5,a1,1e7dc <__multf3+0x224>
   1e64c:	000106b7          	lui	a3,0x10
   1e650:	00d76733          	or	a4,a4,a3
   1e654:	00e12e23          	sw	a4,28(sp)
   1e658:	01010513          	add	a0,sp,16
   1e65c:	01c10693          	add	a3,sp,28
   1e660:	00371593          	sll	a1,a4,0x3
   1e664:	ffc6a703          	lw	a4,-4(a3) # fffc <__sfvwrite_r+0x98>
   1e668:	ffc68693          	add	a3,a3,-4
   1e66c:	01d75613          	srl	a2,a4,0x1d
   1e670:	00b66633          	or	a2,a2,a1
   1e674:	00c6a223          	sw	a2,4(a3)
   1e678:	fed514e3          	bne	a0,a3,1e660 <__multf3+0xa8>
   1e67c:	ffffc737          	lui	a4,0xffffc
   1e680:	00349493          	sll	s1,s1,0x3
   1e684:	00170713          	add	a4,a4,1 # ffffc001 <__alt_data_end+0xfffb2c21>
   1e688:	00912823          	sw	s1,16(sp)
   1e68c:	00000b13          	li	s6,0
   1e690:	00e784b3          	add	s1,a5,a4
   1e694:	00000c13          	li	s8,0
   1e698:	01091513          	sll	a0,s2,0x10
   1e69c:	000086b7          	lui	a3,0x8
   1e6a0:	01095713          	srl	a4,s2,0x10
   1e6a4:	01055513          	srl	a0,a0,0x10
   1e6a8:	fff68793          	add	a5,a3,-1 # 7fff <OSTaskChangePrio+0x17f>
   1e6ac:	05212623          	sw	s2,76(sp)
   1e6b0:	05512023          	sw	s5,64(sp)
   1e6b4:	05312223          	sw	s3,68(sp)
   1e6b8:	05712423          	sw	s7,72(sp)
   1e6bc:	03512023          	sw	s5,32(sp)
   1e6c0:	03312223          	sw	s3,36(sp)
   1e6c4:	03712423          	sw	s7,40(sp)
   1e6c8:	02a12623          	sw	a0,44(sp)
   1e6cc:	00f77733          	and	a4,a4,a5
   1e6d0:	01f95913          	srl	s2,s2,0x1f
   1e6d4:	1c070063          	beqz	a4,1e894 <__multf3+0x2dc>
   1e6d8:	12f70263          	beq	a4,a5,1e7fc <__multf3+0x244>
   1e6dc:	000107b7          	lui	a5,0x10
   1e6e0:	00f56533          	or	a0,a0,a5
   1e6e4:	02a12623          	sw	a0,44(sp)
   1e6e8:	02010593          	add	a1,sp,32
   1e6ec:	02c10693          	add	a3,sp,44
   1e6f0:	00351613          	sll	a2,a0,0x3
   1e6f4:	ffc6a503          	lw	a0,-4(a3)
   1e6f8:	ffc68693          	add	a3,a3,-4
   1e6fc:	01d55793          	srl	a5,a0,0x1d
   1e700:	00c7e7b3          	or	a5,a5,a2
   1e704:	00f6a223          	sw	a5,4(a3)
   1e708:	fed594e3          	bne	a1,a3,1e6f0 <__multf3+0x138>
   1e70c:	ffffc7b7          	lui	a5,0xffffc
   1e710:	00178793          	add	a5,a5,1 # ffffc001 <__alt_data_end+0xfffb2c21>
   1e714:	003a9a93          	sll	s5,s5,0x3
   1e718:	00f70733          	add	a4,a4,a5
   1e71c:	03512023          	sw	s5,32(sp)
   1e720:	00970733          	add	a4,a4,s1
   1e724:	00000613          	li	a2,0
   1e728:	00a00693          	li	a3,10
   1e72c:	00170793          	add	a5,a4,1
   1e730:	1166c663          	blt	a3,s6,1e83c <__multf3+0x284>
   1e734:	012a4833          	xor	a6,s4,s2
   1e738:	00200693          	li	a3,2
   1e73c:	00080a13          	mv	s4,a6
   1e740:	3366d263          	bge	a3,s6,1ea64 <__multf3+0x4ac>
   1e744:	00100693          	li	a3,1
   1e748:	016696b3          	sll	a3,a3,s6
   1e74c:	5306f593          	and	a1,a3,1328
   1e750:	0e059663          	bnez	a1,1e83c <__multf3+0x284>
   1e754:	0886f593          	and	a1,a3,136
   1e758:	00058463          	beqz	a1,1e760 <__multf3+0x1a8>
   1e75c:	7890006f          	j	1f6e4 <__multf3+0x112c>
   1e760:	2406f693          	and	a3,a3,576
   1e764:	36068463          	beqz	a3,1eacc <__multf3+0x514>
   1e768:	000087b7          	lui	a5,0x8
   1e76c:	00000813          	li	a6,0
   1e770:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   1e774:	00008737          	lui	a4,0x8
   1e778:	00000693          	li	a3,0
   1e77c:	00000613          	li	a2,0
   1e780:	00000593          	li	a1,0
   1e784:	00f81813          	sll	a6,a6,0xf
   1e788:	0107e7b3          	or	a5,a5,a6
   1e78c:	04e11623          	sh	a4,76(sp)
   1e790:	04f11723          	sh	a5,78(sp)
   1e794:	04c12783          	lw	a5,76(sp)
   1e798:	09c12083          	lw	ra,156(sp)
   1e79c:	00b42023          	sw	a1,0(s0)
   1e7a0:	00c42223          	sw	a2,4(s0)
   1e7a4:	00d42423          	sw	a3,8(s0)
   1e7a8:	00f42623          	sw	a5,12(s0)
   1e7ac:	00040513          	mv	a0,s0
   1e7b0:	09812403          	lw	s0,152(sp)
   1e7b4:	09412483          	lw	s1,148(sp)
   1e7b8:	09012903          	lw	s2,144(sp)
   1e7bc:	08c12983          	lw	s3,140(sp)
   1e7c0:	08812a03          	lw	s4,136(sp)
   1e7c4:	08412a83          	lw	s5,132(sp)
   1e7c8:	08012b03          	lw	s6,128(sp)
   1e7cc:	07c12b83          	lw	s7,124(sp)
   1e7d0:	07812c03          	lw	s8,120(sp)
   1e7d4:	0a010113          	add	sp,sp,160
   1e7d8:	00008067          	ret
   1e7dc:	00d4e6b3          	or	a3,s1,a3
   1e7e0:	0116e6b3          	or	a3,a3,a7
   1e7e4:	00e6e6b3          	or	a3,a3,a4
   1e7e8:	2c069463          	bnez	a3,1eab0 <__multf3+0x4f8>
   1e7ec:	00800b13          	li	s6,8
   1e7f0:	00078493          	mv	s1,a5
   1e7f4:	00200c13          	li	s8,2
   1e7f8:	ea1ff06f          	j	1e698 <__multf3+0xe0>
   1e7fc:	013ae9b3          	or	s3,s5,s3
   1e800:	0179e9b3          	or	s3,s3,s7
   1e804:	00a9e9b3          	or	s3,s3,a0
   1e808:	00e48733          	add	a4,s1,a4
   1e80c:	2a098a63          	beqz	s3,1eac0 <__multf3+0x508>
   1e810:	012a4833          	xor	a6,s4,s2
   1e814:	003b6b13          	or	s6,s6,3
   1e818:	00a00613          	li	a2,10
   1e81c:	00080a13          	mv	s4,a6
   1e820:	00d487b3          	add	a5,s1,a3
   1e824:	6b6648e3          	blt	a2,s6,1f6d4 <__multf3+0x111c>
   1e828:	00100693          	li	a3,1
   1e82c:	016696b3          	sll	a3,a3,s6
   1e830:	5306f593          	and	a1,a3,1328
   1e834:	00300613          	li	a2,3
   1e838:	f0058ee3          	beqz	a1,1e754 <__multf3+0x19c>
   1e83c:	01412683          	lw	a3,20(sp)
   1e840:	01c12703          	lw	a4,28(sp)
   1e844:	000c0613          	mv	a2,s8
   1e848:	02d12a23          	sw	a3,52(sp)
   1e84c:	01012683          	lw	a3,16(sp)
   1e850:	02d12823          	sw	a3,48(sp)
   1e854:	01812683          	lw	a3,24(sp)
   1e858:	02d12c23          	sw	a3,56(sp)
   1e85c:	02e12e23          	sw	a4,60(sp)
   1e860:	00200713          	li	a4,2
   1e864:	1ee60063          	beq	a2,a4,1ea44 <__multf3+0x48c>
   1e868:	00300713          	li	a4,3
   1e86c:	eee60ee3          	beq	a2,a4,1e768 <__multf3+0x1b0>
   1e870:	00100713          	li	a4,1
   1e874:	000a0813          	mv	a6,s4
   1e878:	56e61ae3          	bne	a2,a4,1f5ec <__multf3+0x1034>
   1e87c:	00000793          	li	a5,0
   1e880:	00000713          	li	a4,0
   1e884:	00000693          	li	a3,0
   1e888:	00000613          	li	a2,0
   1e88c:	00000593          	li	a1,0
   1e890:	ef5ff06f          	j	1e784 <__multf3+0x1cc>
   1e894:	013ae7b3          	or	a5,s5,s3
   1e898:	0177e7b3          	or	a5,a5,s7
   1e89c:	00a7e7b3          	or	a5,a5,a0
   1e8a0:	20078063          	beqz	a5,1eaa0 <__multf3+0x4e8>
   1e8a4:	00051463          	bnez	a0,1e8ac <__multf3+0x2f4>
   1e8a8:	0180106f          	j	1f8c0 <__multf3+0x1308>
   1e8ac:	360030ef          	jal	21c0c <__clzsi2>
   1e8b0:	ff450893          	add	a7,a0,-12
   1e8b4:	02000e13          	li	t3,32
   1e8b8:	411e0e33          	sub	t3,t3,a7
   1e8bc:	00000693          	li	a3,0
   1e8c0:	011a9ab3          	sll	s5,s5,a7
   1e8c4:	40d00333          	neg	t1,a3
   1e8c8:	00231313          	sll	t1,t1,0x2
   1e8cc:	02010813          	add	a6,sp,32
   1e8d0:	00680733          	add	a4,a6,t1
   1e8d4:	00300593          	li	a1,3
   1e8d8:	40600333          	neg	t1,t1
   1e8dc:	00c72783          	lw	a5,12(a4) # 800c <OSTaskChangePrio+0x18c>
   1e8e0:	00872603          	lw	a2,8(a4)
   1e8e4:	00670eb3          	add	t4,a4,t1
   1e8e8:	011797b3          	sll	a5,a5,a7
   1e8ec:	01c65633          	srl	a2,a2,t3
   1e8f0:	00c7e7b3          	or	a5,a5,a2
   1e8f4:	00fea623          	sw	a5,12(t4)
   1e8f8:	fff58593          	add	a1,a1,-1
   1e8fc:	ffc70713          	add	a4,a4,-4
   1e900:	fcb6cee3          	blt	a3,a1,1e8dc <__multf3+0x324>
   1e904:	00269713          	sll	a4,a3,0x2
   1e908:	05070793          	add	a5,a4,80
   1e90c:	01010713          	add	a4,sp,16
   1e910:	00e78733          	add	a4,a5,a4
   1e914:	fd572023          	sw	s5,-64(a4)
   1e918:	fff68793          	add	a5,a3,-1
   1e91c:	fff00713          	li	a4,-1
   1e920:	02e78a63          	beq	a5,a4,1e954 <__multf3+0x39c>
   1e924:	00178793          	add	a5,a5,1
   1e928:	00279793          	sll	a5,a5,0x2
   1e92c:	00800693          	li	a3,8
   1e930:	00080713          	mv	a4,a6
   1e934:	00d7ea63          	bltu	a5,a3,1e948 <__multf3+0x390>
   1e938:	02012023          	sw	zero,32(sp)
   1e93c:	00082223          	sw	zero,4(a6)
   1e940:	ff878793          	add	a5,a5,-8
   1e944:	02810713          	add	a4,sp,40
   1e948:	00400693          	li	a3,4
   1e94c:	00d7e463          	bltu	a5,a3,1e954 <__multf3+0x39c>
   1e950:	00072023          	sw	zero,0(a4)
   1e954:	ffffc737          	lui	a4,0xffffc
   1e958:	01170713          	add	a4,a4,17 # ffffc011 <__alt_data_end+0xfffb2c31>
   1e95c:	40a70733          	sub	a4,a4,a0
   1e960:	00970733          	add	a4,a4,s1
   1e964:	00000613          	li	a2,0
   1e968:	dc1ff06f          	j	1e728 <__multf3+0x170>
   1e96c:	00d4e7b3          	or	a5,s1,a3
   1e970:	0117e7b3          	or	a5,a5,a7
   1e974:	00e7e7b3          	or	a5,a5,a4
   1e978:	10078c63          	beqz	a5,1ea90 <__multf3+0x4d8>
   1e97c:	6e0704e3          	beqz	a4,1f864 <__multf3+0x12ac>
   1e980:	00070513          	mv	a0,a4
   1e984:	288030ef          	jal	21c0c <__clzsi2>
   1e988:	ff450893          	add	a7,a0,-12
   1e98c:	02000e13          	li	t3,32
   1e990:	411e0e33          	sub	t3,t3,a7
   1e994:	00000693          	li	a3,0
   1e998:	011494b3          	sll	s1,s1,a7
   1e99c:	40d00333          	neg	t1,a3
   1e9a0:	00231313          	sll	t1,t1,0x2
   1e9a4:	01010813          	add	a6,sp,16
   1e9a8:	00680733          	add	a4,a6,t1
   1e9ac:	00300593          	li	a1,3
   1e9b0:	40600333          	neg	t1,t1
   1e9b4:	00c72783          	lw	a5,12(a4)
   1e9b8:	00872603          	lw	a2,8(a4)
   1e9bc:	00670eb3          	add	t4,a4,t1
   1e9c0:	011797b3          	sll	a5,a5,a7
   1e9c4:	01c65633          	srl	a2,a2,t3
   1e9c8:	00c7e7b3          	or	a5,a5,a2
   1e9cc:	00fea623          	sw	a5,12(t4)
   1e9d0:	fff58593          	add	a1,a1,-1
   1e9d4:	ffc70713          	add	a4,a4,-4
   1e9d8:	fcb6cee3          	blt	a3,a1,1e9b4 <__multf3+0x3fc>
   1e9dc:	00269713          	sll	a4,a3,0x2
   1e9e0:	05070793          	add	a5,a4,80
   1e9e4:	01010713          	add	a4,sp,16
   1e9e8:	00e78733          	add	a4,a5,a4
   1e9ec:	fa972823          	sw	s1,-80(a4)
   1e9f0:	fff68793          	add	a5,a3,-1
   1e9f4:	fff00713          	li	a4,-1
   1e9f8:	02e78a63          	beq	a5,a4,1ea2c <__multf3+0x474>
   1e9fc:	00178793          	add	a5,a5,1
   1ea00:	00279793          	sll	a5,a5,0x2
   1ea04:	00800693          	li	a3,8
   1ea08:	00080713          	mv	a4,a6
   1ea0c:	00d7ea63          	bltu	a5,a3,1ea20 <__multf3+0x468>
   1ea10:	00012823          	sw	zero,16(sp)
   1ea14:	00082223          	sw	zero,4(a6)
   1ea18:	ff878793          	add	a5,a5,-8
   1ea1c:	01810713          	add	a4,sp,24
   1ea20:	00400693          	li	a3,4
   1ea24:	00d7e463          	bltu	a5,a3,1ea2c <__multf3+0x474>
   1ea28:	00072023          	sw	zero,0(a4)
   1ea2c:	ffffc7b7          	lui	a5,0xffffc
   1ea30:	01178793          	add	a5,a5,17 # ffffc011 <__alt_data_end+0xfffb2c31>
   1ea34:	40a784b3          	sub	s1,a5,a0
   1ea38:	00000b13          	li	s6,0
   1ea3c:	00000c13          	li	s8,0
   1ea40:	c59ff06f          	j	1e698 <__multf3+0xe0>
   1ea44:	000087b7          	lui	a5,0x8
   1ea48:	000a0813          	mv	a6,s4
   1ea4c:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   1ea50:	00000713          	li	a4,0
   1ea54:	00000693          	li	a3,0
   1ea58:	00000613          	li	a2,0
   1ea5c:	00000593          	li	a1,0
   1ea60:	d25ff06f          	j	1e784 <__multf3+0x1cc>
   1ea64:	fffb0b13          	add	s6,s6,-1
   1ea68:	00100693          	li	a3,1
   1ea6c:	0766e063          	bltu	a3,s6,1eacc <__multf3+0x514>
   1ea70:	02412683          	lw	a3,36(sp)
   1ea74:	02c12703          	lw	a4,44(sp)
   1ea78:	02d12a23          	sw	a3,52(sp)
   1ea7c:	02012683          	lw	a3,32(sp)
   1ea80:	02d12823          	sw	a3,48(sp)
   1ea84:	02812683          	lw	a3,40(sp)
   1ea88:	02d12c23          	sw	a3,56(sp)
   1ea8c:	dd1ff06f          	j	1e85c <__multf3+0x2a4>
   1ea90:	00400b13          	li	s6,4
   1ea94:	00000493          	li	s1,0
   1ea98:	00100c13          	li	s8,1
   1ea9c:	bfdff06f          	j	1e698 <__multf3+0xe0>
   1eaa0:	001b6b13          	or	s6,s6,1
   1eaa4:	00048713          	mv	a4,s1
   1eaa8:	00100613          	li	a2,1
   1eaac:	c7dff06f          	j	1e728 <__multf3+0x170>
   1eab0:	00c00b13          	li	s6,12
   1eab4:	00078493          	mv	s1,a5
   1eab8:	00300c13          	li	s8,3
   1eabc:	bddff06f          	j	1e698 <__multf3+0xe0>
   1eac0:	002b6b13          	or	s6,s6,2
   1eac4:	00200613          	li	a2,2
   1eac8:	c61ff06f          	j	1e728 <__multf3+0x170>
   1eacc:	01012a03          	lw	s4,16(sp)
   1ead0:	02012983          	lw	s3,32(sp)
   1ead4:	00010fb7          	lui	t6,0x10
   1ead8:	ffff8313          	add	t1,t6,-1 # ffff <__sfvwrite_r+0x9b>
   1eadc:	006a78b3          	and	a7,s4,t1
   1eae0:	0069f333          	and	t1,s3,t1
   1eae4:	07912a23          	sw	s9,116(sp)
   1eae8:	07a12823          	sw	s10,112(sp)
   1eaec:	07b12623          	sw	s11,108(sp)
   1eaf0:	010a5f13          	srl	t5,s4,0x10
   1eaf4:	0109de93          	srl	t4,s3,0x10
   1eaf8:	00088513          	mv	a0,a7
   1eafc:	00030593          	mv	a1,t1
   1eb00:	034030ef          	jal	21b34 <__mulsi3>
   1eb04:	00050e13          	mv	t3,a0
   1eb08:	000e8593          	mv	a1,t4
   1eb0c:	00088513          	mv	a0,a7
   1eb10:	024030ef          	jal	21b34 <__mulsi3>
   1eb14:	00050893          	mv	a7,a0
   1eb18:	00030593          	mv	a1,t1
   1eb1c:	000f0513          	mv	a0,t5
   1eb20:	014030ef          	jal	21b34 <__mulsi3>
   1eb24:	00050313          	mv	t1,a0
   1eb28:	000e8593          	mv	a1,t4
   1eb2c:	000f0513          	mv	a0,t5
   1eb30:	004030ef          	jal	21b34 <__mulsi3>
   1eb34:	010e5693          	srl	a3,t3,0x10
   1eb38:	006888b3          	add	a7,a7,t1
   1eb3c:	011686b3          	add	a3,a3,a7
   1eb40:	0066f463          	bgeu	a3,t1,1eb48 <__multf3+0x590>
   1eb44:	01f50533          	add	a0,a0,t6
   1eb48:	00010eb7          	lui	t4,0x10
   1eb4c:	fffe8593          	add	a1,t4,-1 # ffff <__sfvwrite_r+0x9b>
   1eb50:	02412483          	lw	s1,36(sp)
   1eb54:	00b6f633          	and	a2,a3,a1
   1eb58:	00be7e33          	and	t3,t3,a1
   1eb5c:	01061613          	sll	a2,a2,0x10
   1eb60:	0106d693          	srl	a3,a3,0x10
   1eb64:	00a686b3          	add	a3,a3,a0
   1eb68:	00ba7333          	and	t1,s4,a1
   1eb6c:	01c60533          	add	a0,a2,t3
   1eb70:	00b4f8b3          	and	a7,s1,a1
   1eb74:	04a12023          	sw	a0,64(sp)
   1eb78:	04d12223          	sw	a3,68(sp)
   1eb7c:	010a5f13          	srl	t5,s4,0x10
   1eb80:	0104df93          	srl	t6,s1,0x10
   1eb84:	00030513          	mv	a0,t1
   1eb88:	00088593          	mv	a1,a7
   1eb8c:	7a9020ef          	jal	21b34 <__mulsi3>
   1eb90:	00050e13          	mv	t3,a0
   1eb94:	000f8593          	mv	a1,t6
   1eb98:	00030513          	mv	a0,t1
   1eb9c:	799020ef          	jal	21b34 <__mulsi3>
   1eba0:	00050313          	mv	t1,a0
   1eba4:	00088593          	mv	a1,a7
   1eba8:	000f0513          	mv	a0,t5
   1ebac:	789020ef          	jal	21b34 <__mulsi3>
   1ebb0:	00050893          	mv	a7,a0
   1ebb4:	000f8593          	mv	a1,t6
   1ebb8:	000f0513          	mv	a0,t5
   1ebbc:	779020ef          	jal	21b34 <__mulsi3>
   1ebc0:	010e5f13          	srl	t5,t3,0x10
   1ebc4:	01130333          	add	t1,t1,a7
   1ebc8:	006f0f33          	add	t5,t5,t1
   1ebcc:	00050c93          	mv	s9,a0
   1ebd0:	011f7463          	bgeu	t5,a7,1ebd8 <__multf3+0x620>
   1ebd4:	01d50cb3          	add	s9,a0,t4
   1ebd8:	01412903          	lw	s2,20(sp)
   1ebdc:	000102b7          	lui	t0,0x10
   1ebe0:	fff28593          	add	a1,t0,-1 # ffff <__sfvwrite_r+0x9b>
   1ebe4:	00bf78b3          	and	a7,t5,a1
   1ebe8:	00be7533          	and	a0,t3,a1
   1ebec:	00b97333          	and	t1,s2,a1
   1ebf0:	00b9feb3          	and	t4,s3,a1
   1ebf4:	01089893          	sll	a7,a7,0x10
   1ebf8:	00a888b3          	add	a7,a7,a0
   1ebfc:	010f5f13          	srl	t5,t5,0x10
   1ec00:	01095393          	srl	t2,s2,0x10
   1ec04:	0109df93          	srl	t6,s3,0x10
   1ec08:	00030513          	mv	a0,t1
   1ec0c:	000e8593          	mv	a1,t4
   1ec10:	725020ef          	jal	21b34 <__mulsi3>
   1ec14:	00050e13          	mv	t3,a0
   1ec18:	000f8593          	mv	a1,t6
   1ec1c:	00030513          	mv	a0,t1
   1ec20:	715020ef          	jal	21b34 <__mulsi3>
   1ec24:	00050313          	mv	t1,a0
   1ec28:	000e8593          	mv	a1,t4
   1ec2c:	00038513          	mv	a0,t2
   1ec30:	705020ef          	jal	21b34 <__mulsi3>
   1ec34:	00050e93          	mv	t4,a0
   1ec38:	000f8593          	mv	a1,t6
   1ec3c:	00038513          	mv	a0,t2
   1ec40:	6f5020ef          	jal	21b34 <__mulsi3>
   1ec44:	010e5f93          	srl	t6,t3,0x10
   1ec48:	01d30333          	add	t1,t1,t4
   1ec4c:	006f8fb3          	add	t6,t6,t1
   1ec50:	01dff463          	bgeu	t6,t4,1ec58 <__multf3+0x6a0>
   1ec54:	00550533          	add	a0,a0,t0
   1ec58:	000102b7          	lui	t0,0x10
   1ec5c:	fff28e93          	add	t4,t0,-1 # ffff <__sfvwrite_r+0x9b>
   1ec60:	01dffab3          	and	s5,t6,t4
   1ec64:	01de7e33          	and	t3,t3,t4
   1ec68:	01d97333          	and	t1,s2,t4
   1ec6c:	010fdf93          	srl	t6,t6,0x10
   1ec70:	01d4feb3          	and	t4,s1,t4
   1ec74:	010a9a93          	sll	s5,s5,0x10
   1ec78:	00af8fb3          	add	t6,t6,a0
   1ec7c:	01ca8ab3          	add	s5,s5,t3
   1ec80:	01095b13          	srl	s6,s2,0x10
   1ec84:	0104d393          	srl	t2,s1,0x10
   1ec88:	00030513          	mv	a0,t1
   1ec8c:	000e8593          	mv	a1,t4
   1ec90:	6a5020ef          	jal	21b34 <__mulsi3>
   1ec94:	00050e13          	mv	t3,a0
   1ec98:	00038593          	mv	a1,t2
   1ec9c:	00030513          	mv	a0,t1
   1eca0:	695020ef          	jal	21b34 <__mulsi3>
   1eca4:	00050313          	mv	t1,a0
   1eca8:	000e8593          	mv	a1,t4
   1ecac:	000b0513          	mv	a0,s6
   1ecb0:	685020ef          	jal	21b34 <__mulsi3>
   1ecb4:	00050b93          	mv	s7,a0
   1ecb8:	00038593          	mv	a1,t2
   1ecbc:	000b0513          	mv	a0,s6
   1ecc0:	675020ef          	jal	21b34 <__mulsi3>
   1ecc4:	010e5e93          	srl	t4,t3,0x10
   1ecc8:	01730333          	add	t1,t1,s7
   1eccc:	006e8eb3          	add	t4,t4,t1
   1ecd0:	017ef463          	bgeu	t4,s7,1ecd8 <__multf3+0x720>
   1ecd4:	00550533          	add	a0,a0,t0
   1ecd8:	02812283          	lw	t0,40(sp)
   1ecdc:	000103b7          	lui	t2,0x10
   1ece0:	fff38593          	add	a1,t2,-1 # ffff <__sfvwrite_r+0x9b>
   1ece4:	00bef333          	and	t1,t4,a1
   1ece8:	00be76b3          	and	a3,t3,a1
   1ecec:	00ba7bb3          	and	s7,s4,a1
   1ecf0:	00b2fb33          	and	s6,t0,a1
   1ecf4:	010ede93          	srl	t4,t4,0x10
   1ecf8:	01031313          	sll	t1,t1,0x10
   1ecfc:	00ae8eb3          	add	t4,t4,a0
   1ed00:	00d30333          	add	t1,t1,a3
   1ed04:	010a5d13          	srl	s10,s4,0x10
   1ed08:	0102dc13          	srl	s8,t0,0x10
   1ed0c:	000b8513          	mv	a0,s7
   1ed10:	000b0593          	mv	a1,s6
   1ed14:	621020ef          	jal	21b34 <__mulsi3>
   1ed18:	00050e13          	mv	t3,a0
   1ed1c:	000c0593          	mv	a1,s8
   1ed20:	000b8513          	mv	a0,s7
   1ed24:	611020ef          	jal	21b34 <__mulsi3>
   1ed28:	00050b93          	mv	s7,a0
   1ed2c:	000b0593          	mv	a1,s6
   1ed30:	000d0513          	mv	a0,s10
   1ed34:	601020ef          	jal	21b34 <__mulsi3>
   1ed38:	00050b13          	mv	s6,a0
   1ed3c:	000c0593          	mv	a1,s8
   1ed40:	000d0513          	mv	a0,s10
   1ed44:	5f1020ef          	jal	21b34 <__mulsi3>
   1ed48:	010e5693          	srl	a3,t3,0x10
   1ed4c:	016b8bb3          	add	s7,s7,s6
   1ed50:	017686b3          	add	a3,a3,s7
   1ed54:	0166f463          	bgeu	a3,s6,1ed5c <__multf3+0x7a4>
   1ed58:	00750533          	add	a0,a0,t2
   1ed5c:	00010db7          	lui	s11,0x10
   1ed60:	fffd8b13          	add	s6,s11,-1 # ffff <__sfvwrite_r+0x9b>
   1ed64:	01812383          	lw	t2,24(sp)
   1ed68:	0166f5b3          	and	a1,a3,s6
   1ed6c:	0106d693          	srl	a3,a3,0x10
   1ed70:	016e7633          	and	a2,t3,s6
   1ed74:	00a686b3          	add	a3,a3,a0
   1ed78:	01059593          	sll	a1,a1,0x10
   1ed7c:	0163fe33          	and	t3,t2,s6
   1ed80:	00d12423          	sw	a3,8(sp)
   1ed84:	0169fb33          	and	s6,s3,s6
   1ed88:	00c586b3          	add	a3,a1,a2
   1ed8c:	00d12623          	sw	a3,12(sp)
   1ed90:	0103dd13          	srl	s10,t2,0x10
   1ed94:	0109dc13          	srl	s8,s3,0x10
   1ed98:	000e0513          	mv	a0,t3
   1ed9c:	000b0593          	mv	a1,s6
   1eda0:	595020ef          	jal	21b34 <__mulsi3>
   1eda4:	00050b93          	mv	s7,a0
   1eda8:	000c0593          	mv	a1,s8
   1edac:	000e0513          	mv	a0,t3
   1edb0:	585020ef          	jal	21b34 <__mulsi3>
   1edb4:	00050e13          	mv	t3,a0
   1edb8:	000b0593          	mv	a1,s6
   1edbc:	000d0513          	mv	a0,s10
   1edc0:	575020ef          	jal	21b34 <__mulsi3>
   1edc4:	00050b13          	mv	s6,a0
   1edc8:	000c0593          	mv	a1,s8
   1edcc:	000d0513          	mv	a0,s10
   1edd0:	565020ef          	jal	21b34 <__mulsi3>
   1edd4:	016e0e33          	add	t3,t3,s6
   1edd8:	010bd693          	srl	a3,s7,0x10
   1eddc:	00de0e33          	add	t3,t3,a3
   1ede0:	016e7463          	bgeu	t3,s6,1ede8 <__multf3+0x830>
   1ede4:	01b50533          	add	a0,a0,s11
   1ede8:	04412683          	lw	a3,68(sp)
   1edec:	00010b37          	lui	s6,0x10
   1edf0:	fffb0593          	add	a1,s6,-1 # ffff <__sfvwrite_r+0x9b>
   1edf4:	011688b3          	add	a7,a3,a7
   1edf8:	00d8b6b3          	sltu	a3,a7,a3
   1edfc:	00df0f33          	add	t5,t5,a3
   1ee00:	019f0f33          	add	t5,t5,s9
   1ee04:	01588ab3          	add	s5,a7,s5
   1ee08:	01ff0fb3          	add	t6,t5,t6
   1ee0c:	011ab8b3          	sltu	a7,s5,a7
   1ee10:	011f88b3          	add	a7,t6,a7
   1ee14:	01efb633          	sltu	a2,t6,t5
   1ee18:	01f8bfb3          	sltu	t6,a7,t6
   1ee1c:	00df3f33          	sltu	t5,t5,a3
   1ee20:	01f66633          	or	a2,a2,t6
   1ee24:	01e60633          	add	a2,a2,t5
   1ee28:	00c12f03          	lw	t5,12(sp)
   1ee2c:	006886b3          	add	a3,a7,t1
   1ee30:	00812f83          	lw	t6,8(sp)
   1ee34:	01d60eb3          	add	t4,a2,t4
   1ee38:	00be7333          	and	t1,t3,a1
   1ee3c:	0116b8b3          	sltu	a7,a3,a7
   1ee40:	011e88b3          	add	a7,t4,a7
   1ee44:	01e68f33          	add	t5,a3,t5
   1ee48:	01031313          	sll	t1,t1,0x10
   1ee4c:	00bbfbb3          	and	s7,s7,a1
   1ee50:	01f88fb3          	add	t6,a7,t6
   1ee54:	010e5e13          	srl	t3,t3,0x10
   1ee58:	01730bb3          	add	s7,t1,s7
   1ee5c:	00df36b3          	sltu	a3,t5,a3
   1ee60:	00df86b3          	add	a3,t6,a3
   1ee64:	017f0333          	add	t1,t5,s7
   1ee68:	00ae0533          	add	a0,t3,a0
   1ee6c:	00a68533          	add	a0,a3,a0
   1ee70:	01e33f33          	sltu	t5,t1,t5
   1ee74:	02c12e03          	lw	t3,44(sp)
   1ee78:	01e50f33          	add	t5,a0,t5
   1ee7c:	00ceb633          	sltu	a2,t4,a2
   1ee80:	01d8beb3          	sltu	t4,a7,t4
   1ee84:	011fb8b3          	sltu	a7,t6,a7
   1ee88:	01f6bfb3          	sltu	t6,a3,t6
   1ee8c:	01f8e8b3          	or	a7,a7,t6
   1ee90:	01d66633          	or	a2,a2,t4
   1ee94:	00d536b3          	sltu	a3,a0,a3
   1ee98:	00af3533          	sltu	a0,t5,a0
   1ee9c:	01160633          	add	a2,a2,a7
   1eea0:	00a6e6b3          	or	a3,a3,a0
   1eea4:	00ba78b3          	and	a7,s4,a1
   1eea8:	00c686b3          	add	a3,a3,a2
   1eeac:	00be7fb3          	and	t6,t3,a1
   1eeb0:	05e12623          	sw	t5,76(sp)
   1eeb4:	05512223          	sw	s5,68(sp)
   1eeb8:	04612423          	sw	t1,72(sp)
   1eebc:	04d12823          	sw	a3,80(sp)
   1eec0:	010a5a13          	srl	s4,s4,0x10
   1eec4:	010e5f13          	srl	t5,t3,0x10
   1eec8:	00088513          	mv	a0,a7
   1eecc:	000f8593          	mv	a1,t6
   1eed0:	465020ef          	jal	21b34 <__mulsi3>
   1eed4:	00050e93          	mv	t4,a0
   1eed8:	000f0593          	mv	a1,t5
   1eedc:	00088513          	mv	a0,a7
   1eee0:	455020ef          	jal	21b34 <__mulsi3>
   1eee4:	00050893          	mv	a7,a0
   1eee8:	000f8593          	mv	a1,t6
   1eeec:	000a0513          	mv	a0,s4
   1eef0:	445020ef          	jal	21b34 <__mulsi3>
   1eef4:	00050313          	mv	t1,a0
   1eef8:	000f0593          	mv	a1,t5
   1eefc:	000a0513          	mv	a0,s4
   1ef00:	435020ef          	jal	21b34 <__mulsi3>
   1ef04:	010ed693          	srl	a3,t4,0x10
   1ef08:	006888b3          	add	a7,a7,t1
   1ef0c:	011686b3          	add	a3,a3,a7
   1ef10:	0066f463          	bgeu	a3,t1,1ef18 <__multf3+0x960>
   1ef14:	01650533          	add	a0,a0,s6
   1ef18:	01c12303          	lw	t1,28(sp)
   1ef1c:	00010a37          	lui	s4,0x10
   1ef20:	fffa0593          	add	a1,s4,-1 # ffff <__sfvwrite_r+0x9b>
   1ef24:	00b6ffb3          	and	t6,a3,a1
   1ef28:	00b378b3          	and	a7,t1,a1
   1ef2c:	00b9ff33          	and	t5,s3,a1
   1ef30:	0106db13          	srl	s6,a3,0x10
   1ef34:	010f9f93          	sll	t6,t6,0x10
   1ef38:	00bef6b3          	and	a3,t4,a1
   1ef3c:	00ab0b33          	add	s6,s6,a0
   1ef40:	00df8fb3          	add	t6,t6,a3
   1ef44:	01035a93          	srl	s5,t1,0x10
   1ef48:	0109d993          	srl	s3,s3,0x10
   1ef4c:	00088513          	mv	a0,a7
   1ef50:	000f0593          	mv	a1,t5
   1ef54:	3e1020ef          	jal	21b34 <__mulsi3>
   1ef58:	00050e93          	mv	t4,a0
   1ef5c:	00098593          	mv	a1,s3
   1ef60:	00088513          	mv	a0,a7
   1ef64:	3d1020ef          	jal	21b34 <__mulsi3>
   1ef68:	00050893          	mv	a7,a0
   1ef6c:	000f0593          	mv	a1,t5
   1ef70:	000a8513          	mv	a0,s5
   1ef74:	3c1020ef          	jal	21b34 <__mulsi3>
   1ef78:	00050f13          	mv	t5,a0
   1ef7c:	00098593          	mv	a1,s3
   1ef80:	000a8513          	mv	a0,s5
   1ef84:	3b1020ef          	jal	21b34 <__mulsi3>
   1ef88:	01e886b3          	add	a3,a7,t5
   1ef8c:	010ed613          	srl	a2,t4,0x10
   1ef90:	00c686b3          	add	a3,a3,a2
   1ef94:	01e6f463          	bgeu	a3,t5,1ef9c <__multf3+0x9e4>
   1ef98:	01450533          	add	a0,a0,s4
   1ef9c:	000109b7          	lui	s3,0x10
   1efa0:	fff98593          	add	a1,s3,-1 # ffff <__sfvwrite_r+0x9b>
   1efa4:	00b6fa33          	and	s4,a3,a1
   1efa8:	00bef633          	and	a2,t4,a1
   1efac:	00b97bb3          	and	s7,s2,a1
   1efb0:	0106d693          	srl	a3,a3,0x10
   1efb4:	00b2feb3          	and	t4,t0,a1
   1efb8:	010a1a13          	sll	s4,s4,0x10
   1efbc:	00a68f33          	add	t5,a3,a0
   1efc0:	00ca0a33          	add	s4,s4,a2
   1efc4:	01095893          	srl	a7,s2,0x10
   1efc8:	0102da93          	srl	s5,t0,0x10
   1efcc:	000b8513          	mv	a0,s7
   1efd0:	000e8593          	mv	a1,t4
   1efd4:	361020ef          	jal	21b34 <__mulsi3>
   1efd8:	00050c13          	mv	s8,a0
   1efdc:	000a8593          	mv	a1,s5
   1efe0:	000b8513          	mv	a0,s7
   1efe4:	351020ef          	jal	21b34 <__mulsi3>
   1efe8:	00050b93          	mv	s7,a0
   1efec:	000e8593          	mv	a1,t4
   1eff0:	00088513          	mv	a0,a7
   1eff4:	341020ef          	jal	21b34 <__mulsi3>
   1eff8:	00050e93          	mv	t4,a0
   1effc:	000a8593          	mv	a1,s5
   1f000:	00088513          	mv	a0,a7
   1f004:	331020ef          	jal	21b34 <__mulsi3>
   1f008:	010c5a93          	srl	s5,s8,0x10
   1f00c:	01db8bb3          	add	s7,s7,t4
   1f010:	017a8ab3          	add	s5,s5,s7
   1f014:	01daf463          	bgeu	s5,t4,1f01c <__multf3+0xa64>
   1f018:	01350533          	add	a0,a0,s3
   1f01c:	000108b7          	lui	a7,0x10
   1f020:	fff88593          	add	a1,a7,-1 # ffff <__sfvwrite_r+0x9b>
   1f024:	00bafbb3          	and	s7,s5,a1
   1f028:	00bc76b3          	and	a3,s8,a1
   1f02c:	00b3f9b3          	and	s3,t2,a1
   1f030:	00b4feb3          	and	t4,s1,a1
   1f034:	010ada93          	srl	s5,s5,0x10
   1f038:	010b9b93          	sll	s7,s7,0x10
   1f03c:	00aa8ab3          	add	s5,s5,a0
   1f040:	00db8bb3          	add	s7,s7,a3
   1f044:	0103dd13          	srl	s10,t2,0x10
   1f048:	0104dc93          	srl	s9,s1,0x10
   1f04c:	00098513          	mv	a0,s3
   1f050:	000e8593          	mv	a1,t4
   1f054:	2e1020ef          	jal	21b34 <__mulsi3>
   1f058:	00050c13          	mv	s8,a0
   1f05c:	000c8593          	mv	a1,s9
   1f060:	00098513          	mv	a0,s3
   1f064:	2d1020ef          	jal	21b34 <__mulsi3>
   1f068:	00050993          	mv	s3,a0
   1f06c:	000e8593          	mv	a1,t4
   1f070:	000d0513          	mv	a0,s10
   1f074:	2c1020ef          	jal	21b34 <__mulsi3>
   1f078:	00050e93          	mv	t4,a0
   1f07c:	000c8593          	mv	a1,s9
   1f080:	000d0513          	mv	a0,s10
   1f084:	2b1020ef          	jal	21b34 <__mulsi3>
   1f088:	010c5d13          	srl	s10,s8,0x10
   1f08c:	01d989b3          	add	s3,s3,t4
   1f090:	013d0d33          	add	s10,s10,s3
   1f094:	00050c93          	mv	s9,a0
   1f098:	01dd7463          	bgeu	s10,t4,1f0a0 <__multf3+0xae8>
   1f09c:	01150cb3          	add	s9,a0,a7
   1f0a0:	04c12983          	lw	s3,76(sp)
   1f0a4:	05012883          	lw	a7,80(sp)
   1f0a8:	00010eb7          	lui	t4,0x10
   1f0ac:	01f98633          	add	a2,s3,t6
   1f0b0:	01688b33          	add	s6,a7,s6
   1f0b4:	013639b3          	sltu	s3,a2,s3
   1f0b8:	fffe8593          	add	a1,t4,-1 # ffff <__sfvwrite_r+0x9b>
   1f0bc:	014606b3          	add	a3,a2,s4
   1f0c0:	013b09b3          	add	s3,s6,s3
   1f0c4:	01e98f33          	add	t5,s3,t5
   1f0c8:	00bd7a33          	and	s4,s10,a1
   1f0cc:	00c6b633          	sltu	a2,a3,a2
   1f0d0:	00cf0633          	add	a2,t5,a2
   1f0d4:	01768bb3          	add	s7,a3,s7
   1f0d8:	00bc7c33          	and	s8,s8,a1
   1f0dc:	010a1a13          	sll	s4,s4,0x10
   1f0e0:	01560ab3          	add	s5,a2,s5
   1f0e4:	018a0fb3          	add	t6,s4,s8
   1f0e8:	010d5513          	srl	a0,s10,0x10
   1f0ec:	00dbb6b3          	sltu	a3,s7,a3
   1f0f0:	01fb8a33          	add	s4,s7,t6
   1f0f4:	00da86b3          	add	a3,s5,a3
   1f0f8:	01950533          	add	a0,a0,s9
   1f0fc:	00a68533          	add	a0,a3,a0
   1f100:	017a3bb3          	sltu	s7,s4,s7
   1f104:	011b38b3          	sltu	a7,s6,a7
   1f108:	0169bb33          	sltu	s6,s3,s6
   1f10c:	013f39b3          	sltu	s3,t5,s3
   1f110:	01e63f33          	sltu	t5,a2,t5
   1f114:	01750fb3          	add	t6,a0,s7
   1f118:	01e9e9b3          	or	s3,s3,t5
   1f11c:	0168e8b3          	or	a7,a7,s6
   1f120:	00cab633          	sltu	a2,s5,a2
   1f124:	0156bab3          	sltu	s5,a3,s5
   1f128:	013888b3          	add	a7,a7,s3
   1f12c:	01566633          	or	a2,a2,s5
   1f130:	00d536b3          	sltu	a3,a0,a3
   1f134:	00afb533          	sltu	a0,t6,a0
   1f138:	01160633          	add	a2,a2,a7
   1f13c:	00a6e6b3          	or	a3,a3,a0
   1f140:	00b3f8b3          	and	a7,t2,a1
   1f144:	00c686b3          	add	a3,a3,a2
   1f148:	00b2fab3          	and	s5,t0,a1
   1f14c:	05412623          	sw	s4,76(sp)
   1f150:	05f12823          	sw	t6,80(sp)
   1f154:	04d12a23          	sw	a3,84(sp)
   1f158:	0103da13          	srl	s4,t2,0x10
   1f15c:	0102d993          	srl	s3,t0,0x10
   1f160:	00088513          	mv	a0,a7
   1f164:	000a8593          	mv	a1,s5
   1f168:	1cd020ef          	jal	21b34 <__mulsi3>
   1f16c:	00050f13          	mv	t5,a0
   1f170:	00098593          	mv	a1,s3
   1f174:	00088513          	mv	a0,a7
   1f178:	1bd020ef          	jal	21b34 <__mulsi3>
   1f17c:	00050893          	mv	a7,a0
   1f180:	000a8593          	mv	a1,s5
   1f184:	000a0513          	mv	a0,s4
   1f188:	1ad020ef          	jal	21b34 <__mulsi3>
   1f18c:	00050f93          	mv	t6,a0
   1f190:	00098593          	mv	a1,s3
   1f194:	000a0513          	mv	a0,s4
   1f198:	19d020ef          	jal	21b34 <__mulsi3>
   1f19c:	01f886b3          	add	a3,a7,t6
   1f1a0:	010f5613          	srl	a2,t5,0x10
   1f1a4:	00c686b3          	add	a3,a3,a2
   1f1a8:	01f6f463          	bgeu	a3,t6,1f1b0 <__multf3+0xbf8>
   1f1ac:	01d50533          	add	a0,a0,t4
   1f1b0:	00010fb7          	lui	t6,0x10
   1f1b4:	ffff8593          	add	a1,t6,-1 # ffff <__sfvwrite_r+0x9b>
   1f1b8:	00b6fab3          	and	s5,a3,a1
   1f1bc:	00bf7633          	and	a2,t5,a1
   1f1c0:	00b978b3          	and	a7,s2,a1
   1f1c4:	0106d693          	srl	a3,a3,0x10
   1f1c8:	00be7f33          	and	t5,t3,a1
   1f1cc:	010a9a93          	sll	s5,s5,0x10
   1f1d0:	00a68b33          	add	s6,a3,a0
   1f1d4:	00ca8ab3          	add	s5,s5,a2
   1f1d8:	01095913          	srl	s2,s2,0x10
   1f1dc:	010e5993          	srl	s3,t3,0x10
   1f1e0:	00088513          	mv	a0,a7
   1f1e4:	000f0593          	mv	a1,t5
   1f1e8:	14d020ef          	jal	21b34 <__mulsi3>
   1f1ec:	00050e93          	mv	t4,a0
   1f1f0:	00098593          	mv	a1,s3
   1f1f4:	00088513          	mv	a0,a7
   1f1f8:	13d020ef          	jal	21b34 <__mulsi3>
   1f1fc:	00050893          	mv	a7,a0
   1f200:	000f0593          	mv	a1,t5
   1f204:	00090513          	mv	a0,s2
   1f208:	12d020ef          	jal	21b34 <__mulsi3>
   1f20c:	00050f13          	mv	t5,a0
   1f210:	00098593          	mv	a1,s3
   1f214:	00090513          	mv	a0,s2
   1f218:	11d020ef          	jal	21b34 <__mulsi3>
   1f21c:	010edc13          	srl	s8,t4,0x10
   1f220:	01e888b3          	add	a7,a7,t5
   1f224:	011c0c33          	add	s8,s8,a7
   1f228:	01ec7463          	bgeu	s8,t5,1f230 <__multf3+0xc78>
   1f22c:	01f50533          	add	a0,a0,t6
   1f230:	00010fb7          	lui	t6,0x10
   1f234:	ffff8593          	add	a1,t6,-1 # ffff <__sfvwrite_r+0x9b>
   1f238:	00bc7633          	and	a2,s8,a1
   1f23c:	00bef6b3          	and	a3,t4,a1
   1f240:	00b378b3          	and	a7,t1,a1
   1f244:	00b4feb3          	and	t4,s1,a1
   1f248:	01061613          	sll	a2,a2,0x10
   1f24c:	010c5c13          	srl	s8,s8,0x10
   1f250:	00ac0c33          	add	s8,s8,a0
   1f254:	00d60933          	add	s2,a2,a3
   1f258:	01035993          	srl	s3,t1,0x10
   1f25c:	0104d493          	srl	s1,s1,0x10
   1f260:	00088513          	mv	a0,a7
   1f264:	000e8593          	mv	a1,t4
   1f268:	0cd020ef          	jal	21b34 <__mulsi3>
   1f26c:	00050f13          	mv	t5,a0
   1f270:	00048593          	mv	a1,s1
   1f274:	00088513          	mv	a0,a7
   1f278:	0bd020ef          	jal	21b34 <__mulsi3>
   1f27c:	00050893          	mv	a7,a0
   1f280:	000e8593          	mv	a1,t4
   1f284:	00098513          	mv	a0,s3
   1f288:	0ad020ef          	jal	21b34 <__mulsi3>
   1f28c:	00050e93          	mv	t4,a0
   1f290:	00048593          	mv	a1,s1
   1f294:	00098513          	mv	a0,s3
   1f298:	09d020ef          	jal	21b34 <__mulsi3>
   1f29c:	010f5b93          	srl	s7,t5,0x10
   1f2a0:	01d888b3          	add	a7,a7,t4
   1f2a4:	011b8bb3          	add	s7,s7,a7
   1f2a8:	01dbf463          	bgeu	s7,t4,1f2b0 <__multf3+0xcf8>
   1f2ac:	01f50533          	add	a0,a0,t6
   1f2b0:	00010eb7          	lui	t4,0x10
   1f2b4:	fffe8593          	add	a1,t4,-1 # ffff <__sfvwrite_r+0x9b>
   1f2b8:	00bbffb3          	and	t6,s7,a1
   1f2bc:	00b3f8b3          	and	a7,t2,a1
   1f2c0:	00bf76b3          	and	a3,t5,a1
   1f2c4:	00be79b3          	and	s3,t3,a1
   1f2c8:	010bdb93          	srl	s7,s7,0x10
   1f2cc:	010f9f93          	sll	t6,t6,0x10
   1f2d0:	00ab8bb3          	add	s7,s7,a0
   1f2d4:	00df8fb3          	add	t6,t6,a3
   1f2d8:	0103d393          	srl	t2,t2,0x10
   1f2dc:	010e5493          	srl	s1,t3,0x10
   1f2e0:	00088513          	mv	a0,a7
   1f2e4:	00098593          	mv	a1,s3
   1f2e8:	04d020ef          	jal	21b34 <__mulsi3>
   1f2ec:	00050f13          	mv	t5,a0
   1f2f0:	00048593          	mv	a1,s1
   1f2f4:	00088513          	mv	a0,a7
   1f2f8:	03d020ef          	jal	21b34 <__mulsi3>
   1f2fc:	00050893          	mv	a7,a0
   1f300:	00098593          	mv	a1,s3
   1f304:	00038513          	mv	a0,t2
   1f308:	02d020ef          	jal	21b34 <__mulsi3>
   1f30c:	00050993          	mv	s3,a0
   1f310:	00048593          	mv	a1,s1
   1f314:	00038513          	mv	a0,t2
   1f318:	01d020ef          	jal	21b34 <__mulsi3>
   1f31c:	010f5393          	srl	t2,t5,0x10
   1f320:	013888b3          	add	a7,a7,s3
   1f324:	011383b3          	add	t2,t2,a7
   1f328:	0133f463          	bgeu	t2,s3,1f330 <__multf3+0xd78>
   1f32c:	01d50533          	add	a0,a0,t4
   1f330:	00010eb7          	lui	t4,0x10
   1f334:	fffe8593          	add	a1,t4,-1 # ffff <__sfvwrite_r+0x9b>
   1f338:	00b3f4b3          	and	s1,t2,a1
   1f33c:	00bf76b3          	and	a3,t5,a1
   1f340:	00b37a33          	and	s4,t1,a1
   1f344:	00b2ff33          	and	t5,t0,a1
   1f348:	0103d393          	srl	t2,t2,0x10
   1f34c:	01049493          	sll	s1,s1,0x10
   1f350:	00a383b3          	add	t2,t2,a0
   1f354:	00d484b3          	add	s1,s1,a3
   1f358:	01035893          	srl	a7,t1,0x10
   1f35c:	0102d293          	srl	t0,t0,0x10
   1f360:	000a0513          	mv	a0,s4
   1f364:	000f0593          	mv	a1,t5
   1f368:	7cc020ef          	jal	21b34 <__mulsi3>
   1f36c:	00050993          	mv	s3,a0
   1f370:	00028593          	mv	a1,t0
   1f374:	000a0513          	mv	a0,s4
   1f378:	7bc020ef          	jal	21b34 <__mulsi3>
   1f37c:	00050a13          	mv	s4,a0
   1f380:	000f0593          	mv	a1,t5
   1f384:	00088513          	mv	a0,a7
   1f388:	7ac020ef          	jal	21b34 <__mulsi3>
   1f38c:	00050f13          	mv	t5,a0
   1f390:	00028593          	mv	a1,t0
   1f394:	00088513          	mv	a0,a7
   1f398:	79c020ef          	jal	21b34 <__mulsi3>
   1f39c:	01ea06b3          	add	a3,s4,t5
   1f3a0:	0109d893          	srl	a7,s3,0x10
   1f3a4:	00d888b3          	add	a7,a7,a3
   1f3a8:	00050a13          	mv	s4,a0
   1f3ac:	01e8f463          	bgeu	a7,t5,1f3b4 <__multf3+0xdfc>
   1f3b0:	01d50a33          	add	s4,a0,t4
   1f3b4:	05012583          	lw	a1,80(sp)
   1f3b8:	05412f03          	lw	t5,84(sp)
   1f3bc:	00010eb7          	lui	t4,0x10
   1f3c0:	015582b3          	add	t0,a1,s5
   1f3c4:	016f0b33          	add	s6,t5,s6
   1f3c8:	00b2b5b3          	sltu	a1,t0,a1
   1f3cc:	01228633          	add	a2,t0,s2
   1f3d0:	00bb05b3          	add	a1,s6,a1
   1f3d4:	01858c33          	add	s8,a1,s8
   1f3d8:	005632b3          	sltu	t0,a2,t0
   1f3dc:	005c06b3          	add	a3,s8,t0
   1f3e0:	01f60fb3          	add	t6,a2,t6
   1f3e4:	01768bb3          	add	s7,a3,s7
   1f3e8:	00cfb633          	sltu	a2,t6,a2
   1f3ec:	00cb8633          	add	a2,s7,a2
   1f3f0:	01eb3f33          	sltu	t5,s6,t5
   1f3f4:	0165bb33          	sltu	s6,a1,s6
   1f3f8:	00bc35b3          	sltu	a1,s8,a1
   1f3fc:	0186bc33          	sltu	s8,a3,s8
   1f400:	fffe8293          	add	t0,t4,-1 # ffff <__sfvwrite_r+0x9b>
   1f404:	0185e5b3          	or	a1,a1,s8
   1f408:	016f6f33          	or	t5,t5,s6
   1f40c:	00dbb6b3          	sltu	a3,s7,a3
   1f410:	01763bb3          	sltu	s7,a2,s7
   1f414:	0058f933          	and	s2,a7,t0
   1f418:	00bf0f33          	add	t5,t5,a1
   1f41c:	0176e6b3          	or	a3,a3,s7
   1f420:	00960533          	add	a0,a2,s1
   1f424:	01e686b3          	add	a3,a3,t5
   1f428:	0059f9b3          	and	s3,s3,t0
   1f42c:	01091f13          	sll	t5,s2,0x10
   1f430:	007685b3          	add	a1,a3,t2
   1f434:	00c53633          	sltu	a2,a0,a2
   1f438:	013f03b3          	add	t2,t5,s3
   1f43c:	0108d893          	srl	a7,a7,0x10
   1f440:	00c58633          	add	a2,a1,a2
   1f444:	007503b3          	add	t2,a0,t2
   1f448:	014888b3          	add	a7,a7,s4
   1f44c:	011608b3          	add	a7,a2,a7
   1f450:	00a3b533          	sltu	a0,t2,a0
   1f454:	00a88533          	add	a0,a7,a0
   1f458:	00d5b6b3          	sltu	a3,a1,a3
   1f45c:	00b635b3          	sltu	a1,a2,a1
   1f460:	00c8b633          	sltu	a2,a7,a2
   1f464:	011538b3          	sltu	a7,a0,a7
   1f468:	01166633          	or	a2,a2,a7
   1f46c:	00b6e6b3          	or	a3,a3,a1
   1f470:	005374b3          	and	s1,t1,t0
   1f474:	00c686b3          	add	a3,a3,a2
   1f478:	005e72b3          	and	t0,t3,t0
   1f47c:	04a12c23          	sw	a0,88(sp)
   1f480:	05f12823          	sw	t6,80(sp)
   1f484:	04712a23          	sw	t2,84(sp)
   1f488:	04d12e23          	sw	a3,92(sp)
   1f48c:	01035313          	srl	t1,t1,0x10
   1f490:	010e5893          	srl	a7,t3,0x10
   1f494:	00048513          	mv	a0,s1
   1f498:	00028593          	mv	a1,t0
   1f49c:	698020ef          	jal	21b34 <__mulsi3>
   1f4a0:	00050f93          	mv	t6,a0
   1f4a4:	00088593          	mv	a1,a7
   1f4a8:	00048513          	mv	a0,s1
   1f4ac:	688020ef          	jal	21b34 <__mulsi3>
   1f4b0:	00050e13          	mv	t3,a0
   1f4b4:	00028593          	mv	a1,t0
   1f4b8:	00030513          	mv	a0,t1
   1f4bc:	678020ef          	jal	21b34 <__mulsi3>
   1f4c0:	00050f13          	mv	t5,a0
   1f4c4:	00088593          	mv	a1,a7
   1f4c8:	00030513          	mv	a0,t1
   1f4cc:	668020ef          	jal	21b34 <__mulsi3>
   1f4d0:	010fd693          	srl	a3,t6,0x10
   1f4d4:	01ee0e33          	add	t3,t3,t5
   1f4d8:	01c686b3          	add	a3,a3,t3
   1f4dc:	01e6f463          	bgeu	a3,t5,1f4e4 <__multf3+0xf2c>
   1f4e0:	01d50533          	add	a0,a0,t4
   1f4e4:	00010337          	lui	t1,0x10
   1f4e8:	fff30313          	add	t1,t1,-1 # ffff <__sfvwrite_r+0x9b>
   1f4ec:	05812883          	lw	a7,88(sp)
   1f4f0:	0066f633          	and	a2,a3,t1
   1f4f4:	006ff5b3          	and	a1,t6,t1
   1f4f8:	01061613          	sll	a2,a2,0x10
   1f4fc:	05c12303          	lw	t1,92(sp)
   1f500:	00b60633          	add	a2,a2,a1
   1f504:	00c88633          	add	a2,a7,a2
   1f508:	0106d693          	srl	a3,a3,0x10
   1f50c:	006686b3          	add	a3,a3,t1
   1f510:	011638b3          	sltu	a7,a2,a7
   1f514:	04012303          	lw	t1,64(sp)
   1f518:	011686b3          	add	a3,a3,a7
   1f51c:	04412883          	lw	a7,68(sp)
   1f520:	00a686b3          	add	a3,a3,a0
   1f524:	04c12583          	lw	a1,76(sp)
   1f528:	04812503          	lw	a0,72(sp)
   1f52c:	0068e8b3          	or	a7,a7,t1
   1f530:	04d12e23          	sw	a3,92(sp)
   1f534:	00a8e8b3          	or	a7,a7,a0
   1f538:	00d59513          	sll	a0,a1,0xd
   1f53c:	04c12c23          	sw	a2,88(sp)
   1f540:	01156533          	or	a0,a0,a7
   1f544:	04010693          	add	a3,sp,64
   1f548:	05010313          	add	t1,sp,80
   1f54c:	0135d893          	srl	a7,a1,0x13
   1f550:	0106a583          	lw	a1,16(a3)
   1f554:	00468693          	add	a3,a3,4
   1f558:	00d59613          	sll	a2,a1,0xd
   1f55c:	01166633          	or	a2,a2,a7
   1f560:	fec6ae23          	sw	a2,-4(a3)
   1f564:	fe6694e3          	bne	a3,t1,1f54c <__multf3+0xf94>
   1f568:	04012603          	lw	a2,64(sp)
   1f56c:	00a036b3          	snez	a3,a0
   1f570:	04c12583          	lw	a1,76(sp)
   1f574:	00c6e6b3          	or	a3,a3,a2
   1f578:	04812603          	lw	a2,72(sp)
   1f57c:	02b12e23          	sw	a1,60(sp)
   1f580:	02d12823          	sw	a3,48(sp)
   1f584:	02c12c23          	sw	a2,56(sp)
   1f588:	04412603          	lw	a2,68(sp)
   1f58c:	02c12a23          	sw	a2,52(sp)
   1f590:	00b59613          	sll	a2,a1,0xb
   1f594:	38065463          	bgez	a2,1f91c <__multf3+0x1364>
   1f598:	01f69513          	sll	a0,a3,0x1f
   1f59c:	03010713          	add	a4,sp,48
   1f5a0:	03c10893          	add	a7,sp,60
   1f5a4:	0016d313          	srl	t1,a3,0x1
   1f5a8:	00472683          	lw	a3,4(a4)
   1f5ac:	00470713          	add	a4,a4,4
   1f5b0:	01f69613          	sll	a2,a3,0x1f
   1f5b4:	00666633          	or	a2,a2,t1
   1f5b8:	fec72e23          	sw	a2,-4(a4)
   1f5bc:	ff1714e3          	bne	a4,a7,1f5a4 <__multf3+0xfec>
   1f5c0:	03012703          	lw	a4,48(sp)
   1f5c4:	00a036b3          	snez	a3,a0
   1f5c8:	0015d593          	srl	a1,a1,0x1
   1f5cc:	00d76733          	or	a4,a4,a3
   1f5d0:	02e12823          	sw	a4,48(sp)
   1f5d4:	07412c83          	lw	s9,116(sp)
   1f5d8:	07012d03          	lw	s10,112(sp)
   1f5dc:	06c12d83          	lw	s11,108(sp)
   1f5e0:	02b12e23          	sw	a1,60(sp)
   1f5e4:	00078713          	mv	a4,a5
   1f5e8:	0080006f          	j	1f5f0 <__multf3+0x1038>
   1f5ec:	00078713          	mv	a4,a5
   1f5f0:	00004637          	lui	a2,0x4
   1f5f4:	fff60613          	add	a2,a2,-1 # 3fff <OSFlagPend+0x54f>
   1f5f8:	00c70633          	add	a2,a4,a2
   1f5fc:	10c05663          	blez	a2,1f708 <__multf3+0x1150>
   1f600:	03012783          	lw	a5,48(sp)
   1f604:	03c12683          	lw	a3,60(sp)
   1f608:	0077f593          	and	a1,a5,7
   1f60c:	04058263          	beqz	a1,1f650 <__multf3+0x1098>
   1f610:	00f7f593          	and	a1,a5,15
   1f614:	00400513          	li	a0,4
   1f618:	02a58c63          	beq	a1,a0,1f650 <__multf3+0x1098>
   1f61c:	03412503          	lw	a0,52(sp)
   1f620:	00478793          	add	a5,a5,4
   1f624:	03812883          	lw	a7,56(sp)
   1f628:	0047b593          	sltiu	a1,a5,4
   1f62c:	00a58533          	add	a0,a1,a0
   1f630:	00b535b3          	sltu	a1,a0,a1
   1f634:	00b885b3          	add	a1,a7,a1
   1f638:	0115b8b3          	sltu	a7,a1,a7
   1f63c:	011686b3          	add	a3,a3,a7
   1f640:	02f12823          	sw	a5,48(sp)
   1f644:	02a12a23          	sw	a0,52(sp)
   1f648:	02b12c23          	sw	a1,56(sp)
   1f64c:	02d12e23          	sw	a3,60(sp)
   1f650:	00b69793          	sll	a5,a3,0xb
   1f654:	0007de63          	bgez	a5,1f670 <__multf3+0x10b8>
   1f658:	fff007b7          	lui	a5,0xfff00
   1f65c:	fff78793          	add	a5,a5,-1 # ffefffff <__alt_data_end+0xffeb6c1f>
   1f660:	00f6f6b3          	and	a3,a3,a5
   1f664:	00004637          	lui	a2,0x4
   1f668:	02d12e23          	sw	a3,60(sp)
   1f66c:	00c70633          	add	a2,a4,a2
   1f670:	03012583          	lw	a1,48(sp)
   1f674:	03010793          	add	a5,sp,48
   1f678:	03c10893          	add	a7,sp,60
   1f67c:	0035d513          	srl	a0,a1,0x3
   1f680:	0047a583          	lw	a1,4(a5)
   1f684:	00478793          	add	a5,a5,4
   1f688:	01d59713          	sll	a4,a1,0x1d
   1f68c:	00a76733          	or	a4,a4,a0
   1f690:	fee7ae23          	sw	a4,-4(a5)
   1f694:	ff1794e3          	bne	a5,a7,1f67c <__multf3+0x10c4>
   1f698:	00008737          	lui	a4,0x8
   1f69c:	000087b7          	lui	a5,0x8
   1f6a0:	ffe70713          	add	a4,a4,-2 # 7ffe <OSTaskChangePrio+0x17e>
   1f6a4:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   1f6a8:	9cc74c63          	blt	a4,a2,1e880 <__multf3+0x2c8>
   1f6ac:	0036d713          	srl	a4,a3,0x3
   1f6b0:	00f677b3          	and	a5,a2,a5
   1f6b4:	01071713          	sll	a4,a4,0x10
   1f6b8:	01079793          	sll	a5,a5,0x10
   1f6bc:	03012583          	lw	a1,48(sp)
   1f6c0:	03412603          	lw	a2,52(sp)
   1f6c4:	03812683          	lw	a3,56(sp)
   1f6c8:	01075713          	srl	a4,a4,0x10
   1f6cc:	0107d793          	srl	a5,a5,0x10
   1f6d0:	8b4ff06f          	j	1e784 <__multf3+0x1cc>
   1f6d4:	00f00713          	li	a4,15
   1f6d8:	00300613          	li	a2,3
   1f6dc:	00eb1463          	bne	s6,a4,1f6e4 <__multf3+0x112c>
   1f6e0:	888ff06f          	j	1e768 <__multf3+0x1b0>
   1f6e4:	02412683          	lw	a3,36(sp)
   1f6e8:	02c12703          	lw	a4,44(sp)
   1f6ec:	00090a13          	mv	s4,s2
   1f6f0:	02d12a23          	sw	a3,52(sp)
   1f6f4:	02012683          	lw	a3,32(sp)
   1f6f8:	02d12823          	sw	a3,48(sp)
   1f6fc:	02812683          	lw	a3,40(sp)
   1f700:	02d12c23          	sw	a3,56(sp)
   1f704:	958ff06f          	j	1e85c <__multf3+0x2a4>
   1f708:	22061263          	bnez	a2,1f92c <__multf3+0x1374>
   1f70c:	03012783          	lw	a5,48(sp)
   1f710:	03c12303          	lw	t1,60(sp)
   1f714:	00300713          	li	a4,3
   1f718:	01f79793          	sll	a5,a5,0x1f
   1f71c:	00135313          	srl	t1,t1,0x1
   1f720:	00100593          	li	a1,1
   1f724:	01f00e13          	li	t3,31
   1f728:	03010693          	add	a3,sp,48
   1f72c:	00261613          	sll	a2,a2,0x2
   1f730:	00271f13          	sll	t5,a4,0x2
   1f734:	00c68533          	add	a0,a3,a2
   1f738:	00068893          	mv	a7,a3
   1f73c:	01e68eb3          	add	t4,a3,t5
   1f740:	00052603          	lw	a2,0(a0)
   1f744:	00452f83          	lw	t6,4(a0)
   1f748:	00488893          	add	a7,a7,4
   1f74c:	00b65633          	srl	a2,a2,a1
   1f750:	01cf9fb3          	sll	t6,t6,t3
   1f754:	01f66633          	or	a2,a2,t6
   1f758:	fec8ae23          	sw	a2,-4(a7)
   1f75c:	00450513          	add	a0,a0,4
   1f760:	ffd890e3          	bne	a7,t4,1f740 <__multf3+0x1188>
   1f764:	050f0613          	add	a2,t5,80
   1f768:	01010593          	add	a1,sp,16
   1f76c:	00b60f33          	add	t5,a2,a1
   1f770:	00170713          	add	a4,a4,1
   1f774:	fc6f2823          	sw	t1,-48(t5)
   1f778:	00400613          	li	a2,4
   1f77c:	03012303          	lw	t1,48(sp)
   1f780:	02c70e63          	beq	a4,a2,1f7bc <__multf3+0x1204>
   1f784:	00400613          	li	a2,4
   1f788:	40e60633          	sub	a2,a2,a4
   1f78c:	00261613          	sll	a2,a2,0x2
   1f790:	00271713          	sll	a4,a4,0x2
   1f794:	00800593          	li	a1,8
   1f798:	00e68733          	add	a4,a3,a4
   1f79c:	00b66a63          	bltu	a2,a1,1f7b0 <__multf3+0x11f8>
   1f7a0:	00072023          	sw	zero,0(a4)
   1f7a4:	00072223          	sw	zero,4(a4)
   1f7a8:	ff860613          	add	a2,a2,-8 # 3ff8 <OSFlagPend+0x548>
   1f7ac:	00870713          	add	a4,a4,8
   1f7b0:	00400593          	li	a1,4
   1f7b4:	00b66463          	bltu	a2,a1,1f7bc <__multf3+0x1204>
   1f7b8:	00072023          	sw	zero,0(a4)
   1f7bc:	00f037b3          	snez	a5,a5
   1f7c0:	0067e7b3          	or	a5,a5,t1
   1f7c4:	02f12823          	sw	a5,48(sp)
   1f7c8:	0077f613          	and	a2,a5,7
   1f7cc:	03c12703          	lw	a4,60(sp)
   1f7d0:	04060263          	beqz	a2,1f814 <__multf3+0x125c>
   1f7d4:	00f7f613          	and	a2,a5,15
   1f7d8:	00400593          	li	a1,4
   1f7dc:	02b60c63          	beq	a2,a1,1f814 <__multf3+0x125c>
   1f7e0:	03412603          	lw	a2,52(sp)
   1f7e4:	00478793          	add	a5,a5,4
   1f7e8:	03812503          	lw	a0,56(sp)
   1f7ec:	0047b593          	sltiu	a1,a5,4
   1f7f0:	00b605b3          	add	a1,a2,a1
   1f7f4:	00c5b633          	sltu	a2,a1,a2
   1f7f8:	00c50633          	add	a2,a0,a2
   1f7fc:	00a63533          	sltu	a0,a2,a0
   1f800:	00a70733          	add	a4,a4,a0
   1f804:	02f12823          	sw	a5,48(sp)
   1f808:	02b12a23          	sw	a1,52(sp)
   1f80c:	02c12c23          	sw	a2,56(sp)
   1f810:	02e12e23          	sw	a4,60(sp)
   1f814:	00c71793          	sll	a5,a4,0xc
   1f818:	1a07ce63          	bltz	a5,1f9d4 <__multf3+0x141c>
   1f81c:	03012603          	lw	a2,48(sp)
   1f820:	00068793          	mv	a5,a3
   1f824:	03c10513          	add	a0,sp,60
   1f828:	00365593          	srl	a1,a2,0x3
   1f82c:	0047a603          	lw	a2,4(a5)
   1f830:	00478793          	add	a5,a5,4
   1f834:	01d61693          	sll	a3,a2,0x1d
   1f838:	00b6e6b3          	or	a3,a3,a1
   1f83c:	fed7ae23          	sw	a3,-4(a5)
   1f840:	fea794e3          	bne	a5,a0,1f828 <__multf3+0x1270>
   1f844:	00375713          	srl	a4,a4,0x3
   1f848:	01071713          	sll	a4,a4,0x10
   1f84c:	03012583          	lw	a1,48(sp)
   1f850:	03412603          	lw	a2,52(sp)
   1f854:	03812683          	lw	a3,56(sp)
   1f858:	01075713          	srl	a4,a4,0x10
   1f85c:	00000793          	li	a5,0
   1f860:	f25fe06f          	j	1e784 <__multf3+0x1cc>
   1f864:	16089063          	bnez	a7,1f9c4 <__multf3+0x140c>
   1f868:	1a068c63          	beqz	a3,1fa20 <__multf3+0x1468>
   1f86c:	00068513          	mv	a0,a3
   1f870:	39c020ef          	jal	21c0c <__clzsi2>
   1f874:	04050513          	add	a0,a0,64
   1f878:	ff450793          	add	a5,a0,-12
   1f87c:	01f7f893          	and	a7,a5,31
   1f880:	4057d693          	sra	a3,a5,0x5
   1f884:	22089063          	bnez	a7,1faa4 <__multf3+0x14ec>
   1f888:	40d00633          	neg	a2,a3
   1f88c:	00261613          	sll	a2,a2,0x2
   1f890:	00c60793          	add	a5,a2,12
   1f894:	01010813          	add	a6,sp,16
   1f898:	00f807b3          	add	a5,a6,a5
   1f89c:	40c00633          	neg	a2,a2
   1f8a0:	0007a883          	lw	a7,0(a5)
   1f8a4:	00c785b3          	add	a1,a5,a2
   1f8a8:	00078713          	mv	a4,a5
   1f8ac:	0115a023          	sw	a7,0(a1)
   1f8b0:	ffc78793          	add	a5,a5,-4
   1f8b4:	fee816e3          	bne	a6,a4,1f8a0 <__multf3+0x12e8>
   1f8b8:	fff68793          	add	a5,a3,-1
   1f8bc:	938ff06f          	j	1e9f4 <__multf3+0x43c>
   1f8c0:	0e0b9a63          	bnez	s7,1f9b4 <__multf3+0x13fc>
   1f8c4:	12098463          	beqz	s3,1f9ec <__multf3+0x1434>
   1f8c8:	00098513          	mv	a0,s3
   1f8cc:	340020ef          	jal	21c0c <__clzsi2>
   1f8d0:	04050513          	add	a0,a0,64
   1f8d4:	ff450793          	add	a5,a0,-12
   1f8d8:	01f7f893          	and	a7,a5,31
   1f8dc:	4057d693          	sra	a3,a5,0x5
   1f8e0:	1e089263          	bnez	a7,1fac4 <__multf3+0x150c>
   1f8e4:	40d00633          	neg	a2,a3
   1f8e8:	00261613          	sll	a2,a2,0x2
   1f8ec:	00c60793          	add	a5,a2,12
   1f8f0:	02010813          	add	a6,sp,32
   1f8f4:	00f807b3          	add	a5,a6,a5
   1f8f8:	40c00633          	neg	a2,a2
   1f8fc:	0007a883          	lw	a7,0(a5)
   1f900:	00c785b3          	add	a1,a5,a2
   1f904:	00078713          	mv	a4,a5
   1f908:	0115a023          	sw	a7,0(a1)
   1f90c:	ffc78793          	add	a5,a5,-4
   1f910:	fee816e3          	bne	a6,a4,1f8fc <__multf3+0x1344>
   1f914:	fff68793          	add	a5,a3,-1
   1f918:	804ff06f          	j	1e91c <__multf3+0x364>
   1f91c:	07412c83          	lw	s9,116(sp)
   1f920:	07012d03          	lw	s10,112(sp)
   1f924:	06c12d83          	lw	s11,108(sp)
   1f928:	cc9ff06f          	j	1f5f0 <__multf3+0x1038>
   1f92c:	00100793          	li	a5,1
   1f930:	40c787b3          	sub	a5,a5,a2
   1f934:	07400713          	li	a4,116
   1f938:	00f75463          	bge	a4,a5,1f940 <__multf3+0x1388>
   1f93c:	f41fe06f          	j	1e87c <__multf3+0x2c4>
   1f940:	01f7f593          	and	a1,a5,31
   1f944:	02000e13          	li	t3,32
   1f948:	4057d613          	sra	a2,a5,0x5
   1f94c:	40be0e33          	sub	t3,t3,a1
   1f950:	16060263          	beqz	a2,1fab4 <__multf3+0x14fc>
   1f954:	03010693          	add	a3,sp,48
   1f958:	00261893          	sll	a7,a2,0x2
   1f95c:	00068713          	mv	a4,a3
   1f960:	00d888b3          	add	a7,a7,a3
   1f964:	00000793          	li	a5,0
   1f968:	00072503          	lw	a0,0(a4)
   1f96c:	00470713          	add	a4,a4,4
   1f970:	00a7e7b3          	or	a5,a5,a0
   1f974:	ff171ae3          	bne	a4,a7,1f968 <__multf3+0x13b0>
   1f978:	00060893          	mv	a7,a2
   1f97c:	00300713          	li	a4,3
   1f980:	40c70733          	sub	a4,a4,a2
   1f984:	00068513          	mv	a0,a3
   1f988:	00261313          	sll	t1,a2,0x2
   1f98c:	0e059463          	bnez	a1,1fa74 <__multf3+0x14bc>
   1f990:	006508b3          	add	a7,a0,t1
   1f994:	0008a883          	lw	a7,0(a7)
   1f998:	00158593          	add	a1,a1,1
   1f99c:	00450513          	add	a0,a0,4
   1f9a0:	ff152e23          	sw	a7,-4(a0)
   1f9a4:	feb756e3          	bge	a4,a1,1f990 <__multf3+0x13d8>
   1f9a8:	00400713          	li	a4,4
   1f9ac:	40c70733          	sub	a4,a4,a2
   1f9b0:	dc9ff06f          	j	1f778 <__multf3+0x11c0>
   1f9b4:	000b8513          	mv	a0,s7
   1f9b8:	254020ef          	jal	21c0c <__clzsi2>
   1f9bc:	02050513          	add	a0,a0,32
   1f9c0:	f15ff06f          	j	1f8d4 <__multf3+0x131c>
   1f9c4:	00088513          	mv	a0,a7
   1f9c8:	244020ef          	jal	21c0c <__clzsi2>
   1f9cc:	02050513          	add	a0,a0,32
   1f9d0:	ea9ff06f          	j	1f878 <__multf3+0x12c0>
   1f9d4:	00100793          	li	a5,1
   1f9d8:	00000713          	li	a4,0
   1f9dc:	00000693          	li	a3,0
   1f9e0:	00000613          	li	a2,0
   1f9e4:	00000593          	li	a1,0
   1f9e8:	d9dfe06f          	j	1e784 <__multf3+0x1cc>
   1f9ec:	000a8513          	mv	a0,s5
   1f9f0:	21c020ef          	jal	21c0c <__clzsi2>
   1f9f4:	05450793          	add	a5,a0,84
   1f9f8:	01f7f893          	and	a7,a5,31
   1f9fc:	06050513          	add	a0,a0,96
   1fa00:	4057d693          	sra	a3,a5,0x5
   1fa04:	ee0880e3          	beqz	a7,1f8e4 <__multf3+0x132c>
   1fa08:	00200793          	li	a5,2
   1fa0c:	011a9ab3          	sll	s5,s5,a7
   1fa10:	04f69263          	bne	a3,a5,1fa54 <__multf3+0x149c>
   1fa14:	02000e13          	li	t3,32
   1fa18:	411e0e33          	sub	t3,t3,a7
   1fa1c:	ea9fe06f          	j	1e8c4 <__multf3+0x30c>
   1fa20:	00048513          	mv	a0,s1
   1fa24:	1e8020ef          	jal	21c0c <__clzsi2>
   1fa28:	05450793          	add	a5,a0,84
   1fa2c:	01f7f893          	and	a7,a5,31
   1fa30:	06050513          	add	a0,a0,96
   1fa34:	4057d693          	sra	a3,a5,0x5
   1fa38:	e40888e3          	beqz	a7,1f888 <__multf3+0x12d0>
   1fa3c:	00200793          	li	a5,2
   1fa40:	011494b3          	sll	s1,s1,a7
   1fa44:	02f69063          	bne	a3,a5,1fa64 <__multf3+0x14ac>
   1fa48:	02000e13          	li	t3,32
   1fa4c:	411e0e33          	sub	t3,t3,a7
   1fa50:	f4dfe06f          	j	1e99c <__multf3+0x3e4>
   1fa54:	03512623          	sw	s5,44(sp)
   1fa58:	00200793          	li	a5,2
   1fa5c:	02010813          	add	a6,sp,32
   1fa60:	ec5fe06f          	j	1e924 <__multf3+0x36c>
   1fa64:	00912e23          	sw	s1,28(sp)
   1fa68:	00200793          	li	a5,2
   1fa6c:	01010813          	add	a6,sp,16
   1fa70:	f8dfe06f          	j	1e9fc <__multf3+0x444>
   1fa74:	00289513          	sll	a0,a7,0x2
   1fa78:	05050513          	add	a0,a0,80
   1fa7c:	01010893          	add	a7,sp,16
   1fa80:	01150533          	add	a0,a0,a7
   1fa84:	fd052503          	lw	a0,-48(a0)
   1fa88:	03c12303          	lw	t1,60(sp)
   1fa8c:	01c51533          	sll	a0,a0,t3
   1fa90:	00a7e7b3          	or	a5,a5,a0
   1fa94:	00b35333          	srl	t1,t1,a1
   1fa98:	c8071ae3          	bnez	a4,1f72c <__multf3+0x1174>
   1fa9c:	00100713          	li	a4,1
   1faa0:	ce5ff06f          	j	1f784 <__multf3+0x11cc>
   1faa4:	02000e13          	li	t3,32
   1faa8:	411e0e33          	sub	t3,t3,a7
   1faac:	011494b3          	sll	s1,s1,a7
   1fab0:	eedfe06f          	j	1e99c <__multf3+0x3e4>
   1fab4:	00000893          	li	a7,0
   1fab8:	00000793          	li	a5,0
   1fabc:	03010693          	add	a3,sp,48
   1fac0:	ebdff06f          	j	1f97c <__multf3+0x13c4>
   1fac4:	02000e13          	li	t3,32
   1fac8:	411e0e33          	sub	t3,t3,a7
   1facc:	011a9ab3          	sll	s5,s5,a7
   1fad0:	df5fe06f          	j	1e8c4 <__multf3+0x30c>

0001fad4 <__subtf3>:
   1fad4:	fa010113          	add	sp,sp,-96
   1fad8:	04912a23          	sw	s1,84(sp)
   1fadc:	00c5a483          	lw	s1,12(a1)
   1fae0:	0045a703          	lw	a4,4(a1)
   1fae4:	0005a803          	lw	a6,0(a1)
   1fae8:	0085a783          	lw	a5,8(a1)
   1faec:	01049693          	sll	a3,s1,0x10
   1faf0:	00062303          	lw	t1,0(a2)
   1faf4:	00462f83          	lw	t6,4(a2)
   1faf8:	00862e03          	lw	t3,8(a2)
   1fafc:	00c62583          	lw	a1,12(a2)
   1fb00:	04812c23          	sw	s0,88(sp)
   1fb04:	0106d693          	srl	a3,a3,0x10
   1fb08:	00149413          	sll	s0,s1,0x1
   1fb0c:	05212823          	sw	s2,80(sp)
   1fb10:	02e12a23          	sw	a4,52(sp)
   1fb14:	02912e23          	sw	s1,60(sp)
   1fb18:	00e12a23          	sw	a4,20(sp)
   1fb1c:	04112e23          	sw	ra,92(sp)
   1fb20:	00050913          	mv	s2,a0
   1fb24:	03012823          	sw	a6,48(sp)
   1fb28:	02f12c23          	sw	a5,56(sp)
   1fb2c:	01012823          	sw	a6,16(sp)
   1fb30:	00f12c23          	sw	a5,24(sp)
   1fb34:	00d12e23          	sw	a3,28(sp)
   1fb38:	01145413          	srl	s0,s0,0x11
   1fb3c:	01f4d493          	srl	s1,s1,0x1f
   1fb40:	01010e93          	add	t4,sp,16
   1fb44:	01c10713          	add	a4,sp,28
   1fb48:	00369613          	sll	a2,a3,0x3
   1fb4c:	ffc72683          	lw	a3,-4(a4)
   1fb50:	00070f13          	mv	t5,a4
   1fb54:	ffc70713          	add	a4,a4,-4
   1fb58:	01d6d793          	srl	a5,a3,0x1d
   1fb5c:	00c7e7b3          	or	a5,a5,a2
   1fb60:	00f72223          	sw	a5,4(a4)
   1fb64:	feee92e3          	bne	t4,a4,1fb48 <__subtf3+0x74>
   1fb68:	01059613          	sll	a2,a1,0x10
   1fb6c:	00381893          	sll	a7,a6,0x3
   1fb70:	01065613          	srl	a2,a2,0x10
   1fb74:	00159813          	sll	a6,a1,0x1
   1fb78:	03f12a23          	sw	t6,52(sp)
   1fb7c:	02b12e23          	sw	a1,60(sp)
   1fb80:	03f12223          	sw	t6,36(sp)
   1fb84:	01112823          	sw	a7,16(sp)
   1fb88:	02612823          	sw	t1,48(sp)
   1fb8c:	03c12c23          	sw	t3,56(sp)
   1fb90:	02612023          	sw	t1,32(sp)
   1fb94:	03c12423          	sw	t3,40(sp)
   1fb98:	02c12623          	sw	a2,44(sp)
   1fb9c:	01185813          	srl	a6,a6,0x11
   1fba0:	01f5d593          	srl	a1,a1,0x1f
   1fba4:	02010f93          	add	t6,sp,32
   1fba8:	02c10793          	add	a5,sp,44
   1fbac:	00361513          	sll	a0,a2,0x3
   1fbb0:	ffc7a603          	lw	a2,-4(a5)
   1fbb4:	ffc78793          	add	a5,a5,-4
   1fbb8:	01d65693          	srl	a3,a2,0x1d
   1fbbc:	00a6e6b3          	or	a3,a3,a0
   1fbc0:	00d7a223          	sw	a3,4(a5)
   1fbc4:	feff94e3          	bne	t6,a5,1fbac <__subtf3+0xd8>
   1fbc8:	00331313          	sll	t1,t1,0x3
   1fbcc:	00008637          	lui	a2,0x8
   1fbd0:	02612023          	sw	t1,32(sp)
   1fbd4:	fff60613          	add	a2,a2,-1 # 7fff <OSTaskChangePrio+0x17f>
   1fbd8:	1cc80e63          	beq	a6,a2,1fdb4 <__subtf3+0x2e0>
   1fbdc:	0015c593          	xor	a1,a1,1
   1fbe0:	410406b3          	sub	a3,s0,a6
   1fbe4:	0cb48a63          	beq	s1,a1,1fcb8 <__subtf3+0x1e4>
   1fbe8:	00d04463          	bgtz	a3,1fbf0 <__subtf3+0x11c>
   1fbec:	6580106f          	j	21244 <__subtf3+0x1770>
   1fbf0:	01412503          	lw	a0,20(sp)
   1fbf4:	01812e83          	lw	t4,24(sp)
   1fbf8:	01c12e03          	lw	t3,28(sp)
   1fbfc:	30080663          	beqz	a6,1ff08 <__subtf3+0x434>
   1fc00:	00c41463          	bne	s0,a2,1fc08 <__subtf3+0x134>
   1fc04:	0000106f          	j	20c04 <__subtf3+0x1130>
   1fc08:	02c12583          	lw	a1,44(sp)
   1fc0c:	00080637          	lui	a2,0x80
   1fc10:	07400713          	li	a4,116
   1fc14:	00c5e5b3          	or	a1,a1,a2
   1fc18:	02b12623          	sw	a1,44(sp)
   1fc1c:	32d75063          	bge	a4,a3,1ff3c <__subtf3+0x468>
   1fc20:	00000613          	li	a2,0
   1fc24:	00000693          	li	a3,0
   1fc28:	00000813          	li	a6,0
   1fc2c:	00100713          	li	a4,1
   1fc30:	410507b3          	sub	a5,a0,a6
   1fc34:	40e88733          	sub	a4,a7,a4
   1fc38:	00f53333          	sltu	t1,a0,a5
   1fc3c:	00e8b5b3          	sltu	a1,a7,a4
   1fc40:	00030f13          	mv	t5,t1
   1fc44:	40b787b3          	sub	a5,a5,a1
   1fc48:	00e8f463          	bgeu	a7,a4,1fc50 <__subtf3+0x17c>
   1fc4c:	00a808e3          	beq	a6,a0,2045c <__subtf3+0x988>
   1fc50:	40de8533          	sub	a0,t4,a3
   1fc54:	00aeb5b3          	sltu	a1,t4,a0
   1fc58:	41e50533          	sub	a0,a0,t5
   1fc5c:	000316e3          	bnez	t1,20468 <__subtf3+0x994>
   1fc60:	00b606b3          	add	a3,a2,a1
   1fc64:	40de0e33          	sub	t3,t3,a3
   1fc68:	02f12a23          	sw	a5,52(sp)
   1fc6c:	03c12e23          	sw	t3,60(sp)
   1fc70:	02a12c23          	sw	a0,56(sp)
   1fc74:	02e12823          	sw	a4,48(sp)
   1fc78:	00ce1793          	sll	a5,t3,0xc
   1fc7c:	5007d663          	bgez	a5,20188 <__subtf3+0x6b4>
   1fc80:	00080537          	lui	a0,0x80
   1fc84:	fff50513          	add	a0,a0,-1 # 7ffff <__alt_data_end+0x36c1f>
   1fc88:	00ae7533          	and	a0,t3,a0
   1fc8c:	02a12e23          	sw	a0,60(sp)
   1fc90:	1c0512e3          	bnez	a0,20654 <__subtf3+0xb80>
   1fc94:	03812503          	lw	a0,56(sp)
   1fc98:	14050ce3          	beqz	a0,205f0 <__subtf3+0xb1c>
   1fc9c:	771010ef          	jal	21c0c <__clzsi2>
   1fca0:	01450613          	add	a2,a0,20
   1fca4:	01f67893          	and	a7,a2,31
   1fca8:	48089ee3          	bnez	a7,20944 <__subtf3+0xe70>
   1fcac:	00100593          	li	a1,1
   1fcb0:	02000613          	li	a2,32
   1fcb4:	1690006f          	j	2061c <__subtf3+0xb48>
   1fcb8:	00d04463          	bgtz	a3,1fcc0 <__subtf3+0x1ec>
   1fcbc:	5980106f          	j	21254 <__subtf3+0x1780>
   1fcc0:	01412e83          	lw	t4,20(sp)
   1fcc4:	01812503          	lw	a0,24(sp)
   1fcc8:	01c12e03          	lw	t3,28(sp)
   1fccc:	44081063          	bnez	a6,2010c <__subtf3+0x638>
   1fcd0:	02412703          	lw	a4,36(sp)
   1fcd4:	02812f03          	lw	t5,40(sp)
   1fcd8:	02c12583          	lw	a1,44(sp)
   1fcdc:	01e76833          	or	a6,a4,t5
   1fce0:	00b86833          	or	a6,a6,a1
   1fce4:	00686833          	or	a6,a6,t1
   1fce8:	6a080ce3          	beqz	a6,20ba0 <__subtf3+0x10cc>
   1fcec:	fff68813          	add	a6,a3,-1
   1fcf0:	640804e3          	beqz	a6,20b38 <__subtf3+0x1064>
   1fcf4:	6ac686e3          	beq	a3,a2,20ba0 <__subtf3+0x10cc>
   1fcf8:	07400713          	li	a4,116
   1fcfc:	43074663          	blt	a4,a6,20128 <__subtf3+0x654>
   1fd00:	00080693          	mv	a3,a6
   1fd04:	4056df13          	sra	t5,a3,0x5
   1fd08:	01f6f693          	and	a3,a3,31
   1fd0c:	660f08e3          	beqz	t5,20b7c <__subtf3+0x10a8>
   1fd10:	002f1313          	sll	t1,t5,0x2
   1fd14:	00f302b3          	add	t0,t1,a5
   1fd18:	00078713          	mv	a4,a5
   1fd1c:	00000613          	li	a2,0
   1fd20:	00072803          	lw	a6,0(a4)
   1fd24:	00470713          	add	a4,a4,4
   1fd28:	01066633          	or	a2,a2,a6
   1fd2c:	fee29ae3          	bne	t0,a4,1fd20 <__subtf3+0x24c>
   1fd30:	00300713          	li	a4,3
   1fd34:	41e70733          	sub	a4,a4,t5
   1fd38:	320686e3          	beqz	a3,20864 <__subtf3+0xd90>
   1fd3c:	04030813          	add	a6,t1,64
   1fd40:	00280833          	add	a6,a6,sp
   1fd44:	fe082803          	lw	a6,-32(a6)
   1fd48:	02000393          	li	t2,32
   1fd4c:	40d383b3          	sub	t2,t2,a3
   1fd50:	00781833          	sll	a6,a6,t2
   1fd54:	01066633          	or	a2,a2,a6
   1fd58:	00d5d5b3          	srl	a1,a1,a3
   1fd5c:	00071463          	bnez	a4,1fd64 <__subtf3+0x290>
   1fd60:	3e00106f          	j	21140 <__subtf3+0x166c>
   1fd64:	05312623          	sw	s3,76(sp)
   1fd68:	00271813          	sll	a6,a4,0x2
   1fd6c:	006f8333          	add	t1,t6,t1
   1fd70:	00f809b3          	add	s3,a6,a5
   1fd74:	00032703          	lw	a4,0(t1)
   1fd78:	00432283          	lw	t0,4(t1)
   1fd7c:	00478793          	add	a5,a5,4
   1fd80:	00d75733          	srl	a4,a4,a3
   1fd84:	007292b3          	sll	t0,t0,t2
   1fd88:	00576733          	or	a4,a4,t0
   1fd8c:	fee7ae23          	sw	a4,-4(a5)
   1fd90:	00430313          	add	t1,t1,4
   1fd94:	fef990e3          	bne	s3,a5,1fd74 <__subtf3+0x2a0>
   1fd98:	04080793          	add	a5,a6,64
   1fd9c:	00278733          	add	a4,a5,sp
   1fda0:	00400793          	li	a5,4
   1fda4:	04c12983          	lw	s3,76(sp)
   1fda8:	41e787b3          	sub	a5,a5,t5
   1fdac:	feb72023          	sw	a1,-32(a4)
   1fdb0:	2d50006f          	j	20884 <__subtf3+0xdb0>
   1fdb4:	02412783          	lw	a5,36(sp)
   1fdb8:	02812f83          	lw	t6,40(sp)
   1fdbc:	02c12e03          	lw	t3,44(sp)
   1fdc0:	410406b3          	sub	a3,s0,a6
   1fdc4:	01f7e633          	or	a2,a5,t6
   1fdc8:	01c66633          	or	a2,a2,t3
   1fdcc:	00666633          	or	a2,a2,t1
   1fdd0:	20061c63          	bnez	a2,1ffe8 <__subtf3+0x514>
   1fdd4:	0015c593          	xor	a1,a1,1
   1fdd8:	00000e13          	li	t3,0
   1fddc:	00000f93          	li	t6,0
   1fde0:	20b48863          	beq	s1,a1,1fff0 <__subtf3+0x51c>
   1fde4:	58068663          	beqz	a3,20370 <__subtf3+0x89c>
   1fde8:	408803b3          	sub	t2,a6,s0
   1fdec:	70041463          	bnez	s0,204f4 <__subtf3+0xa20>
   1fdf0:	01812483          	lw	s1,24(sp)
   1fdf4:	05312623          	sw	s3,76(sp)
   1fdf8:	01412983          	lw	s3,20(sp)
   1fdfc:	01c12683          	lw	a3,28(sp)
   1fe00:	0099e7b3          	or	a5,s3,s1
   1fe04:	00d7e7b3          	or	a5,a5,a3
   1fe08:	0117e7b3          	or	a5,a5,a7
   1fe0c:	48078ee3          	beqz	a5,20aa8 <__subtf3+0xfd4>
   1fe10:	fff38293          	add	t0,t2,-1
   1fe14:	740280e3          	beqz	t0,20d54 <__subtf3+0x1280>
   1fe18:	000087b7          	lui	a5,0x8
   1fe1c:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   1fe20:	00f39463          	bne	t2,a5,1fe28 <__subtf3+0x354>
   1fe24:	1940106f          	j	20fb8 <__subtf3+0x14e4>
   1fe28:	07400793          	li	a5,116
   1fe2c:	0057d463          	bge	a5,t0,1fe34 <__subtf3+0x360>
   1fe30:	1b00106f          	j	20fe0 <__subtf3+0x150c>
   1fe34:	01f00793          	li	a5,31
   1fe38:	6257d4e3          	bge	a5,t0,20c60 <__subtf3+0x118c>
   1fe3c:	04c12983          	lw	s3,76(sp)
   1fe40:	4052d513          	sra	a0,t0,0x5
   1fe44:	00028393          	mv	t2,t0
   1fe48:	00070293          	mv	t0,a4
   1fe4c:	00000793          	li	a5,0
   1fe50:	00000893          	li	a7,0
   1fe54:	0002a403          	lw	s0,0(t0)
   1fe58:	00188893          	add	a7,a7,1
   1fe5c:	00428293          	add	t0,t0,4
   1fe60:	0087e7b3          	or	a5,a5,s0
   1fe64:	fea8c8e3          	blt	a7,a0,1fe54 <__subtf3+0x380>
   1fe68:	00050413          	mv	s0,a0
   1fe6c:	00300893          	li	a7,3
   1fe70:	01f3f293          	and	t0,t2,31
   1fe74:	408888b3          	sub	a7,a7,s0
   1fe78:	5e029ee3          	bnez	t0,20c74 <__subtf3+0x11a0>
   1fe7c:	00241513          	sll	a0,s0,0x2
   1fe80:	00a706b3          	add	a3,a4,a0
   1fe84:	0006a683          	lw	a3,0(a3)
   1fe88:	00128293          	add	t0,t0,1
   1fe8c:	00470713          	add	a4,a4,4
   1fe90:	fed72e23          	sw	a3,-4(a4)
   1fe94:	fe58d6e3          	bge	a7,t0,1fe80 <__subtf3+0x3ac>
   1fe98:	00400713          	li	a4,4
   1fe9c:	40870733          	sub	a4,a4,s0
   1fea0:	00300693          	li	a3,3
   1fea4:	01012283          	lw	t0,16(sp)
   1fea8:	02e6ce63          	blt	a3,a4,1fee4 <__subtf3+0x410>
   1feac:	00400693          	li	a3,4
   1feb0:	40e686b3          	sub	a3,a3,a4
   1feb4:	00269693          	sll	a3,a3,0x2
   1feb8:	00271713          	sll	a4,a4,0x2
   1febc:	00800513          	li	a0,8
   1fec0:	00ee8733          	add	a4,t4,a4
   1fec4:	00a6ea63          	bltu	a3,a0,1fed8 <__subtf3+0x404>
   1fec8:	00072023          	sw	zero,0(a4)
   1fecc:	00072223          	sw	zero,4(a4)
   1fed0:	ff868693          	add	a3,a3,-8
   1fed4:	00870713          	add	a4,a4,8
   1fed8:	00400513          	li	a0,4
   1fedc:	00a6e463          	bltu	a3,a0,1fee4 <__subtf3+0x410>
   1fee0:	00072023          	sw	zero,0(a4)
   1fee4:	00f03733          	snez	a4,a5
   1fee8:	01412883          	lw	a7,20(sp)
   1feec:	01812683          	lw	a3,24(sp)
   1fef0:	01c12783          	lw	a5,28(sp)
   1fef4:	00576733          	or	a4,a4,t0
   1fef8:	41160eb3          	sub	t4,a2,a7
   1fefc:	40df8533          	sub	a0,t6,a3
   1ff00:	40fe0e33          	sub	t3,t3,a5
   1ff04:	6280006f          	j	2052c <__subtf3+0xa58>
   1ff08:	02412f03          	lw	t5,36(sp)
   1ff0c:	02812803          	lw	a6,40(sp)
   1ff10:	02c12583          	lw	a1,44(sp)
   1ff14:	010f6733          	or	a4,t5,a6
   1ff18:	00b76733          	or	a4,a4,a1
   1ff1c:	00676733          	or	a4,a4,t1
   1ff20:	54070c63          	beqz	a4,20478 <__subtf3+0x9a4>
   1ff24:	fff68713          	add	a4,a3,-1
   1ff28:	48070ae3          	beqz	a4,20bbc <__subtf3+0x10e8>
   1ff2c:	54c68663          	beq	a3,a2,20478 <__subtf3+0x9a4>
   1ff30:	07400693          	li	a3,116
   1ff34:	cee6c6e3          	blt	a3,a4,1fc20 <__subtf3+0x14c>
   1ff38:	00070693          	mv	a3,a4
   1ff3c:	4056d293          	sra	t0,a3,0x5
   1ff40:	01f6f693          	and	a3,a3,31
   1ff44:	76028ee3          	beqz	t0,20ec0 <__subtf3+0x13ec>
   1ff48:	00229313          	sll	t1,t0,0x2
   1ff4c:	00f30f33          	add	t5,t1,a5
   1ff50:	00078713          	mv	a4,a5
   1ff54:	00000613          	li	a2,0
   1ff58:	00072803          	lw	a6,0(a4)
   1ff5c:	00470713          	add	a4,a4,4
   1ff60:	01066633          	or	a2,a2,a6
   1ff64:	feef1ae3          	bne	t5,a4,1ff58 <__subtf3+0x484>
   1ff68:	00300713          	li	a4,3
   1ff6c:	40570733          	sub	a4,a4,t0
   1ff70:	46068863          	beqz	a3,203e0 <__subtf3+0x90c>
   1ff74:	04030813          	add	a6,t1,64
   1ff78:	00280833          	add	a6,a6,sp
   1ff7c:	fe082803          	lw	a6,-32(a6)
   1ff80:	02000393          	li	t2,32
   1ff84:	40d383b3          	sub	t2,t2,a3
   1ff88:	00781833          	sll	a6,a6,t2
   1ff8c:	01066633          	or	a2,a2,a6
   1ff90:	00d5d5b3          	srl	a1,a1,a3
   1ff94:	720702e3          	beqz	a4,20eb8 <__subtf3+0x13e4>
   1ff98:	05312623          	sw	s3,76(sp)
   1ff9c:	00271813          	sll	a6,a4,0x2
   1ffa0:	006f8333          	add	t1,t6,t1
   1ffa4:	00f809b3          	add	s3,a6,a5
   1ffa8:	00032703          	lw	a4,0(t1)
   1ffac:	00432f03          	lw	t5,4(t1)
   1ffb0:	00478793          	add	a5,a5,4
   1ffb4:	00d75733          	srl	a4,a4,a3
   1ffb8:	007f1f33          	sll	t5,t5,t2
   1ffbc:	01e76733          	or	a4,a4,t5
   1ffc0:	fee7ae23          	sw	a4,-4(a5)
   1ffc4:	00430313          	add	t1,t1,4
   1ffc8:	fef990e3          	bne	s3,a5,1ffa8 <__subtf3+0x4d4>
   1ffcc:	04080793          	add	a5,a6,64
   1ffd0:	00278733          	add	a4,a5,sp
   1ffd4:	00400793          	li	a5,4
   1ffd8:	04c12983          	lw	s3,76(sp)
   1ffdc:	405787b3          	sub	a5,a5,t0
   1ffe0:	feb72023          	sw	a1,-32(a4)
   1ffe4:	41c0006f          	j	20400 <__subtf3+0x92c>
   1ffe8:	00078613          	mv	a2,a5
   1ffec:	deb49ce3          	bne	s1,a1,1fde4 <__subtf3+0x310>
   1fff0:	4a068263          	beqz	a3,20494 <__subtf3+0x9c0>
   1fff4:	40880533          	sub	a0,a6,s0
   1fff8:	0e0414e3          	bnez	s0,208e0 <__subtf3+0xe0c>
   1fffc:	01412783          	lw	a5,20(sp)
   20000:	01812283          	lw	t0,24(sp)
   20004:	01c12683          	lw	a3,28(sp)
   20008:	0057e5b3          	or	a1,a5,t0
   2000c:	00d5e5b3          	or	a1,a1,a3
   20010:	0115e5b3          	or	a1,a1,a7
   20014:	6c0588e3          	beqz	a1,20ee4 <__subtf3+0x1410>
   20018:	fff50593          	add	a1,a0,-1
   2001c:	00059463          	bnez	a1,20024 <__subtf3+0x550>
   20020:	09c0106f          	j	210bc <__subtf3+0x15e8>
   20024:	000087b7          	lui	a5,0x8
   20028:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   2002c:	00f51463          	bne	a0,a5,20034 <__subtf3+0x560>
   20030:	1740106f          	j	211a4 <__subtf3+0x16d0>
   20034:	07400793          	li	a5,116
   20038:	0cb7c6e3          	blt	a5,a1,20904 <__subtf3+0xe30>
   2003c:	01f00793          	li	a5,31
   20040:	7ab7d4e3          	bge	a5,a1,20fe8 <__subtf3+0x1514>
   20044:	4055d413          	sra	s0,a1,0x5
   20048:	00058513          	mv	a0,a1
   2004c:	00070893          	mv	a7,a4
   20050:	00000793          	li	a5,0
   20054:	00000593          	li	a1,0
   20058:	0008a283          	lw	t0,0(a7)
   2005c:	00158593          	add	a1,a1,1
   20060:	00488893          	add	a7,a7,4
   20064:	0057e7b3          	or	a5,a5,t0
   20068:	fe85c8e3          	blt	a1,s0,20058 <__subtf3+0x584>
   2006c:	00040893          	mv	a7,s0
   20070:	00300393          	li	t2,3
   20074:	01f57593          	and	a1,a0,31
   20078:	411383b3          	sub	t2,t2,a7
   2007c:	76059ee3          	bnez	a1,20ff8 <__subtf3+0x1524>
   20080:	00289513          	sll	a0,a7,0x2
   20084:	00a706b3          	add	a3,a4,a0
   20088:	0006a683          	lw	a3,0(a3)
   2008c:	00158593          	add	a1,a1,1
   20090:	00470713          	add	a4,a4,4
   20094:	fed72e23          	sw	a3,-4(a4)
   20098:	feb3d6e3          	bge	t2,a1,20084 <__subtf3+0x5b0>
   2009c:	00400713          	li	a4,4
   200a0:	411708b3          	sub	a7,a4,a7
   200a4:	00300713          	li	a4,3
   200a8:	01012583          	lw	a1,16(sp)
   200ac:	03174e63          	blt	a4,a7,200e8 <__subtf3+0x614>
   200b0:	00400693          	li	a3,4
   200b4:	411686b3          	sub	a3,a3,a7
   200b8:	00269693          	sll	a3,a3,0x2
   200bc:	00289893          	sll	a7,a7,0x2
   200c0:	00800513          	li	a0,8
   200c4:	011e8733          	add	a4,t4,a7
   200c8:	00a6ea63          	bltu	a3,a0,200dc <__subtf3+0x608>
   200cc:	00072023          	sw	zero,0(a4)
   200d0:	00072223          	sw	zero,4(a4)
   200d4:	ff868693          	add	a3,a3,-8
   200d8:	00870713          	add	a4,a4,8
   200dc:	00400513          	li	a0,4
   200e0:	00a6e463          	bltu	a3,a0,200e8 <__subtf3+0x614>
   200e4:	00072023          	sw	zero,0(a4)
   200e8:	00f03733          	snez	a4,a5
   200ec:	01c12683          	lw	a3,28(sp)
   200f0:	01412783          	lw	a5,20(sp)
   200f4:	00b76733          	or	a4,a4,a1
   200f8:	01812583          	lw	a1,24(sp)
   200fc:	00f607b3          	add	a5,a2,a5
   20100:	00de0e33          	add	t3,t3,a3
   20104:	00bf85b3          	add	a1,t6,a1
   20108:	0090006f          	j	20910 <__subtf3+0xe3c>
   2010c:	32c40ee3          	beq	s0,a2,20c48 <__subtf3+0x1174>
   20110:	02c12583          	lw	a1,44(sp)
   20114:	00080637          	lui	a2,0x80
   20118:	07400713          	li	a4,116
   2011c:	00c5e5b3          	or	a1,a1,a2
   20120:	02b12623          	sw	a1,44(sp)
   20124:	bed750e3          	bge	a4,a3,1fd04 <__subtf3+0x230>
   20128:	00000813          	li	a6,0
   2012c:	00000693          	li	a3,0
   20130:	00000793          	li	a5,0
   20134:	00100713          	li	a4,1
   20138:	00e88733          	add	a4,a7,a4
   2013c:	01d785b3          	add	a1,a5,t4
   20140:	011738b3          	sltu	a7,a4,a7
   20144:	011588b3          	add	a7,a1,a7
   20148:	00f5b7b3          	sltu	a5,a1,a5
   2014c:	00b8b5b3          	sltu	a1,a7,a1
   20150:	00a68633          	add	a2,a3,a0
   20154:	00b7e7b3          	or	a5,a5,a1
   20158:	00f607b3          	add	a5,a2,a5
   2015c:	00d636b3          	sltu	a3,a2,a3
   20160:	00c7b633          	sltu	a2,a5,a2
   20164:	00c6e6b3          	or	a3,a3,a2
   20168:	01c80633          	add	a2,a6,t3
   2016c:	00c68e33          	add	t3,a3,a2
   20170:	02f12c23          	sw	a5,56(sp)
   20174:	02e12823          	sw	a4,48(sp)
   20178:	03112a23          	sw	a7,52(sp)
   2017c:	00ce1793          	sll	a5,t3,0xc
   20180:	1007ca63          	bltz	a5,20294 <__subtf3+0x7c0>
   20184:	03c12e23          	sw	t3,60(sp)
   20188:	00777693          	and	a3,a4,7
   2018c:	03010793          	add	a5,sp,48
   20190:	24068263          	beqz	a3,203d4 <__subtf3+0x900>
   20194:	00f77693          	and	a3,a4,15
   20198:	00400613          	li	a2,4
   2019c:	02c68c63          	beq	a3,a2,201d4 <__subtf3+0x700>
   201a0:	03412683          	lw	a3,52(sp)
   201a4:	00470713          	add	a4,a4,4
   201a8:	03812583          	lw	a1,56(sp)
   201ac:	00473613          	sltiu	a2,a4,4
   201b0:	00c68633          	add	a2,a3,a2
   201b4:	00d636b3          	sltu	a3,a2,a3
   201b8:	00d586b3          	add	a3,a1,a3
   201bc:	00b6b5b3          	sltu	a1,a3,a1
   201c0:	00be0e33          	add	t3,t3,a1
   201c4:	02e12823          	sw	a4,48(sp)
   201c8:	02c12a23          	sw	a2,52(sp)
   201cc:	02d12c23          	sw	a3,56(sp)
   201d0:	03c12e23          	sw	t3,60(sp)
   201d4:	00080737          	lui	a4,0x80
   201d8:	00ee7733          	and	a4,t3,a4
   201dc:	12070c63          	beqz	a4,20314 <__subtf3+0x840>
   201e0:	00008737          	lui	a4,0x8
   201e4:	00140413          	add	s0,s0,1
   201e8:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   201ec:	14e40a63          	beq	s0,a4,20340 <__subtf3+0x86c>
   201f0:	fff80637          	lui	a2,0xfff80
   201f4:	fff60613          	add	a2,a2,-1 # fff7ffff <__alt_data_end+0xfff36c1f>
   201f8:	00ce7633          	and	a2,t3,a2
   201fc:	02c12e23          	sw	a2,60(sp)
   20200:	00365613          	srl	a2,a2,0x3
   20204:	03012683          	lw	a3,48(sp)
   20208:	03c10513          	add	a0,sp,60
   2020c:	0036d593          	srl	a1,a3,0x3
   20210:	0047a683          	lw	a3,4(a5)
   20214:	00478793          	add	a5,a5,4
   20218:	01d69713          	sll	a4,a3,0x1d
   2021c:	00b76733          	or	a4,a4,a1
   20220:	fee7ae23          	sw	a4,-4(a5)
   20224:	fea794e3          	bne	a5,a0,2020c <__subtf3+0x738>
   20228:	000087b7          	lui	a5,0x8
   2022c:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   20230:	03012703          	lw	a4,48(sp)
   20234:	03412583          	lw	a1,52(sp)
   20238:	03812683          	lw	a3,56(sp)
   2023c:	0ef40063          	beq	s0,a5,2031c <__subtf3+0x848>
   20240:	01061793          	sll	a5,a2,0x10
   20244:	0107d793          	srl	a5,a5,0x10
   20248:	0014f493          	and	s1,s1,1
   2024c:	01141413          	sll	s0,s0,0x11
   20250:	01145413          	srl	s0,s0,0x11
   20254:	00f49493          	sll	s1,s1,0xf
   20258:	0084e4b3          	or	s1,s1,s0
   2025c:	00911723          	sh	s1,14(sp)
   20260:	00f11623          	sh	a5,12(sp)
   20264:	00c12783          	lw	a5,12(sp)
   20268:	05c12083          	lw	ra,92(sp)
   2026c:	05812403          	lw	s0,88(sp)
   20270:	00e92023          	sw	a4,0(s2)
   20274:	00b92223          	sw	a1,4(s2)
   20278:	00d92423          	sw	a3,8(s2)
   2027c:	00f92623          	sw	a5,12(s2)
   20280:	05412483          	lw	s1,84(sp)
   20284:	00090513          	mv	a0,s2
   20288:	05012903          	lw	s2,80(sp)
   2028c:	06010113          	add	sp,sp,96
   20290:	00008067          	ret
   20294:	fff807b7          	lui	a5,0xfff80
   20298:	fff78793          	add	a5,a5,-1 # fff7ffff <__alt_data_end+0xfff36c1f>
   2029c:	00fe75b3          	and	a1,t3,a5
   202a0:	03010793          	add	a5,sp,48
   202a4:	02b12e23          	sw	a1,60(sp)
   202a8:	00140413          	add	s0,s0,1
   202ac:	01f71813          	sll	a6,a4,0x1f
   202b0:	00078693          	mv	a3,a5
   202b4:	03c10893          	add	a7,sp,60
   202b8:	00175513          	srl	a0,a4,0x1
   202bc:	0046a703          	lw	a4,4(a3)
   202c0:	00468693          	add	a3,a3,4
   202c4:	01f71613          	sll	a2,a4,0x1f
   202c8:	00a66633          	or	a2,a2,a0
   202cc:	fec6ae23          	sw	a2,-4(a3)
   202d0:	ff1694e3          	bne	a3,a7,202b8 <__subtf3+0x7e4>
   202d4:	03012703          	lw	a4,48(sp)
   202d8:	010036b3          	snez	a3,a6
   202dc:	0015de13          	srl	t3,a1,0x1
   202e0:	00e6e733          	or	a4,a3,a4
   202e4:	000086b7          	lui	a3,0x8
   202e8:	03c12e23          	sw	t3,60(sp)
   202ec:	02e12823          	sw	a4,48(sp)
   202f0:	fff68693          	add	a3,a3,-1 # 7fff <OSTaskChangePrio+0x17f>
   202f4:	56d41263          	bne	s0,a3,20858 <__subtf3+0xd84>
   202f8:	00008437          	lui	s0,0x8
   202fc:	02012e23          	sw	zero,60(sp)
   20300:	02012c23          	sw	zero,56(sp)
   20304:	02012a23          	sw	zero,52(sp)
   20308:	02012823          	sw	zero,48(sp)
   2030c:	fff40413          	add	s0,s0,-1 # 7fff <OSTaskChangePrio+0x17f>
   20310:	00000e13          	li	t3,0
   20314:	003e5613          	srl	a2,t3,0x3
   20318:	eedff06f          	j	20204 <__subtf3+0x730>
   2031c:	00b76733          	or	a4,a4,a1
   20320:	00d76733          	or	a4,a4,a3
   20324:	00c76733          	or	a4,a4,a2
   20328:	02071863          	bnez	a4,20358 <__subtf3+0x884>
   2032c:	0014f493          	and	s1,s1,1
   20330:	00000693          	li	a3,0
   20334:	00000593          	li	a1,0
   20338:	00000793          	li	a5,0
   2033c:	f11ff06f          	j	2024c <__subtf3+0x778>
   20340:	02012e23          	sw	zero,60(sp)
   20344:	02012c23          	sw	zero,56(sp)
   20348:	02012a23          	sw	zero,52(sp)
   2034c:	02012823          	sw	zero,48(sp)
   20350:	00000613          	li	a2,0
   20354:	eb1ff06f          	j	20204 <__subtf3+0x730>
   20358:	00000493          	li	s1,0
   2035c:	000087b7          	lui	a5,0x8
   20360:	00000693          	li	a3,0
   20364:	00000593          	li	a1,0
   20368:	00000713          	li	a4,0
   2036c:	ee1ff06f          	j	2024c <__subtf3+0x778>
   20370:	00140793          	add	a5,s0,1
   20374:	01179713          	sll	a4,a5,0x11
   20378:	01275713          	srl	a4,a4,0x12
   2037c:	01412e83          	lw	t4,20(sp)
   20380:	01812f03          	lw	t5,24(sp)
   20384:	01c12683          	lw	a3,28(sp)
   20388:	00008537          	lui	a0,0x8
   2038c:	1c071a63          	bnez	a4,20560 <__subtf3+0xa8c>
   20390:	01f66733          	or	a4,a2,t6
   20394:	01eee7b3          	or	a5,t4,t5
   20398:	00676733          	or	a4,a4,t1
   2039c:	00d7e7b3          	or	a5,a5,a3
   203a0:	01c76733          	or	a4,a4,t3
   203a4:	0117e7b3          	or	a5,a5,a7
   203a8:	68041e63          	bnez	s0,20a44 <__subtf3+0xf70>
   203ac:	16078ee3          	beqz	a5,20d28 <__subtf3+0x1254>
   203b0:	1e0718e3          	bnez	a4,20da0 <__subtf3+0x12cc>
   203b4:	03112823          	sw	a7,48(sp)
   203b8:	03d12a23          	sw	t4,52(sp)
   203bc:	03e12c23          	sw	t5,56(sp)
   203c0:	02d12e23          	sw	a3,60(sp)
   203c4:	00068e13          	mv	t3,a3
   203c8:	03010793          	add	a5,sp,48
   203cc:	e09ff06f          	j	201d4 <__subtf3+0x700>
   203d0:	03c12e23          	sw	t3,60(sp)
   203d4:	003e5613          	srl	a2,t3,0x3
   203d8:	03010793          	add	a5,sp,48
   203dc:	e29ff06f          	j	20204 <__subtf3+0x730>
   203e0:	006785b3          	add	a1,a5,t1
   203e4:	0005a583          	lw	a1,0(a1)
   203e8:	00168693          	add	a3,a3,1
   203ec:	00478793          	add	a5,a5,4 # 8004 <OSTaskChangePrio+0x184>
   203f0:	feb7ae23          	sw	a1,-4(a5)
   203f4:	fed756e3          	bge	a4,a3,203e0 <__subtf3+0x90c>
   203f8:	00400793          	li	a5,4
   203fc:	405787b3          	sub	a5,a5,t0
   20400:	00400713          	li	a4,4
   20404:	02012583          	lw	a1,32(sp)
   20408:	02e78e63          	beq	a5,a4,20444 <__subtf3+0x970>
   2040c:	00400713          	li	a4,4
   20410:	40f70733          	sub	a4,a4,a5
   20414:	00271713          	sll	a4,a4,0x2
   20418:	00279793          	sll	a5,a5,0x2
   2041c:	00800693          	li	a3,8
   20420:	00ff87b3          	add	a5,t6,a5
   20424:	00d76a63          	bltu	a4,a3,20438 <__subtf3+0x964>
   20428:	0007a023          	sw	zero,0(a5)
   2042c:	0007a223          	sw	zero,4(a5)
   20430:	ff870713          	add	a4,a4,-8
   20434:	00878793          	add	a5,a5,8
   20438:	00400693          	li	a3,4
   2043c:	00d76463          	bltu	a4,a3,20444 <__subtf3+0x970>
   20440:	0007a023          	sw	zero,0(a5)
   20444:	00c03733          	snez	a4,a2
   20448:	02412803          	lw	a6,36(sp)
   2044c:	02812683          	lw	a3,40(sp)
   20450:	02c12603          	lw	a2,44(sp)
   20454:	00b76733          	or	a4,a4,a1
   20458:	fd8ff06f          	j	1fc30 <__subtf3+0x15c>
   2045c:	fffe8513          	add	a0,t4,-1
   20460:	00deb5b3          	sltu	a1,t4,a3
   20464:	40d50533          	sub	a0,a0,a3
   20468:	41d686b3          	sub	a3,a3,t4
   2046c:	0016b693          	seqz	a3,a3
   20470:	00d5e5b3          	or	a1,a1,a3
   20474:	fecff06f          	j	1fc60 <__subtf3+0x18c>
   20478:	03112823          	sw	a7,48(sp)
   2047c:	02a12a23          	sw	a0,52(sp)
   20480:	03d12c23          	sw	t4,56(sp)
   20484:	03c12e23          	sw	t3,60(sp)
   20488:	00068413          	mv	s0,a3
   2048c:	03010793          	add	a5,sp,48
   20490:	d45ff06f          	j	201d4 <__subtf3+0x700>
   20494:	00140513          	add	a0,s0,1
   20498:	01151693          	sll	a3,a0,0x11
   2049c:	0126d693          	srl	a3,a3,0x12
   204a0:	01412783          	lw	a5,20(sp)
   204a4:	01812703          	lw	a4,24(sp)
   204a8:	01c12583          	lw	a1,28(sp)
   204ac:	00008837          	lui	a6,0x8
   204b0:	50069263          	bnez	a3,209b4 <__subtf3+0xee0>
   204b4:	00e7e6b3          	or	a3,a5,a4
   204b8:	00b6e6b3          	or	a3,a3,a1
   204bc:	0116e6b3          	or	a3,a3,a7
   204c0:	040414e3          	bnez	s0,20d08 <__subtf3+0x1234>
   204c4:	260688e3          	beqz	a3,20f34 <__subtf3+0x1460>
   204c8:	01f666b3          	or	a3,a2,t6
   204cc:	0066e6b3          	or	a3,a3,t1
   204d0:	01c6e6b3          	or	a3,a3,t3
   204d4:	26069ce3          	bnez	a3,20f4c <__subtf3+0x1478>
   204d8:	02f12a23          	sw	a5,52(sp)
   204dc:	03112823          	sw	a7,48(sp)
   204e0:	02e12c23          	sw	a4,56(sp)
   204e4:	02b12e23          	sw	a1,60(sp)
   204e8:	00058e13          	mv	t3,a1
   204ec:	03010793          	add	a5,sp,48
   204f0:	ce5ff06f          	j	201d4 <__subtf3+0x700>
   204f4:	000087b7          	lui	a5,0x8
   204f8:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   204fc:	2cf800e3          	beq	a6,a5,20fbc <__subtf3+0x14e8>
   20500:	01c12683          	lw	a3,28(sp)
   20504:	00080537          	lui	a0,0x80
   20508:	07400793          	li	a5,116
   2050c:	00a6e6b3          	or	a3,a3,a0
   20510:	00d12e23          	sw	a3,28(sp)
   20514:	4677dc63          	bge	a5,t2,2098c <__subtf3+0xeb8>
   20518:	000f8513          	mv	a0,t6
   2051c:	00060e93          	mv	t4,a2
   20520:	00000693          	li	a3,0
   20524:	00000893          	li	a7,0
   20528:	00100713          	li	a4,1
   2052c:	40e30733          	sub	a4,t1,a4
   20530:	00e337b3          	sltu	a5,t1,a4
   20534:	01d63f33          	sltu	t5,a2,t4
   20538:	40fe87b3          	sub	a5,t4,a5
   2053c:	00e37463          	bgeu	t1,a4,20544 <__subtf3+0xa70>
   20540:	6d160e63          	beq	a2,a7,20c1c <__subtf3+0x1148>
   20544:	00afb8b3          	sltu	a7,t6,a0
   20548:	41e50533          	sub	a0,a0,t5
   2054c:	6dd66c63          	bltu	a2,t4,20c24 <__subtf3+0x1150>
   20550:	411e0e33          	sub	t3,t3,a7
   20554:	00080413          	mv	s0,a6
   20558:	00058493          	mv	s1,a1
   2055c:	f0cff06f          	j	1fc68 <__subtf3+0x194>
   20560:	40ce8733          	sub	a4,t4,a2
   20564:	406887b3          	sub	a5,a7,t1
   20568:	00eeb3b3          	sltu	t2,t4,a4
   2056c:	05312623          	sw	s3,76(sp)
   20570:	00f8b533          	sltu	a0,a7,a5
   20574:	00038993          	mv	s3,t2
   20578:	40a70733          	sub	a4,a4,a0
   2057c:	41ff0833          	sub	a6,t5,t6
   20580:	01ff32b3          	sltu	t0,t5,t6
   20584:	06f8f063          	bgeu	a7,a5,205e4 <__subtf3+0xb10>
   20588:	05d61e63          	bne	a2,t4,205e4 <__subtf3+0xb10>
   2058c:	fff80813          	add	a6,a6,-1 # 7fff <OSTaskChangePrio+0x17f>
   20590:	41ef8533          	sub	a0,t6,t5
   20594:	00153513          	seqz	a0,a0
   20598:	00a2e2b3          	or	t0,t0,a0
   2059c:	41c68533          	sub	a0,a3,t3
   205a0:	40550533          	sub	a0,a0,t0
   205a4:	02a12e23          	sw	a0,60(sp)
   205a8:	03012c23          	sw	a6,56(sp)
   205ac:	02e12a23          	sw	a4,52(sp)
   205b0:	02f12823          	sw	a5,48(sp)
   205b4:	00c51293          	sll	t0,a0,0xc
   205b8:	5002ca63          	bltz	t0,20acc <__subtf3+0xff8>
   205bc:	00e7e7b3          	or	a5,a5,a4
   205c0:	0107e7b3          	or	a5,a5,a6
   205c4:	00a7e7b3          	or	a5,a5,a0
   205c8:	54079863          	bnez	a5,20b18 <__subtf3+0x1044>
   205cc:	04c12983          	lw	s3,76(sp)
   205d0:	00000413          	li	s0,0
   205d4:	00000493          	li	s1,0
   205d8:	03010793          	add	a5,sp,48
   205dc:	00000e13          	li	t3,0
   205e0:	d35ff06f          	j	20314 <__subtf3+0x840>
   205e4:	41380833          	sub	a6,a6,s3
   205e8:	fa038ae3          	beqz	t2,2059c <__subtf3+0xac8>
   205ec:	fa5ff06f          	j	20590 <__subtf3+0xabc>
   205f0:	03412503          	lw	a0,52(sp)
   205f4:	36051663          	bnez	a0,20960 <__subtf3+0xe8c>
   205f8:	05312623          	sw	s3,76(sp)
   205fc:	03012983          	lw	s3,48(sp)
   20600:	00098513          	mv	a0,s3
   20604:	608010ef          	jal	21c0c <__clzsi2>
   20608:	05450613          	add	a2,a0,84 # 80054 <__alt_data_end+0x36c74>
   2060c:	01f67893          	and	a7,a2,31
   20610:	060890e3          	bnez	a7,20e70 <__subtf3+0x139c>
   20614:	04c12983          	lw	s3,76(sp)
   20618:	40565593          	sra	a1,a2,0x5
   2061c:	40b006b3          	neg	a3,a1
   20620:	00269693          	sll	a3,a3,0x2
   20624:	00c68713          	add	a4,a3,12
   20628:	03010793          	add	a5,sp,48
   2062c:	00e78733          	add	a4,a5,a4
   20630:	40d006b3          	neg	a3,a3
   20634:	00072883          	lw	a7,0(a4)
   20638:	00d70833          	add	a6,a4,a3
   2063c:	00070513          	mv	a0,a4
   20640:	01182023          	sw	a7,0(a6)
   20644:	ffc70713          	add	a4,a4,-4
   20648:	fef516e3          	bne	a0,a5,20634 <__subtf3+0xb60>
   2064c:	fff58713          	add	a4,a1,-1
   20650:	07c0006f          	j	206cc <__subtf3+0xbf8>
   20654:	05312623          	sw	s3,76(sp)
   20658:	5b4010ef          	jal	21c0c <__clzsi2>
   2065c:	ff450613          	add	a2,a0,-12
   20660:	00060893          	mv	a7,a2
   20664:	03012983          	lw	s3,48(sp)
   20668:	02000e13          	li	t3,32
   2066c:	40ce0e33          	sub	t3,t3,a2
   20670:	00000593          	li	a1,0
   20674:	011999b3          	sll	s3,s3,a7
   20678:	40b00833          	neg	a6,a1
   2067c:	00281813          	sll	a6,a6,0x2
   20680:	00c80713          	add	a4,a6,12
   20684:	03010793          	add	a5,sp,48
   20688:	00e78733          	add	a4,a5,a4
   2068c:	41000833          	neg	a6,a6
   20690:	00072683          	lw	a3,0(a4)
   20694:	ffc72503          	lw	a0,-4(a4)
   20698:	01070333          	add	t1,a4,a6
   2069c:	011696b3          	sll	a3,a3,a7
   206a0:	01c55533          	srl	a0,a0,t3
   206a4:	00a6e6b3          	or	a3,a3,a0
   206a8:	00d32023          	sw	a3,0(t1)
   206ac:	ffc70713          	add	a4,a4,-4
   206b0:	fee790e3          	bne	a5,a4,20690 <__subtf3+0xbbc>
   206b4:	00259693          	sll	a3,a1,0x2
   206b8:	04068713          	add	a4,a3,64
   206bc:	002706b3          	add	a3,a4,sp
   206c0:	ff36a823          	sw	s3,-16(a3)
   206c4:	04c12983          	lw	s3,76(sp)
   206c8:	fff58713          	add	a4,a1,-1
   206cc:	fff00693          	li	a3,-1
   206d0:	02d70a63          	beq	a4,a3,20704 <__subtf3+0xc30>
   206d4:	00170713          	add	a4,a4,1
   206d8:	00271713          	sll	a4,a4,0x2
   206dc:	00800593          	li	a1,8
   206e0:	00078693          	mv	a3,a5
   206e4:	00b76a63          	bltu	a4,a1,206f8 <__subtf3+0xc24>
   206e8:	02012823          	sw	zero,48(sp)
   206ec:	0007a223          	sw	zero,4(a5)
   206f0:	03810693          	add	a3,sp,56
   206f4:	ff870713          	add	a4,a4,-8
   206f8:	00400593          	li	a1,4
   206fc:	00b76463          	bltu	a4,a1,20704 <__subtf3+0xc30>
   20700:	0006a023          	sw	zero,0(a3)
   20704:	12864c63          	blt	a2,s0,2083c <__subtf3+0xd68>
   20708:	408606b3          	sub	a3,a2,s0
   2070c:	00168693          	add	a3,a3,1
   20710:	4056d313          	sra	t1,a3,0x5
   20714:	01f6f693          	and	a3,a3,31
   20718:	72030a63          	beqz	t1,20e4c <__subtf3+0x1378>
   2071c:	00231593          	sll	a1,t1,0x2
   20720:	00078613          	mv	a2,a5
   20724:	00f58833          	add	a6,a1,a5
   20728:	00000713          	li	a4,0
   2072c:	00062503          	lw	a0,0(a2)
   20730:	00460613          	add	a2,a2,4
   20734:	00a76733          	or	a4,a4,a0
   20738:	fec81ae3          	bne	a6,a2,2072c <__subtf3+0xc58>
   2073c:	00300513          	li	a0,3
   20740:	40650533          	sub	a0,a0,t1
   20744:	06068c63          	beqz	a3,207bc <__subtf3+0xce8>
   20748:	04058613          	add	a2,a1,64
   2074c:	00260633          	add	a2,a2,sp
   20750:	ff062603          	lw	a2,-16(a2)
   20754:	03c12e83          	lw	t4,60(sp)
   20758:	02000e13          	li	t3,32
   2075c:	40de0e33          	sub	t3,t3,a3
   20760:	01c61633          	sll	a2,a2,t3
   20764:	00c76733          	or	a4,a4,a2
   20768:	00dedeb3          	srl	t4,t4,a3
   2076c:	6c050c63          	beqz	a0,20e44 <__subtf3+0x1370>
   20770:	00251513          	sll	a0,a0,0x2
   20774:	00b78633          	add	a2,a5,a1
   20778:	00078813          	mv	a6,a5
   2077c:	00a78f33          	add	t5,a5,a0
   20780:	00062583          	lw	a1,0(a2)
   20784:	00462883          	lw	a7,4(a2)
   20788:	00480813          	add	a6,a6,4
   2078c:	00d5d5b3          	srl	a1,a1,a3
   20790:	01c898b3          	sll	a7,a7,t3
   20794:	0115e5b3          	or	a1,a1,a7
   20798:	feb82e23          	sw	a1,-4(a6)
   2079c:	00460613          	add	a2,a2,4
   207a0:	ff0f10e3          	bne	t5,a6,20780 <__subtf3+0xcac>
   207a4:	04050693          	add	a3,a0,64
   207a8:	00268533          	add	a0,a3,sp
   207ac:	00400693          	li	a3,4
   207b0:	406686b3          	sub	a3,a3,t1
   207b4:	ffd52823          	sw	t4,-16(a0)
   207b8:	0280006f          	j	207e0 <__subtf3+0xd0c>
   207bc:	00078613          	mv	a2,a5
   207c0:	00b60833          	add	a6,a2,a1
   207c4:	00082803          	lw	a6,0(a6)
   207c8:	00168693          	add	a3,a3,1
   207cc:	00460613          	add	a2,a2,4
   207d0:	ff062e23          	sw	a6,-4(a2)
   207d4:	fed556e3          	bge	a0,a3,207c0 <__subtf3+0xcec>
   207d8:	00400693          	li	a3,4
   207dc:	406686b3          	sub	a3,a3,t1
   207e0:	00400613          	li	a2,4
   207e4:	03012e83          	lw	t4,48(sp)
   207e8:	02c68e63          	beq	a3,a2,20824 <__subtf3+0xd50>
   207ec:	00400613          	li	a2,4
   207f0:	40d60633          	sub	a2,a2,a3
   207f4:	00261613          	sll	a2,a2,0x2
   207f8:	00269693          	sll	a3,a3,0x2
   207fc:	00800593          	li	a1,8
   20800:	00d786b3          	add	a3,a5,a3
   20804:	00b66a63          	bltu	a2,a1,20818 <__subtf3+0xd44>
   20808:	0006a023          	sw	zero,0(a3)
   2080c:	0006a223          	sw	zero,4(a3)
   20810:	ff860613          	add	a2,a2,-8
   20814:	00868693          	add	a3,a3,8
   20818:	00400593          	li	a1,4
   2081c:	00b66463          	bltu	a2,a1,20824 <__subtf3+0xd50>
   20820:	0006a023          	sw	zero,0(a3)
   20824:	00e03733          	snez	a4,a4
   20828:	01d76733          	or	a4,a4,t4
   2082c:	03c12e03          	lw	t3,60(sp)
   20830:	02e12823          	sw	a4,48(sp)
   20834:	00000413          	li	s0,0
   20838:	0200006f          	j	20858 <__subtf3+0xd84>
   2083c:	03c12e03          	lw	t3,60(sp)
   20840:	fff806b7          	lui	a3,0xfff80
   20844:	fff68693          	add	a3,a3,-1 # fff7ffff <__alt_data_end+0xfff36c1f>
   20848:	03012703          	lw	a4,48(sp)
   2084c:	00de7e33          	and	t3,t3,a3
   20850:	40c40433          	sub	s0,s0,a2
   20854:	03c12e23          	sw	t3,60(sp)
   20858:	00777693          	and	a3,a4,7
   2085c:	92069ce3          	bnez	a3,20194 <__subtf3+0x6c0>
   20860:	975ff06f          	j	201d4 <__subtf3+0x700>
   20864:	006785b3          	add	a1,a5,t1
   20868:	0005a583          	lw	a1,0(a1)
   2086c:	00168693          	add	a3,a3,1
   20870:	00478793          	add	a5,a5,4
   20874:	feb7ae23          	sw	a1,-4(a5)
   20878:	fed756e3          	bge	a4,a3,20864 <__subtf3+0xd90>
   2087c:	00400793          	li	a5,4
   20880:	41e787b3          	sub	a5,a5,t5
   20884:	00400713          	li	a4,4
   20888:	02012583          	lw	a1,32(sp)
   2088c:	02e78e63          	beq	a5,a4,208c8 <__subtf3+0xdf4>
   20890:	00400713          	li	a4,4
   20894:	40f70733          	sub	a4,a4,a5
   20898:	00271713          	sll	a4,a4,0x2
   2089c:	00279793          	sll	a5,a5,0x2
   208a0:	00800693          	li	a3,8
   208a4:	00ff87b3          	add	a5,t6,a5
   208a8:	00d76a63          	bltu	a4,a3,208bc <__subtf3+0xde8>
   208ac:	0007a023          	sw	zero,0(a5)
   208b0:	0007a223          	sw	zero,4(a5)
   208b4:	ff870713          	add	a4,a4,-8
   208b8:	00878793          	add	a5,a5,8
   208bc:	00400693          	li	a3,4
   208c0:	00d76463          	bltu	a4,a3,208c8 <__subtf3+0xdf4>
   208c4:	0007a023          	sw	zero,0(a5)
   208c8:	00c03733          	snez	a4,a2
   208cc:	02412783          	lw	a5,36(sp)
   208d0:	02812683          	lw	a3,40(sp)
   208d4:	02c12803          	lw	a6,44(sp)
   208d8:	00b76733          	or	a4,a4,a1
   208dc:	85dff06f          	j	20138 <__subtf3+0x664>
   208e0:	000087b7          	lui	a5,0x8
   208e4:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   208e8:	0af80ee3          	beq	a6,a5,211a4 <__subtf3+0x16d0>
   208ec:	01c12683          	lw	a3,28(sp)
   208f0:	000805b7          	lui	a1,0x80
   208f4:	07400793          	li	a5,116
   208f8:	00b6e6b3          	or	a3,a3,a1
   208fc:	00d12e23          	sw	a3,28(sp)
   20900:	58a7d863          	bge	a5,a0,20e90 <__subtf3+0x13bc>
   20904:	000f8593          	mv	a1,t6
   20908:	00060793          	mv	a5,a2
   2090c:	00100713          	li	a4,1
   20910:	00e30733          	add	a4,t1,a4
   20914:	00673333          	sltu	t1,a4,t1
   20918:	00f308b3          	add	a7,t1,a5
   2091c:	0068b333          	sltu	t1,a7,t1
   20920:	00c7b7b3          	sltu	a5,a5,a2
   20924:	0067e6b3          	or	a3,a5,t1
   20928:	00b687b3          	add	a5,a3,a1
   2092c:	00d7b6b3          	sltu	a3,a5,a3
   20930:	01f5b5b3          	sltu	a1,a1,t6
   20934:	00d5e6b3          	or	a3,a1,a3
   20938:	00de0e33          	add	t3,t3,a3
   2093c:	00080413          	mv	s0,a6
   20940:	831ff06f          	j	20170 <__subtf3+0x69c>
   20944:	05312623          	sw	s3,76(sp)
   20948:	03012983          	lw	s3,48(sp)
   2094c:	02000e13          	li	t3,32
   20950:	40565593          	sra	a1,a2,0x5
   20954:	411e0e33          	sub	t3,t3,a7
   20958:	011999b3          	sll	s3,s3,a7
   2095c:	d1dff06f          	j	20678 <__subtf3+0xba4>
   20960:	2ac010ef          	jal	21c0c <__clzsi2>
   20964:	03450613          	add	a2,a0,52
   20968:	01f67893          	and	a7,a2,31
   2096c:	40565593          	sra	a1,a2,0x5
   20970:	ca0886e3          	beqz	a7,2061c <__subtf3+0xb48>
   20974:	05312623          	sw	s3,76(sp)
   20978:	03012983          	lw	s3,48(sp)
   2097c:	02000e13          	li	t3,32
   20980:	411e0e33          	sub	t3,t3,a7
   20984:	011999b3          	sll	s3,s3,a7
   20988:	cf1ff06f          	j	20678 <__subtf3+0xba4>
   2098c:	41f3d513          	sra	a0,t2,0x1f
   20990:	01f57513          	and	a0,a0,31
   20994:	00750533          	add	a0,a0,t2
   20998:	01f00793          	li	a5,31
   2099c:	40555513          	sra	a0,a0,0x5
   209a0:	ca77c463          	blt	a5,t2,1fe48 <__subtf3+0x374>
   209a4:	00050413          	mv	s0,a0
   209a8:	00000793          	li	a5,0
   209ac:	00000513          	li	a0,0
   209b0:	cbcff06f          	j	1fe6c <__subtf3+0x398>
   209b4:	00688333          	add	t1,a7,t1
   209b8:	00f607b3          	add	a5,a2,a5
   209bc:	01133833          	sltu	a6,t1,a7
   209c0:	01078833          	add	a6,a5,a6
   209c4:	00c7b6b3          	sltu	a3,a5,a2
   209c8:	00f837b3          	sltu	a5,a6,a5
   209cc:	00ef8733          	add	a4,t6,a4
   209d0:	00f6e6b3          	or	a3,a3,a5
   209d4:	00d706b3          	add	a3,a4,a3
   209d8:	01f73633          	sltu	a2,a4,t6
   209dc:	00e6b733          	sltu	a4,a3,a4
   209e0:	00e66633          	or	a2,a2,a4
   209e4:	00be05b3          	add	a1,t3,a1
   209e8:	00b60633          	add	a2,a2,a1
   209ec:	03010793          	add	a5,sp,48
   209f0:	03012a23          	sw	a6,52(sp)
   209f4:	02612823          	sw	t1,48(sp)
   209f8:	02d12c23          	sw	a3,56(sp)
   209fc:	02c12e23          	sw	a2,60(sp)
   20a00:	00078713          	mv	a4,a5
   20a04:	03c10813          	add	a6,sp,60
   20a08:	00135593          	srl	a1,t1,0x1
   20a0c:	00472303          	lw	t1,4(a4)
   20a10:	00470713          	add	a4,a4,4
   20a14:	01f31693          	sll	a3,t1,0x1f
   20a18:	00b6e6b3          	or	a3,a3,a1
   20a1c:	fed72e23          	sw	a3,-4(a4)
   20a20:	fee814e3          	bne	a6,a4,20a08 <__subtf3+0xf34>
   20a24:	00165e13          	srl	t3,a2,0x1
   20a28:	00008737          	lui	a4,0x8
   20a2c:	03c12e23          	sw	t3,60(sp)
   20a30:	fff70713          	add	a4,a4,-1 # 7fff <OSTaskChangePrio+0x17f>
   20a34:	8ce502e3          	beq	a0,a4,202f8 <__subtf3+0x824>
   20a38:	03012703          	lw	a4,48(sp)
   20a3c:	00050413          	mv	s0,a0
   20a40:	e19ff06f          	j	20858 <__subtf3+0xd84>
   20a44:	4a079e63          	bnez	a5,20f00 <__subtf3+0x142c>
   20a48:	72071e63          	bnez	a4,21184 <__subtf3+0x16b0>
   20a4c:	02a12e23          	sw	a0,60(sp)
   20a50:	02012c23          	sw	zero,56(sp)
   20a54:	02012a23          	sw	zero,52(sp)
   20a58:	02012823          	sw	zero,48(sp)
   20a5c:	03010793          	add	a5,sp,48
   20a60:	03c10713          	add	a4,sp,60
   20a64:	00008637          	lui	a2,0x8
   20a68:	00361593          	sll	a1,a2,0x3
   20a6c:	ffc72603          	lw	a2,-4(a4)
   20a70:	ffc70713          	add	a4,a4,-4
   20a74:	01d65693          	srl	a3,a2,0x1d
   20a78:	00b6e6b3          	or	a3,a3,a1
   20a7c:	00d72223          	sw	a3,4(a4)
   20a80:	fee794e3          	bne	a5,a4,20a68 <__subtf3+0xf94>
   20a84:	03c12e03          	lw	t3,60(sp)
   20a88:	00080737          	lui	a4,0x80
   20a8c:	00000493          	li	s1,0
   20a90:	00ee7733          	and	a4,t3,a4
   20a94:	00008437          	lui	s0,0x8
   20a98:	f4071c63          	bnez	a4,201f0 <__subtf3+0x71c>
   20a9c:	fff40413          	add	s0,s0,-1 # 7fff <OSTaskChangePrio+0x17f>
   20aa0:	003e5613          	srl	a2,t3,0x3
   20aa4:	f60ff06f          	j	20204 <__subtf3+0x730>
   20aa8:	04c12983          	lw	s3,76(sp)
   20aac:	02612823          	sw	t1,48(sp)
   20ab0:	02c12a23          	sw	a2,52(sp)
   20ab4:	03f12c23          	sw	t6,56(sp)
   20ab8:	03c12e23          	sw	t3,60(sp)
   20abc:	00038413          	mv	s0,t2
   20ac0:	00058493          	mv	s1,a1
   20ac4:	03010793          	add	a5,sp,48
   20ac8:	f0cff06f          	j	201d4 <__subtf3+0x700>
   20acc:	41130833          	sub	a6,t1,a7
   20ad0:	41d607b3          	sub	a5,a2,t4
   20ad4:	01033733          	sltu	a4,t1,a6
   20ad8:	41ef8f33          	sub	t5,t6,t5
   20adc:	00f632b3          	sltu	t0,a2,a5
   20ae0:	00028893          	mv	a7,t0
   20ae4:	40e78733          	sub	a4,a5,a4
   20ae8:	01efb533          	sltu	a0,t6,t5
   20aec:	01037463          	bgeu	t1,a6,20af4 <__subtf3+0x1020>
   20af0:	43d60a63          	beq	a2,t4,20f24 <__subtf3+0x1450>
   20af4:	411f0633          	sub	a2,t5,a7
   20af8:	42029863          	bnez	t0,20f28 <__subtf3+0x1454>
   20afc:	40de07b3          	sub	a5,t3,a3
   20b00:	40a78533          	sub	a0,a5,a0
   20b04:	02a12e23          	sw	a0,60(sp)
   20b08:	02c12c23          	sw	a2,56(sp)
   20b0c:	02e12a23          	sw	a4,52(sp)
   20b10:	03012823          	sw	a6,48(sp)
   20b14:	00058493          	mv	s1,a1
   20b18:	74050c63          	beqz	a0,21270 <__subtf3+0x179c>
   20b1c:	0f0010ef          	jal	21c0c <__clzsi2>
   20b20:	ff450793          	add	a5,a0,-12
   20b24:	01f7f613          	and	a2,a5,31
   20b28:	00000593          	li	a1,0
   20b2c:	72061c63          	bnez	a2,21264 <__subtf3+0x1790>
   20b30:	04c12983          	lw	s3,76(sp)
   20b34:	ae9ff06f          	j	2061c <__subtf3+0xb48>
   20b38:	00688333          	add	t1,a7,t1
   20b3c:	01d70eb3          	add	t4,a4,t4
   20b40:	011338b3          	sltu	a7,t1,a7
   20b44:	011e88b3          	add	a7,t4,a7
   20b48:	00eeb7b3          	sltu	a5,t4,a4
   20b4c:	01d8beb3          	sltu	t4,a7,t4
   20b50:	00af0633          	add	a2,t5,a0
   20b54:	01d7e7b3          	or	a5,a5,t4
   20b58:	00f607b3          	add	a5,a2,a5
   20b5c:	01e636b3          	sltu	a3,a2,t5
   20b60:	00c7b633          	sltu	a2,a5,a2
   20b64:	00c6e6b3          	or	a3,a3,a2
   20b68:	01c585b3          	add	a1,a1,t3
   20b6c:	00030713          	mv	a4,t1
   20b70:	00b68e33          	add	t3,a3,a1
   20b74:	00100413          	li	s0,1
   20b78:	df8ff06f          	j	20170 <__subtf3+0x69c>
   20b7c:	02012703          	lw	a4,32(sp)
   20b80:	02000393          	li	t2,32
   20b84:	40d383b3          	sub	t2,t2,a3
   20b88:	00771633          	sll	a2,a4,t2
   20b8c:	05312623          	sw	s3,76(sp)
   20b90:	00d5d5b3          	srl	a1,a1,a3
   20b94:	00300713          	li	a4,3
   20b98:	00000313          	li	t1,0
   20b9c:	9ccff06f          	j	1fd68 <__subtf3+0x294>
   20ba0:	03112823          	sw	a7,48(sp)
   20ba4:	03d12a23          	sw	t4,52(sp)
   20ba8:	02a12c23          	sw	a0,56(sp)
   20bac:	03c12e23          	sw	t3,60(sp)
   20bb0:	00068413          	mv	s0,a3
   20bb4:	03010793          	add	a5,sp,48
   20bb8:	e1cff06f          	j	201d4 <__subtf3+0x700>
   20bbc:	40688333          	sub	t1,a7,t1
   20bc0:	41e507b3          	sub	a5,a0,t5
   20bc4:	0068b6b3          	sltu	a3,a7,t1
   20bc8:	00030713          	mv	a4,t1
   20bcc:	00f53333          	sltu	t1,a0,a5
   20bd0:	00030f93          	mv	t6,t1
   20bd4:	40d787b3          	sub	a5,a5,a3
   20bd8:	010eb633          	sltu	a2,t4,a6
   20bdc:	410e86b3          	sub	a3,t4,a6
   20be0:	00e8f463          	bgeu	a7,a4,20be8 <__subtf3+0x1114>
   20be4:	04af0863          	beq	t5,a0,20c34 <__subtf3+0x1160>
   20be8:	41f68533          	sub	a0,a3,t6
   20bec:	00060693          	mv	a3,a2
   20bf0:	04031463          	bnez	t1,20c38 <__subtf3+0x1164>
   20bf4:	40be05b3          	sub	a1,t3,a1
   20bf8:	40d58e33          	sub	t3,a1,a3
   20bfc:	00100413          	li	s0,1
   20c00:	868ff06f          	j	1fc68 <__subtf3+0x194>
   20c04:	03112823          	sw	a7,48(sp)
   20c08:	02a12a23          	sw	a0,52(sp)
   20c0c:	03d12c23          	sw	t4,56(sp)
   20c10:	03c12e23          	sw	t3,60(sp)
   20c14:	03010793          	add	a5,sp,48
   20c18:	dbcff06f          	j	201d4 <__subtf3+0x700>
   20c1c:	00afb8b3          	sltu	a7,t6,a0
   20c20:	fff50513          	add	a0,a0,-1
   20c24:	40df86b3          	sub	a3,t6,a3
   20c28:	0016b693          	seqz	a3,a3
   20c2c:	00d8e8b3          	or	a7,a7,a3
   20c30:	921ff06f          	j	20550 <__subtf3+0xa7c>
   20c34:	fff68513          	add	a0,a3,-1
   20c38:	41d806b3          	sub	a3,a6,t4
   20c3c:	0016b693          	seqz	a3,a3
   20c40:	00d666b3          	or	a3,a2,a3
   20c44:	fb1ff06f          	j	20bf4 <__subtf3+0x1120>
   20c48:	03112823          	sw	a7,48(sp)
   20c4c:	03d12a23          	sw	t4,52(sp)
   20c50:	02a12c23          	sw	a0,56(sp)
   20c54:	03c12e23          	sw	t3,60(sp)
   20c58:	03010793          	add	a5,sp,48
   20c5c:	d78ff06f          	j	201d4 <__subtf3+0x700>
   20c60:	04c12983          	lw	s3,76(sp)
   20c64:	00028393          	mv	t2,t0
   20c68:	00000513          	li	a0,0
   20c6c:	00300893          	li	a7,3
   20c70:	00000793          	li	a5,0
   20c74:	41f3d493          	sra	s1,t2,0x1f
   20c78:	00251713          	sll	a4,a0,0x2
   20c7c:	01b4d493          	srl	s1,s1,0x1b
   20c80:	04070713          	add	a4,a4,64 # 80040 <__alt_data_end+0x36c60>
   20c84:	00938533          	add	a0,t2,s1
   20c88:	00270733          	add	a4,a4,sp
   20c8c:	fd072703          	lw	a4,-48(a4)
   20c90:	01f57513          	and	a0,a0,31
   20c94:	40a483b3          	sub	t2,s1,a0
   20c98:	02038393          	add	t2,t2,32
   20c9c:	00771733          	sll	a4,a4,t2
   20ca0:	00e7e7b3          	or	a5,a5,a4
   20ca4:	54088e63          	beqz	a7,21200 <__subtf3+0x172c>
   20ca8:	05312623          	sw	s3,76(sp)
   20cac:	00241993          	sll	s3,s0,0x2
   20cb0:	013e8733          	add	a4,t4,s3
   20cb4:	008f0f13          	add	t5,t5,8
   20cb8:	413009b3          	neg	s3,s3
   20cbc:	00072683          	lw	a3,0(a4)
   20cc0:	00472503          	lw	a0,4(a4)
   20cc4:	013704b3          	add	s1,a4,s3
   20cc8:	0056d6b3          	srl	a3,a3,t0
   20ccc:	00751533          	sll	a0,a0,t2
   20cd0:	00a6e6b3          	or	a3,a3,a0
   20cd4:	00d4a023          	sw	a3,0(s1)
   20cd8:	00470713          	add	a4,a4,4
   20cdc:	feef10e3          	bne	t5,a4,20cbc <__subtf3+0x11e8>
   20ce0:	01c12503          	lw	a0,28(sp)
   20ce4:	00289693          	sll	a3,a7,0x2
   20ce8:	04068713          	add	a4,a3,64
   20cec:	002706b3          	add	a3,a4,sp
   20cf0:	00555533          	srl	a0,a0,t0
   20cf4:	00400713          	li	a4,4
   20cf8:	04c12983          	lw	s3,76(sp)
   20cfc:	40870733          	sub	a4,a4,s0
   20d00:	fca6a823          	sw	a0,-48(a3)
   20d04:	99cff06f          	j	1fea0 <__subtf3+0x3cc>
   20d08:	38069263          	bnez	a3,2108c <__subtf3+0x15b8>
   20d0c:	02612823          	sw	t1,48(sp)
   20d10:	02c12a23          	sw	a2,52(sp)
   20d14:	03f12c23          	sw	t6,56(sp)
   20d18:	03c12e23          	sw	t3,60(sp)
   20d1c:	fff80413          	add	s0,a6,-1
   20d20:	03010793          	add	a5,sp,48
   20d24:	cb0ff06f          	j	201d4 <__subtf3+0x700>
   20d28:	02612823          	sw	t1,48(sp)
   20d2c:	02c12a23          	sw	a2,52(sp)
   20d30:	03f12c23          	sw	t6,56(sp)
   20d34:	03c12e23          	sw	t3,60(sp)
   20d38:	88070ce3          	beqz	a4,205d0 <__subtf3+0xafc>
   20d3c:	00ce1793          	sll	a5,t3,0xc
   20d40:	00058493          	mv	s1,a1
   20d44:	4c07dc63          	bgez	a5,2121c <__subtf3+0x1748>
   20d48:	00100413          	li	s0,1
   20d4c:	03010793          	add	a5,sp,48
   20d50:	ca0ff06f          	j	201f0 <__subtf3+0x71c>
   20d54:	41130733          	sub	a4,t1,a7
   20d58:	413607b3          	sub	a5,a2,s3
   20d5c:	00e33833          	sltu	a6,t1,a4
   20d60:	00f638b3          	sltu	a7,a2,a5
   20d64:	409f8533          	sub	a0,t6,s1
   20d68:	410787b3          	sub	a5,a5,a6
   20d6c:	00088e93          	mv	t4,a7
   20d70:	00afb833          	sltu	a6,t6,a0
   20d74:	00e37463          	bgeu	t1,a4,20d7c <__subtf3+0x12a8>
   20d78:	38c98463          	beq	s3,a2,21100 <__subtf3+0x162c>
   20d7c:	41d50533          	sub	a0,a0,t4
   20d80:	00080613          	mv	a2,a6
   20d84:	38089063          	bnez	a7,21104 <__subtf3+0x1630>
   20d88:	40de06b3          	sub	a3,t3,a3
   20d8c:	04c12983          	lw	s3,76(sp)
   20d90:	40c68e33          	sub	t3,a3,a2
   20d94:	00058493          	mv	s1,a1
   20d98:	00100413          	li	s0,1
   20d9c:	ecdfe06f          	j	1fc68 <__subtf3+0x194>
   20da0:	40ce87b3          	sub	a5,t4,a2
   20da4:	406882b3          	sub	t0,a7,t1
   20da8:	0058b533          	sltu	a0,a7,t0
   20dac:	00feb733          	sltu	a4,t4,a5
   20db0:	00070393          	mv	t2,a4
   20db4:	40a787b3          	sub	a5,a5,a0
   20db8:	01ff3833          	sltu	a6,t5,t6
   20dbc:	41ff0533          	sub	a0,t5,t6
   20dc0:	0058f463          	bgeu	a7,t0,20dc8 <__subtf3+0x12f4>
   20dc4:	37d60463          	beq	a2,t4,2112c <__subtf3+0x1658>
   20dc8:	40750533          	sub	a0,a0,t2
   20dcc:	36071263          	bnez	a4,21130 <__subtf3+0x165c>
   20dd0:	41c68733          	sub	a4,a3,t3
   20dd4:	41070733          	sub	a4,a4,a6
   20dd8:	02e12e23          	sw	a4,60(sp)
   20ddc:	02a12c23          	sw	a0,56(sp)
   20de0:	02f12a23          	sw	a5,52(sp)
   20de4:	02512823          	sw	t0,48(sp)
   20de8:	00c71813          	sll	a6,a4,0xc
   20dec:	32085463          	bgez	a6,21114 <__subtf3+0x1640>
   20df0:	41130833          	sub	a6,t1,a7
   20df4:	41d607b3          	sub	a5,a2,t4
   20df8:	01033733          	sltu	a4,t1,a6
   20dfc:	00f638b3          	sltu	a7,a2,a5
   20e00:	41ef8f33          	sub	t5,t6,t5
   20e04:	40e787b3          	sub	a5,a5,a4
   20e08:	00088513          	mv	a0,a7
   20e0c:	01efb733          	sltu	a4,t6,t5
   20e10:	01037463          	bgeu	t1,a6,20e18 <__subtf3+0x1344>
   20e14:	3fd60c63          	beq	a2,t4,2120c <__subtf3+0x1738>
   20e18:	40af0633          	sub	a2,t5,a0
   20e1c:	3e089a63          	bnez	a7,21210 <__subtf3+0x173c>
   20e20:	40de06b3          	sub	a3,t3,a3
   20e24:	40e68e33          	sub	t3,a3,a4
   20e28:	02f12a23          	sw	a5,52(sp)
   20e2c:	03c12e23          	sw	t3,60(sp)
   20e30:	02c12c23          	sw	a2,56(sp)
   20e34:	03012823          	sw	a6,48(sp)
   20e38:	00058493          	mv	s1,a1
   20e3c:	03010793          	add	a5,sp,48
   20e40:	b94ff06f          	j	201d4 <__subtf3+0x700>
   20e44:	00100693          	li	a3,1
   20e48:	9a5ff06f          	j	207ec <__subtf3+0xd18>
   20e4c:	03012703          	lw	a4,48(sp)
   20e50:	03c12e83          	lw	t4,60(sp)
   20e54:	02000e13          	li	t3,32
   20e58:	40de0e33          	sub	t3,t3,a3
   20e5c:	01c71733          	sll	a4,a4,t3
   20e60:	00dedeb3          	srl	t4,t4,a3
   20e64:	00300513          	li	a0,3
   20e68:	00000593          	li	a1,0
   20e6c:	905ff06f          	j	20770 <__subtf3+0xc9c>
   20e70:	05f00793          	li	a5,95
   20e74:	011999b3          	sll	s3,s3,a7
   20e78:	3ac7d863          	bge	a5,a2,21228 <__subtf3+0x1754>
   20e7c:	03312e23          	sw	s3,60(sp)
   20e80:	00200713          	li	a4,2
   20e84:	04c12983          	lw	s3,76(sp)
   20e88:	03010793          	add	a5,sp,48
   20e8c:	849ff06f          	j	206d4 <__subtf3+0xc00>
   20e90:	41f55413          	sra	s0,a0,0x1f
   20e94:	01f47413          	and	s0,s0,31
   20e98:	00a40433          	add	s0,s0,a0
   20e9c:	01f00793          	li	a5,31
   20ea0:	40545413          	sra	s0,s0,0x5
   20ea4:	9aa7c463          	blt	a5,a0,2004c <__subtf3+0x578>
   20ea8:	00040893          	mv	a7,s0
   20eac:	00000793          	li	a5,0
   20eb0:	00000413          	li	s0,0
   20eb4:	9bcff06f          	j	20070 <__subtf3+0x59c>
   20eb8:	00100793          	li	a5,1
   20ebc:	d50ff06f          	j	2040c <__subtf3+0x938>
   20ec0:	02012703          	lw	a4,32(sp)
   20ec4:	02000393          	li	t2,32
   20ec8:	40d383b3          	sub	t2,t2,a3
   20ecc:	00771633          	sll	a2,a4,t2
   20ed0:	05312623          	sw	s3,76(sp)
   20ed4:	00d5d5b3          	srl	a1,a1,a3
   20ed8:	00300713          	li	a4,3
   20edc:	00000313          	li	t1,0
   20ee0:	8bcff06f          	j	1ff9c <__subtf3+0x4c8>
   20ee4:	02612823          	sw	t1,48(sp)
   20ee8:	02c12a23          	sw	a2,52(sp)
   20eec:	03f12c23          	sw	t6,56(sp)
   20ef0:	03c12e23          	sw	t3,60(sp)
   20ef4:	00050413          	mv	s0,a0
   20ef8:	03010793          	add	a5,sp,48
   20efc:	ad8ff06f          	j	201d4 <__subtf3+0x700>
   20f00:	24071463          	bnez	a4,21148 <__subtf3+0x1674>
   20f04:	03112823          	sw	a7,48(sp)
   20f08:	03d12a23          	sw	t4,52(sp)
   20f0c:	03e12c23          	sw	t5,56(sp)
   20f10:	02d12e23          	sw	a3,60(sp)
   20f14:	00068e13          	mv	t3,a3
   20f18:	fff50413          	add	s0,a0,-1
   20f1c:	03010793          	add	a5,sp,48
   20f20:	ab4ff06f          	j	201d4 <__subtf3+0x700>
   20f24:	ffff0613          	add	a2,t5,-1
   20f28:	001f3f13          	seqz	t5,t5
   20f2c:	01e56533          	or	a0,a0,t5
   20f30:	bcdff06f          	j	20afc <__subtf3+0x1028>
   20f34:	02612823          	sw	t1,48(sp)
   20f38:	02c12a23          	sw	a2,52(sp)
   20f3c:	03f12c23          	sw	t6,56(sp)
   20f40:	03c12e23          	sw	t3,60(sp)
   20f44:	03010793          	add	a5,sp,48
   20f48:	a8cff06f          	j	201d4 <__subtf3+0x700>
   20f4c:	00688333          	add	t1,a7,t1
   20f50:	00f607b3          	add	a5,a2,a5
   20f54:	011336b3          	sltu	a3,t1,a7
   20f58:	00d786b3          	add	a3,a5,a3
   20f5c:	00c7b633          	sltu	a2,a5,a2
   20f60:	00f6b7b3          	sltu	a5,a3,a5
   20f64:	00ef8733          	add	a4,t6,a4
   20f68:	00f667b3          	or	a5,a2,a5
   20f6c:	00f707b3          	add	a5,a4,a5
   20f70:	01f73fb3          	sltu	t6,a4,t6
   20f74:	00e7b733          	sltu	a4,a5,a4
   20f78:	00efe733          	or	a4,t6,a4
   20f7c:	00be05b3          	add	a1,t3,a1
   20f80:	00b70e33          	add	t3,a4,a1
   20f84:	02f12c23          	sw	a5,56(sp)
   20f88:	02612823          	sw	t1,48(sp)
   20f8c:	02d12a23          	sw	a3,52(sp)
   20f90:	00ce1793          	sll	a5,t3,0xc
   20f94:	c207de63          	bgez	a5,203d0 <__subtf3+0x8fc>
   20f98:	fff807b7          	lui	a5,0xfff80
   20f9c:	fff78793          	add	a5,a5,-1 # fff7ffff <__alt_data_end+0xfff36c1f>
   20fa0:	00fe7e33          	and	t3,t3,a5
   20fa4:	03c12e23          	sw	t3,60(sp)
   20fa8:	00100413          	li	s0,1
   20fac:	03010793          	add	a5,sp,48
   20fb0:	003e5613          	srl	a2,t3,0x3
   20fb4:	a50ff06f          	j	20204 <__subtf3+0x730>
   20fb8:	04c12983          	lw	s3,76(sp)
   20fbc:	00008437          	lui	s0,0x8
   20fc0:	02612823          	sw	t1,48(sp)
   20fc4:	02c12a23          	sw	a2,52(sp)
   20fc8:	03f12c23          	sw	t6,56(sp)
   20fcc:	03c12e23          	sw	t3,60(sp)
   20fd0:	00058493          	mv	s1,a1
   20fd4:	fff40413          	add	s0,s0,-1 # 7fff <OSTaskChangePrio+0x17f>
   20fd8:	03010793          	add	a5,sp,48
   20fdc:	9f8ff06f          	j	201d4 <__subtf3+0x700>
   20fe0:	04c12983          	lw	s3,76(sp)
   20fe4:	d34ff06f          	j	20518 <__subtf3+0xa44>
   20fe8:	00058513          	mv	a0,a1
   20fec:	00000893          	li	a7,0
   20ff0:	00300393          	li	t2,3
   20ff4:	00000793          	li	a5,0
   20ff8:	41f55713          	sra	a4,a0,0x1f
   20ffc:	00241293          	sll	t0,s0,0x2
   21000:	01b75713          	srl	a4,a4,0x1b
   21004:	04028293          	add	t0,t0,64
   21008:	00e50533          	add	a0,a0,a4
   2100c:	002282b3          	add	t0,t0,sp
   21010:	fd02a403          	lw	s0,-48(t0)
   21014:	01f57513          	and	a0,a0,31
   21018:	40a70733          	sub	a4,a4,a0
   2101c:	02070293          	add	t0,a4,32
   21020:	00541733          	sll	a4,s0,t0
   21024:	00e7e7b3          	or	a5,a5,a4
   21028:	20038863          	beqz	t2,21238 <__subtf3+0x1764>
   2102c:	05312623          	sw	s3,76(sp)
   21030:	00289993          	sll	s3,a7,0x2
   21034:	013e8733          	add	a4,t4,s3
   21038:	008f0f13          	add	t5,t5,8
   2103c:	413009b3          	neg	s3,s3
   21040:	00072683          	lw	a3,0(a4)
   21044:	00472503          	lw	a0,4(a4)
   21048:	01370433          	add	s0,a4,s3
   2104c:	00b6d6b3          	srl	a3,a3,a1
   21050:	00551533          	sll	a0,a0,t0
   21054:	00a6e6b3          	or	a3,a3,a0
   21058:	00d42023          	sw	a3,0(s0)
   2105c:	00470713          	add	a4,a4,4
   21060:	ffe710e3          	bne	a4,t5,21040 <__subtf3+0x156c>
   21064:	01c12683          	lw	a3,28(sp)
   21068:	00239713          	sll	a4,t2,0x2
   2106c:	04070713          	add	a4,a4,64
   21070:	00b6d6b3          	srl	a3,a3,a1
   21074:	00270733          	add	a4,a4,sp
   21078:	00400593          	li	a1,4
   2107c:	04c12983          	lw	s3,76(sp)
   21080:	411588b3          	sub	a7,a1,a7
   21084:	fcd72823          	sw	a3,-48(a4)
   21088:	81cff06f          	j	200a4 <__subtf3+0x5d0>
   2108c:	01f666b3          	or	a3,a2,t6
   21090:	0066e6b3          	or	a3,a3,t1
   21094:	01c6e6b3          	or	a3,a3,t3
   21098:	12069663          	bnez	a3,211c4 <__subtf3+0x16f0>
   2109c:	02f12a23          	sw	a5,52(sp)
   210a0:	03112823          	sw	a7,48(sp)
   210a4:	02e12c23          	sw	a4,56(sp)
   210a8:	02b12e23          	sw	a1,60(sp)
   210ac:	00058e13          	mv	t3,a1
   210b0:	fff80413          	add	s0,a6,-1
   210b4:	03010793          	add	a5,sp,48
   210b8:	91cff06f          	j	201d4 <__subtf3+0x700>
   210bc:	00688333          	add	t1,a7,t1
   210c0:	00c78633          	add	a2,a5,a2
   210c4:	011338b3          	sltu	a7,t1,a7
   210c8:	011608b3          	add	a7,a2,a7
   210cc:	00f637b3          	sltu	a5,a2,a5
   210d0:	00c8b633          	sltu	a2,a7,a2
   210d4:	01f28fb3          	add	t6,t0,t6
   210d8:	00c7e7b3          	or	a5,a5,a2
   210dc:	00ff87b3          	add	a5,t6,a5
   210e0:	005fb633          	sltu	a2,t6,t0
   210e4:	01f7bfb3          	sltu	t6,a5,t6
   210e8:	01f66633          	or	a2,a2,t6
   210ec:	01c686b3          	add	a3,a3,t3
   210f0:	00030713          	mv	a4,t1
   210f4:	00d60e33          	add	t3,a2,a3
   210f8:	00100413          	li	s0,1
   210fc:	874ff06f          	j	20170 <__subtf3+0x69c>
   21100:	fff50513          	add	a0,a0,-1
   21104:	41f48633          	sub	a2,s1,t6
   21108:	00163613          	seqz	a2,a2
   2110c:	00c86633          	or	a2,a6,a2
   21110:	c79ff06f          	j	20d88 <__subtf3+0x12b4>
   21114:	00f2e7b3          	or	a5,t0,a5
   21118:	00a7e7b3          	or	a5,a5,a0
   2111c:	00e7e7b3          	or	a5,a5,a4
   21120:	00070e13          	mv	t3,a4
   21124:	aa079863          	bnez	a5,203d4 <__subtf3+0x900>
   21128:	ca8ff06f          	j	205d0 <__subtf3+0xafc>
   2112c:	fff50513          	add	a0,a0,-1
   21130:	41ef8733          	sub	a4,t6,t5
   21134:	00173713          	seqz	a4,a4
   21138:	00e86833          	or	a6,a6,a4
   2113c:	c95ff06f          	j	20dd0 <__subtf3+0x12fc>
   21140:	00100793          	li	a5,1
   21144:	f4cff06f          	j	20890 <__subtf3+0xdbc>
   21148:	02a12e23          	sw	a0,60(sp)
   2114c:	02012c23          	sw	zero,56(sp)
   21150:	02012a23          	sw	zero,52(sp)
   21154:	02012823          	sw	zero,48(sp)
   21158:	03010793          	add	a5,sp,48
   2115c:	03c10713          	add	a4,sp,60
   21160:	00008637          	lui	a2,0x8
   21164:	00361593          	sll	a1,a2,0x3
   21168:	ffc72603          	lw	a2,-4(a4)
   2116c:	ffc70713          	add	a4,a4,-4
   21170:	01d65693          	srl	a3,a2,0x1d
   21174:	00b6e6b3          	or	a3,a3,a1
   21178:	00d72223          	sw	a3,4(a4)
   2117c:	fee794e3          	bne	a5,a4,21164 <__subtf3+0x1690>
   21180:	905ff06f          	j	20a84 <__subtf3+0xfb0>
   21184:	02612823          	sw	t1,48(sp)
   21188:	02c12a23          	sw	a2,52(sp)
   2118c:	03f12c23          	sw	t6,56(sp)
   21190:	03c12e23          	sw	t3,60(sp)
   21194:	00058493          	mv	s1,a1
   21198:	fff50413          	add	s0,a0,-1
   2119c:	03010793          	add	a5,sp,48
   211a0:	834ff06f          	j	201d4 <__subtf3+0x700>
   211a4:	00008437          	lui	s0,0x8
   211a8:	02612823          	sw	t1,48(sp)
   211ac:	02c12a23          	sw	a2,52(sp)
   211b0:	03f12c23          	sw	t6,56(sp)
   211b4:	03c12e23          	sw	t3,60(sp)
   211b8:	fff40413          	add	s0,s0,-1 # 7fff <OSTaskChangePrio+0x17f>
   211bc:	03010793          	add	a5,sp,48
   211c0:	814ff06f          	j	201d4 <__subtf3+0x700>
   211c4:	03012e23          	sw	a6,60(sp)
   211c8:	02012c23          	sw	zero,56(sp)
   211cc:	02012a23          	sw	zero,52(sp)
   211d0:	02012823          	sw	zero,48(sp)
   211d4:	03010793          	add	a5,sp,48
   211d8:	03c10713          	add	a4,sp,60
   211dc:	00008637          	lui	a2,0x8
   211e0:	00361593          	sll	a1,a2,0x3
   211e4:	ffc72603          	lw	a2,-4(a4)
   211e8:	ffc70713          	add	a4,a4,-4
   211ec:	01d65693          	srl	a3,a2,0x1d
   211f0:	00b6e6b3          	or	a3,a3,a1
   211f4:	00d72223          	sw	a3,4(a4)
   211f8:	fee794e3          	bne	a5,a4,211e0 <__subtf3+0x170c>
   211fc:	889ff06f          	j	20a84 <__subtf3+0xfb0>
   21200:	0056d2b3          	srl	t0,a3,t0
   21204:	00100713          	li	a4,1
   21208:	ca5fe06f          	j	1feac <__subtf3+0x3d8>
   2120c:	ffff0613          	add	a2,t5,-1
   21210:	001f3f13          	seqz	t5,t5
   21214:	01e76733          	or	a4,a4,t5
   21218:	c09ff06f          	j	20e20 <__subtf3+0x134c>
   2121c:	03010793          	add	a5,sp,48
   21220:	003e5613          	srl	a2,t3,0x3
   21224:	fe1fe06f          	j	20204 <__subtf3+0x730>
   21228:	02000e13          	li	t3,32
   2122c:	411e0e33          	sub	t3,t3,a7
   21230:	00200593          	li	a1,2
   21234:	c44ff06f          	j	20678 <__subtf3+0xba4>
   21238:	00b6d5b3          	srl	a1,a3,a1
   2123c:	00100893          	li	a7,1
   21240:	e71fe06f          	j	200b0 <__subtf3+0x5dc>
   21244:	02412603          	lw	a2,36(sp)
   21248:	02812f83          	lw	t6,40(sp)
   2124c:	02c12e03          	lw	t3,44(sp)
   21250:	b95fe06f          	j	1fde4 <__subtf3+0x310>
   21254:	02412603          	lw	a2,36(sp)
   21258:	02812f83          	lw	t6,40(sp)
   2125c:	02c12e03          	lw	t3,44(sp)
   21260:	d91fe06f          	j	1fff0 <__subtf3+0x51c>
   21264:	00060893          	mv	a7,a2
   21268:	00078613          	mv	a2,a5
   2126c:	bf8ff06f          	j	20664 <__subtf3+0xb90>
   21270:	04c12983          	lw	s3,76(sp)
   21274:	a21fe06f          	j	1fc94 <__subtf3+0x1c0>

00021278 <__fixtfsi>:
   21278:	00c52783          	lw	a5,12(a0)
   2127c:	00052583          	lw	a1,0(a0)
   21280:	00852603          	lw	a2,8(a0)
   21284:	00452503          	lw	a0,4(a0)
   21288:	fe010113          	add	sp,sp,-32
   2128c:	00179713          	sll	a4,a5,0x1
   21290:	000046b7          	lui	a3,0x4
   21294:	00a12223          	sw	a0,4(sp)
   21298:	00b12023          	sw	a1,0(sp)
   2129c:	00c12423          	sw	a2,8(sp)
   212a0:	00f12623          	sw	a5,12(sp)
   212a4:	00b12823          	sw	a1,16(sp)
   212a8:	00c12c23          	sw	a2,24(sp)
   212ac:	01175713          	srl	a4,a4,0x11
   212b0:	ffe68693          	add	a3,a3,-2 # 3ffe <OSFlagPend+0x54e>
   212b4:	00000513          	li	a0,0
   212b8:	02e6d063          	bge	a3,a4,212d8 <__fixtfsi+0x60>
   212bc:	000046b7          	lui	a3,0x4
   212c0:	01d68693          	add	a3,a3,29 # 401d <OSFlagPend+0x56d>
   212c4:	01f7d593          	srl	a1,a5,0x1f
   212c8:	00e6dc63          	bge	a3,a4,212e0 <__fixtfsi+0x68>
   212cc:	80000537          	lui	a0,0x80000
   212d0:	fff50513          	add	a0,a0,-1 # 7fffffff <__alt_data_end+0x7ffb6c1f>
   212d4:	00a58533          	add	a0,a1,a0
   212d8:	02010113          	add	sp,sp,32
   212dc:	00008067          	ret
   212e0:	000046b7          	lui	a3,0x4
   212e4:	01079793          	sll	a5,a5,0x10
   212e8:	06f68693          	add	a3,a3,111 # 406f <OSFlagPend+0x5bf>
   212ec:	40e686b3          	sub	a3,a3,a4
   212f0:	0107d793          	srl	a5,a5,0x10
   212f4:	00010737          	lui	a4,0x10
   212f8:	00e7e7b3          	or	a5,a5,a4
   212fc:	01f6f513          	and	a0,a3,31
   21300:	00f12e23          	sw	a5,28(sp)
   21304:	4056d693          	sra	a3,a3,0x5
   21308:	04050c63          	beqz	a0,21360 <__fixtfsi+0xe8>
   2130c:	00200813          	li	a6,2
   21310:	00000713          	li	a4,0
   21314:	03069063          	bne	a3,a6,21334 <__fixtfsi+0xbc>
   21318:	02000713          	li	a4,32
   2131c:	40a70733          	sub	a4,a4,a0
   21320:	00e79733          	sll	a4,a5,a4
   21324:	00a65633          	srl	a2,a2,a0
   21328:	00c76733          	or	a4,a4,a2
   2132c:	00e12823          	sw	a4,16(sp)
   21330:	00100713          	li	a4,1
   21334:	00271713          	sll	a4,a4,0x2
   21338:	02070713          	add	a4,a4,32 # 10020 <__sfvwrite_r+0xbc>
   2133c:	00270733          	add	a4,a4,sp
   21340:	00a7d7b3          	srl	a5,a5,a0
   21344:	fef72823          	sw	a5,-16(a4)
   21348:	01012783          	lw	a5,16(sp)
   2134c:	40f00533          	neg	a0,a5
   21350:	f80594e3          	bnez	a1,212d8 <__fixtfsi+0x60>
   21354:	00078513          	mv	a0,a5
   21358:	02010113          	add	sp,sp,32
   2135c:	00008067          	ret
   21360:	00269693          	sll	a3,a3,0x2
   21364:	02068793          	add	a5,a3,32
   21368:	002786b3          	add	a3,a5,sp
   2136c:	ff06a783          	lw	a5,-16(a3)
   21370:	00f12823          	sw	a5,16(sp)
   21374:	fd5ff06f          	j	21348 <__fixtfsi+0xd0>

00021378 <__floatsitf>:
   21378:	fd010113          	add	sp,sp,-48
   2137c:	02912223          	sw	s1,36(sp)
   21380:	02112623          	sw	ra,44(sp)
   21384:	02812423          	sw	s0,40(sp)
   21388:	00050493          	mv	s1,a0
   2138c:	0a058863          	beqz	a1,2143c <__floatsitf+0xc4>
   21390:	41f5d793          	sra	a5,a1,0x1f
   21394:	03212023          	sw	s2,32(sp)
   21398:	00b7c933          	xor	s2,a5,a1
   2139c:	40f90933          	sub	s2,s2,a5
   213a0:	00090513          	mv	a0,s2
   213a4:	01f5d413          	srl	s0,a1,0x1f
   213a8:	065000ef          	jal	21c0c <__clzsi2>
   213ac:	05150713          	add	a4,a0,81
   213b0:	000047b7          	lui	a5,0x4
   213b4:	01e78793          	add	a5,a5,30 # 401e <OSFlagPend+0x56e>
   213b8:	01f77613          	and	a2,a4,31
   213bc:	01212823          	sw	s2,16(sp)
   213c0:	00012a23          	sw	zero,20(sp)
   213c4:	00012c23          	sw	zero,24(sp)
   213c8:	00012e23          	sw	zero,28(sp)
   213cc:	40a787b3          	sub	a5,a5,a0
   213d0:	40575713          	sra	a4,a4,0x5
   213d4:	0a061e63          	bnez	a2,21490 <__floatsitf+0x118>
   213d8:	00300613          	li	a2,3
   213dc:	40e60633          	sub	a2,a2,a4
   213e0:	00261613          	sll	a2,a2,0x2
   213e4:	02060693          	add	a3,a2,32 # 8020 <OSTaskChangePrio+0x1a0>
   213e8:	00268633          	add	a2,a3,sp
   213ec:	00200693          	li	a3,2
   213f0:	ff062603          	lw	a2,-16(a2)
   213f4:	00d71663          	bne	a4,a3,21400 <__floatsitf+0x88>
   213f8:	01212c23          	sw	s2,24(sp)
   213fc:	00100693          	li	a3,1
   21400:	00269693          	sll	a3,a3,0x2
   21404:	00012823          	sw	zero,16(sp)
   21408:	00012a23          	sw	zero,20(sp)
   2140c:	ffc68693          	add	a3,a3,-4
   21410:	00400713          	li	a4,4
   21414:	0ae6fe63          	bgeu	a3,a4,214d0 <__floatsitf+0x158>
   21418:	01179793          	sll	a5,a5,0x11
   2141c:	01061713          	sll	a4,a2,0x10
   21420:	01012803          	lw	a6,16(sp)
   21424:	01412503          	lw	a0,20(sp)
   21428:	01812683          	lw	a3,24(sp)
   2142c:	02012903          	lw	s2,32(sp)
   21430:	01075713          	srl	a4,a4,0x10
   21434:	0117d793          	srl	a5,a5,0x11
   21438:	01c0006f          	j	21454 <__floatsitf+0xdc>
   2143c:	00000413          	li	s0,0
   21440:	00000793          	li	a5,0
   21444:	00000713          	li	a4,0
   21448:	00000693          	li	a3,0
   2144c:	00000513          	li	a0,0
   21450:	00000813          	li	a6,0
   21454:	00f41593          	sll	a1,s0,0xf
   21458:	00b7e7b3          	or	a5,a5,a1
   2145c:	00e11623          	sh	a4,12(sp)
   21460:	00f11723          	sh	a5,14(sp)
   21464:	00c12783          	lw	a5,12(sp)
   21468:	02c12083          	lw	ra,44(sp)
   2146c:	02812403          	lw	s0,40(sp)
   21470:	00a4a223          	sw	a0,4(s1)
   21474:	0104a023          	sw	a6,0(s1)
   21478:	00d4a423          	sw	a3,8(s1)
   2147c:	00f4a623          	sw	a5,12(s1)
   21480:	00048513          	mv	a0,s1
   21484:	02412483          	lw	s1,36(sp)
   21488:	03010113          	add	sp,sp,48
   2148c:	00008067          	ret
   21490:	00200693          	li	a3,2
   21494:	06d70263          	beq	a4,a3,214f8 <__floatsitf+0x180>
   21498:	00200693          	li	a3,2
   2149c:	00300713          	li	a4,3
   214a0:	00271713          	sll	a4,a4,0x2
   214a4:	02070713          	add	a4,a4,32
   214a8:	00270733          	add	a4,a4,sp
   214ac:	00c91933          	sll	s2,s2,a2
   214b0:	ff272823          	sw	s2,-16(a4)
   214b4:	00269693          	sll	a3,a3,0x2
   214b8:	00012823          	sw	zero,16(sp)
   214bc:	00012a23          	sw	zero,20(sp)
   214c0:	ffc68693          	add	a3,a3,-4
   214c4:	00400713          	li	a4,4
   214c8:	01c12603          	lw	a2,28(sp)
   214cc:	f4e6e6e3          	bltu	a3,a4,21418 <__floatsitf+0xa0>
   214d0:	00012c23          	sw	zero,24(sp)
   214d4:	01179793          	sll	a5,a5,0x11
   214d8:	01061713          	sll	a4,a2,0x10
   214dc:	01012803          	lw	a6,16(sp)
   214e0:	01412503          	lw	a0,20(sp)
   214e4:	01812683          	lw	a3,24(sp)
   214e8:	02012903          	lw	s2,32(sp)
   214ec:	01075713          	srl	a4,a4,0x10
   214f0:	0117d793          	srl	a5,a5,0x11
   214f4:	f61ff06f          	j	21454 <__floatsitf+0xdc>
   214f8:	02000693          	li	a3,32
   214fc:	40c686b3          	sub	a3,a3,a2
   21500:	00d956b3          	srl	a3,s2,a3
   21504:	00d12e23          	sw	a3,28(sp)
   21508:	00100693          	li	a3,1
   2150c:	f95ff06f          	j	214a0 <__floatsitf+0x128>

00021510 <__extenddftf2>:
   21510:	01465793          	srl	a5,a2,0x14
   21514:	00c61713          	sll	a4,a2,0xc
   21518:	7ff7f793          	and	a5,a5,2047
   2151c:	fd010113          	add	sp,sp,-48
   21520:	00c75713          	srl	a4,a4,0xc
   21524:	00178693          	add	a3,a5,1
   21528:	02812423          	sw	s0,40(sp)
   2152c:	02912223          	sw	s1,36(sp)
   21530:	03212023          	sw	s2,32(sp)
   21534:	02112623          	sw	ra,44(sp)
   21538:	00b12823          	sw	a1,16(sp)
   2153c:	00e12a23          	sw	a4,20(sp)
   21540:	00012e23          	sw	zero,28(sp)
   21544:	00012c23          	sw	zero,24(sp)
   21548:	7fe6f693          	and	a3,a3,2046
   2154c:	00058413          	mv	s0,a1
   21550:	00050913          	mv	s2,a0
   21554:	01f65493          	srl	s1,a2,0x1f
   21558:	06068463          	beqz	a3,215c0 <__extenddftf2+0xb0>
   2155c:	00004637          	lui	a2,0x4
   21560:	01c71693          	sll	a3,a4,0x1c
   21564:	0045d593          	srl	a1,a1,0x4
   21568:	c0060613          	add	a2,a2,-1024 # 3c00 <OSFlagPend+0x150>
   2156c:	00b6e6b3          	or	a3,a3,a1
   21570:	01c41413          	sll	s0,s0,0x1c
   21574:	00475713          	srl	a4,a4,0x4
   21578:	00c787b3          	add	a5,a5,a2
   2157c:	00000513          	li	a0,0
   21580:	00f49613          	sll	a2,s1,0xf
   21584:	00c7e7b3          	or	a5,a5,a2
   21588:	00e11623          	sh	a4,12(sp)
   2158c:	00f11723          	sh	a5,14(sp)
   21590:	00c12783          	lw	a5,12(sp)
   21594:	00892223          	sw	s0,4(s2)
   21598:	02c12083          	lw	ra,44(sp)
   2159c:	02812403          	lw	s0,40(sp)
   215a0:	00a92023          	sw	a0,0(s2)
   215a4:	00d92423          	sw	a3,8(s2)
   215a8:	00f92623          	sw	a5,12(s2)
   215ac:	02412483          	lw	s1,36(sp)
   215b0:	00090513          	mv	a0,s2
   215b4:	02012903          	lw	s2,32(sp)
   215b8:	03010113          	add	sp,sp,48
   215bc:	00008067          	ret
   215c0:	00b76533          	or	a0,a4,a1
   215c4:	0a079663          	bnez	a5,21670 <__extenddftf2+0x160>
   215c8:	0e050663          	beqz	a0,216b4 <__extenddftf2+0x1a4>
   215cc:	0e070e63          	beqz	a4,216c8 <__extenddftf2+0x1b8>
   215d0:	00070513          	mv	a0,a4
   215d4:	638000ef          	jal	21c0c <__clzsi2>
   215d8:	03150793          	add	a5,a0,49
   215dc:	01f7f593          	and	a1,a5,31
   215e0:	4057d793          	sra	a5,a5,0x5
   215e4:	10059a63          	bnez	a1,216f8 <__extenddftf2+0x1e8>
   215e8:	40f006b3          	neg	a3,a5
   215ec:	00269693          	sll	a3,a3,0x2
   215f0:	01010613          	add	a2,sp,16
   215f4:	00d60733          	add	a4,a2,a3
   215f8:	00010893          	mv	a7,sp
   215fc:	40d006b3          	neg	a3,a3
   21600:	00c72803          	lw	a6,12(a4)
   21604:	00d705b3          	add	a1,a4,a3
   21608:	ffc70713          	add	a4,a4,-4
   2160c:	0105a623          	sw	a6,12(a1) # 8000c <__alt_data_end+0x36c2c>
   21610:	fee898e3          	bne	a7,a4,21600 <__extenddftf2+0xf0>
   21614:	fff78713          	add	a4,a5,-1
   21618:	00170793          	add	a5,a4,1
   2161c:	00279793          	sll	a5,a5,0x2
   21620:	00800693          	li	a3,8
   21624:	00060713          	mv	a4,a2
   21628:	00d7ea63          	bltu	a5,a3,2163c <__extenddftf2+0x12c>
   2162c:	00012823          	sw	zero,16(sp)
   21630:	00062223          	sw	zero,4(a2)
   21634:	ff878793          	add	a5,a5,-8
   21638:	01810713          	add	a4,sp,24
   2163c:	00400693          	li	a3,4
   21640:	00d7e463          	bltu	a5,a3,21648 <__extenddftf2+0x138>
   21644:	00072023          	sw	zero,0(a4)
   21648:	000047b7          	lui	a5,0x4
   2164c:	c0c78793          	add	a5,a5,-1012 # 3c0c <OSFlagPend+0x15c>
   21650:	40a787b3          	sub	a5,a5,a0
   21654:	01179793          	sll	a5,a5,0x11
   21658:	01012503          	lw	a0,16(sp)
   2165c:	01412403          	lw	s0,20(sp)
   21660:	01812683          	lw	a3,24(sp)
   21664:	01c15703          	lhu	a4,28(sp)
   21668:	0117d793          	srl	a5,a5,0x11
   2166c:	f15ff06f          	j	21580 <__extenddftf2+0x70>
   21670:	02050663          	beqz	a0,2169c <__extenddftf2+0x18c>
   21674:	000087b7          	lui	a5,0x8
   21678:	01c71693          	sll	a3,a4,0x1c
   2167c:	0045d613          	srl	a2,a1,0x4
   21680:	00475713          	srl	a4,a4,0x4
   21684:	00f76733          	or	a4,a4,a5
   21688:	00c6e6b3          	or	a3,a3,a2
   2168c:	01c59413          	sll	s0,a1,0x1c
   21690:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   21694:	00000513          	li	a0,0
   21698:	ee9ff06f          	j	21580 <__extenddftf2+0x70>
   2169c:	000087b7          	lui	a5,0x8
   216a0:	00000693          	li	a3,0
   216a4:	00000413          	li	s0,0
   216a8:	fff78793          	add	a5,a5,-1 # 7fff <OSTaskChangePrio+0x17f>
   216ac:	00000713          	li	a4,0
   216b0:	ed1ff06f          	j	21580 <__extenddftf2+0x70>
   216b4:	00000693          	li	a3,0
   216b8:	00000413          	li	s0,0
   216bc:	00000793          	li	a5,0
   216c0:	00000713          	li	a4,0
   216c4:	ebdff06f          	j	21580 <__extenddftf2+0x70>
   216c8:	544000ef          	jal	21c0c <__clzsi2>
   216cc:	05150793          	add	a5,a0,81
   216d0:	01f7f593          	and	a1,a5,31
   216d4:	02050513          	add	a0,a0,32
   216d8:	4057d793          	sra	a5,a5,0x5
   216dc:	f00586e3          	beqz	a1,215e8 <__extenddftf2+0xd8>
   216e0:	00200713          	li	a4,2
   216e4:	00e78a63          	beq	a5,a4,216f8 <__extenddftf2+0x1e8>
   216e8:	00200713          	li	a4,2
   216ec:	00300793          	li	a5,3
   216f0:	01010613          	add	a2,sp,16
   216f4:	04c0006f          	j	21740 <__extenddftf2+0x230>
   216f8:	40f008b3          	neg	a7,a5
   216fc:	00289893          	sll	a7,a7,0x2
   21700:	00c88713          	add	a4,a7,12
   21704:	02000e13          	li	t3,32
   21708:	01010613          	add	a2,sp,16
   2170c:	40be0e33          	sub	t3,t3,a1
   21710:	00e60733          	add	a4,a2,a4
   21714:	411008b3          	neg	a7,a7
   21718:	00072683          	lw	a3,0(a4)
   2171c:	ffc72803          	lw	a6,-4(a4)
   21720:	01170333          	add	t1,a4,a7
   21724:	00b696b3          	sll	a3,a3,a1
   21728:	01c85833          	srl	a6,a6,t3
   2172c:	0106e6b3          	or	a3,a3,a6
   21730:	00d32023          	sw	a3,0(t1)
   21734:	ffc70713          	add	a4,a4,-4
   21738:	fee610e3          	bne	a2,a4,21718 <__extenddftf2+0x208>
   2173c:	fff78713          	add	a4,a5,-1
   21740:	00279793          	sll	a5,a5,0x2
   21744:	02078793          	add	a5,a5,32
   21748:	002787b3          	add	a5,a5,sp
   2174c:	00b415b3          	sll	a1,s0,a1
   21750:	feb7a823          	sw	a1,-16(a5)
   21754:	ec5ff06f          	j	21618 <__extenddftf2+0x108>

00021758 <__trunctfdf2>:
   21758:	00c52583          	lw	a1,12(a0)
   2175c:	00852783          	lw	a5,8(a0)
   21760:	00052803          	lw	a6,0(a0)
   21764:	00452683          	lw	a3,4(a0)
   21768:	01059613          	sll	a2,a1,0x10
   2176c:	fe010113          	add	sp,sp,-32
   21770:	00159713          	sll	a4,a1,0x1
   21774:	01065613          	srl	a2,a2,0x10
   21778:	00f12423          	sw	a5,8(sp)
   2177c:	00b12623          	sw	a1,12(sp)
   21780:	00f12c23          	sw	a5,24(sp)
   21784:	01012023          	sw	a6,0(sp)
   21788:	00d12223          	sw	a3,4(sp)
   2178c:	01012823          	sw	a6,16(sp)
   21790:	00d12a23          	sw	a3,20(sp)
   21794:	00c12e23          	sw	a2,28(sp)
   21798:	01175713          	srl	a4,a4,0x11
   2179c:	01f5d593          	srl	a1,a1,0x1f
   217a0:	01010893          	add	a7,sp,16
   217a4:	01c10793          	add	a5,sp,28
   217a8:	00361513          	sll	a0,a2,0x3
   217ac:	ffc7a603          	lw	a2,-4(a5)
   217b0:	ffc78793          	add	a5,a5,-4
   217b4:	01d65693          	srl	a3,a2,0x1d
   217b8:	00a6e6b3          	or	a3,a3,a0
   217bc:	00d7a223          	sw	a3,4(a5)
   217c0:	fef894e3          	bne	a7,a5,217a8 <__trunctfdf2+0x50>
   217c4:	00170693          	add	a3,a4,1
   217c8:	00381813          	sll	a6,a6,0x3
   217cc:	01169613          	sll	a2,a3,0x11
   217d0:	01012823          	sw	a6,16(sp)
   217d4:	01265613          	srl	a2,a2,0x12
   217d8:	04060263          	beqz	a2,2181c <__trunctfdf2+0xc4>
   217dc:	ffffc6b7          	lui	a3,0xffffc
   217e0:	40068693          	add	a3,a3,1024 # ffffc400 <__alt_data_end+0xfffb3020>
   217e4:	00d70733          	add	a4,a4,a3
   217e8:	7fe00693          	li	a3,2046
   217ec:	10e6d463          	bge	a3,a4,218f4 <__trunctfdf2+0x19c>
   217f0:	7ff00793          	li	a5,2047
   217f4:	00000613          	li	a2,0
   217f8:	00000693          	li	a3,0
   217fc:	01479793          	sll	a5,a5,0x14
   21800:	01f59593          	sll	a1,a1,0x1f
   21804:	00c7e7b3          	or	a5,a5,a2
   21808:	00b7e7b3          	or	a5,a5,a1
   2180c:	00068513          	mv	a0,a3
   21810:	00078593          	mv	a1,a5
   21814:	02010113          	add	sp,sp,32
   21818:	00008067          	ret
   2181c:	01412603          	lw	a2,20(sp)
   21820:	01812883          	lw	a7,24(sp)
   21824:	01c12503          	lw	a0,28(sp)
   21828:	011666b3          	or	a3,a2,a7
   2182c:	00a6e6b3          	or	a3,a3,a0
   21830:	0106e6b3          	or	a3,a3,a6
   21834:	04071463          	bnez	a4,2187c <__trunctfdf2+0x124>
   21838:	14068263          	beqz	a3,2197c <__trunctfdf2+0x224>
   2183c:	00500693          	li	a3,5
   21840:	00000613          	li	a2,0
   21844:	0036d793          	srl	a5,a3,0x3
   21848:	01d61693          	sll	a3,a2,0x1d
   2184c:	00f6e6b3          	or	a3,a3,a5
   21850:	00961613          	sll	a2,a2,0x9
   21854:	7ff77793          	and	a5,a4,2047
   21858:	00c65613          	srl	a2,a2,0xc
   2185c:	01479793          	sll	a5,a5,0x14
   21860:	01f59593          	sll	a1,a1,0x1f
   21864:	00c7e7b3          	or	a5,a5,a2
   21868:	00b7e7b3          	or	a5,a5,a1
   2186c:	00068513          	mv	a0,a3
   21870:	00078593          	mv	a1,a5
   21874:	02010113          	add	sp,sp,32
   21878:	00008067          	ret
   2187c:	12068463          	beqz	a3,219a4 <__trunctfdf2+0x24c>
   21880:	01c8d793          	srl	a5,a7,0x1c
   21884:	00451513          	sll	a0,a0,0x4
   21888:	00a7e7b3          	or	a5,a5,a0
   2188c:	008006b7          	lui	a3,0x800
   21890:	00d7f6b3          	and	a3,a5,a3
   21894:	1c068263          	beqz	a3,21a58 <__trunctfdf2+0x300>
   21898:	ff800737          	lui	a4,0xff800
   2189c:	01c65693          	srl	a3,a2,0x1c
   218a0:	00489893          	sll	a7,a7,0x4
   218a4:	fff70713          	add	a4,a4,-1 # ff7fffff <__alt_data_end+0xff7b6c1f>
   218a8:	00e7f633          	and	a2,a5,a4
   218ac:	0116e6b3          	or	a3,a3,a7
   218b0:	004007b7          	lui	a5,0x400
   218b4:	00f66633          	or	a2,a2,a5
   218b8:	ff86f693          	and	a3,a3,-8
   218bc:	00000793          	li	a5,0
   218c0:	0036d713          	srl	a4,a3,0x3
   218c4:	01d61693          	sll	a3,a2,0x1d
   218c8:	00961613          	sll	a2,a2,0x9
   218cc:	00c65613          	srl	a2,a2,0xc
   218d0:	01479793          	sll	a5,a5,0x14
   218d4:	01f59593          	sll	a1,a1,0x1f
   218d8:	00c7e7b3          	or	a5,a5,a2
   218dc:	00e6e6b3          	or	a3,a3,a4
   218e0:	00b7e7b3          	or	a5,a5,a1
   218e4:	00068513          	mv	a0,a3
   218e8:	00078593          	mv	a1,a5
   218ec:	02010113          	add	sp,sp,32
   218f0:	00008067          	ret
   218f4:	0ce05c63          	blez	a4,219cc <__trunctfdf2+0x274>
   218f8:	01412783          	lw	a5,20(sp)
   218fc:	01812503          	lw	a0,24(sp)
   21900:	01c12603          	lw	a2,28(sp)
   21904:	00479693          	sll	a3,a5,0x4
   21908:	0106e6b3          	or	a3,a3,a6
   2190c:	01c7d793          	srl	a5,a5,0x1c
   21910:	00451813          	sll	a6,a0,0x4
   21914:	00461613          	sll	a2,a2,0x4
   21918:	01c55513          	srl	a0,a0,0x1c
   2191c:	00d036b3          	snez	a3,a3
   21920:	0107e7b3          	or	a5,a5,a6
   21924:	00a66633          	or	a2,a2,a0
   21928:	00f6e6b3          	or	a3,a3,a5
   2192c:	0076f793          	and	a5,a3,7
   21930:	02078063          	beqz	a5,21950 <__trunctfdf2+0x1f8>
   21934:	00f6f793          	and	a5,a3,15
   21938:	00400513          	li	a0,4
   2193c:	00a78a63          	beq	a5,a0,21950 <__trunctfdf2+0x1f8>
   21940:	00468793          	add	a5,a3,4 # 800004 <__alt_data_end+0x7b6c24>
   21944:	00d7b6b3          	sltu	a3,a5,a3
   21948:	00d60633          	add	a2,a2,a3
   2194c:	00078693          	mv	a3,a5
   21950:	008007b7          	lui	a5,0x800
   21954:	00f677b3          	and	a5,a2,a5
   21958:	ee0786e3          	beqz	a5,21844 <__trunctfdf2+0xec>
   2195c:	00170713          	add	a4,a4,1
   21960:	7ff00793          	li	a5,2047
   21964:	e8f706e3          	beq	a4,a5,217f0 <__trunctfdf2+0x98>
   21968:	ff8007b7          	lui	a5,0xff800
   2196c:	fff78793          	add	a5,a5,-1 # ff7fffff <__alt_data_end+0xff7b6c1f>
   21970:	00f67633          	and	a2,a2,a5
   21974:	7ff77793          	and	a5,a4,2047
   21978:	f49ff06f          	j	218c0 <__trunctfdf2+0x168>
   2197c:	00000793          	li	a5,0
   21980:	00000613          	li	a2,0
   21984:	01479793          	sll	a5,a5,0x14
   21988:	01f59593          	sll	a1,a1,0x1f
   2198c:	00c7e7b3          	or	a5,a5,a2
   21990:	00b7e7b3          	or	a5,a5,a1
   21994:	00068513          	mv	a0,a3
   21998:	00078593          	mv	a1,a5
   2199c:	02010113          	add	sp,sp,32
   219a0:	00008067          	ret
   219a4:	7ff00793          	li	a5,2047
   219a8:	00000613          	li	a2,0
   219ac:	01479793          	sll	a5,a5,0x14
   219b0:	01f59593          	sll	a1,a1,0x1f
   219b4:	00c7e7b3          	or	a5,a5,a2
   219b8:	00b7e7b3          	or	a5,a5,a1
   219bc:	00068513          	mv	a0,a3
   219c0:	00078593          	mv	a1,a5
   219c4:	02010113          	add	sp,sp,32
   219c8:	00008067          	ret
   219cc:	fcc00693          	li	a3,-52
   219d0:	08d74c63          	blt	a4,a3,21a68 <__trunctfdf2+0x310>
   219d4:	03d00693          	li	a3,61
   219d8:	40e686b3          	sub	a3,a3,a4
   219dc:	01c12703          	lw	a4,28(sp)
   219e0:	4056de13          	sra	t3,a3,0x5
   219e4:	00080eb7          	lui	t4,0x80
   219e8:	00eeeeb3          	or	t4,t4,a4
   219ec:	002e1513          	sll	a0,t3,0x2
   219f0:	01d12e23          	sw	t4,28(sp)
   219f4:	01f6f693          	and	a3,a3,31
   219f8:	00a88833          	add	a6,a7,a0
   219fc:	00088613          	mv	a2,a7
   21a00:	00000713          	li	a4,0
   21a04:	00062303          	lw	t1,0(a2)
   21a08:	00460613          	add	a2,a2,4
   21a0c:	00676733          	or	a4,a4,t1
   21a10:	fec81ae3          	bne	a6,a2,21a04 <__trunctfdf2+0x2ac>
   21a14:	00300613          	li	a2,3
   21a18:	41c60633          	sub	a2,a2,t3
   21a1c:	04069a63          	bnez	a3,21a70 <__trunctfdf2+0x318>
   21a20:	00082803          	lw	a6,0(a6)
   21a24:	00168693          	add	a3,a3,1
   21a28:	00478793          	add	a5,a5,4
   21a2c:	ff07ae23          	sw	a6,-4(a5)
   21a30:	00d64e63          	blt	a2,a3,21a4c <__trunctfdf2+0x2f4>
   21a34:	00a78833          	add	a6,a5,a0
   21a38:	00082803          	lw	a6,0(a6)
   21a3c:	00168693          	add	a3,a3,1
   21a40:	00478793          	add	a5,a5,4
   21a44:	ff07ae23          	sw	a6,-4(a5)
   21a48:	fed656e3          	bge	a2,a3,21a34 <__trunctfdf2+0x2dc>
   21a4c:	00400793          	li	a5,4
   21a50:	41c787b3          	sub	a5,a5,t3
   21a54:	0840006f          	j	21ad8 <__trunctfdf2+0x380>
   21a58:	00000593          	li	a1,0
   21a5c:	7ff00793          	li	a5,2047
   21a60:	00080637          	lui	a2,0x80
   21a64:	d99ff06f          	j	217fc <__trunctfdf2+0xa4>
   21a68:	00000713          	li	a4,0
   21a6c:	dd1ff06f          	j	2183c <__trunctfdf2+0xe4>
   21a70:	02050813          	add	a6,a0,32
   21a74:	00280833          	add	a6,a6,sp
   21a78:	ff082803          	lw	a6,-16(a6)
   21a7c:	02000f13          	li	t5,32
   21a80:	40df0f33          	sub	t5,t5,a3
   21a84:	01e81833          	sll	a6,a6,t5
   21a88:	01076733          	or	a4,a4,a6
   21a8c:	08060e63          	beqz	a2,21b28 <__trunctfdf2+0x3d0>
   21a90:	00261813          	sll	a6,a2,0x2
   21a94:	00f80fb3          	add	t6,a6,a5
   21a98:	00a88633          	add	a2,a7,a0
   21a9c:	00062503          	lw	a0,0(a2) # 80000 <__alt_data_end+0x36c20>
   21aa0:	00462303          	lw	t1,4(a2)
   21aa4:	00478793          	add	a5,a5,4
   21aa8:	00d55533          	srl	a0,a0,a3
   21aac:	01e31333          	sll	t1,t1,t5
   21ab0:	00656533          	or	a0,a0,t1
   21ab4:	fea7ae23          	sw	a0,-4(a5)
   21ab8:	00460613          	add	a2,a2,4
   21abc:	feff90e3          	bne	t6,a5,21a9c <__trunctfdf2+0x344>
   21ac0:	00400793          	li	a5,4
   21ac4:	41c787b3          	sub	a5,a5,t3
   21ac8:	02080613          	add	a2,a6,32
   21acc:	00260633          	add	a2,a2,sp
   21ad0:	00dedeb3          	srl	t4,t4,a3
   21ad4:	ffd62823          	sw	t4,-16(a2)
   21ad8:	00400693          	li	a3,4
   21adc:	40f686b3          	sub	a3,a3,a5
   21ae0:	00269693          	sll	a3,a3,0x2
   21ae4:	00279793          	sll	a5,a5,0x2
   21ae8:	00800613          	li	a2,8
   21aec:	00f888b3          	add	a7,a7,a5
   21af0:	00c6ea63          	bltu	a3,a2,21b04 <__trunctfdf2+0x3ac>
   21af4:	0008a023          	sw	zero,0(a7)
   21af8:	0008a223          	sw	zero,4(a7)
   21afc:	ff868693          	add	a3,a3,-8
   21b00:	00888893          	add	a7,a7,8
   21b04:	00400793          	li	a5,4
   21b08:	00f6e463          	bltu	a3,a5,21b10 <__trunctfdf2+0x3b8>
   21b0c:	0008a023          	sw	zero,0(a7)
   21b10:	01012783          	lw	a5,16(sp)
   21b14:	00e03733          	snez	a4,a4
   21b18:	01412603          	lw	a2,20(sp)
   21b1c:	00f766b3          	or	a3,a4,a5
   21b20:	00000713          	li	a4,0
   21b24:	e09ff06f          	j	2192c <__trunctfdf2+0x1d4>
   21b28:	00100793          	li	a5,1
   21b2c:	00000813          	li	a6,0
   21b30:	f99ff06f          	j	21ac8 <__trunctfdf2+0x370>

00021b34 <__mulsi3>:
   21b34:	00050613          	mv	a2,a0
   21b38:	00000513          	li	a0,0
   21b3c:	0015f693          	and	a3,a1,1
   21b40:	00068463          	beqz	a3,21b48 <__mulsi3+0x14>
   21b44:	00c50533          	add	a0,a0,a2
   21b48:	0015d593          	srl	a1,a1,0x1
   21b4c:	00161613          	sll	a2,a2,0x1
   21b50:	fe0596e3          	bnez	a1,21b3c <__mulsi3+0x8>
   21b54:	00008067          	ret

00021b58 <__divsi3>:
   21b58:	06054063          	bltz	a0,21bb8 <__umodsi3+0x10>
   21b5c:	0605c663          	bltz	a1,21bc8 <__umodsi3+0x20>

00021b60 <__hidden___udivsi3>:
   21b60:	00058613          	mv	a2,a1
   21b64:	00050593          	mv	a1,a0
   21b68:	fff00513          	li	a0,-1
   21b6c:	02060c63          	beqz	a2,21ba4 <__hidden___udivsi3+0x44>
   21b70:	00100693          	li	a3,1
   21b74:	00b67a63          	bgeu	a2,a1,21b88 <__hidden___udivsi3+0x28>
   21b78:	00c05863          	blez	a2,21b88 <__hidden___udivsi3+0x28>
   21b7c:	00161613          	sll	a2,a2,0x1
   21b80:	00169693          	sll	a3,a3,0x1
   21b84:	feb66ae3          	bltu	a2,a1,21b78 <__hidden___udivsi3+0x18>
   21b88:	00000513          	li	a0,0
   21b8c:	00c5e663          	bltu	a1,a2,21b98 <__hidden___udivsi3+0x38>
   21b90:	40c585b3          	sub	a1,a1,a2
   21b94:	00d56533          	or	a0,a0,a3
   21b98:	0016d693          	srl	a3,a3,0x1
   21b9c:	00165613          	srl	a2,a2,0x1
   21ba0:	fe0696e3          	bnez	a3,21b8c <__hidden___udivsi3+0x2c>
   21ba4:	00008067          	ret

00021ba8 <__umodsi3>:
   21ba8:	00008293          	mv	t0,ra
   21bac:	fb5ff0ef          	jal	21b60 <__hidden___udivsi3>
   21bb0:	00058513          	mv	a0,a1
   21bb4:	00028067          	jr	t0
   21bb8:	40a00533          	neg	a0,a0
   21bbc:	00b04863          	bgtz	a1,21bcc <__umodsi3+0x24>
   21bc0:	40b005b3          	neg	a1,a1
   21bc4:	f9dff06f          	j	21b60 <__hidden___udivsi3>
   21bc8:	40b005b3          	neg	a1,a1
   21bcc:	00008293          	mv	t0,ra
   21bd0:	f91ff0ef          	jal	21b60 <__hidden___udivsi3>
   21bd4:	40a00533          	neg	a0,a0
   21bd8:	00028067          	jr	t0

00021bdc <__modsi3>:
   21bdc:	00008293          	mv	t0,ra
   21be0:	0005ca63          	bltz	a1,21bf4 <__modsi3+0x18>
   21be4:	00054c63          	bltz	a0,21bfc <__modsi3+0x20>
   21be8:	f79ff0ef          	jal	21b60 <__hidden___udivsi3>
   21bec:	00058513          	mv	a0,a1
   21bf0:	00028067          	jr	t0
   21bf4:	40b005b3          	neg	a1,a1
   21bf8:	fe0558e3          	bgez	a0,21be8 <__modsi3+0xc>
   21bfc:	40a00533          	neg	a0,a0
   21c00:	f61ff0ef          	jal	21b60 <__hidden___udivsi3>
   21c04:	40b00533          	neg	a0,a1
   21c08:	00028067          	jr	t0

00021c0c <__clzsi2>:
   21c0c:	000107b7          	lui	a5,0x10
   21c10:	02f57a63          	bgeu	a0,a5,21c44 <__clzsi2+0x38>
   21c14:	10053713          	sltiu	a4,a0,256
   21c18:	00173713          	seqz	a4,a4
   21c1c:	00371713          	sll	a4,a4,0x3
   21c20:	000247b7          	lui	a5,0x24
   21c24:	00e55533          	srl	a0,a0,a4
   21c28:	e5078793          	add	a5,a5,-432 # 23e50 <__clz_tab>
   21c2c:	00a787b3          	add	a5,a5,a0
   21c30:	0007c503          	lbu	a0,0(a5)
   21c34:	02000693          	li	a3,32
   21c38:	40e686b3          	sub	a3,a3,a4
   21c3c:	40a68533          	sub	a0,a3,a0
   21c40:	00008067          	ret
   21c44:	010007b7          	lui	a5,0x1000
   21c48:	02f57463          	bgeu	a0,a5,21c70 <__clzsi2+0x64>
   21c4c:	01000713          	li	a4,16
   21c50:	000247b7          	lui	a5,0x24
   21c54:	00e55533          	srl	a0,a0,a4
   21c58:	e5078793          	add	a5,a5,-432 # 23e50 <__clz_tab>
   21c5c:	00a787b3          	add	a5,a5,a0
   21c60:	0007c503          	lbu	a0,0(a5)
   21c64:	01000693          	li	a3,16
   21c68:	40a68533          	sub	a0,a3,a0
   21c6c:	00008067          	ret
   21c70:	01800713          	li	a4,24
   21c74:	000247b7          	lui	a5,0x24
   21c78:	00e55533          	srl	a0,a0,a4
   21c7c:	e5078793          	add	a5,a5,-432 # 23e50 <__clz_tab>
   21c80:	00a787b3          	add	a5,a5,a0
   21c84:	0007c503          	lbu	a0,0(a5)
   21c88:	00800693          	li	a3,8
   21c8c:	40a68533          	sub	a0,a3,a0
   21c90:	00008067          	ret

00021c94 <alt_get_errno>:

  if (fd)
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
   21c94:	ff010113          	add	sp,sp,-16
   21c98:	00112623          	sw	ra,12(sp)
   21c9c:	00812423          	sw	s0,8(sp)
   21ca0:	01010413          	add	s0,sp,16
     */
   21ca4:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   21ca8:	00078a63          	beqz	a5,21cbc <alt_get_errno+0x28>
   21cac:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   21cb0:	000780e7          	jalr	a5
   21cb4:	00050793          	mv	a5,a0
   21cb8:	00c0006f          	j	21cc4 <alt_get_errno+0x30>
   21cbc:	000287b7          	lui	a5,0x28
   21cc0:	86078793          	add	a5,a5,-1952 # 27860 <errno>

   21cc4:	00078513          	mv	a0,a5
   21cc8:	00c12083          	lw	ra,12(sp)
   21ccc:	00812403          	lw	s0,8(sp)
   21cd0:	01010113          	add	sp,sp,16
   21cd4:	00008067          	ret

00021cd8 <_close>:
{
   21cd8:	fd010113          	add	sp,sp,-48
   21cdc:	02112623          	sw	ra,44(sp)
   21ce0:	02812423          	sw	s0,40(sp)
   21ce4:	03010413          	add	s0,sp,48
   21ce8:	fca42e23          	sw	a0,-36(s0)
  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   21cec:	fdc42783          	lw	a5,-36(s0)
   21cf0:	0207c463          	bltz	a5,21d18 <_close+0x40>
   21cf4:	fdc42703          	lw	a4,-36(s0)
   21cf8:	00070793          	mv	a5,a4
   21cfc:	00179793          	sll	a5,a5,0x1
   21d00:	00e787b3          	add	a5,a5,a4
   21d04:	00279793          	sll	a5,a5,0x2
   21d08:	00025737          	lui	a4,0x25
   21d0c:	08070713          	add	a4,a4,128 # 25080 <alt_fd_list>
   21d10:	00e787b3          	add	a5,a5,a4
   21d14:	0080006f          	j	21d1c <_close+0x44>
   21d18:	00000793          	li	a5,0
   21d1c:	fef42623          	sw	a5,-20(s0)
  if (fd)
   21d20:	fec42783          	lw	a5,-20(s0)
   21d24:	06078663          	beqz	a5,21d90 <_close+0xb8>
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   21d28:	fec42783          	lw	a5,-20(s0)
   21d2c:	0007a783          	lw	a5,0(a5)
   21d30:	0107a783          	lw	a5,16(a5)
   21d34:	02078063          	beqz	a5,21d54 <_close+0x7c>
   21d38:	fec42783          	lw	a5,-20(s0)
   21d3c:	0007a783          	lw	a5,0(a5)
   21d40:	0107a783          	lw	a5,16(a5)
   21d44:	fec42503          	lw	a0,-20(s0)
   21d48:	000780e7          	jalr	a5
   21d4c:	00050793          	mv	a5,a0
   21d50:	0080006f          	j	21d58 <_close+0x80>
   21d54:	00000793          	li	a5,0
   21d58:	fef42423          	sw	a5,-24(s0)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   21d5c:	fdc42503          	lw	a0,-36(s0)
   21d60:	fa4e90ef          	jal	b504 <alt_release_fd>
    if (rval < 0)
   21d64:	fe842783          	lw	a5,-24(s0)
   21d68:	0207d063          	bgez	a5,21d88 <_close+0xb0>
    {
      ALT_ERRNO = -rval;
   21d6c:	f29ff0ef          	jal	21c94 <alt_get_errno>
   21d70:	00050713          	mv	a4,a0
   21d74:	fe842783          	lw	a5,-24(s0)
   21d78:	40f007b3          	neg	a5,a5
   21d7c:	00f72023          	sw	a5,0(a4)
      return -1;
   21d80:	fff00793          	li	a5,-1
   21d84:	0200006f          	j	21da4 <_close+0xcc>
    }
    return 0;
   21d88:	00000793          	li	a5,0
   21d8c:	0180006f          	j	21da4 <_close+0xcc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   21d90:	f05ff0ef          	jal	21c94 <alt_get_errno>
   21d94:	00050713          	mv	a4,a0
   21d98:	05100793          	li	a5,81
   21d9c:	00f72023          	sw	a5,0(a4)
    return -1;
   21da0:	fff00793          	li	a5,-1
  }
}
   21da4:	00078513          	mv	a0,a5
   21da8:	02c12083          	lw	ra,44(sp)
   21dac:	02812403          	lw	s0,40(sp)
   21db0:	03010113          	add	sp,sp,48
   21db4:	00008067          	ret

00021db8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   21db8:	fd010113          	add	sp,sp,-48
   21dbc:	02812623          	sw	s0,44(sp)
   21dc0:	03010413          	add	s0,sp,48
   21dc4:	fca42e23          	sw	a0,-36(s0)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   21dc8:	000287b7          	lui	a5,0x28
   21dcc:	800789a3          	sb	zero,-2029(a5) # 27813 <OSRunning>
   21dd0:	fdc42783          	lw	a5,-36(s0)
   21dd4:	fef42623          	sw	a5,-20(s0)
 * Routine called on exit.
 * TODO: Add support for GMON/gprof.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int a0 asm ("a0") = exit_code;
   21dd8:	fec42503          	lw	a0,-20(s0)
    "ebreak" 
    : 
    : "r"(a0), "r"(a1));

#else /* !DEBUG_STUB */
  if (a0) {
   21ddc:	00050793          	mv	a5,a0
   21de0:	00078663          	beqz	a5,21dec <_exit+0x34>
    ALT_SIM_FAIL();
   21de4:	7c103013          	sltiu	zero,zero,1985
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   21de8:	0080006f          	j	21df0 <_exit+0x38>
    ALT_SIM_PASS();
   21dec:	7c203013          	sltiu	zero,zero,1986
}
   21df0:	00000013          	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   21df4:	00000013          	nop
   21df8:	ffdff06f          	j	21df4 <_exit+0x3c>

00021dfc <alt_get_errno>:
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        st->st_mode = _IFCHR;
        return 0;
#endif /* ALT_STDERR_PRESENT */        
    default:
   21dfc:	ff010113          	add	sp,sp,-16
   21e00:	00112623          	sw	ra,12(sp)
   21e04:	00812423          	sw	s0,8(sp)
   21e08:	01010413          	add	s0,sp,16
        return -1;
   21e0c:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   21e10:	00078a63          	beqz	a5,21e24 <alt_get_errno+0x28>
   21e14:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   21e18:	000780e7          	jalr	a5
   21e1c:	00050793          	mv	a5,a0
   21e20:	00c0006f          	j	21e2c <alt_get_errno+0x30>
   21e24:	000287b7          	lui	a5,0x28
   21e28:	86078793          	add	a5,a5,-1952 # 27860 <errno>
    }
   21e2c:	00078513          	mv	a0,a5
   21e30:	00c12083          	lw	ra,12(sp)
   21e34:	00812403          	lw	s0,8(sp)
   21e38:	01010113          	add	sp,sp,16
   21e3c:	00008067          	ret

00021e40 <_fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   21e40:	fd010113          	add	sp,sp,-48
   21e44:	02112623          	sw	ra,44(sp)
   21e48:	02812423          	sw	s0,40(sp)
   21e4c:	03010413          	add	s0,sp,48
   21e50:	fca42e23          	sw	a0,-36(s0)
   21e54:	fcb42c23          	sw	a1,-40(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   21e58:	fdc42783          	lw	a5,-36(s0)
   21e5c:	0207c463          	bltz	a5,21e84 <_fstat+0x44>
   21e60:	fdc42703          	lw	a4,-36(s0)
   21e64:	00070793          	mv	a5,a4
   21e68:	00179793          	sll	a5,a5,0x1
   21e6c:	00e787b3          	add	a5,a5,a4
   21e70:	00279793          	sll	a5,a5,0x2
   21e74:	00025737          	lui	a4,0x25
   21e78:	08070713          	add	a4,a4,128 # 25080 <alt_fd_list>
   21e7c:	00e787b3          	add	a5,a5,a4
   21e80:	0080006f          	j	21e88 <_fstat+0x48>
   21e84:	00000793          	li	a5,0
   21e88:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
   21e8c:	fec42783          	lw	a5,-20(s0)
   21e90:	04078463          	beqz	a5,21ed8 <_fstat+0x98>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   21e94:	fec42783          	lw	a5,-20(s0)
   21e98:	0007a783          	lw	a5,0(a5)
   21e9c:	0207a783          	lw	a5,32(a5)
   21ea0:	02078263          	beqz	a5,21ec4 <_fstat+0x84>
    {
      return fd->dev->fstat(fd, st);
   21ea4:	fec42783          	lw	a5,-20(s0)
   21ea8:	0007a783          	lw	a5,0(a5)
   21eac:	0207a783          	lw	a5,32(a5)
   21eb0:	fd842583          	lw	a1,-40(s0)
   21eb4:	fec42503          	lw	a0,-20(s0)
   21eb8:	000780e7          	jalr	a5
   21ebc:	00050793          	mv	a5,a0
   21ec0:	02c0006f          	j	21eec <_fstat+0xac>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   21ec4:	fd842783          	lw	a5,-40(s0)
   21ec8:	00002737          	lui	a4,0x2
   21ecc:	00e7a223          	sw	a4,4(a5)
      return 0;
   21ed0:	00000793          	li	a5,0
   21ed4:	0180006f          	j	21eec <_fstat+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   21ed8:	f25ff0ef          	jal	21dfc <alt_get_errno>
   21edc:	00050713          	mv	a4,a0
   21ee0:	05100793          	li	a5,81
   21ee4:	00f72023          	sw	a5,0(a4) # 2000 <OS_EventTaskWaitMulti+0xd0>
    return -1;
   21ee8:	fff00793          	li	a5,-1
  }
}
   21eec:	00078513          	mv	a0,a5
   21ef0:	02c12083          	lw	ra,44(sp)
   21ef4:	02812403          	lw	s0,40(sp)
   21ef8:	03010113          	add	sp,sp,48
   21efc:	00008067          	ret

00021f00 <_getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   21f00:	ff010113          	add	sp,sp,-16
   21f04:	00812623          	sw	s0,12(sp)
   21f08:	01010413          	add	s0,sp,16
  return 0;
   21f0c:	00000793          	li	a5,0
}
   21f10:	00078513          	mv	a0,a5
   21f14:	00c12403          	lw	s0,12(sp)
   21f18:	01010113          	add	sp,sp,16
   21f1c:	00008067          	ret

00021f20 <alt_get_errno>:
/*
 * isatty() can be used to determine whether the input file descriptor "file" 
 * refers to a terminal device or not. If it is a terminal device then the
 * return value is one, otherwise it is zero.  
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
   21f20:	ff010113          	add	sp,sp,-16
   21f24:	00112623          	sw	ra,12(sp)
   21f28:	00812423          	sw	s0,8(sp)
   21f2c:	01010413          	add	s0,sp,16
 */
   21f30:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   21f34:	00078a63          	beqz	a5,21f48 <alt_get_errno+0x28>
   21f38:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   21f3c:	000780e7          	jalr	a5
   21f40:	00050793          	mv	a5,a0
   21f44:	00c0006f          	j	21f50 <alt_get_errno+0x30>
   21f48:	000287b7          	lui	a5,0x28
   21f4c:	86078793          	add	a5,a5,-1952 # 27860 <errno>
 
   21f50:	00078513          	mv	a0,a5
   21f54:	00c12083          	lw	ra,12(sp)
   21f58:	00812403          	lw	s0,8(sp)
   21f5c:	01010113          	add	sp,sp,16
   21f60:	00008067          	ret

00021f64 <_isatty>:
int ALT_ISATTY (int file)
{
   21f64:	f8010113          	add	sp,sp,-128
   21f68:	06112e23          	sw	ra,124(sp)
   21f6c:	06812c23          	sw	s0,120(sp)
   21f70:	08010413          	add	s0,sp,128
   21f74:	f8a42623          	sw	a0,-116(s0)
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
   21f78:	f8042a23          	sw	zero,-108(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   21f7c:	f8c42783          	lw	a5,-116(s0)
   21f80:	0207c463          	bltz	a5,21fa8 <_isatty+0x44>
   21f84:	f8c42703          	lw	a4,-116(s0)
   21f88:	00070793          	mv	a5,a4
   21f8c:	00179793          	sll	a5,a5,0x1
   21f90:	00e787b3          	add	a5,a5,a4
   21f94:	00279793          	sll	a5,a5,0x2
   21f98:	00025737          	lui	a4,0x25
   21f9c:	08070713          	add	a4,a4,128 # 25080 <alt_fd_list>
   21fa0:	00e787b3          	add	a5,a5,a4
   21fa4:	0080006f          	j	21fac <_isatty+0x48>
   21fa8:	00000793          	li	a5,0
   21fac:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
   21fb0:	fec42783          	lw	a5,-20(s0)
   21fb4:	04078a63          	beqz	a5,22008 <_isatty+0xa4>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   21fb8:	fec42783          	lw	a5,-20(s0)
   21fbc:	0007a783          	lw	a5,0(a5)
   21fc0:	0207a783          	lw	a5,32(a5)
   21fc4:	00079663          	bnez	a5,21fd0 <_isatty+0x6c>
    {
      return 1;
   21fc8:	00100793          	li	a5,1
   21fcc:	0500006f          	j	2201c <_isatty+0xb8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      if (fstat (file, &stat) < 0)
   21fd0:	f9040793          	add	a5,s0,-112
   21fd4:	00078593          	mv	a1,a5
   21fd8:	f8c42503          	lw	a0,-116(s0)
   21fdc:	3e5000ef          	jal	22bc0 <fstat>
   21fe0:	00050793          	mv	a5,a0
   21fe4:	0007d663          	bgez	a5,21ff0 <_isatty+0x8c>
        return 0;  // fstat will set ERRNO
   21fe8:	00000793          	li	a5,0
   21fec:	0300006f          	j	2201c <_isatty+0xb8>
      else
        return (stat.st_mode == _IFCHR) ? 1 : 0;
   21ff0:	f9442703          	lw	a4,-108(s0)
   21ff4:	ffffe7b7          	lui	a5,0xffffe
   21ff8:	00f707b3          	add	a5,a4,a5
   21ffc:	0017b793          	seqz	a5,a5
   22000:	0ff7f793          	zext.b	a5,a5
   22004:	0180006f          	j	2201c <_isatty+0xb8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22008:	f19ff0ef          	jal	21f20 <alt_get_errno>
   2200c:	00050713          	mv	a4,a0
   22010:	05100793          	li	a5,81
   22014:	00f72023          	sw	a5,0(a4)
    return 0;
   22018:	00000793          	li	a5,0
  }
}
   2201c:	00078513          	mv	a0,a5
   22020:	07c12083          	lw	ra,124(sp)
   22024:	07812403          	lw	s0,120(sp)
   22028:	08010113          	add	sp,sp,128
   2202c:	00008067          	ret

00022030 <alt_get_errno>:
    case SIGPROF:
    case SIGSYS:
    case SIGTRAP:
    case SIGVTALRM:
    case SIGXCPU:
    case SIGXFSZ:
   22030:	ff010113          	add	sp,sp,-16
   22034:	00112623          	sw	ra,12(sp)
   22038:	00812423          	sw	s0,8(sp)
   2203c:	01010413          	add	s0,sp,16

   22040:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   22044:	00078a63          	beqz	a5,22058 <alt_get_errno+0x28>
   22048:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   2204c:	000780e7          	jalr	a5 # ffffe000 <__alt_data_end+0xfffb4c20>
   22050:	00050793          	mv	a5,a0
   22054:	00c0006f          	j	22060 <alt_get_errno+0x30>
   22058:	000287b7          	lui	a5,0x28
   2205c:	86078793          	add	a5,a5,-1952 # 27860 <errno>
      /* 
   22060:	00078513          	mv	a0,a5
   22064:	00c12083          	lw	ra,12(sp)
   22068:	00812403          	lw	s0,8(sp)
   2206c:	01010113          	add	sp,sp,16
   22070:	00008067          	ret

00022074 <_kill>:
{
   22074:	fd010113          	add	sp,sp,-48
   22078:	02112623          	sw	ra,44(sp)
   2207c:	02812423          	sw	s0,40(sp)
   22080:	03010413          	add	s0,sp,48
   22084:	fca42e23          	sw	a0,-36(s0)
   22088:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
   2208c:	fe042623          	sw	zero,-20(s0)
  if (pid <= 0)
   22090:	fdc42783          	lw	a5,-36(s0)
   22094:	06f04e63          	bgtz	a5,22110 <_kill+0x9c>
    switch (sig)
   22098:	fd842783          	lw	a5,-40(s0)
   2209c:	08078463          	beqz	a5,22124 <_kill+0xb0>
   220a0:	fd842783          	lw	a5,-40(s0)
   220a4:	0607c063          	bltz	a5,22104 <_kill+0x90>
   220a8:	fd842703          	lw	a4,-40(s0)
   220ac:	01f00793          	li	a5,31
   220b0:	04e7ca63          	blt	a5,a4,22104 <_kill+0x90>
   220b4:	fd842703          	lw	a4,-40(s0)
   220b8:	00300793          	li	a5,3
   220bc:	04f74463          	blt	a4,a5,22104 <_kill+0x90>
   220c0:	fd842783          	lw	a5,-40(s0)
   220c4:	00100713          	li	a4,1
   220c8:	00f717b3          	sll	a5,a4,a5
   220cc:	cf810737          	lui	a4,0xcf810
   220d0:	f7870713          	add	a4,a4,-136 # cf80ff78 <__alt_data_end+0xcf7c6b98>
   220d4:	00e7f733          	and	a4,a5,a4
   220d8:	00e03733          	snez	a4,a4
   220dc:	0ff77713          	zext.b	a4,a4
   220e0:	00071e63          	bnez	a4,220fc <_kill+0x88>
   220e4:	00110737          	lui	a4,0x110
   220e8:	00e7f7b3          	and	a5,a5,a4
   220ec:	00f037b3          	snez	a5,a5
   220f0:	0ff7f793          	zext.b	a5,a5
   220f4:	02079c63          	bnez	a5,2212c <_kill+0xb8>
   220f8:	00c0006f          	j	22104 <_kill+0x90>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   220fc:	00000513          	li	a0,0
   22100:	cb9ff0ef          	jal	21db8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   22104:	01600793          	li	a5,22
   22108:	fef42623          	sw	a5,-20(s0)
   2210c:	0240006f          	j	22130 <_kill+0xbc>
    }
  }

  else if (pid > 0)
   22110:	fdc42783          	lw	a5,-36(s0)
   22114:	00f05e63          	blez	a5,22130 <_kill+0xbc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   22118:	00300793          	li	a5,3
   2211c:	fef42623          	sw	a5,-20(s0)
   22120:	0100006f          	j	22130 <_kill+0xbc>
      break;
   22124:	00000013          	nop
   22128:	0080006f          	j	22130 <_kill+0xbc>
      break;
   2212c:	00000013          	nop
  }

  if (status)
   22130:	fec42783          	lw	a5,-20(s0)
   22134:	00078e63          	beqz	a5,22150 <_kill+0xdc>
  {
    ALT_ERRNO = status;
   22138:	ef9ff0ef          	jal	22030 <alt_get_errno>
   2213c:	00050713          	mv	a4,a0
   22140:	fec42783          	lw	a5,-20(s0)
   22144:	00f72023          	sw	a5,0(a4) # 110000 <__alt_data_end+0xc6c20>
    return -1;
   22148:	fff00793          	li	a5,-1
   2214c:	0080006f          	j	22154 <_kill+0xe0>
  }

  return 0;
   22150:	00000793          	li	a5,0
}
   22154:	00078513          	mv	a0,a5
   22158:	02c12083          	lw	ra,44(sp)
   2215c:	02812403          	lw	s0,40(sp)
   22160:	03010113          	add	sp,sp,48
   22164:	00008067          	ret

00022168 <alt_get_errno>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22168:	ff010113          	add	sp,sp,-16
   2216c:	00112623          	sw	ra,12(sp)
   22170:	00812423          	sw	s0,8(sp)
   22174:	01010413          	add	s0,sp,16
  
   22178:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   2217c:	00078a63          	beqz	a5,22190 <alt_get_errno+0x28>
   22180:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   22184:	000780e7          	jalr	a5
   22188:	00050793          	mv	a5,a0
   2218c:	00c0006f          	j	22198 <alt_get_errno+0x30>
   22190:	000287b7          	lui	a5,0x28
   22194:	86078793          	add	a5,a5,-1952 # 27860 <errno>
  if (fd) 
   22198:	00078513          	mv	a0,a5
   2219c:	00c12083          	lw	ra,12(sp)
   221a0:	00812403          	lw	s0,8(sp)
   221a4:	01010113          	add	sp,sp,16
   221a8:	00008067          	ret

000221ac <_lseek>:
{
   221ac:	fd010113          	add	sp,sp,-48
   221b0:	02112623          	sw	ra,44(sp)
   221b4:	02812423          	sw	s0,40(sp)
   221b8:	03010413          	add	s0,sp,48
   221bc:	fca42e23          	sw	a0,-36(s0)
   221c0:	fcb42c23          	sw	a1,-40(s0)
   221c4:	fcc42a23          	sw	a2,-44(s0)
  off_t   rc = 0; 
   221c8:	fe042623          	sw	zero,-20(s0)
  fd = (file < 0) ? NULL : &alt_fd_list[file];
   221cc:	fdc42783          	lw	a5,-36(s0)
   221d0:	0207c463          	bltz	a5,221f8 <_lseek+0x4c>
   221d4:	fdc42703          	lw	a4,-36(s0)
   221d8:	00070793          	mv	a5,a4
   221dc:	00179793          	sll	a5,a5,0x1
   221e0:	00e787b3          	add	a5,a5,a4
   221e4:	00279793          	sll	a5,a5,0x2
   221e8:	00025737          	lui	a4,0x25
   221ec:	08070713          	add	a4,a4,128 # 25080 <alt_fd_list>
   221f0:	00e787b3          	add	a5,a5,a4
   221f4:	0080006f          	j	221fc <_lseek+0x50>
   221f8:	00000793          	li	a5,0
   221fc:	fef42423          	sw	a5,-24(s0)
  if (fd) 
   22200:	fe842783          	lw	a5,-24(s0)
   22204:	04078263          	beqz	a5,22248 <_lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   22208:	fe842783          	lw	a5,-24(s0)
   2220c:	0007a783          	lw	a5,0(a5)
   22210:	01c7a783          	lw	a5,28(a5)
   22214:	02078463          	beqz	a5,2223c <_lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   22218:	fe842783          	lw	a5,-24(s0)
   2221c:	0007a783          	lw	a5,0(a5)
   22220:	01c7a783          	lw	a5,28(a5)
   22224:	fd442603          	lw	a2,-44(s0)
   22228:	fd842583          	lw	a1,-40(s0)
   2222c:	fe842503          	lw	a0,-24(s0)
   22230:	000780e7          	jalr	a5
   22234:	fea42623          	sw	a0,-20(s0)
   22238:	0180006f          	j	22250 <_lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2223c:	f7a00793          	li	a5,-134
   22240:	fef42623          	sw	a5,-20(s0)
   22244:	00c0006f          	j	22250 <_lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   22248:	faf00793          	li	a5,-81
   2224c:	fef42623          	sw	a5,-20(s0)
  }

  if (rc < 0)
   22250:	fec42783          	lw	a5,-20(s0)
   22254:	0207d063          	bgez	a5,22274 <_lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   22258:	f11ff0ef          	jal	22168 <alt_get_errno>
   2225c:	00050713          	mv	a4,a0
   22260:	fec42783          	lw	a5,-20(s0)
   22264:	40f007b3          	neg	a5,a5
   22268:	00f72023          	sw	a5,0(a4)
    rc = -1;
   2226c:	fff00793          	li	a5,-1
   22270:	fef42623          	sw	a5,-20(s0)
  }

  return rc;
   22274:	fec42783          	lw	a5,-20(s0)
}
   22278:	00078513          	mv	a0,a5
   2227c:	02c12083          	lw	ra,44(sp)
   22280:	02812403          	lw	s0,40(sp)
   22284:	03010113          	add	sp,sp,48
   22288:	00008067          	ret

0002228c <alt_get_errno>:
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2228c:	ff010113          	add	sp,sp,-16
   22290:	00112623          	sw	ra,12(sp)
   22294:	00812423          	sw	s0,8(sp)
   22298:	01010413          	add	s0,sp,16
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2229c:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   222a0:	00078a63          	beqz	a5,222b4 <alt_get_errno+0x28>
   222a4:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   222a8:	000780e7          	jalr	a5
   222ac:	00050793          	mv	a5,a0
   222b0:	00c0006f          	j	222bc <alt_get_errno+0x30>
   222b4:	000287b7          	lui	a5,0x28
   222b8:	86078793          	add	a5,a5,-1952 # 27860 <errno>
        (&alt_fd_list[i] != fd))
   222bc:	00078513          	mv	a0,a5
   222c0:	00c12083          	lw	ra,12(sp)
   222c4:	00812403          	lw	s0,8(sp)
   222c8:	01010113          	add	sp,sp,16
   222cc:	00008067          	ret

000222d0 <alt_file_locked>:
{
   222d0:	fd010113          	add	sp,sp,-48
   222d4:	02812623          	sw	s0,44(sp)
   222d8:	03010413          	add	s0,sp,48
   222dc:	fca42e23          	sw	a0,-36(s0)
  fd->fd_flags |= ALT_FD_DEV;
   222e0:	fdc42783          	lw	a5,-36(s0)
   222e4:	0087a703          	lw	a4,8(a5)
   222e8:	400007b7          	lui	a5,0x40000
   222ec:	00f76733          	or	a4,a4,a5
   222f0:	fdc42783          	lw	a5,-36(s0)
   222f4:	00e7a423          	sw	a4,8(a5) # 40000008 <__alt_data_end+0x3ffb6c28>
  for (i = 0; i <= alt_max_fd; i++)
   222f8:	fe042623          	sw	zero,-20(s0)
   222fc:	0980006f          	j	22394 <alt_file_locked+0xc4>
    if ((alt_fd_list[i].dev == fd->dev) &&
   22300:	000257b7          	lui	a5,0x25
   22304:	08078693          	add	a3,a5,128 # 25080 <alt_fd_list>
   22308:	fec42703          	lw	a4,-20(s0)
   2230c:	00070793          	mv	a5,a4
   22310:	00179793          	sll	a5,a5,0x1
   22314:	00e787b3          	add	a5,a5,a4
   22318:	00279793          	sll	a5,a5,0x2
   2231c:	00f687b3          	add	a5,a3,a5
   22320:	0007a703          	lw	a4,0(a5)
   22324:	fdc42783          	lw	a5,-36(s0)
   22328:	0007a783          	lw	a5,0(a5)
   2232c:	04f71e63          	bne	a4,a5,22388 <alt_file_locked+0xb8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22330:	000257b7          	lui	a5,0x25
   22334:	08078693          	add	a3,a5,128 # 25080 <alt_fd_list>
   22338:	fec42703          	lw	a4,-20(s0)
   2233c:	00070793          	mv	a5,a4
   22340:	00179793          	sll	a5,a5,0x1
   22344:	00e787b3          	add	a5,a5,a4
   22348:	00279793          	sll	a5,a5,0x2
   2234c:	00f687b3          	add	a5,a3,a5
   22350:	0087a783          	lw	a5,8(a5)
    if ((alt_fd_list[i].dev == fd->dev) &&
   22354:	0207da63          	bgez	a5,22388 <alt_file_locked+0xb8>
        (&alt_fd_list[i] != fd))
   22358:	fec42703          	lw	a4,-20(s0)
   2235c:	00070793          	mv	a5,a4
   22360:	00179793          	sll	a5,a5,0x1
   22364:	00e787b3          	add	a5,a5,a4
   22368:	00279793          	sll	a5,a5,0x2
   2236c:	00025737          	lui	a4,0x25
   22370:	08070713          	add	a4,a4,128 # 25080 <alt_fd_list>
   22374:	00e787b3          	add	a5,a5,a4
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22378:	fdc42703          	lw	a4,-36(s0)
   2237c:	00f70663          	beq	a4,a5,22388 <alt_file_locked+0xb8>
    {
      return -EACCES;
   22380:	ff300793          	li	a5,-13
   22384:	0240006f          	j	223a8 <alt_file_locked+0xd8>
  for (i = 0; i <= alt_max_fd; i++)
   22388:	fec42783          	lw	a5,-20(s0)
   2238c:	00178793          	add	a5,a5,1
   22390:	fef42623          	sw	a5,-20(s0)
   22394:	8181a783          	lw	a5,-2024(gp) # 25bb4 <alt_max_fd>
   22398:	00078713          	mv	a4,a5
   2239c:	fec42783          	lw	a5,-20(s0)
   223a0:	f6f770e3          	bgeu	a4,a5,22300 <alt_file_locked+0x30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   223a4:	00000793          	li	a5,0
}
   223a8:	00078513          	mv	a0,a5
   223ac:	02c12403          	lw	s0,44(sp)
   223b0:	03010113          	add	sp,sp,48
   223b4:	00008067          	ret

000223b8 <_open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   223b8:	fc010113          	add	sp,sp,-64
   223bc:	02112e23          	sw	ra,60(sp)
   223c0:	02812c23          	sw	s0,56(sp)
   223c4:	04010413          	add	s0,sp,64
   223c8:	fca42623          	sw	a0,-52(s0)
   223cc:	fcb42423          	sw	a1,-56(s0)
   223d0:	fcc42223          	sw	a2,-60(s0)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   223d4:	fff00793          	li	a5,-1
   223d8:	fef42423          	sw	a5,-24(s0)
  int status = -ENODEV;
   223dc:	fed00793          	li	a5,-19
   223e0:	fef42223          	sw	a5,-28(s0)
  int isafs = 0;
   223e4:	fe042023          	sw	zero,-32(s0)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   223e8:	81018593          	add	a1,gp,-2032 # 25bac <alt_dev_list>
   223ec:	fcc42503          	lw	a0,-52(s0)
   223f0:	474000ef          	jal	22864 <alt_find_dev>
   223f4:	fea42623          	sw	a0,-20(s0)
   223f8:	fec42783          	lw	a5,-20(s0)
   223fc:	00079c63          	bnez	a5,22414 <_open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   22400:	fcc42503          	lw	a0,-52(s0)
   22404:	580000ef          	jal	22984 <alt_find_file>
   22408:	fea42623          	sw	a0,-20(s0)
    isafs = 1;
   2240c:	00100793          	li	a5,1
   22410:	fef42023          	sw	a5,-32(s0)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   22414:	fec42783          	lw	a5,-20(s0)
   22418:	0a078c63          	beqz	a5,224d0 <_open+0x118>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2241c:	fec42503          	lw	a0,-20(s0)
   22420:	6a0000ef          	jal	22ac0 <alt_get_fd>
   22424:	fea42423          	sw	a0,-24(s0)
   22428:	fe842783          	lw	a5,-24(s0)
   2242c:	0007d863          	bgez	a5,2243c <_open+0x84>
    {
      status = index;
   22430:	fe842783          	lw	a5,-24(s0)
   22434:	fef42223          	sw	a5,-28(s0)
   22438:	0a00006f          	j	224d8 <_open+0x120>
    }
    else
    {
      fd = &alt_fd_list[index];
   2243c:	fe842703          	lw	a4,-24(s0)
   22440:	00070793          	mv	a5,a4
   22444:	00179793          	sll	a5,a5,0x1
   22448:	00e787b3          	add	a5,a5,a4
   2244c:	00279793          	sll	a5,a5,0x2
   22450:	00025737          	lui	a4,0x25
   22454:	08070713          	add	a4,a4,128 # 25080 <alt_fd_list>
   22458:	00e787b3          	add	a5,a5,a4
   2245c:	fcf42e23          	sw	a5,-36(s0)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22460:	fc842703          	lw	a4,-56(s0)
   22464:	400007b7          	lui	a5,0x40000
   22468:	fff78793          	add	a5,a5,-1 # 3fffffff <__alt_data_end+0x3ffb6c1f>
   2246c:	00f77733          	and	a4,a4,a5
   22470:	fdc42783          	lw	a5,-36(s0)
   22474:	00e7a423          	sw	a4,8(a5)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   22478:	fe042783          	lw	a5,-32(s0)
   2247c:	00079c63          	bnez	a5,22494 <_open+0xdc>
   22480:	fdc42503          	lw	a0,-36(s0)
   22484:	e4dff0ef          	jal	222d0 <alt_file_locked>
   22488:	fea42223          	sw	a0,-28(s0)
   2248c:	fe442783          	lw	a5,-28(s0)
   22490:	0407c463          	bltz	a5,224d8 <_open+0x120>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22494:	fec42783          	lw	a5,-20(s0)
   22498:	00c7a783          	lw	a5,12(a5)
   2249c:	02078463          	beqz	a5,224c4 <_open+0x10c>
   224a0:	fec42783          	lw	a5,-20(s0)
   224a4:	00c7a783          	lw	a5,12(a5)
   224a8:	fc442683          	lw	a3,-60(s0)
   224ac:	fc842603          	lw	a2,-56(s0)
   224b0:	fcc42583          	lw	a1,-52(s0)
   224b4:	fdc42503          	lw	a0,-36(s0)
   224b8:	000780e7          	jalr	a5
   224bc:	00050793          	mv	a5,a0
   224c0:	0080006f          	j	224c8 <_open+0x110>
   224c4:	00000793          	li	a5,0
   224c8:	fef42223          	sw	a5,-28(s0)
   224cc:	00c0006f          	j	224d8 <_open+0x120>
      }
    }
  }
  else
  {
    status = -ENODEV;
   224d0:	fed00793          	li	a5,-19
   224d4:	fef42223          	sw	a5,-28(s0)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   224d8:	fe442783          	lw	a5,-28(s0)
   224dc:	0207d463          	bgez	a5,22504 <_open+0x14c>
  {
    alt_release_fd (index);  
   224e0:	fe842503          	lw	a0,-24(s0)
   224e4:	820e90ef          	jal	b504 <alt_release_fd>
    ALT_ERRNO = -status;
   224e8:	da5ff0ef          	jal	2228c <alt_get_errno>
   224ec:	00050713          	mv	a4,a0
   224f0:	fe442783          	lw	a5,-28(s0)
   224f4:	40f007b3          	neg	a5,a5
   224f8:	00f72023          	sw	a5,0(a4)
    return -1;
   224fc:	fff00793          	li	a5,-1
   22500:	0080006f          	j	22508 <_open+0x150>
  }
  
  /* return the reference upon success */

  return index;
   22504:	fe842783          	lw	a5,-24(s0)
}
   22508:	00078513          	mv	a0,a5
   2250c:	03c12083          	lw	ra,60(sp)
   22510:	03812403          	lw	s0,56(sp)
   22514:	04010113          	add	sp,sp,64
   22518:	00008067          	ret

0002251c <alt_get_errno>:
        return -1;
    }
}

#else /* !ALT_USE_DIRECT_DRIVERS */

   2251c:	ff010113          	add	sp,sp,-16
   22520:	00112623          	sw	ra,12(sp)
   22524:	00812423          	sw	s0,8(sp)
   22528:	01010413          	add	s0,sp,16
int ALT_READ (int file, void *ptr, size_t len)
   2252c:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   22530:	00078a63          	beqz	a5,22544 <alt_get_errno+0x28>
   22534:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   22538:	000780e7          	jalr	a5
   2253c:	00050793          	mv	a5,a0
   22540:	00c0006f          	j	2254c <alt_get_errno+0x30>
   22544:	000287b7          	lui	a5,0x28
   22548:	86078793          	add	a5,a5,-1952 # 27860 <errno>
{
   2254c:	00078513          	mv	a0,a5
   22550:	00c12083          	lw	ra,12(sp)
   22554:	00812403          	lw	s0,8(sp)
   22558:	01010113          	add	sp,sp,16
   2255c:	00008067          	ret

00022560 <_read>:
   22560:	fd010113          	add	sp,sp,-48
   22564:	02112623          	sw	ra,44(sp)
   22568:	02812423          	sw	s0,40(sp)
   2256c:	03010413          	add	s0,sp,48
   22570:	fca42e23          	sw	a0,-36(s0)
   22574:	fcb42c23          	sw	a1,-40(s0)
   22578:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2257c:	fdc42783          	lw	a5,-36(s0)
   22580:	0207c463          	bltz	a5,225a8 <_read+0x48>
   22584:	fdc42703          	lw	a4,-36(s0)
   22588:	00070793          	mv	a5,a4
   2258c:	00179793          	sll	a5,a5,0x1
   22590:	00e787b3          	add	a5,a5,a4
   22594:	00279793          	sll	a5,a5,0x2
   22598:	00025737          	lui	a4,0x25
   2259c:	08070713          	add	a4,a4,128 # 25080 <alt_fd_list>
   225a0:	00e787b3          	add	a5,a5,a4
   225a4:	0080006f          	j	225ac <_read+0x4c>
   225a8:	00000793          	li	a5,0
   225ac:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
   225b0:	fec42783          	lw	a5,-20(s0)
   225b4:	08078663          	beqz	a5,22640 <_read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   225b8:	fec42783          	lw	a5,-20(s0)
   225bc:	0087a783          	lw	a5,8(a5)
   225c0:	0037f713          	and	a4,a5,3
   225c4:	00100793          	li	a5,1
   225c8:	06f70263          	beq	a4,a5,2262c <_read+0xcc>
        (fd->dev->read))
   225cc:	fec42783          	lw	a5,-20(s0)
   225d0:	0007a783          	lw	a5,0(a5)
   225d4:	0147a783          	lw	a5,20(a5)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   225d8:	04078a63          	beqz	a5,2262c <_read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   225dc:	fec42783          	lw	a5,-20(s0)
   225e0:	0007a783          	lw	a5,0(a5)
   225e4:	0147a783          	lw	a5,20(a5)
   225e8:	fd442703          	lw	a4,-44(s0)
   225ec:	00070613          	mv	a2,a4
   225f0:	fd842583          	lw	a1,-40(s0)
   225f4:	fec42503          	lw	a0,-20(s0)
   225f8:	000780e7          	jalr	a5
   225fc:	fea42423          	sw	a0,-24(s0)
   22600:	fe842783          	lw	a5,-24(s0)
   22604:	0207d063          	bgez	a5,22624 <_read+0xc4>
        {
          ALT_ERRNO = -rval;
   22608:	f15ff0ef          	jal	2251c <alt_get_errno>
   2260c:	00050713          	mv	a4,a0
   22610:	fe842783          	lw	a5,-24(s0)
   22614:	40f007b3          	neg	a5,a5
   22618:	00f72023          	sw	a5,0(a4)
          return -1;
   2261c:	fff00793          	li	a5,-1
   22620:	0340006f          	j	22654 <_read+0xf4>
        }
        return rval;
   22624:	fe842783          	lw	a5,-24(s0)
   22628:	02c0006f          	j	22654 <_read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2262c:	ef1ff0ef          	jal	2251c <alt_get_errno>
   22630:	00050713          	mv	a4,a0
   22634:	00d00793          	li	a5,13
   22638:	00f72023          	sw	a5,0(a4)
   2263c:	0140006f          	j	22650 <_read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   22640:	eddff0ef          	jal	2251c <alt_get_errno>
   22644:	00050713          	mv	a4,a0
   22648:	05100793          	li	a5,81
   2264c:	00f72023          	sw	a5,0(a4)
  }
  return -1;
   22650:	fff00793          	li	a5,-1
}
   22654:	00078513          	mv	a0,a5
   22658:	02c12083          	lw	ra,44(sp)
   2265c:	02812403          	lw	s0,40(sp)
   22660:	03010113          	add	sp,sp,48
   22664:	00008067          	ret

00022668 <_sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   22668:	fc010113          	add	sp,sp,-64
   2266c:	02812e23          	sw	s0,60(sp)
   22670:	04010413          	add	s0,sp,64
   22674:	fca42623          	sw	a0,-52(s0)
    ABBOTTS_LAKE_READ_AND_CLR_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context, ABBOTTS_LAKE_MSTATUS_MIE_MASK);
   22678:	00800793          	li	a5,8
   2267c:	3007b7f3          	csrrc	a5,mstatus,a5
   22680:	fef42223          	sw	a5,-28(s0)
    return context;
   22684:	fe442783          	lw	a5,-28(s0)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   22688:	fef42623          	sw	a5,-20(s0)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2268c:	8381a783          	lw	a5,-1992(gp) # 25bd4 <heap_end>
   22690:	00378793          	add	a5,a5,3
   22694:	ffc7f793          	and	a5,a5,-4
   22698:	00078713          	mv	a4,a5
   2269c:	82e1ac23          	sw	a4,-1992(gp) # 25bd4 <heap_end>
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   226a0:	8381a703          	lw	a4,-1992(gp) # 25bd4 <heap_end>
   226a4:	fcc42783          	lw	a5,-52(s0)
   226a8:	00f70733          	add	a4,a4,a5
   226ac:	000497b7          	lui	a5,0x49
   226b0:	3e078793          	add	a5,a5,992 # 493e0 <__alt_data_end>
   226b4:	02e7f263          	bgeu	a5,a4,226d8 <_sbrk+0x70>
   226b8:	fec42783          	lw	a5,-20(s0)
   226bc:	fef42023          	sw	a5,-32(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
   226c0:	fe042783          	lw	a5,-32(s0)
   226c4:	0087f793          	and	a5,a5,8
   226c8:	3007a073          	csrs	mstatus,a5
}
   226cc:	00000013          	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   226d0:	fff00793          	li	a5,-1
   226d4:	0380006f          	j	2270c <_sbrk+0xa4>
  }
#endif

  prev_heap_end = heap_end; 
   226d8:	8381a783          	lw	a5,-1992(gp) # 25bd4 <heap_end>
   226dc:	fef42423          	sw	a5,-24(s0)
  heap_end += incr; 
   226e0:	8381a703          	lw	a4,-1992(gp) # 25bd4 <heap_end>
   226e4:	fcc42783          	lw	a5,-52(s0)
   226e8:	00f70733          	add	a4,a4,a5
   226ec:	82e1ac23          	sw	a4,-1992(gp) # 25bd4 <heap_end>
   226f0:	fec42783          	lw	a5,-20(s0)
   226f4:	fcf42e23          	sw	a5,-36(s0)
    ABBOTTS_LAKE_SET_CSR(ABBOTTS_LAKE_MSTATUS_CSR, context & ABBOTTS_LAKE_MSTATUS_MIE_MASK);
   226f8:	fdc42783          	lw	a5,-36(s0)
   226fc:	0087f793          	and	a5,a5,8
   22700:	3007a073          	csrs	mstatus,a5
}
   22704:	00000013          	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   22708:	fe842783          	lw	a5,-24(s0)
} 
   2270c:	00078513          	mv	a0,a5
   22710:	03c12403          	lw	s0,60(sp)
   22714:	04010113          	add	sp,sp,64
   22718:	00008067          	ret

0002271c <alt_get_errno>:
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
   2271c:	ff010113          	add	sp,sp,-16
   22720:	00112623          	sw	ra,12(sp)
   22724:	00812423          	sw	s0,8(sp)
   22728:	01010413          	add	s0,sp,16
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   2272c:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   22730:	00078a63          	beqz	a5,22744 <alt_get_errno+0x28>
   22734:	81c1a783          	lw	a5,-2020(gp) # 25bb8 <alt_errno>
   22738:	000780e7          	jalr	a5
   2273c:	00050793          	mv	a5,a0
   22740:	00c0006f          	j	2274c <alt_get_errno+0x30>
   22744:	000287b7          	lui	a5,0x28
   22748:	86078793          	add	a5,a5,-1952 # 27860 <errno>
#endif /* ALT_STDERR_PRESENT */
   2274c:	00078513          	mv	a0,a5
   22750:	00c12083          	lw	ra,12(sp)
   22754:	00812403          	lw	s0,8(sp)
   22758:	01010113          	add	sp,sp,16
   2275c:	00008067          	ret

00022760 <_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   22760:	fd010113          	add	sp,sp,-48
   22764:	02112623          	sw	ra,44(sp)
   22768:	02812423          	sw	s0,40(sp)
   2276c:	03010413          	add	s0,sp,48
   22770:	fca42e23          	sw	a0,-36(s0)
   22774:	fcb42c23          	sw	a1,-40(s0)
   22778:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2277c:	fdc42783          	lw	a5,-36(s0)
   22780:	0207c463          	bltz	a5,227a8 <_write+0x48>
   22784:	fdc42703          	lw	a4,-36(s0)
   22788:	00070793          	mv	a5,a4
   2278c:	00179793          	sll	a5,a5,0x1
   22790:	00e787b3          	add	a5,a5,a4
   22794:	00279793          	sll	a5,a5,0x2
   22798:	00025737          	lui	a4,0x25
   2279c:	08070713          	add	a4,a4,128 # 25080 <alt_fd_list>
   227a0:	00e787b3          	add	a5,a5,a4
   227a4:	0080006f          	j	227ac <_write+0x4c>
   227a8:	00000793          	li	a5,0
   227ac:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
   227b0:	fec42783          	lw	a5,-20(s0)
   227b4:	08078463          	beqz	a5,2283c <_write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   227b8:	fec42783          	lw	a5,-20(s0)
   227bc:	0087a783          	lw	a5,8(a5)
   227c0:	0037f793          	and	a5,a5,3
   227c4:	06078263          	beqz	a5,22828 <_write+0xc8>
   227c8:	fec42783          	lw	a5,-20(s0)
   227cc:	0007a783          	lw	a5,0(a5)
   227d0:	0187a783          	lw	a5,24(a5)
   227d4:	04078a63          	beqz	a5,22828 <_write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   227d8:	fec42783          	lw	a5,-20(s0)
   227dc:	0007a783          	lw	a5,0(a5)
   227e0:	0187a783          	lw	a5,24(a5)
   227e4:	fd442703          	lw	a4,-44(s0)
   227e8:	00070613          	mv	a2,a4
   227ec:	fd842583          	lw	a1,-40(s0)
   227f0:	fec42503          	lw	a0,-20(s0)
   227f4:	000780e7          	jalr	a5
   227f8:	fea42423          	sw	a0,-24(s0)
   227fc:	fe842783          	lw	a5,-24(s0)
   22800:	0207d063          	bgez	a5,22820 <_write+0xc0>
      {
        ALT_ERRNO = -rval;
   22804:	f19ff0ef          	jal	2271c <alt_get_errno>
   22808:	00050713          	mv	a4,a0
   2280c:	fe842783          	lw	a5,-24(s0)
   22810:	40f007b3          	neg	a5,a5
   22814:	00f72023          	sw	a5,0(a4)
        return -1;
   22818:	fff00793          	li	a5,-1
   2281c:	0340006f          	j	22850 <_write+0xf0>
      }
      return rval;
   22820:	fe842783          	lw	a5,-24(s0)
   22824:	02c0006f          	j	22850 <_write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   22828:	ef5ff0ef          	jal	2271c <alt_get_errno>
   2282c:	00050713          	mv	a4,a0
   22830:	00d00793          	li	a5,13
   22834:	00f72023          	sw	a5,0(a4)
   22838:	0140006f          	j	2284c <_write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2283c:	ee1ff0ef          	jal	2271c <alt_get_errno>
   22840:	00050713          	mv	a4,a0
   22844:	05100793          	li	a5,81
   22848:	00f72023          	sw	a5,0(a4)
  }
  return -1;
   2284c:	fff00793          	li	a5,-1
}
   22850:	00078513          	mv	a0,a5
   22854:	02c12083          	lw	ra,44(sp)
   22858:	02812403          	lw	s0,40(sp)
   2285c:	03010113          	add	sp,sp,48
   22860:	00008067          	ret

00022864 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   22864:	fd010113          	add	sp,sp,-48
   22868:	02812623          	sw	s0,44(sp)
   2286c:	03010413          	add	s0,sp,48
   22870:	fca42e23          	sw	a0,-36(s0)
   22874:	fcb42c23          	sw	a1,-40(s0)
    alt_dev* next=NULL; 
   22878:	fe042623          	sw	zero,-20(s0)
    alt_32   len=0;
   2287c:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
   22880:	3e800793          	li	a5,1000
   22884:	fef42223          	sw	a5,-28(s0)
    
    if (llist == NULL) { return NULL; }
   22888:	fd842783          	lw	a5,-40(s0)
   2288c:	00079663          	bnez	a5,22898 <alt_find_dev+0x34>
   22890:	00000793          	li	a5,0
   22894:	0e00006f          	j	22974 <alt_find_dev+0x110>
    next = (alt_dev*) llist->next;
   22898:	fd842783          	lw	a5,-40(s0)
   2289c:	0007a783          	lw	a5,0(a5)
   228a0:	fef42623          	sw	a5,-20(s0)
    /*
     * Check each list entry in turn, until a match is found, or we reach the
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
   228a4:	0c00006f          	j	22964 <alt_find_dev+0x100>
    {
        len=0;
   228a8:	fe042423          	sw	zero,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
   228ac:	0380006f          	j	228e4 <alt_find_dev+0x80>
        {
            if (next->name[len] != name[len]) { break; }
   228b0:	fec42783          	lw	a5,-20(s0)
   228b4:	0087a703          	lw	a4,8(a5)
   228b8:	fe842783          	lw	a5,-24(s0)
   228bc:	00f707b3          	add	a5,a4,a5
   228c0:	0007c703          	lbu	a4,0(a5)
   228c4:	fe842783          	lw	a5,-24(s0)
   228c8:	fdc42683          	lw	a3,-36(s0)
   228cc:	00f687b3          	add	a5,a3,a5
   228d0:	0007c783          	lbu	a5,0(a5)
   228d4:	04f71663          	bne	a4,a5,22920 <alt_find_dev+0xbc>
            len++;
   228d8:	fe842783          	lw	a5,-24(s0)
   228dc:	00178793          	add	a5,a5,1
   228e0:	fef42423          	sw	a5,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
   228e4:	fe842783          	lw	a5,-24(s0)
   228e8:	fdc42703          	lw	a4,-36(s0)
   228ec:	00f707b3          	add	a5,a4,a5
   228f0:	0007c783          	lbu	a5,0(a5)
   228f4:	02078863          	beqz	a5,22924 <alt_find_dev+0xc0>
   228f8:	fec42783          	lw	a5,-20(s0)
   228fc:	0087a703          	lw	a4,8(a5)
   22900:	fe842783          	lw	a5,-24(s0)
   22904:	00f707b3          	add	a5,a4,a5
   22908:	0007c783          	lbu	a5,0(a5)
   2290c:	00078c63          	beqz	a5,22924 <alt_find_dev+0xc0>
   22910:	fe842703          	lw	a4,-24(s0)
   22914:	fe442783          	lw	a5,-28(s0)
   22918:	f8f74ce3          	blt	a4,a5,228b0 <alt_find_dev+0x4c>
   2291c:	0080006f          	j	22924 <alt_find_dev+0xc0>
            if (next->name[len] != name[len]) { break; }
   22920:	00000013          	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
   22924:	fe842783          	lw	a5,-24(s0)
   22928:	fdc42703          	lw	a4,-36(s0)
   2292c:	00f707b3          	add	a5,a4,a5
   22930:	0007c783          	lbu	a5,0(a5)
   22934:	02079263          	bnez	a5,22958 <alt_find_dev+0xf4>
   22938:	fec42783          	lw	a5,-20(s0)
   2293c:	0087a703          	lw	a4,8(a5)
   22940:	fe842783          	lw	a5,-24(s0)
   22944:	00f707b3          	add	a5,a4,a5
   22948:	0007c783          	lbu	a5,0(a5)
   2294c:	00079663          	bnez	a5,22958 <alt_find_dev+0xf4>
   22950:	fec42783          	lw	a5,-20(s0)
   22954:	0200006f          	j	22974 <alt_find_dev+0x110>

        next = (alt_dev*) next->llist.next;
   22958:	fec42783          	lw	a5,-20(s0)
   2295c:	0007a783          	lw	a5,0(a5)
   22960:	fef42623          	sw	a5,-20(s0)
    while (next != (alt_dev*) llist)
   22964:	fec42703          	lw	a4,-20(s0)
   22968:	fd842783          	lw	a5,-40(s0)
   2296c:	f2f71ee3          	bne	a4,a5,228a8 <alt_find_dev+0x44>
    }
  
    /* No match found */
  
    return NULL;
   22970:	00000793          	li	a5,0
}
   22974:	00078513          	mv	a0,a5
   22978:	02c12403          	lw	s0,44(sp)
   2297c:	03010113          	add	sp,sp,48
   22980:	00008067          	ret

00022984 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   22984:	fd010113          	add	sp,sp,-48
   22988:	02812623          	sw	s0,44(sp)
   2298c:	03010413          	add	s0,sp,48
   22990:	fca42e23          	sw	a0,-36(s0)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
   22994:	000267b7          	lui	a5,0x26
   22998:	ba478793          	add	a5,a5,-1116 # 25ba4 <alt_fs_list>
   2299c:	0007a783          	lw	a5,0(a5)
   229a0:	fef42623          	sw	a5,-20(s0)
    alt_32   len=0;
   229a4:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
   229a8:	3e800793          	li	a5,1000
   229ac:	fef42223          	sw	a5,-28(s0)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
   229b0:	0ec0006f          	j	22a9c <alt_find_file+0x118>
    {
        len=0;
   229b4:	fe042423          	sw	zero,-24(s0)
        while (len < MAX_STRING_LENGTH)    
   229b8:	0bc0006f          	j	22a74 <alt_find_file+0xf0>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
   229bc:	fec42783          	lw	a5,-20(s0)
   229c0:	0087a703          	lw	a4,8(a5)
   229c4:	fe842783          	lw	a5,-24(s0)
   229c8:	00f707b3          	add	a5,a4,a5
   229cc:	0007c703          	lbu	a4,0(a5)
   229d0:	02f00793          	li	a5,47
   229d4:	02f71063          	bne	a4,a5,229f4 <alt_find_file+0x70>
   229d8:	fec42783          	lw	a5,-20(s0)
   229dc:	0087a703          	lw	a4,8(a5)
   229e0:	fe842783          	lw	a5,-24(s0)
   229e4:	00178793          	add	a5,a5,1
   229e8:	00f707b3          	add	a5,a4,a5
   229ec:	0007c783          	lbu	a5,0(a5)
   229f0:	00078e63          	beqz	a5,22a0c <alt_find_file+0x88>
   229f4:	fec42783          	lw	a5,-20(s0)
   229f8:	0087a703          	lw	a4,8(a5)
   229fc:	fe842783          	lw	a5,-24(s0)
   22a00:	00f707b3          	add	a5,a4,a5
   22a04:	0007c783          	lbu	a5,0(a5)
   22a08:	02079c63          	bnez	a5,22a40 <alt_find_file+0xbc>
            { 
                if ((name[len]== '/') || (name[len] == 0))
   22a0c:	fe842783          	lw	a5,-24(s0)
   22a10:	fdc42703          	lw	a4,-36(s0)
   22a14:	00f707b3          	add	a5,a4,a5
   22a18:	0007c703          	lbu	a4,0(a5)
   22a1c:	02f00793          	li	a5,47
   22a20:	00f70c63          	beq	a4,a5,22a38 <alt_find_file+0xb4>
   22a24:	fe842783          	lw	a5,-24(s0)
   22a28:	fdc42703          	lw	a4,-36(s0)
   22a2c:	00f707b3          	add	a5,a4,a5
   22a30:	0007c783          	lbu	a5,0(a5)
   22a34:	04079863          	bnez	a5,22a84 <alt_find_file+0x100>
                {
                    return next;
   22a38:	fec42783          	lw	a5,-20(s0)
   22a3c:	0740006f          	j	22ab0 <alt_find_file+0x12c>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
   22a40:	fec42783          	lw	a5,-20(s0)
   22a44:	0087a703          	lw	a4,8(a5)
   22a48:	fe842783          	lw	a5,-24(s0)
   22a4c:	00f707b3          	add	a5,a4,a5
   22a50:	0007c703          	lbu	a4,0(a5)
   22a54:	fe842783          	lw	a5,-24(s0)
   22a58:	fdc42683          	lw	a3,-36(s0)
   22a5c:	00f687b3          	add	a5,a3,a5
   22a60:	0007c783          	lbu	a5,0(a5)
   22a64:	02f71463          	bne	a4,a5,22a8c <alt_find_file+0x108>
            len++;
   22a68:	fe842783          	lw	a5,-24(s0)
   22a6c:	00178793          	add	a5,a5,1
   22a70:	fef42423          	sw	a5,-24(s0)
        while (len < MAX_STRING_LENGTH)    
   22a74:	fe842703          	lw	a4,-24(s0)
   22a78:	fe442783          	lw	a5,-28(s0)
   22a7c:	f4f740e3          	blt	a4,a5,229bc <alt_find_file+0x38>
   22a80:	0100006f          	j	22a90 <alt_find_file+0x10c>
                break;
   22a84:	00000013          	nop
   22a88:	0080006f          	j	22a90 <alt_find_file+0x10c>
            if (next->name[len]!=name[len]) { break; }
   22a8c:	00000013          	nop
        }  
        
        next = (alt_dev*) next->llist.next;
   22a90:	fec42783          	lw	a5,-20(s0)
   22a94:	0007a783          	lw	a5,0(a5)
   22a98:	fef42623          	sw	a5,-20(s0)
    while (next != (alt_dev*) &alt_fs_list)
   22a9c:	fec42703          	lw	a4,-20(s0)
   22aa0:	000267b7          	lui	a5,0x26
   22aa4:	ba478793          	add	a5,a5,-1116 # 25ba4 <alt_fs_list>
   22aa8:	f0f716e3          	bne	a4,a5,229b4 <alt_find_file+0x30>
    }
  
    /* No match found */
  
    return NULL;     
   22aac:	00000793          	li	a5,0
}
   22ab0:	00078513          	mv	a0,a5
   22ab4:	02c12403          	lw	s0,44(sp)
   22ab8:	03010113          	add	sp,sp,48
   22abc:	00008067          	ret

00022ac0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   22ac0:	fd010113          	add	sp,sp,-48
   22ac4:	02112623          	sw	ra,44(sp)
   22ac8:	02812423          	sw	s0,40(sp)
   22acc:	03010413          	add	s0,sp,48
   22ad0:	fca42e23          	sw	a0,-36(s0)
  alt_32 i;
  int rc = -EMFILE;
   22ad4:	fe800793          	li	a5,-24
   22ad8:	fef42423          	sw	a5,-24(s0)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   22adc:	000287b7          	lui	a5,0x28
   22ae0:	8407a783          	lw	a5,-1984(a5) # 27840 <alt_fd_list_lock>
   22ae4:	fef42223          	sw	a5,-28(s0)
   22ae8:	fe041123          	sh	zero,-30(s0)
   22aec:	fe245783          	lhu	a5,-30(s0)
   22af0:	fe140713          	add	a4,s0,-31
   22af4:	00070613          	mv	a2,a4
   22af8:	00078593          	mv	a1,a5
   22afc:	fe442503          	lw	a0,-28(s0)
   22b00:	d0de40ef          	jal	780c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22b04:	fe042623          	sw	zero,-20(s0)
   22b08:	0800006f          	j	22b88 <alt_get_fd+0xc8>
  {
    if (!alt_fd_list[i].dev)
   22b0c:	000257b7          	lui	a5,0x25
   22b10:	08078693          	add	a3,a5,128 # 25080 <alt_fd_list>
   22b14:	fec42703          	lw	a4,-20(s0)
   22b18:	00070793          	mv	a5,a4
   22b1c:	00179793          	sll	a5,a5,0x1
   22b20:	00e787b3          	add	a5,a5,a4
   22b24:	00279793          	sll	a5,a5,0x2
   22b28:	00f687b3          	add	a5,a3,a5
   22b2c:	0007a783          	lw	a5,0(a5)
   22b30:	04079663          	bnez	a5,22b7c <alt_get_fd+0xbc>
    {
      alt_fd_list[i].dev = dev;
   22b34:	000257b7          	lui	a5,0x25
   22b38:	08078693          	add	a3,a5,128 # 25080 <alt_fd_list>
   22b3c:	fec42703          	lw	a4,-20(s0)
   22b40:	00070793          	mv	a5,a4
   22b44:	00179793          	sll	a5,a5,0x1
   22b48:	00e787b3          	add	a5,a5,a4
   22b4c:	00279793          	sll	a5,a5,0x2
   22b50:	00f687b3          	add	a5,a3,a5
   22b54:	fdc42703          	lw	a4,-36(s0)
   22b58:	00e7a023          	sw	a4,0(a5)
      if (i > alt_max_fd)
   22b5c:	8181a783          	lw	a5,-2024(gp) # 25bb4 <alt_max_fd>
   22b60:	fec42703          	lw	a4,-20(s0)
   22b64:	00e7d663          	bge	a5,a4,22b70 <alt_get_fd+0xb0>
      {
        alt_max_fd = i;
   22b68:	fec42703          	lw	a4,-20(s0)
   22b6c:	80e1ac23          	sw	a4,-2024(gp) # 25bb4 <alt_max_fd>
      }
      rc = i;
   22b70:	fec42783          	lw	a5,-20(s0)
   22b74:	fef42423          	sw	a5,-24(s0)
      goto alt_get_fd_exit;
   22b78:	0200006f          	j	22b98 <alt_get_fd+0xd8>
  for (i = 0; i < ALT_MAX_FD; i++)
   22b7c:	fec42783          	lw	a5,-20(s0)
   22b80:	00178793          	add	a5,a5,1
   22b84:	fef42623          	sw	a5,-20(s0)
   22b88:	fec42703          	lw	a4,-20(s0)
   22b8c:	01f00793          	li	a5,31
   22b90:	f6e7dee3          	bge	a5,a4,22b0c <alt_get_fd+0x4c>
    }
  }

 alt_get_fd_exit:
   22b94:	00000013          	nop
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   22b98:	000287b7          	lui	a5,0x28
   22b9c:	8407a783          	lw	a5,-1984(a5) # 27840 <alt_fd_list_lock>
   22ba0:	00078513          	mv	a0,a5
   22ba4:	fe1e40ef          	jal	7b84 <OSSemPost>

  return rc;
   22ba8:	fe842783          	lw	a5,-24(s0)
}
   22bac:	00078513          	mv	a0,a5
   22bb0:	02c12083          	lw	ra,44(sp)
   22bb4:	02812403          	lw	s0,40(sp)
   22bb8:	03010113          	add	sp,sp,48
   22bbc:	00008067          	ret

00022bc0 <fstat>:
   22bc0:	00058613          	mv	a2,a1
   22bc4:	00050593          	mv	a1,a0
   22bc8:	8281a503          	lw	a0,-2008(gp) # 25bc4 <_impure_ptr>
   22bcc:	91df706f          	j	1a4e8 <_fstat_r>
   22bd0:	0010                	.insn	2, 0x0010
   22bd2:	0000                	.insn	2, 0x
   22bd4:	0000                	.insn	2, 0x
   22bd6:	0000                	.insn	2, 0x
   22bd8:	00527a03          	.insn	4, 0x00527a03
   22bdc:	7c01                	.insn	2, 0x7c01
   22bde:	0101                	.insn	2, 0x0101
   22be0:	00020d1b          	.insn	4, 0x00020d1b
   22be4:	00d4                	.insn	2, 0x00d4
   22be6:	0000                	.insn	2, 0x
   22be8:	0018                	.insn	2, 0x0018
   22bea:	0000                	.insn	2, 0x
   22bec:	9960                	.insn	2, 0x9960
   22bee:	ffff                	.insn	2, 0xffff
   22bf0:	068c                	.insn	2, 0x068c
   22bf2:	0000                	.insn	2, 0x
   22bf4:	4400                	.insn	2, 0x4400
   22bf6:	300e                	.insn	2, 0x300e
   22bf8:	934c                	.insn	2, 0x934c
   22bfa:	8105                	.insn	2, 0x8105
   22bfc:	9601                	.insn	2, 0x9601
   22bfe:	5c08                	.insn	2, 0x5c08
   22c00:	0389                	.insn	2, 0x0389
   22c02:	0795                	.insn	2, 0x0795
   22c04:	0288                	.insn	2, 0x0288
   22c06:	0492                	.insn	2, 0x0492
   22c08:	0694                	.insn	2, 0x0694
   22c0a:	c8012c03          	lw	s8,-896(sp)
   22c0e:	c144                	.insn	2, 0xc144
   22c10:	c944                	.insn	2, 0xc944
   22c12:	d244                	.insn	2, 0xd244
   22c14:	d444                	.insn	2, 0xd444
   22c16:	d544                	.insn	2, 0xd544
   22c18:	d344                	.insn	2, 0xd344
   22c1a:	d648                	.insn	2, 0xd648
   22c1c:	0e44                	.insn	2, 0x0e44
   22c1e:	4400                	.insn	2, 0x4400
   22c20:	300e                	.insn	2, 0x300e
   22c22:	0181                	.insn	2, 0x0181
   22c24:	08960593          	add	a1,a2,137
   22c28:	0a50                	.insn	2, 0x0a50
   22c2a:	44c1                	.insn	2, 0x44c1
   22c2c:	44d648d3          	.insn	4, 0x44d648d3
   22c30:	000e                	.insn	2, 0x000e
   22c32:	0b44                	.insn	2, 0x0b44
   22c34:	5002                	.insn	2, 0x5002
   22c36:	0288                	.insn	2, 0x0288
   22c38:	0389                	.insn	2, 0x0389
   22c3a:	0492                	.insn	2, 0x0492
   22c3c:	0694                	.insn	2, 0x0694
   22c3e:	0795                	.insn	2, 0x0795
   22c40:	97014c03          	lbu	s8,-1680(sp)
   22c44:	0209                	.insn	2, 0x0209
   22c46:	d7e0                	.insn	2, 0xd7e0
   22c48:	c844                	.insn	2, 0xc844
   22c4a:	d2c9                	.insn	2, 0xd2c9
   22c4c:	d5d4                	.insn	2, 0xd5d4
   22c4e:	8850                	.insn	2, 0x8850
   22c50:	8902                	.insn	2, 0x8902
   22c52:	94049203          	lh	tp,-1728(s1)
   22c56:	9506                	.insn	2, 0x9506
   22c58:	c9c84807          	.insn	4, 0xc9c84807
   22c5c:	d4d2                	.insn	2, 0xd4d2
   22c5e:	48d5                	.insn	2, 0x48d5
   22c60:	0b99                	.insn	2, 0x0b99
   22c62:	9550                	.insn	2, 0x9550
   22c64:	5c099707          	.insn	4, 0x5c099707
   22c68:	0a98                	.insn	2, 0x0a98
   22c6a:	8850                	.insn	2, 0x8850
   22c6c:	8902                	.insn	2, 0x8902
   22c6e:	4c049203          	lh	tp,1216(s1)
   22c72:	0694                	.insn	2, 0x0694
   22c74:	0a013c03          	.insn	4, 0x0a013c03
   22c78:	44c8                	.insn	2, 0x44c8
   22c7a:	48c1                	.insn	2, 0x48c1
   22c7c:	44c9                	.insn	2, 0x44c9
   22c7e:	44d2                	.insn	2, 0x44d2
   22c80:	44d4                	.insn	2, 0x44d4
   22c82:	44d5                	.insn	2, 0x44d5
   22c84:	44d844d7          	.insn	4, 0x44d844d7
   22c88:	44d9                	.insn	2, 0x44d9
   22c8a:	44d648d3          	.insn	4, 0x44d648d3
   22c8e:	000e                	.insn	2, 0x000e
   22c90:	0b44                	.insn	2, 0x0b44
   22c92:	d768                	.insn	2, 0xd768
   22c94:	d9d8                	.insn	2, 0xd9d8
   22c96:	c854                	.insn	2, 0xc854
   22c98:	d2c9                	.insn	2, 0xd2c9
   22c9a:	d5d4                	.insn	2, 0xd5d4
   22c9c:	884c                	.insn	2, 0x884c
   22c9e:	8902                	.insn	2, 0x8902
   22ca0:	94049203          	lh	tp,-1728(s1)
   22ca4:	9506                	.insn	2, 0x9506
   22ca6:	48099707          	.insn	4, 0x48099707
   22caa:	0a98                	.insn	2, 0x0a98
   22cac:	0b99                	.insn	2, 0x0b99
   22cae:	d848                	.insn	2, 0xd848
   22cb0:	48d9                	.insn	2, 0x48d9
   22cb2:	0a98                	.insn	2, 0x0a98
   22cb4:	0b99                	.insn	2, 0x0b99
   22cb6:	d748                	.insn	2, 0xd748
   22cb8:	d9d8                	.insn	2, 0xd9d8
   22cba:	0000                	.insn	2, 0x
   22cbc:	0010                	.insn	2, 0x0010
   22cbe:	0000                	.insn	2, 0x
   22cc0:	0000                	.insn	2, 0x
   22cc2:	0000                	.insn	2, 0x
   22cc4:	00527a03          	.insn	4, 0x00527a03
   22cc8:	7c01                	.insn	2, 0x7c01
   22cca:	0101                	.insn	2, 0x0101
   22ccc:	00020d1b          	.insn	4, 0x00020d1b
   22cd0:	00b8                	.insn	2, 0x00b8
   22cd2:	0000                	.insn	2, 0x
   22cd4:	0018                	.insn	2, 0x0018
   22cd6:	0000                	.insn	2, 0x
   22cd8:	9f00                	.insn	2, 0x9f00
   22cda:	ffff                	.insn	2, 0xffff
   22cdc:	0618                	.insn	2, 0x0618
   22cde:	0000                	.insn	2, 0x
   22ce0:	4400                	.insn	2, 0x4400
   22ce2:	300e                	.insn	2, 0x300e
   22ce4:	8148                	.insn	2, 0x8148
   22ce6:	5c01                	.insn	2, 0x5c01
   22ce8:	0492                	.insn	2, 0x0492
   22cea:	0694                	.insn	2, 0x0694
   22cec:	0288                	.insn	2, 0x0288
   22cee:	0389                	.insn	2, 0x0389
   22cf0:	07950593          	add	a1,a0,121
   22cf4:	c8010c03          	lb	s8,-896(sp)
   22cf8:	c944                	.insn	2, 0xc944
   22cfa:	d244                	.insn	2, 0xd244
   22cfc:	d344                	.insn	2, 0xd344
   22cfe:	d444                	.insn	2, 0xd444
   22d00:	d544                	.insn	2, 0xd544
   22d02:	0a48                	.insn	2, 0x0a48
   22d04:	44c1                	.insn	2, 0x44c1
   22d06:	000e                	.insn	2, 0x000e
   22d08:	0b44                	.insn	2, 0x0b44
   22d0a:	8958                	.insn	2, 0x8958
   22d0c:	02059303          	lh	t1,32(a1)
   22d10:	c154                	.insn	2, 0xc154
   22d12:	c944                	.insn	2, 0xc944
   22d14:	d344                	.insn	2, 0xd344
   22d16:	0e4c                	.insn	2, 0x0e4c
   22d18:	4400                	.insn	2, 0x4400
   22d1a:	300e                	.insn	2, 0x300e
   22d1c:	0181                	.insn	2, 0x0181
   22d1e:	0288                	.insn	2, 0x0288
   22d20:	0389                	.insn	2, 0x0389
   22d22:	0492                	.insn	2, 0x0492
   22d24:	06940593          	add	a1,s0,105
   22d28:	0795                	.insn	2, 0x0795
   22d2a:	97011803          	lh	a6,-1680(sp)
   22d2e:	6809                	.insn	2, 0x6809
   22d30:	0896                	.insn	2, 0x0896
   22d32:	9402                	.insn	2, 0x9402
   22d34:	44d644d7          	.insn	4, 0x44d644d7
   22d38:	d2c8                	.insn	2, 0xd2c8
   22d3a:	d5d4                	.insn	2, 0xd5d4
   22d3c:	9558                	.insn	2, 0x9558
   22d3e:	09975007          	.insn	4, 0x09975007
   22d42:	0c9a                	.insn	2, 0x0c9a
   22d44:	995c                	.insn	2, 0x995c
   22d46:	02884c0b          	.insn	4, 0x02884c0b
   22d4a:	0492                	.insn	2, 0x0492
   22d4c:	9450                	.insn	2, 0x9450
   22d4e:	9606                	.insn	2, 0x9606
   22d50:	4808                	.insn	2, 0x4808
   22d52:	0a98                	.insn	2, 0x0a98
   22d54:	0a015803          	lhu	a6,160(sp)
   22d58:	44c8                	.insn	2, 0x44c8
   22d5a:	54c1                	.insn	2, 0x54c1
   22d5c:	44d2                	.insn	2, 0x44d2
   22d5e:	44d4                	.insn	2, 0x44d4
   22d60:	44d5                	.insn	2, 0x44d5
   22d62:	44d6                	.insn	2, 0x44d6
   22d64:	44d844d7          	.insn	4, 0x44d844d7
   22d68:	44d9                	.insn	2, 0x44d9
   22d6a:	4cda                	.insn	2, 0x4cda
   22d6c:	44c9                	.insn	2, 0x44c9
   22d6e:	000e44d3          	.insn	4, 0x000e44d3
   22d72:	0b44                	.insn	2, 0x0b44
   22d74:	d65c                	.insn	2, 0xd65c
   22d76:	dad9d8d7          	.insn	4, 0xdad9d8d7
   22d7a:	9654                	.insn	2, 0x9654
   22d7c:	9708                	.insn	2, 0x9708
   22d7e:	9809                	.insn	2, 0x9809
   22d80:	990a                	.insn	2, 0x990a
   22d82:	500c9a0b          	.insn	4, 0x500c9a0b
   22d86:	d7d6                	.insn	2, 0xd7d6
   22d88:	d9d8                	.insn	2, 0xd9d8
   22d8a:	00da                	.insn	2, 0x00da
